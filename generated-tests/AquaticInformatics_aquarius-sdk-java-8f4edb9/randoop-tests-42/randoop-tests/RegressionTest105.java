import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest105 {

    public static boolean debug = false;

    @Test
    public void test52501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52501");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        getChartDataV2_0.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_0.setDepthUnitId("/AQUARIUS/Provisioning/v1");
        getChartDataV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setApplicableSince(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity16 = gageHeightAtZeroFlowActivity14.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant18 = sensor17.getLastModifiedUtc();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor20 = sensor17.setLastModifiedUtc(instant19);
        java.time.Instant instant21 = sensor17.LastModifiedUtc;
        gageHeightAtZeroFlowActivity16.ApplicableSince = instant21;
        java.time.Instant instant23 = gageHeightAtZeroFlowActivity16.getApplicableSince();
        getChartDataV2_0.EndModificationTime = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_27 = putUserV2_25.setCustomId("2021.4.62.0");
        java.lang.String str28 = putUserV2_25.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription32 = locationDescription30.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription34 = locationDescription32.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = reading35.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = reading35.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading40 = reading38.setModel("MaxInstant");
        java.lang.Integer int41 = reading40.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField43.setDisplayName("");
        java.lang.Boolean boolean46 = extendedAttributeField45.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_49.setDataClassifications((java.util.List<java.lang.String>) strList53);
        getObservationsV2_55.DepthUnitCustomId = "hi!";
        java.lang.String str58 = getObservationsV2_55.CustomId;
        java.util.List<java.lang.String> strList59 = getObservationsV2_55.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_55.setMedia((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str77 = getObservationsV2_76.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        getObservationsV2_78.SpecimenIds = strList81;
        getObservationsV2_76.ProjectIds = strList81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_55.setObservedPropertyIds((java.util.List<java.lang.String>) strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest86 = timeAlignedDataServiceRequest47.setTimeSeriesOutputUnitIds(strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField87 = extendedAttributeField45.setValueOptions((java.util.List<java.lang.String>) strList81);
        putBulkEditResultGradesV2_42.AnalysisMethodSimpleIds = strList81;
        reading40.ReadingQualifiers = strList81;
        locationDescription34.SecondaryFolders = strList81;
        sensorsAndGaugesServiceRequest29.TagKeys = strList81;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest93 = sensorsAndGaugesServiceRequest29.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.util.ArrayList<java.lang.String> strList94 = sensorsAndGaugesServiceRequest93.getLocationUniqueIds();
        java.util.ArrayList<java.lang.String> strList95 = sensorsAndGaugesServiceRequest93.getTagKeys();
        putUserV2_25.Roles = strList95;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_97 = getChartDataV2_0.setMedia((java.util.List<java.lang.String>) strList95);
        getChartDataV2_97.Sort = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(sensor20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(putUserV2_27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2021.4.62.0" + "'", str28, "2021.4.62.0");
        org.junit.Assert.assertNotNull(locationDescription32);
        org.junit.Assert.assertNotNull(locationDescription34);
        org.junit.Assert.assertNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(reading38);
        org.junit.Assert.assertNotNull(reading40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest86);
        org.junit.Assert.assertNotNull(extendedAttributeField87);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest93);
        org.junit.Assert.assertNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(getChartDataV2_97);
    }

    @Test
    public void test52502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52502");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute();
        java.lang.String str1 = deleteExtendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute3 = deleteExtendedAttribute0.setUniqueId("0001-01-01T00:00:00.000Z");
        deleteExtendedAttribute3.UniqueId = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteExtendedAttribute3);
    }

    @Test
    public void test52503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52503");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldVisitSimple searchResultFieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldVisitSimple();
        searchResultFieldVisitSimple0.TotalCount = 100;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple> fieldVisitSimpleList3 = searchResultFieldVisitSimple0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldVisitSimple searchResultFieldVisitSimple5 = searchResultFieldVisitSimple0.setTotalCount((java.lang.Integer) 1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple> fieldVisitSimpleList6 = searchResultFieldVisitSimple5.getDomainObjects();
        java.lang.String str7 = searchResultFieldVisitSimple5.getCursor();
        org.junit.Assert.assertNull(fieldVisitSimpleList3);
        org.junit.Assert.assertNotNull(searchResultFieldVisitSimple5);
        org.junit.Assert.assertNull(fieldVisitSimpleList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test52504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52504");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean8 = completedWork7.isSafetyInspectionPerformed();
        java.lang.Boolean boolean9 = completedWork7.isGroundWaterLevelPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription10 = fieldVisit6.setCompletedWork(completedWork7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList12 = inspectionActivity11.getInspections();
        java.lang.String str13 = inspectionActivity11.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList14 = inspectionActivity11.Inspections;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList15 = inspectionActivity11.Readings;
        java.lang.String str16 = inspectionActivity11.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList17 = inspectionActivity11.getReadings();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck> calibrationCheckList18 = inspectionActivity11.getCalibrationChecks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity20 = inspectionActivity11.setNumberOfReadingsNotDatumConverted((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit21 = fieldVisit6.setInspectionActivity(inspectionActivity20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str23 = levelSurveyActivity22.getParty();
        java.lang.String str24 = levelSurveyActivity22.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList25 = levelSurveyActivity22.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity27 = levelSurveyActivity22.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList29, levelSurveyMeasurementArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity31 = levelSurveyActivity27.setLevelMeasurements(levelSurveyMeasurementList29);
        java.lang.String str32 = levelSurveyActivity27.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit33 = fieldVisit21.setLevelSurveyActivity(levelSurveyActivity27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity34 = fieldVisit33.getControlConditionActivity();
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(fieldVisitDescription10);
        org.junit.Assert.assertNull(inspectionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(inspectionList14);
        org.junit.Assert.assertNull(readingList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(readingList17);
        org.junit.Assert.assertNull(calibrationCheckList18);
        org.junit.Assert.assertNotNull(inspectionActivity20);
        org.junit.Assert.assertNotNull(fieldVisit21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(levelSurveyMeasurementList25);
        org.junit.Assert.assertNotNull(levelSurveyActivity27);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str32, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(fieldVisit33);
        org.junit.Assert.assertNull(controlConditionActivity34);
    }

    @Test
    public void test52505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52505");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        fieldVisitDataServiceResponse0.ResponseTime = instant7;
        fieldVisitDataServiceResponse0.Identifier = "hi!";
        java.lang.String str12 = fieldVisitDataServiceResponse0.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity13 = fieldVisitDataServiceResponse0.InspectionActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str15 = crossSectionSurveyActivity14.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant17 = crossSectionSurveyActivity16.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        postRecurringReport30.NextGenerationDate = instant34;
        java.time.Instant instant37 = postRecurringReport30.getNextGenerationDate();
        java.lang.String str38 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant37);
        metadataChangeTransactionListServiceRequest29.QueryFrom = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest40 = downchainProcessorListByRatingModelServiceRequest28.setQueryTo(instant37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest42 = downchainProcessorListByRatingModelServiceRequest28.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant44 = qualifier43.DateApplied;
        java.lang.String str45 = qualifier43.User;
        java.lang.String str46 = qualifier43.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse49.setNextToken(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest52 = timeAlignedDataServiceRequest47.setQueryFrom(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier53 = qualifier43.setDateApplied(instant50);
        java.time.Instant instant54 = qualifier53.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest55 = downchainProcessorListByRatingModelServiceRequest28.setQueryFrom(instant54);
        statisticalDateTimeOffset27.DateTimeOffset = instant54;
        java.time.Instant instant57 = statisticalDateTimeOffset27.DateTimeOffset;
        crossSectionSurveyActivity16.StartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant60 = crossSectionSurveyActivity59.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity[] crossSectionSurveyActivityArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity[] { crossSectionSurveyActivity14, crossSectionSurveyActivity16, crossSectionSurveyActivity59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity>) crossSectionSurveyActivityList62, crossSectionSurveyActivityArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse64 = fieldVisitDataServiceResponse0.setCrossSectionSurveyActivity(crossSectionSurveyActivityList62);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList65 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList67 = inspectionActivity66.getInspections();
        java.lang.String str68 = inspectionActivity66.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList69 = inspectionActivity66.Inspections;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse70 = fieldVisitDataServiceResponse0.setInspectionActivity(inspectionActivity66);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(inspectionActivity13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str38, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest40);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest42);
        org.junit.Assert.assertNull(instant44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest52);
        org.junit.Assert.assertNotNull(qualifier53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNull(instant60);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivityArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse64);
        org.junit.Assert.assertNull(dischargeActivityList65);
        org.junit.Assert.assertNull(inspectionList67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(inspectionList69);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse70);
    }

    @Test
    public void test52506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52506");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.CustomId;
        java.lang.String str2 = putLabReport0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod6 = postActivity3.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str8 = postAccessGroup7.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = locationGroupType9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType12 = locationGroupType9.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        locationGroupType12.AuditAttributes = auditAttributes44;
        postAccessGroup7.AuditAttributes = auditAttributes44;
        postActivity3.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport49 = putLabReport0.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str51 = labResultDetails50.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = labResultDetails50.setLaboratory(laboratory52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory54.Id = "MaxInstant";
        java.lang.String str57 = laboratory54.PhoneNumber;
        laboratory54.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str60 = laboratory54.PointOfContact;
        laboratory54.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails63 = labResultDetails50.setLaboratory(laboratory54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory64 = labResultDetails63.Laboratory;
        putLabReport0.Laboratory = laboratory64;
        java.lang.String str66 = putLabReport0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(collectionMethod6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNotNull(locationGroupType12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(putLabReport49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(labResultDetails53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(labResultDetails63);
        org.junit.Assert.assertNotNull(laboratory64);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test52507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52507");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setNumericResult(numericResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putObservationV2_12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = putObservationV2_12.getCategoricalResult();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(categoricalResult14);
    }

    @Test
    public void test52508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52508");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = standardSimple0.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setName("");
        standardSimple5.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str10 = standardSimple5.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = standardSimple5.setApplicabilityRange(interval11);
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = standardSimple12.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple12.setActive((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval16 = standardSimple12.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant18 = interval17.Start;
        java.time.Instant instant19 = interval17.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple12.setApplicabilityRange(interval17);
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(standardSimple5);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(standardSimple12);
        org.junit.Assert.assertNull(interval13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNotNull(standardSimple20);
    }

    @Test
    public void test52509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52509");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        labResultDetails6.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails6.setDilutionFactor("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setDilutionFactor("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails13.setDatePrepared(offsetDateTime16);
        java.lang.String str18 = labResultDetails13.AnalysisComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails13.setPreparationMethod("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setDilutionFactor("PT87591240H");
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str18, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
    }

    @Test
    public void test52510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52510");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange> metricRangeList4 = metricConfiguration0.getMetricRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType5 = metricConfiguration0.AggregationType;
        metricConfiguration0.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration0.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration9.setAggregationType(aggregationType10);
        java.lang.String str12 = metricConfiguration11.Description;
        java.lang.Boolean boolean13 = metricConfiguration11.getIncludeChildren();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(metricRangeList4);
        org.junit.Assert.assertNull(aggregationType5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MinInstant" + "'", str12, "MinInstant");
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test52511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52511");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor2 = putSensor0.setUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = putSensor2.setManufacturer("");
        putSensor2.MethodCode = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.lang.String str7 = putSensor2.getUniqueId();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList8 = putSensor2.Tags;
        java.lang.String str9 = putSensor2.UniqueId;
        org.junit.Assert.assertNotNull(putSensor2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinDuration" + "'", str7, "MinDuration");
        org.junit.Assert.assertNull(applyTagRequestList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinDuration" + "'", str9, "MinDuration");
    }

    @Test
    public void test52512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52512");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser();
        deleteUser0.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser4 = deleteUser0.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser6 = deleteUser4.setId("2021.8.9990");
        deleteUser4.Id = "";
        java.lang.String str9 = deleteUser4.Id;
        org.junit.Assert.assertNotNull(deleteUser4);
        org.junit.Assert.assertNotNull(deleteUser6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test52513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52513");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics0.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics0.P50 = 1.0d;
        java.lang.Double double5 = observationStatistics0.Max;
        observationStatistics0.Min = 0.0d;
        observationStatistics0.Max = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics11 = observationStatistics0.setObservedPropertyId("http");
        java.lang.Integer int12 = observationStatistics11.getCount();
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(observationStatistics11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test52514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52514");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        java.lang.Object obj20 = importItemObject0.ExistingItem;
        importItemObject0.RowId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType23 = importItemObject0.Status;
        java.util.List<java.lang.String> strList24 = importItemObject0.getFields();
        java.lang.String str25 = importItemObject0.RowId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.ActivityIds = strList38;
        getExportSamplingLocations26.SamplingLocationGroupIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject43 = importItemObject0.setFields((java.util.List<java.lang.String>) strList38);
        java.util.List<java.lang.String> strList44 = importItemObject43.getFields();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(importItemStatusType23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str25, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(importItemObject43);
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test52515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52515");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str43 = taxon38.getItisUrl();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon45 = taxon38.setSource("hi!");
        java.lang.String str46 = taxon38.getScientificName();
        taxon38.Id = "/AQUARIUS/Publish/v2";
        java.lang.String str49 = taxon38.Source;
        taxon38.Comment = "";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(taxon45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test52516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52516");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant1 = qualifier0.DateApplied;
        java.lang.String str2 = qualifier0.User;
        java.lang.String str3 = qualifier0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier11 = qualifier0.setDateApplied(instant8);
        java.time.Instant instant12 = qualifier0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier0.setUser("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        qualifier0.User = "****82feecb1-0c54-43a1-b60a-302dc897d638****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(qualifier11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNotNull(qualifier14);
    }

    @Test
    public void test52517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52517");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole();
        java.lang.String str1 = putLocationUserRole0.getLocationUniqueId();
        java.lang.Object obj2 = putLocationUserRole0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase4 = putLocationUserRole0.setRoleUniqueId("9999-12-31T23:59:59.999Z");
        putUserRoleBase4.RoleUniqueId = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        putUserRoleBase4.RoleUniqueId = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertNotNull(putUserRoleBase4);
    }

    @Test
    public void test52518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52518");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation3.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList7, extendedAttributeValueArray6);
        postLocation3.ExtendedAttributeValues = extendedAttributeValueList7;
        postCalculatedDerivedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList7;
        java.lang.String str11 = postCalculatedDerivedTimeSeries0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries0.setParameter("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries15 = postCalculatedDerivedTimeSeries0.setUnit("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        postCalculatedDerivedTimeSeries0.Comment = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        postCalculatedDerivedTimeSeries0.UtcOffset = "http://MaxDurationhttp/json/reply/Double";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries15);
    }

    @Test
    public void test52519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52519");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = postAnalysisMethod0.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod0.setName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postAnalysisMethod0.AuditAttributes;
        java.lang.String str9 = postAnalysisMethod0.getDescription();
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNotNull(postAnalysisMethod5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "https" + "'", str9, "https");
    }

    @Test
    public void test52520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52520");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList5 = postObservationV2_2.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = postObservationV2_2.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = postObservationV2_2.getStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device8 = postObservationV2_2.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = postObservationV2_2.PlannedFieldResult;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(ruleValidationDetailsList5);
        org.junit.Assert.assertNull(qualityControlType6);
        org.junit.Assert.assertNull(observationStatistics7);
        org.junit.Assert.assertNull(device8);
        org.junit.Assert.assertNull(plannedFieldResult9);
    }

    @Test
    public void test52521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52521");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        postUnitGroup0.BaseUnitSymbol = "hi!";
        postUnitGroup0.BaseUnitIdentifier = "'.'SSSSSSS";
        java.lang.String str5 = postUnitGroup0.getBaseUnitPluralName();
        java.lang.String str6 = postUnitGroup0.GroupIdentifier;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52522");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        timeAlignedTimeSeriesInfo0.Parameter = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo6 = timeAlignedTimeSeriesInfo0.setParameter("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        timeAlignedTimeSeriesInfo6.InterpolationType = "http://MaxDurationhttp/json/reply/Float";
        timeAlignedTimeSeriesInfo6.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo6);
    }

    @Test
    public void test52523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52523");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        java.lang.String str1 = postSession0.Locale;
        postSession0.Locale = "MaxInstant";
        java.lang.String str4 = postSession0.getLocale();
        java.lang.String str5 = postSession0.Locale;
        postSession0.Locale = "https";
        postSession0.EncryptedPassword = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj10 = postSession0.getResponseType();
        java.lang.String str11 = postSession0.getLocale();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MaxInstant" + "'", str4, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class java.lang.String");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
    }

    @Test
    public void test52524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52524");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList6 = locationDescriptionListServiceResponse5.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant8 = ratingCurveListServiceRequest7.QueryTo;
        java.lang.String str9 = ratingCurveListServiceRequest7.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType22 = null;
        controlConditionActivity21.ControlCleaned = controlCleanedType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        controlConditionActivity21.DateCleaned = instant25;
        timeAlignedDataServiceRequest20.QueryFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse10.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest30 = ratingCurveListServiceRequest7.setQueryTo(instant25);
        java.time.Instant instant31 = ratingCurveListServiceRequest30.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse5.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens33 = getExportSpecimens0.setStartModificationTime(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str35 = locationDescriptionListServiceRequest34.LocationName;
        java.util.ArrayList<java.lang.String> strList36 = locationDescriptionListServiceRequest34.TagNames;
        java.lang.String str37 = locationDescriptionListServiceRequest34.LocationFolder;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str39 = deleteFieldVisits38.Sort;
        deleteFieldVisits38.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList42 = deleteFieldVisits38.getScheduleIds();
        java.util.List<java.lang.String> strList43 = deleteFieldVisits38.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_45.setDataClassifications((java.util.List<java.lang.String>) strList49);
        postTag44.PickListValues = strList49;
        java.util.ArrayList<java.lang.String> strList53 = postTag44.PickListValues;
        deleteFieldVisits38.PlanningStatuses = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest55 = locationDescriptionListServiceRequest34.setTagKeys(strList53);
        java.util.ArrayList<java.lang.String> strList56 = locationDescriptionListServiceRequest55.getTagKeys();
        java.util.ArrayList<java.lang.String> strList57 = locationDescriptionListServiceRequest55.getTagNames();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList58 = locationDescriptionListServiceRequest55.ExtendedFilters;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double60 = getExportObservations59.NumericResultValue;
        java.util.List<java.lang.String> strList61 = getExportObservations59.getActivityTypes();
        java.util.List<java.lang.String> strList62 = getExportObservations59.ProjectIds;
        java.time.Instant instant63 = null;
        getExportObservations59.EndResultTime = instant63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_65.setDataClassifications((java.util.List<java.lang.String>) strList69);
        getObservationsV2_71.DepthUnitCustomId = "hi!";
        java.lang.String str74 = getObservationsV2_71.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.ActivityIds = strList86;
        getObservationsV2_71.ResultStatuses = strList86;
        getExportObservations59.ActivityTypes = strList86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest92 = locationDescriptionListServiceRequest55.setTagNames(strList86);
        java.util.ArrayList<java.lang.String> strList93 = locationDescriptionListServiceRequest55.TagNames;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens94 = getExportSpecimens0.setActivityTypes((java.util.List<java.lang.String>) strList93);
        java.util.List<java.lang.String> strList95 = getExportSpecimens94.SpecimenStatuses;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(locationDescriptionList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(getExportSpecimens33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(extendedAttributeFilterList58);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(getExportSpecimens94);
        org.junit.Assert.assertNull(strList95);
    }

    @Test
    public void test52525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52525");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double4 = putBulkEditResultGradesV2_3.DepthValue;
        java.util.List<java.lang.String> strList5 = putBulkEditResultGradesV2_3.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_11 = putBulkEditResultGradesV2_3.setStartModificationTime(instant9);
        qualifier2.DateApplied = instant9;
        crossSectionSurveyActivity0.StartTime = instant9;
        java.lang.String str14 = crossSectionSurveyActivity0.getRelativeLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType15 = crossSectionSurveyActivity0.getStartingPoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList16 = crossSectionSurveyActivity0.CrossSectionPoints;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(startPointType15);
        org.junit.Assert.assertNull(crossSectionPointList16);
    }

    @Test
    public void test52526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52526");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = extendedAttributeDefinition2.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = extendedAttributeDefinition2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition2.DataType = dataType5;
        putExtendedAttribute0.DataType = dataType5;
        java.lang.String str8 = putExtendedAttribute0.CustomId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertTrue("'" + dataType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test52527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52527");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType2 = postActivityTemplate0.getMedium();
        postActivityTemplate0.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = null;
        postActivityTemplate0.Depth = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate8 = postActivityTemplate0.setCustomId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postActivityTemplate8.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = postActivityTemplate8.AuditAttributes;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNull(mediumType2);
        org.junit.Assert.assertNotNull(postActivityTemplate8);
        org.junit.Assert.assertNull(quantity9);
        org.junit.Assert.assertNull(auditAttributes10);
    }

    @Test
    public void test52528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52528");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession3 = postSession0.setLocale("hi!");
        java.lang.String str4 = postSession3.getUsername();
        java.lang.String str5 = postSession3.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession7 = postSession3.setEncryptedPassword("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postSession7.EncryptedPassword = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession11 = postSession7.setLocale("");
        postSession7.Username = "0001-01-01T00:00:00.000Z";
        java.lang.String str14 = postSession7.Locale;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession16 = postSession7.setLocale("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertNotNull(postSession11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(postSession16);
    }

    @Test
    public void test52529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52529");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser2 = activeDirectoryUser0.setActiveDirectorySid("MinDuration");
        java.lang.Boolean boolean3 = activeDirectoryUser2.Active;
        java.lang.Boolean boolean4 = activeDirectoryUser2.isCanLaunchRatingDevelopmentToolbox();
        java.lang.String str5 = activeDirectoryUser2.getActiveDirectorySid();
        java.lang.String str6 = activeDirectoryUser2.UserPrincipalName;
        activeDirectoryUser2.ActiveDirectorySid = "****2c758a89-79ef-4b16-8ced-c7bb83cdba18****";
        org.junit.Assert.assertNotNull(activeDirectoryUser2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MinDuration" + "'", str5, "MinDuration");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52530");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = observationNestedInSpecimen0.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction5 = labInstruction3.setAnalysisMethod(analysisMethod4);
        java.lang.String str6 = labInstruction3.getAnalysisComment();
        observationNestedInSpecimen0.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation8.setSamplingLocation(samplingLocation9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = observation10.LabResultDetails;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon13 = taxonomicResult12.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = taxonomicResult12.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan16.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan16.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup21 = samplingPlan16.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan23 = samplingPlan16.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag24 = putTag15.setAuditAttributes(auditAttributes22);
        taxonomicResult12.AuditAttributes = auditAttributes22;
        observation10.TaxonomicResult = taxonomicResult12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList28 = importItemTaxon27.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = importItemTaxon27.setItem(taxon29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str32 = postCalculatedDerivedTimeSeries31.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList33 = postCalculatedDerivedTimeSeries31.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon34 = importItemTaxon30.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList36 = importItemObject35.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList38, importChangeItemArray37);
        importItemObject35.ItemComparison = importChangeItemList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = importItemObject35.setExistingItem((java.lang.Object) putLocationTags41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser52 = openIdConnectUser50.setIdentifier("");
        java.lang.Boolean boolean53 = openIdConnectUser52.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject54 = importItemObject35.setErrors((java.lang.Object) openIdConnectUser52);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList55 = importItemObject54.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon56 = importItemTaxon34.setItemComparison(importChangeItemList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList58 = importItemTaxon57.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon60 = importItemTaxon57.setItem(taxon59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str62 = postCalculatedDerivedTimeSeries61.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList63 = postCalculatedDerivedTimeSeries61.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon64 = importItemTaxon60.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon66 = importItemTaxon60.setExistingItem(taxon65);
        importItemTaxon34.Item = taxon65;
        taxon65.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str70 = taxon65.getItisUrl();
        java.lang.String str71 = taxon65.ItisUrl;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon73 = taxon65.setParentId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult74 = taxonomicResult12.setTaxon(taxon65);
        observationNestedInSpecimen0.TaxonomicResult = taxonomicResult74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.LAB;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen77 = observationNestedInSpecimen0.setDataClassification(dataClassificationType76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen79 = observationNestedInSpecimen0.setObservedProperty(observedProperty78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen81 = observationNestedInSpecimen79.setCustomId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType82 = observationNestedInSpecimen79.getDataClassification();
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(labInstruction2);
        org.junit.Assert.assertNotNull(labInstruction5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(labResultDetails11);
        org.junit.Assert.assertNull(taxon13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup21);
        org.junit.Assert.assertNotNull(samplingPlan23);
        org.junit.Assert.assertNotNull(putTag24);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(importItemTaxon30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(extendedAttributeValueList33);
        org.junit.Assert.assertNotNull(importItemTaxon34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(importChangeItemArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(importItemObject49);
        org.junit.Assert.assertNotNull(openIdConnectUser52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNotNull(importItemObject54);
        org.junit.Assert.assertNotNull(importChangeItemList55);
        org.junit.Assert.assertNotNull(importItemTaxon56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(importItemTaxon60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(extendedAttributeValueList63);
        org.junit.Assert.assertNotNull(importItemTaxon64);
        org.junit.Assert.assertNotNull(importItemTaxon66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(taxon73);
        org.junit.Assert.assertNotNull(taxonomicResult74);
        org.junit.Assert.assertTrue("'" + dataClassificationType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.LAB + "'", dataClassificationType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.LAB));
        org.junit.Assert.assertNotNull(observationNestedInSpecimen77);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen79);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen81);
        org.junit.Assert.assertTrue("'" + dataClassificationType82 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.LAB + "'", dataClassificationType82.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.LAB));
    }

    @Test
    public void test52531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52531");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethod getLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethod();
        java.lang.String str1 = getLabAnalysisMethod0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethod getLabAnalysisMethod3 = getLabAnalysisMethod0.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethod getLabAnalysisMethod5 = getLabAnalysisMethod3.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethod getLabAnalysisMethod7 = getLabAnalysisMethod5.setId("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLabAnalysisMethod3);
        org.junit.Assert.assertNotNull(getLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(getLabAnalysisMethod7);
    }

    @Test
    public void test52532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52532");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        standardDefinition4.Description = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = standardDefinition4.AuditAttributes;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(auditAttributes7);
    }

    @Test
    public void test52533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52533");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup4 = putAnalyticalGroup2.setName("/AQUARIUS/Acquisition/v2");
        java.lang.Object obj5 = putAnalyticalGroup4.getResponseType();
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNotNull(putAnalyticalGroup4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
    }

    @Test
    public void test52534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52534");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        sensor0.UnitId = "http://MaxDurationhttp/json/reply/ArrayList";
        sensor0.LocationUniqueId = "";
        sensor0.ParameterId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary13.Reviewer = "";
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary13.MeasurementTime = instant16;
        postRecurringReport12.NextGenerationDate = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = qualifier8.setDateApplied(instant16);
        java.time.Instant instant20 = qualifier19.DateApplied;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor21 = sensor0.setLastModifiedUtc(instant20);
        sensor21.ParameterId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant25 = sensor24.getLastModifiedUtc();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor27 = sensor24.setLastModifiedUtc(instant26);
        java.lang.String str28 = sensor24.ParameterId;
        java.lang.String str29 = sensor24.getLocationUniqueId();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList30 = sensor24.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor32 = sensor24.setSerialNumber("MaxDuration");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList33 = sensor24.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant35 = sensor34.getLastModifiedUtc();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor37 = sensor34.setLastModifiedUtc(instant36);
        java.lang.String str38 = sensor34.ParameterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor40 = sensor34.setLocationUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.String str41 = sensor40.Name;
        java.lang.String str42 = sensor40.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor44 = sensor40.setName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant46 = sensor45.getLastModifiedUtc();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor48 = sensor45.setLastModifiedUtc(instant47);
        java.lang.String str49 = sensor45.ParameterId;
        java.lang.String str50 = sensor45.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor52 = sensor45.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor54 = sensor52.setComments("9999-12-31T23:59:59.999Z");
        java.lang.String str55 = sensor52.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList57 = location56.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location59 = location56.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location61 = location59.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList62 = location59.getTags();
        java.lang.String str63 = location59.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str66 = appliedTag65.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str68 = appliedTag67.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] appliedTagArray69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] { appliedTag64, appliedTag65, appliedTag67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>) appliedTagList70, appliedTagArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location72 = location59.setTags(appliedTagList70);
        sensor52.Tags = appliedTagList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor74 = sensor44.setTags(appliedTagList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor75 = sensor24.setTags(appliedTagList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor76 = sensor21.setTags(appliedTagList70);
        java.lang.String str77 = sensor76.Name;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(qualifier19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(sensor21);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(sensor27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(appliedTagList30);
        org.junit.Assert.assertNotNull(sensor32);
        org.junit.Assert.assertNull(appliedTagList33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(sensor37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(sensor40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(sensor44);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(sensor48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(sensor52);
        org.junit.Assert.assertNotNull(sensor54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(appliedTagList57);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(location61);
        org.junit.Assert.assertNull(appliedTagList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(appliedTagArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(location72);
        org.junit.Assert.assertNotNull(sensor74);
        org.junit.Assert.assertNotNull(sensor75);
        org.junit.Assert.assertNotNull(sensor76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test52535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52535");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        activeDirectoryUser0.ActiveDirectorySid = "http";
        java.lang.String str3 = activeDirectoryUser0.ActiveDirectorySid;
        java.lang.String str4 = activeDirectoryUser0.UserPrincipalName;
        java.lang.Boolean boolean5 = activeDirectoryUser0.isCanLaunchRatingDevelopmentToolbox();
        activeDirectoryUser0.ActiveDirectorySid = "'.'SSSSSSS";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http" + "'", str3, "http");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test52536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52536");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon getTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon getTaxon2 = getTaxon0.setId("http");
        java.lang.Object obj3 = getTaxon2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon getTaxon5 = getTaxon2.setId("multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****");
        org.junit.Assert.assertNotNull(getTaxon2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertNotNull(getTaxon5);
    }

    @Test
    public void test52537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52537");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier();
        searchResultNullMeasureQualifier0.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier4 = searchResultNullMeasureQualifier0.setTotalCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier6 = searchResultNullMeasureQualifier0.setCursor("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        searchResultNullMeasureQualifier0.Cursor = "/AQUARIUS/Provisioning/v1";
        java.lang.String str9 = searchResultNullMeasureQualifier0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier11 = searchResultNullMeasureQualifier0.setTotalCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier13 = searchResultNullMeasureQualifier0.setTotalCount((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(searchResultNullMeasureQualifier4);
        org.junit.Assert.assertNotNull(searchResultNullMeasureQualifier6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str9, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(searchResultNullMeasureQualifier11);
        org.junit.Assert.assertNotNull(searchResultNullMeasureQualifier13);
    }

    @Test
    public void test52538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52538");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStandardDatum postStandardDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStandardDatum();
        postStandardDatum0.Identifier = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postStandardDatum0.getIdentifier();
        java.lang.String str4 = postStandardDatum0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardDatumBase standardDatumBase6 = postStandardDatum0.setIdentifier("0001-01-01T00:00:00.0000000Z");
        java.lang.Object obj7 = postStandardDatum0.getResponseType();
        java.lang.String str8 = postStandardDatum0.Identifier;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str3, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str4, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(standardDatumBase6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardDatum");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0001-01-01T00:00:00.0000000Z" + "'", str8, "0001-01-01T00:00:00.0000000Z");
    }

    @Test
    public void test52539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52539");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation();
        java.lang.String str1 = qualifierOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        java.lang.String str12 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant11);
        metadataChangeTransactionListServiceRequest3.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest2.setQueryTo(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest2.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        java.time.Instant instant28 = qualifier27.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest29 = downchainProcessorListByRatingModelServiceRequest2.setQueryFrom(instant28);
        downchainProcessorListByRatingModelServiceRequest29.RatingModelIdentifier = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str33 = inspection32.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection35 = inspection32.setSubLocationIdentifier("");
        inspection32.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str38 = inspection32.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str40 = timeSeriesDescription39.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList45 = fieldVisitDataServiceResponse44.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse47 = fieldVisitDataServiceResponse44.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary48.Reviewer = "";
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary48.MeasurementTime = instant51;
        fieldVisitDataServiceResponse44.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark41.setCreateTime(instant51);
        timeSeriesDescription39.LastModified = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection56 = inspection32.setTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest57 = downchainProcessorListByRatingModelServiceRequest29.setQueryTo(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation58 = qualifierOperation0.setDateAppliedUtc(instant51);
        qualifierOperation0.Identifier = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str61 = qualifierOperation0.Identifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str12, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(inspection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationRemark54);
        org.junit.Assert.assertNotNull(inspection56);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest57);
        org.junit.Assert.assertNotNull(qualifierOperation58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str61, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test52540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52540");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        locationDataServiceResponse0.Latitude = 0.0d;
        java.lang.String str4 = locationDataServiceResponse0.LocationType;
        java.lang.Double double5 = locationDataServiceResponse0.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse7 = locationDataServiceResponse0.setLatitude((java.lang.Double) 1.0d);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList8 = locationDataServiceResponse7.getAttachments();
        java.lang.String str9 = locationDataServiceResponse7.getDescription();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(locationDataServiceResponse7);
        org.junit.Assert.assertNull(attachmentList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test52541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52541");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        tag0.AppliesToSensorsGauges = false;
        java.lang.String str3 = tag0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag5 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        tag5.AppliesToReports = false;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(tag5);
    }

    @Test
    public void test52542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52542");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod2 = timeSeriesThresholdPeriod0.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod4 = timeSeriesThresholdPeriod0.setSuppressData((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod6 = timeSeriesThresholdPeriod4.setComments("http://MaxDurationhttp/json/reply/ArrayList");
        timeSeriesThresholdPeriod4.SuppressData = false;
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod2);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod4);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod6);
    }

    @Test
    public void test52543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52543");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        locationDescription2.IsExternalLocation = false;
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test52544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52544");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = locationGroupType7.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup11 = putSamplingLocationGroup0.setLocationGroupType(locationGroupType7);
        java.lang.String str12 = putSamplingLocationGroup0.getName();
        java.lang.String str13 = putSamplingLocationGroup0.Name;
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(locationGroupType10);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test52545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52545");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = filter1.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter5 = filter3.setId("POST");
        filter5.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = filter5.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter10 = filter5.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15, observedPropertyArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod13.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes18);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList20 = postLabAnalysisMethod19.getObservedProperties();
        filter10.ObservedProperties = observedPropertyList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod22 = putLabAnalysisMethod0.setObservedProperties(observedPropertyList20);
        java.lang.String str23 = putLabAnalysisMethod22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod25 = putLabAnalysisMethod22.setDescription("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putLabAnalysisMethod25.AuditAttributes;
        org.junit.Assert.assertNotNull(filter3);
        org.junit.Assert.assertNotNull(filter5);
        org.junit.Assert.assertNull(observedPropertyList8);
        org.junit.Assert.assertNotNull(filter10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(observedPropertyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNotNull(observedPropertyList20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod25);
        org.junit.Assert.assertNull(auditAttributes26);
    }

    @Test
    public void test52546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52546");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType inspectionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection2 = inspection0.setInspectionType(inspectionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection4 = inspection2.setSubLocationIdentifier("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection6 = inspection2.setComments("9999-12-31T23:59:59.999Z");
        java.time.Instant instant7 = inspection6.getTime();
        org.junit.Assert.assertTrue("'" + inspectionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.Unknown + "'", inspectionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.Unknown));
        org.junit.Assert.assertNotNull(inspection2);
        org.junit.Assert.assertNotNull(inspection4);
        org.junit.Assert.assertNotNull(inspection6);
        org.junit.Assert.assertNull(instant7);
    }

    @Test
    public void test52547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52547");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutConfigurableDropDownListItem putConfigurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutConfigurableDropDownListItem();
        java.lang.String str1 = putConfigurableDropDownListItem0.getDropDownListId();
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test52548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52548");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType17 = importItemObservation0.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        getObservationsV2_24.DepthUnitCustomId = "hi!";
        java.lang.String str27 = getObservationsV2_24.DepthUnitId;
        java.util.List<java.lang.String> strList28 = null;
        getObservationsV2_24.ProjectIds = strList28;
        java.util.List<java.lang.String> strList30 = getObservationsV2_24.getResultStatuses();
        java.util.List<java.lang.String> strList31 = getObservationsV2_24.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.lang.Object obj33 = getLabReports32.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports35 = getLabReports32.setLimit((java.lang.Integer) 0);
        java.util.List<java.lang.String> strList36 = null;
        getLabReports35.LaboratoryIds = strList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList39 = postUserV2_38.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        dischargeSummary42.MeasurementTime = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse41.setNextToken(instant46);
        java.time.Instant instant50 = locationDescriptionListServiceResponse41.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities51 = getActivities40.setToStartTime(instant50);
        java.lang.String str52 = getActivities51.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities54 = getActivities51.setLimit((java.lang.Integer) 1);
        getActivities54.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        getObservationsV2_58.SpecimenIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        getObservationsV2_58.QualityControlTypes = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = timeAlignedDataServiceRequest57.setTimeSeriesUniqueIds(strList69);
        getActivities54.CollectionMethodIds = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_75 = postUserV2_38.setRoles((java.util.List<java.lang.String>) strList69);
        getLabReports35.Search = strList69;
        getObservationsV2_24.ResultGrades = strList69;
        importItemObservation0.Fields = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation81 = observation79.setSamplingLocation(samplingLocation80);
        importItemObservation0.Item = observation81;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(importItemStatusType17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertNotNull(getLabReports35);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(getActivities51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(getActivities54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest73);
        org.junit.Assert.assertNotNull(postUserV2_75);
        org.junit.Assert.assertNotNull(observation81);
    }

    @Test
    public void test52549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52549");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = attachment0.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setComment("");
        attachment5.Id = "MinDuration";
        attachment5.ContentType = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = attachment5.setComment("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str13 = auditAttributesFull12.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = auditAttributesFull12.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull16 = auditAttributesFull12.setModificationUserProfile(userProfile15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull18 = auditAttributesFull12.setModificationUserProfile(userProfile17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment19 = attachment11.setAuditAttributes(auditAttributesFull18);
        java.lang.String str20 = attachment11.Longitude;
        java.time.OffsetDateTime offsetDateTime21 = attachment11.getDateTaken();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNotNull(attachment11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(userProfile14);
        org.junit.Assert.assertNotNull(auditAttributesFull16);
        org.junit.Assert.assertNotNull(auditAttributesFull18);
        org.junit.Assert.assertNotNull(attachment19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(offsetDateTime21);
    }

    @Test
    public void test52550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52550");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putProject0.getCustomId();
        putProject0.ScopeStatement = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType6 = putProject0.Type;
        java.lang.String str7 = putProject0.getId();
        java.lang.String str8 = putProject0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList10 = postStandard9.ObservationStandards;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard12 = postStandard9.setApplicabilityRange(interval11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon13.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str16 = putTaxon13.getComment();
        java.lang.String str17 = putTaxon13.Comment;
        java.lang.String str18 = putTaxon13.ParentId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate21 = postFieldVisitActivityWithTemplate19.setAuditAttributes(auditAttributes20);
        java.lang.String str22 = postFieldVisitActivityWithTemplate21.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = postFieldVisitActivityWithTemplate21.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postFieldVisitActivityWithTemplate21.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType26 = postFieldVisitActivityWithTemplate21.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = specimenTemplate28.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate30.Preservative = preservativeType31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails35 = labResultDetails33.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails37 = labResultDetails35.setAuditAttributes(auditAttributes36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate30.setAuditAttributes(auditAttributes36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition39 = postDetectioncondition27.setAuditAttributes(auditAttributes36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate40 = postFieldVisitActivityWithTemplate21.setAuditAttributes(auditAttributes36);
        putTaxon13.AuditAttributes = auditAttributes36;
        postStandard9.AuditAttributes = auditAttributes36;
        putProject0.AuditAttributes = auditAttributes36;
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(projectType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(observationStandardList10);
        org.junit.Assert.assertNotNull(postStandard12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str18, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate24);
        org.junit.Assert.assertNull(quantity25);
        org.junit.Assert.assertNull(activityTemplateType26);
        org.junit.Assert.assertNotNull(specimenTemplate30);
        org.junit.Assert.assertTrue("'" + preservativeType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails35);
        org.junit.Assert.assertNotNull(labResultDetails37);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNotNull(postDetectioncondition39);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate40);
    }

    @Test
    public void test52551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52551");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        java.lang.Integer int1 = getExtendedAttributes0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = getExtendedAttributes0.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes4 = getExtendedAttributes0.setAppliesToType(appliesToType3);
        java.util.List<java.lang.String> strList5 = getExtendedAttributes0.getSearch();
        java.lang.Object obj6 = getExtendedAttributes0.getResponseType();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertTrue("'" + appliesToType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION + "'", appliesToType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
    }

    @Test
    public void test52552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52552");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        java.lang.Boolean boolean9 = putActivity0.Refreshed;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putActivity0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity0.setRefreshed((java.lang.Boolean) false);
        putActivity0.LoggerFileName = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList15 = putActivity0.Observations;
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNull(observationMinimalList15);
    }

    @Test
    public void test52553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52553");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str1 = attachment0.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Video;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment3 = attachment0.setAttachmentType(attachmentType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = attachment3.setGpsLongitude((java.lang.Double) 10.0d);
        java.lang.Double double6 = attachment5.getGpsLatitude();
        java.time.Instant instant7 = attachment5.DateUploaded;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + attachmentType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Video + "'", attachmentType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Video));
        org.junit.Assert.assertNotNull(attachment3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(instant7);
    }

    @Test
    public void test52554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52554");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem2 = putFixedDropDownListItem0.setDropDownListId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem4 = putFixedDropDownListItem2.setId("2021.8.9990");
        putFixedDropDownListItem4.DisplayName = "/AQUARIUS";
        java.lang.String str7 = putFixedDropDownListItem4.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem9 = putFixedDropDownListItem4.setDisplayName("MinDuration");
        java.lang.Object obj10 = putFixedDropDownListItem9.getResponseType();
        java.lang.String str11 = putFixedDropDownListItem9.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem13 = putFixedDropDownListItem9.setDisplayName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.Object obj14 = putFixedDropDownListItem9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem16 = putFixedDropDownListItem9.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem2);
        org.junit.Assert.assertNotNull(putFixedDropDownListItem4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS" + "'", str7, "/AQUARIUS");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinDuration" + "'", str11, "MinDuration");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem16);
    }

    @Test
    public void test52555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52555");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList1 = filter0.ObservedProperties;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = filter0.setEndTime(offsetDateTime2);
        filter3.Description = "";
        filter3.Description = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.time.OffsetDateTime offsetDateTime8 = null;
        filter3.EndTime = offsetDateTime8;
        java.lang.String str10 = filter3.getDescription();
        java.time.OffsetDateTime offsetDateTime11 = filter3.EndTime;
        java.lang.String str12 = filter3.getDescription();
        java.time.OffsetDateTime offsetDateTime13 = filter3.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan15.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan15.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup20 = samplingPlan15.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan22 = samplingPlan15.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag23 = putTag14.setAuditAttributes(auditAttributes21);
        putTag14.Description = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str27 = putLabReport26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = postDetectioncondition28.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition31 = postDetectioncondition28.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition28.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition35 = postDetectioncondition28.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition28.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj38 = postDetectioncondition28.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity41 = samplingPlanPlannedActivity39.setAuditAttributes(auditAttributes40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = auditAttributes42.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity41.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition46 = postDetectioncondition28.setAuditAttributes(auditAttributes42);
        putLabReport26.AuditAttributes = auditAttributes42;
        java.lang.String str48 = auditAttributes42.ModificationUserProfileId;
        putTag14.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter50 = filter3.setAuditAttributes(auditAttributes42);
        org.junit.Assert.assertNull(observedPropertyList1);
        org.junit.Assert.assertNotNull(filter3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str10, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str12, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup20);
        org.junit.Assert.assertNotNull(samplingPlan22);
        org.junit.Assert.assertNotNull(putTag23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(postDetectioncondition31);
        org.junit.Assert.assertNotNull(postDetectioncondition35);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity41);
        org.junit.Assert.assertNotNull(auditAttributes44);
        org.junit.Assert.assertNotNull(postDetectioncondition46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(filter50);
    }

    @Test
    public void test52556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52556");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit();
        java.lang.String str1 = putUnit0.getUniqueId();
        putUnit0.PluralName = "2021.8.9990";
        putUnit0.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str6 = putUnit0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str6, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test52557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52557");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult6 = putObservationV2_2.getTaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = null;
        putActivity7.Depth = quantity8;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList10 = putActivity7.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str13 = domainObjectAttachment12.getId();
        java.lang.String str14 = domainObjectAttachment12.getId();
        domainObjectAttachment12.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = domainObjectAttachment12.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = domainObjectAttachment18.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str22 = domainObjectAttachment21.getId();
        java.lang.String str23 = domainObjectAttachment21.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment18, domainObjectAttachment21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList25, domainObjectAttachmentArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit27 = fieldVisit11.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList25);
        putActivity7.FieldVisit = fieldVisit27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit29.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit29.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit38 = fieldVisit27.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = putObservationV2_2.setFieldVisit(fieldVisit38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple40.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str43 = analysisMethodSimple40.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple45 = analysisMethodSimple40.setName("MaxDuration");
        java.lang.String str46 = analysisMethodSimple45.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory47.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory51 = laboratory47.setCustomId("/AQUARIUS/Provisioning/v1");
        java.lang.String str52 = laboratory47.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit55 = putUnit53.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup56.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup60 = unitGroup56.setSystemCode(unitGroupSystemCodeType59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit61 = putUnit55.setUnitGroup(unitGroup60);
        putUnit55.Id = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup66 = putAnalyticalGroup64.setAnalyticalGroupItems(analyticalGroupItemList65);
        putAnalyticalGroup66.Description = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = putUnit69.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = putDetectioncondition71.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition74 = putDetectioncondition71.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity77 = samplingPlanPlannedActivity75.setAuditAttributes(auditAttributes76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = auditAttributes78.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity77.AuditAttributes = auditAttributes78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = samplingPlanPlannedActivity77.AuditAttributes;
        putDetectioncondition71.AuditAttributes = auditAttributes82;
        putUnit69.AuditAttributes = auditAttributes82;
        putAnalyticalGroup66.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit86 = putUnit55.setAuditAttributes(auditAttributes82);
        laboratory47.AuditAttributes = auditAttributes82;
        analysisMethodSimple45.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_89 = putObservationV2_2.setAnalysisMethod(analysisMethodSimple45);
        java.lang.String str90 = analysisMethodSimple45.getContext();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(taxonomicResult6);
        org.junit.Assert.assertNull(specimenNestedInActivityList10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(domainObjectAttachment18);
        org.junit.Assert.assertNotNull(domainObjectAttachment20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fieldVisit27);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNotNull(fieldVisit38);
        org.junit.Assert.assertNotNull(putObservationV2_39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(analysisMethodSimple45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MaxDuration" + "'", str46, "MaxDuration");
        org.junit.Assert.assertNotNull(laboratory51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(putUnit55);
        org.junit.Assert.assertNotNull(unitGroup60);
        org.junit.Assert.assertNotNull(putUnit61);
        org.junit.Assert.assertNotNull(putAnalyticalGroup66);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertNull(auditAttributes72);
        org.junit.Assert.assertNotNull(putDetectioncondition74);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity77);
        org.junit.Assert.assertNotNull(auditAttributes80);
        org.junit.Assert.assertNotNull(auditAttributes82);
        org.junit.Assert.assertNotNull(putUnit86);
        org.junit.Assert.assertNotNull(putObservationV2_89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test52558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52558");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = null;
        postObservationV2_2.Activity = activity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult11.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue14 = categoricalResult11.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = categoricalResult11.setValue("http://MaxDurationhttp/json/reply/ArrayList");
        postObservationV2_2.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_20 = putObservationV2_18.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus21.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_18.ResultStatus = resultStatus21;
        resultStatus21.CustomId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_29 = putObservationV2_27.setObservedProperty(observedProperty28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus30.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_27.ResultStatus = resultStatus30;
        resultStatus30.CustomId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus36.Id = "0001-01-01T00:00:00.000Z";
        resultStatus36.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str42 = observationNestedInSpecimen41.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType43 = observationNestedInSpecimen41.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus44.SystemCode = resultStatusSystemCodeType45;
        resultStatus44.CustomId = "-PT87591240H";
        resultStatus44.CustomId = "https";
        observationNestedInSpecimen41.ResultStatus = resultStatus44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType52 = resultStatus44.SystemCode;
        resultStatus36.SystemCode = resultStatusSystemCodeType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus54 = resultStatus30.setSystemCode(resultStatusSystemCodeType52);
        resultStatus21.SystemCode = resultStatusSystemCodeType52;
        postObservationV2_2.ResultStatus = resultStatus21;
        java.lang.String str57 = postObservationV2_2.getCustomId();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(categoricalValue14);
        org.junit.Assert.assertNotNull(categoricalResult16);
        org.junit.Assert.assertNotNull(putObservationV2_20);
        org.junit.Assert.assertNotNull(putObservationV2_29);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(dataClassificationType43);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(resultStatus54);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test52559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52559");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory1 = attachment0.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment3 = attachment0.setFileName("");
        attachment0.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList6 = attachment0.Tags;
        java.lang.String str7 = attachment0.Url;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList9 = getExportSpecimens8.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant11 = qualifier10.DateApplied;
        java.lang.String str12 = qualifier10.User;
        java.lang.String str13 = qualifier10.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier20 = qualifier10.setDateApplied(instant17);
        getExportSpecimens8.Before = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark24 = locationRemark22.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList26 = fieldVisitDataServiceResponse25.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse28 = fieldVisitDataServiceResponse25.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        fieldVisitDataServiceResponse25.ResponseTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark22.setCreateTime(instant32);
        getExportSpecimens8.EndModificationTime = instant32;
        attachment0.DateUploaded = instant32;
        java.lang.String str38 = attachment0.Url;
        java.lang.Double double39 = attachment0.GpsLatitude;
        org.junit.Assert.assertNull(attachmentCategory1);
        org.junit.Assert.assertNotNull(attachment3);
        org.junit.Assert.assertNull(tagMetadataList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(qualifier20);
        org.junit.Assert.assertNotNull(locationRemark24);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList26);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(double39);
    }

    @Test
    public void test52560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52560");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setComment("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postReflectedTimeSeries5.Label = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries9 = postReflectedTimeSeries5.setLabel("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str10 = postReflectedTimeSeries5.getUnit();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test52561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52561");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer6 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient8 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient10 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("/AQUARIUS/Acquisition/v2", "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, true);
        net.servicestack.client.ConnectionFilter connectionFilter11 = null;
        sdkServiceClient10.RequestFilter = connectionFilter11;
        byte[] byteArray14 = null;
        java.net.HttpURLConnection httpURLConnection16 = sdkServiceClient10.put("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****", byteArray14, "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        boolean boolean17 = sdkServiceClient10.getAlwaysSendBasicAuthHeaders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGrades getResultGrades18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGrades();
        java.lang.Object obj19 = getResultGrades18.getResponseType();
        java.lang.Object obj20 = getResultGrades18.getResponseType();
        // The following exception was thrown during execution in test generation
        try {
            com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade21 = sdkServiceClient10.post((net.servicestack.client.IReturn<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade>) getResultGrades18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient8);
        org.junit.Assert.assertNotNull(sdkServiceClient10);
        org.junit.Assert.assertNotNull(httpURLConnection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
    }

    @Test
    public void test52562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52562");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard2 = locationReferenceStandard0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard4 = locationReferenceStandard2.setReferenceStandardOffsets(referenceStandardOffsetList3);
        java.lang.String str5 = locationReferenceStandard4.Comments;
        java.lang.String str6 = locationReferenceStandard4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList9, referenceStandardOffsetArray8);
        locationReferenceStandard7.ReferenceStandardOffsets = referenceStandardOffsetList9;
        locationReferenceStandard4.ReferenceStandardOffsets = referenceStandardOffsetList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard14 = locationReferenceStandard4.setComments("9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locationReferenceStandard2);
        org.junit.Assert.assertNotNull(locationReferenceStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locationReferenceStandard14);
    }

    @Test
    public void test52563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52563");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = putActivityTemplate6.setType(activityTemplateType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str13 = putActivityTemplate12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putActivityTemplate12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation17 = putSamplingLocation15.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity24 = postObservedProperty18.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit25 = quantity24.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation26 = putSamplingLocation17.setElevation(quantity24);
        putActivityTemplate12.Depth = quantity24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate29 = putActivityTemplate12.setType(activityTemplateType28);
        java.lang.Object obj30 = putActivityTemplate29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str32 = putActivityTemplate31.getId();
        java.lang.String str33 = putActivityTemplate31.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = auditAttributes34.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate37 = putActivityTemplate31.setAuditAttributes(auditAttributes36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate37.Medium = mediumType38;
        java.lang.String str40 = putActivityTemplate37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate42 = putActivityTemplate37.setType(activityTemplateType41);
        java.lang.String str43 = putActivityTemplate37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation44.setPlannedFieldResult(plannedFieldResult45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation46.setResultStatus(resultStatus47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity49.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = postActivity49.setPlannedActivity(plannedActivity52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType54 = postActivity49.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate56.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList61 = specimenTemplate60.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = specimenTemplate62.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList67 = specimenTemplate66.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate56, specimenTemplate59, specimenTemplate60, specimenTemplate64, specimenTemplate65, specimenTemplate66 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList69, specimenTemplateArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate71 = postFieldVisitActivityWithTemplate55.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate73 = postFieldVisitActivityWithTemplate71.setCollectionMethod(collectionMethod72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity74 = postActivity49.setCollectionMethod(collectionMethod72);
        observation48.CollectionMethod = collectionMethod72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate76 = putActivityTemplate37.setCollectionMethod(collectionMethod72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate77 = putActivityTemplate29.setCollectionMethod(collectionMethod72);
        collectionMethod72.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        putActivityTemplate11.CollectionMethod = collectionMethod72;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putActivityTemplate11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putSamplingLocation17);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(quantity24);
        org.junit.Assert.assertNull(unit25);
        org.junit.Assert.assertNotNull(putSamplingLocation26);
        org.junit.Assert.assertTrue("'" + activityTemplateType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(putActivityTemplate29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(putActivityTemplate37);
        org.junit.Assert.assertTrue("'" + mediumType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(putActivityTemplate42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNotNull(postActivity53);
        org.junit.Assert.assertNull(activityType54);
        org.junit.Assert.assertNull(labInstructionTemplateList61);
        org.junit.Assert.assertNotNull(specimenTemplate64);
        org.junit.Assert.assertNull(labInstructionTemplateList67);
        org.junit.Assert.assertNotNull(specimenTemplateArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate71);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate73);
        org.junit.Assert.assertNotNull(postActivity74);
        org.junit.Assert.assertNotNull(putActivityTemplate76);
        org.junit.Assert.assertNotNull(putActivityTemplate77);
    }

    @Test
    public void test52564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52564");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        java.lang.String str2 = reading0.Manufacturer;
        java.lang.String str3 = reading0.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = reading4.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading4.ReadingType = readingType6;
        reading0.ReadingType = readingType6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading0.setReferencePointUniqueId("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        java.lang.Integer int11 = reading0.getGradeCode();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay5);
        org.junit.Assert.assertTrue("'" + readingType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test52565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52565");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun();
        java.lang.Boolean boolean1 = postImportLabReportDataDryRun0.CreateMissingObjects;
        java.lang.String str2 = postImportLabReportDataDryRun0.TimeZoneOffset;
        postImportLabReportDataDryRun0.TimeZoneOffset = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test52566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52566");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str2 = getChartDataV2_1.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_1.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_4.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList7 = getChartDataV2_6.getSpecimenIds();
        java.time.Instant instant8 = getChartDataV2_6.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = putUserV2_10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities12.setToStartTime(instant22);
        java.lang.String str24 = getActivities23.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        getActivities23.Media = strList38;
        putUserV2_10.AccessGroups = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens45 = getSpecimens9.setSamplingLocationIds((java.util.List<java.lang.String>) strList38);
        getChartDataV2_6.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.DepthUnitId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.LabResultLaboratoryIds;
        getObservationsV2_54.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int61 = getObservationsV2_54.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest62.setTimeSeriesUniqueIds(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_54.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        putUser47.Roles = strList74;
        getChartDataV2_6.AnalysisMethodSimpleIds = strList74;
        deleteObservationsV2_0.AnalyticalGroupIds = strList74;
        java.lang.String str83 = deleteObservationsV2_0.getDepthUnitId();
        deleteObservationsV2_0.ActivityCustomId = "https";
        java.time.Instant instant86 = deleteObservationsV2_0.EndModificationTime;
        deleteObservationsV2_0.CustomId = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.util.List<java.lang.String> strList89 = deleteObservationsV2_0.SamplingLocationIds;
        java.time.Instant instant90 = null;
        deleteObservationsV2_0.EndObservedTime = instant90;
        java.util.List<java.lang.String> strList92 = deleteObservationsV2_0.ActivityTypes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getSpecimens45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(instant86);
        org.junit.Assert.assertNull(strList89);
        org.junit.Assert.assertNull(strList92);
    }

    @Test
    public void test52567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52567");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.lang.Object obj18 = importItem0.getExistingItem();
        importItem0.Input = "hi!";
        java.lang.Object obj21 = importItem0.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem23 = importItem0.setStatus(importItemStatusType22);
        java.lang.Object obj24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem25 = importItem23.setItem(obj24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj29 = timeAlignedDataServiceRequest28.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest28.setQueryFrom(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = timeAlignedDataServiceRequest28.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation43 = importItemObservation27.setFields((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase44 = putOpenIdConnectRelyingPartyConfiguration26.setHostedDomains((java.util.List<java.lang.String>) strList39);
        importItem25.Fields = strList39;
        java.lang.Object obj46 = importItem25.getExistingItem();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + importItemStatusType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem23);
        org.junit.Assert.assertNotNull(importItem25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest42);
        org.junit.Assert.assertNotNull(importItemObservation43);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase44);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test52568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52568");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList6 = postCalculatedDerivedTimeSeries5.TimeSeriesUniqueIds;
        java.lang.String str7 = postCalculatedDerivedTimeSeries5.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries5.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str10 = postCalculatedDerivedTimeSeries9.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart13 = inputPart11.setHeaders((java.lang.Object) interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries9.setInterpolationType(interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase15 = putParameter0.setInterpolationType(interpolationType12);
        parameterBase15.MaxValue = 100.0d;
        java.lang.String str18 = parameterBase15.UnitIdentifier;
        parameterBase15.UnitIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase22 = parameterBase15.setUnitGroupIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(parameterBase15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(parameterBase22);
    }

    @Test
    public void test52569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52569");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        getObservationsV2_6.ResultGrades = strList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems24 = getExtendedAttributeDropdownlistitems5.setSearch((java.util.List<java.lang.String>) strList19);
        getChartDataV2_0.ObservedPropertyIds = strList19;
        java.util.List<java.lang.String> strList26 = getChartDataV2_0.AnalyticalGroupIds;
        java.util.List<java.lang.String> strList27 = getChartDataV2_0.ObservedPropertyIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test52570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52570");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity4 = putActivity0.setCollectionMethod(collectionMethod3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity4.setStartTime(offsetDateTime5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postActivity7.getAuditAttributes();
        java.lang.Boolean boolean9 = postActivity7.Refreshed;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity11 = postActivity7.setStartTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postFieldVisitActivityWithTemplate12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = postFieldVisitActivityWithTemplate12.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation16.setPlannedFieldResult(plannedFieldResult17);
        observation18.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus21 = observation18.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon22 = observation18.getRelatedTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation23.setPlannedFieldResult(plannedFieldResult24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation25.setResultStatus(resultStatus26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity28.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = postActivity28.setPlannedActivity(plannedActivity31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType33 = postActivity28.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList40 = specimenTemplate39.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = specimenTemplate41.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList46 = specimenTemplate45.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate35, specimenTemplate38, specimenTemplate39, specimenTemplate43, specimenTemplate44, specimenTemplate45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList48, specimenTemplateArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate50 = postFieldVisitActivityWithTemplate34.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate52 = postFieldVisitActivityWithTemplate50.setCollectionMethod(collectionMethod51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = postActivity28.setCollectionMethod(collectionMethod51);
        observation27.CollectionMethod = collectionMethod51;
        collectionMethod51.Name = "http";
        java.lang.String str57 = collectionMethod51.getCustomId();
        collectionMethod51.CustomId = "MinDuration";
        observation18.CollectionMethod = collectionMethod51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate61 = postFieldVisitActivityWithTemplate15.setCollectionMethod(collectionMethod51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity62 = postActivity11.setCollectionMethod(collectionMethod51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity63 = putActivity4.setCollectionMethod(collectionMethod51);
        org.junit.Assert.assertNotNull(putActivity4);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(postActivity11);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate15);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(resultStatus21);
        org.junit.Assert.assertNull(taxon22);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNotNull(postActivity32);
        org.junit.Assert.assertNull(activityType33);
        org.junit.Assert.assertNull(labInstructionTemplateList40);
        org.junit.Assert.assertNotNull(specimenTemplate43);
        org.junit.Assert.assertNull(labInstructionTemplateList46);
        org.junit.Assert.assertNotNull(specimenTemplateArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate50);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate52);
        org.junit.Assert.assertNotNull(postActivity53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate61);
        org.junit.Assert.assertNotNull(postActivity62);
        org.junit.Assert.assertNotNull(putActivity63);
    }

    @Test
    public void test52571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52571");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        postAnalyticalGroup0.NumberOfObservedPropertiesInGroupItems = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup7 = postAnalyticalGroup0.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup9 = postAnalyticalGroup7.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 1);
        postAnalyticalGroup7.NumberOfAnalysisMethodsInGroupItems = 10;
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNotNull(postAnalyticalGroup7);
        org.junit.Assert.assertNotNull(postAnalyticalGroup9);
    }

    @Test
    public void test52572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52572");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str8 = putObservedProperty0.CasNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty10 = putObservedProperty0.setId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.String str11 = putObservedProperty10.getCasNumber();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = putObservedProperty10.getImportHistoryEventSimples();
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putObservedProperty10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList12);
    }

    @Test
    public void test52573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52573");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        java.lang.String str24 = samplingLocation22.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList25 = samplingLocation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        samplingLocation22.Elevation = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails30 = activityWithDetails0.setSamplingLocation(samplingLocation22);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList31 = samplingLocation22.ImportHistoryEventSimples;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(importHistoryEventSimpleList25);
        org.junit.Assert.assertNotNull(activityWithDetails30);
        org.junit.Assert.assertNull(importHistoryEventSimpleList31);
    }

    @Test
    public void test52574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52574");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment37.setAttachment(attachment40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        java.lang.String str58 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = domainObjectAttachment56.setAttachment(attachment59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment42, domainObjectAttachment49, domainObjectAttachment54, domainObjectAttachment56, domainObjectAttachment61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan67 = putFieldVisit32.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple68 = putFieldVisit32.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule69 = putFieldVisit32.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList70 = putFieldVisit32.Attachments;
        postSamplingLocation0.Attachments = domainObjectAttachmentList70;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = postSamplingLocation0.getAttachments();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList73 = postSamplingLocation0.getExtendedAttributes();
        postSamplingLocation0.HorizontalCollectionMethod = "2021.4.62.0";
        java.lang.String str76 = postSamplingLocation0.getLatitude();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList77 = postSamplingLocation0.SamplingLocationGroups;
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachment60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNull(samplingPlan67);
        org.junit.Assert.assertNull(fieldTripSimple68);
        org.junit.Assert.assertNull(schedule69);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList72);
        org.junit.Assert.assertNull(extendedAttributeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(samplingLocationGroupList77);
    }

    @Test
    public void test52575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52575");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        java.lang.String str1 = importSummarySpecimen0.getSummaryReportText();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen3 = importSummarySpecimen0.setExpectedCount((java.lang.Integer) (-1));
        java.lang.Integer int4 = importSummarySpecimen0.getSkippedCount();
        java.lang.Integer int5 = importSummarySpecimen0.getNewCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(importSummarySpecimen3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test52576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52576");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str3 = extendedAttribute0.getDefaultValue();
        extendedAttribute0.AppliesToLocations = true;
        java.lang.String str6 = extendedAttribute0.Key;
        extendedAttribute0.UniqueId = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag11 = tag9.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str12 = tag11.Key;
        tag11.AppliesToReports = true;
        tag11.UniqueId = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        postExtendedAttribute18.ValueType = tagValueType19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute21 = postExtendedAttribute17.setValueType(tagValueType19);
        tag11.ValueType = tagValueType19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute23 = extendedAttribute0.setValueType(tagValueType19);
        java.lang.String str24 = extendedAttribute23.getKey();
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str3, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(tag11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + tagValueType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(editableExtendedAttribute21);
        org.junit.Assert.assertNotNull(extendedAttribute23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test52577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52577");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = vertical3.setVerticalNumber((java.lang.Double) (-1.0d));
        vertical3.VerticalNumber = 100.0d;
        java.time.Instant instant8 = vertical3.getMeasurementTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = vertical3.getSegmentVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical11 = vertical3.setCosineOfUniqueFlow((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType12 = vertical3.VelocityObservationMethod;
        java.lang.Boolean boolean13 = vertical3.getIsDischargeEstimated();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNotNull(vertical5);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNotNull(vertical11);
        org.junit.Assert.assertNull(pointVelocityObservationType12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test52578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52578");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation2.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setCategoricalResult(categoricalResult5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8, importHistoryEventSimpleArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty12 = postObservedProperty0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = postObservedProperty0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = putObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty15.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty20 = putObservedProperty18.setDescription("2021.4.62.0");
        java.lang.String str21 = putObservedProperty18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj23 = postObservedProperty22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate26 = postFieldVisitActivityWithTemplate24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation27.setPlannedFieldResult(plannedFieldResult28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction30 = null;
        observation29.LabInstruction = labInstruction30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation33 = observation29.setStatistics(observationStatistics32);
        java.time.OffsetDateTime offsetDateTime34 = observation33.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit36 = null;
        quantity35.Unit = unit36;
        observation33.Depth = quantity35;
        postFieldVisitActivityWithTemplate26.Depth = quantity35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = quantity35.setUnit(unit40);
        postObservedProperty22.LowerLimit = quantity35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        postObservedProperty22.AnalysisType = analysisType43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty45 = putObservedProperty18.setAnalysisType(analysisType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty47 = putObservedProperty45.setResultType(resultType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = postObservedProperty14.setResultType(resultType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = postObservedProperty48.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty51 = postObservedProperty48.setCustomId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(postObservedProperty12);
        org.junit.Assert.assertNotNull(postObservedProperty14);
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNotNull(putObservedProperty20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate26);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(observation33);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(quantity41);
        org.junit.Assert.assertTrue("'" + analysisType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(putObservedProperty45);
        org.junit.Assert.assertTrue("'" + resultType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(putObservedProperty47);
        org.junit.Assert.assertNotNull(postObservedProperty48);
        org.junit.Assert.assertNull(auditAttributes49);
        org.junit.Assert.assertNotNull(postObservedProperty51);
    }

    @Test
    public void test52579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52579");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        standardDefinition0.CustomId = "MinDuration";
        java.lang.String str5 = standardDefinition0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = standardDefinition0.getAuditAttributes();
        standardDefinition0.Id = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str9 = standardDefinition0.CustomId;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinDuration" + "'", str9, "MinDuration");
    }

    @Test
    public void test52580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52580");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double4 = putBulkEditResultGradesV2_3.DepthValue;
        java.util.List<java.lang.String> strList5 = putBulkEditResultGradesV2_3.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_11 = putBulkEditResultGradesV2_3.setStartModificationTime(instant9);
        qualifier2.DateApplied = instant9;
        crossSectionSurveyActivity0.StartTime = instant9;
        java.lang.String str14 = crossSectionSurveyActivity0.getRelativeLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType15 = crossSectionSurveyActivity0.getStartingPoint();
        java.lang.String str16 = crossSectionSurveyActivity0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeSummary17.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary17.Discharge;
        java.lang.Integer int20 = dischargeSummary17.getGradeCode();
        java.lang.String str21 = dischargeSummary17.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse23.setNextToken(instant28);
        java.time.Instant instant32 = locationDescriptionListServiceResponse23.getNextToken();
        attachment22.DateLastAccessed = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary17.setMeasurementStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity35 = crossSectionSurveyActivity0.setEndTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity37 = crossSectionSurveyActivity35.setRelativeLocation("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        crossSectionSurveyActivity35.Channel = "****2c758a89-79ef-4b16-8ced-c7bb83cdba18****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(startPointType15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity35);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity37);
    }

    @Test
    public void test52581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52581");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        java.lang.String str30 = getGroupedObservationsV2_26.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_26.setCustomId("MinDuration");
        java.time.Instant instant33 = getGroupedObservationsV2_26.StartObservedTime;
        java.util.List<java.lang.String> strList34 = getGroupedObservationsV2_26.getLabResultLabAnalysisMethodIds();
        java.time.Instant instant35 = null;
        getGroupedObservationsV2_26.StartObservedTime = instant35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_38 = getGroupedObservationsV2_26.setImportHistoryEventId("");
        java.util.List<java.lang.String> strList39 = getGroupedObservationsV2_38.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList40 = getGroupedObservationsV2_38.TaxonIds;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
    }

    @Test
    public void test52582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52582");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull2 = attachment0.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment4 = attachment0.setDateTaken(offsetDateTime3);
        java.lang.String str5 = attachment4.getResolution();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment7 = attachment4.setLatitude("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str8 = attachment4.Longitude;
        attachment4.Latitude = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(auditAttributesFull2);
        org.junit.Assert.assertNotNull(attachment4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(attachment7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test52583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52583");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        java.lang.Object obj1 = postActiveDirectoryUser0.getResponseType();
        java.lang.Object obj2 = postActiveDirectoryUser0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
    }

    @Test
    public void test52584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52584");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPluginsResponse fieldDataPluginsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPluginsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList1 = fieldDataPluginsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList2 = fieldDataPluginsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPluginsResponse fieldDataPluginsResponse4 = fieldDataPluginsResponse0.setResults(fieldDataPluginList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList5 = fieldDataPluginsResponse0.getResults();
        org.junit.Assert.assertNull(fieldDataPluginList1);
        org.junit.Assert.assertNull(fieldDataPluginList2);
        org.junit.Assert.assertNotNull(fieldDataPluginsResponse4);
        org.junit.Assert.assertNull(fieldDataPluginList5);
    }

    @Test
    public void test52585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52585");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity();
        getActivity0.Id = "https";
        java.lang.String str3 = getActivity0.Id;
        java.lang.Object obj4 = getActivity0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity6 = getActivity0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity8 = getActivity6.setDetail((java.lang.Boolean) false);
        getActivity8.Detail = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity12 = getActivity8.setDetail((java.lang.Boolean) true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertNotNull(getActivity6);
        org.junit.Assert.assertNotNull(getActivity8);
        org.junit.Assert.assertNotNull(getActivity12);
    }

    @Test
    public void test52586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52586");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.getCrossSectionSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult2 = null;
        fieldVisitDataServiceResponse0.DatumConversionResult = datumConversionResult2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult4 = fieldVisitDataServiceResponse0.getDatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.lang.Integer int6 = inspectionActivity5.NumberOfReadingsNotDatumConverted;
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = fieldVisitDataServiceResponse0.getControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList10 = inspectionActivity9.getInspections();
        java.lang.String str11 = inspectionActivity9.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList12 = inspectionActivity9.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity14 = inspectionActivity9.setParty("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList15 = inspectionActivity9.getReadings();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse16 = fieldVisitDataServiceResponse0.setInspectionActivity(inspectionActivity9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity17 = fieldVisitDataServiceResponse0.getLevelSurveyActivity();
        fieldVisitDataServiceResponse0.Identifier = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity21 = fieldVisitDataServiceResponse20.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity22 = fieldVisitDataServiceResponse20.getLevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList24 = inspectionActivity23.getInspections();
        fieldVisitDataServiceResponse20.InspectionActivity = inspectionActivity23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList27 = inspectionActivity26.getInspections();
        java.lang.String str28 = inspectionActivity26.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList29 = inspectionActivity26.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity31 = inspectionActivity26.setIsValid((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck> calibrationCheckList32 = inspectionActivity26.getCalibrationChecks();
        java.lang.String str33 = inspectionActivity26.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str36 = inspection35.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str38 = inspection37.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection40 = inspection37.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str42 = inspection41.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection44 = inspection41.setSubLocationIdentifier("");
        inspection44.Model = "9999-12-31T23:59:59.999Z";
        inspection44.Comments = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str50 = inspection49.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection52 = inspection49.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str54 = inspection53.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection56 = inspection53.setSubLocationIdentifier("");
        inspection56.Model = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str60 = inspection59.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection62 = inspection59.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str64 = inspection63.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection66 = inspection63.setSubLocationIdentifier("");
        inspection63.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str70 = inspection69.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection72 = inspection69.setSubLocationIdentifier("");
        inspection72.Model = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection[] inspectionArray75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection[] { inspection35, inspection40, inspection44, inspection52, inspection56, inspection62, inspection63, inspection72 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection>) inspectionList76, inspectionArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity78 = inspectionActivity34.setInspections(inspectionList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity79 = inspectionActivity26.setInspections(inspectionList76);
        inspectionActivity23.Inspections = inspectionList76;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList81 = inspectionActivity23.Inspections;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse82 = fieldVisitDataServiceResponse0.setInspectionActivity(inspectionActivity23);
        java.lang.String str83 = fieldVisitDataServiceResponse0.Identifier;
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNull(datumConversionResult4);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(controlConditionActivity8);
        org.junit.Assert.assertNull(inspectionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(readingList12);
        org.junit.Assert.assertNotNull(inspectionActivity14);
        org.junit.Assert.assertNull(readingList15);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse16);
        org.junit.Assert.assertNull(levelSurveyActivity17);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity21);
        org.junit.Assert.assertNull(levelSurveyActivity22);
        org.junit.Assert.assertNull(inspectionList24);
        org.junit.Assert.assertNull(inspectionList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(readingList29);
        org.junit.Assert.assertNotNull(inspectionActivity31);
        org.junit.Assert.assertNull(calibrationCheckList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(inspection40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(inspection44);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(inspection52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(inspection56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(inspection62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(inspection66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(inspection72);
        org.junit.Assert.assertNotNull(inspectionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(inspectionActivity78);
        org.junit.Assert.assertNotNull(inspectionActivity79);
        org.junit.Assert.assertNotNull(inspectionList81);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str83, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
    }

    @Test
    public void test52587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52587");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownList dropDownList0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownList();
        java.lang.String str1 = dropDownList0.Id;
        java.lang.String str2 = dropDownList0.getId();
        dropDownList0.DisplayName = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test52588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52588");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod2 = putActivityTemplate0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = putActivityTemplate0.setComment("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = putActivityTemplate4.Medium;
        java.lang.String str6 = putActivityTemplate4.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(collectionMethod2);
        org.junit.Assert.assertNotNull(putActivityTemplate4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52589");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = reading6.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = reading6.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = reading9.setModel("MaxInstant");
        java.lang.Integer int12 = reading11.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField16 = extendedAttributeField14.setDisplayName("");
        java.lang.Boolean boolean17 = extendedAttributeField16.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        java.lang.String str29 = getObservationsV2_26.CustomId;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_26.setMedia((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str48 = getObservationsV2_47.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        getObservationsV2_47.ProjectIds = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_26.setObservedPropertyIds((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest18.setTimeSeriesOutputUnitIds(strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField58 = extendedAttributeField16.setValueOptions((java.util.List<java.lang.String>) strList52);
        putBulkEditResultGradesV2_13.AnalysisMethodSimpleIds = strList52;
        reading11.ReadingQualifiers = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty61 = importItemObservedProperty5.setFields((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty5 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63, importItemObservedPropertyArray62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary65 = observedPropertyImportSummary0.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63);
        java.lang.Integer int66 = observedPropertyImportSummary65.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList67 = observedPropertyImportSummary65.ImportItems;
        java.lang.Integer int68 = observedPropertyImportSummary65.getNewCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList69 = observedPropertyImportSummary65.ImportItems;
        java.lang.Integer int70 = observedPropertyImportSummary65.getSkippedCount();
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(reading9);
        org.junit.Assert.assertNotNull(reading11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(extendedAttributeField16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(extendedAttributeField58);
        org.junit.Assert.assertNotNull(importItemObservedProperty61);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList69);
        org.junit.Assert.assertNull(int70);
    }

    @Test
    public void test52590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52590");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = putActivity8.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity10.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity10.setPlannedActivity(plannedActivity13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType15 = postActivity10.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate17.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList22 = specimenTemplate21.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate23.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList28 = specimenTemplate27.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate17, specimenTemplate20, specimenTemplate21, specimenTemplate25, specimenTemplate26, specimenTemplate27 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList30, specimenTemplateArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate32 = postFieldVisitActivityWithTemplate16.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate34 = postFieldVisitActivityWithTemplate32.setCollectionMethod(collectionMethod33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity35 = postActivity10.setCollectionMethod(collectionMethod33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity10.Medium = medium36;
        putActivity8.Medium = medium36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit39 = putActivity8.getFieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList40 = putActivity8.ExtendedAttributes;
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(device9);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNull(activityType15);
        org.junit.Assert.assertNull(labInstructionTemplateList22);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNull(labInstructionTemplateList28);
        org.junit.Assert.assertNotNull(specimenTemplateArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate32);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate34);
        org.junit.Assert.assertNotNull(postActivity35);
        org.junit.Assert.assertNull(fieldVisit39);
        org.junit.Assert.assertNull(extendedAttributeList40);
    }

    @Test
    public void test52591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52591");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = noteOperation2.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = noteOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] noteOperationArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] { noteOperation2, noteOperation4 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>) noteOperationList7, noteOperationArray6);
        metadataChangeTransaction0.NoteOperations = noteOperationList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation> methodOperationList10 = metadataChangeTransaction0.getMethodOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList11 = metadataChangeTransaction0.NoteOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList12 = metadataChangeTransaction0.getGapToleranceOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList14 = metadataChangeTransaction13.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.lang.String str16 = interpolationTypeOperation15.getType();
        java.lang.String str17 = interpolationTypeOperation15.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation20 = interpolationTypeOperation18.setUser("0001-01-01T00:00:00.000Z");
        interpolationTypeOperation20.Comments = "/AQUARIUS";
        java.lang.String str23 = interpolationTypeOperation20.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType interpolationType25 = interpolationTypeOperation20.setType("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation28 = interpolationTypeOperation26.setUser("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType29 = interpolationTypeOperation26.OperationType;
        interpolationTypeOperation26.Comments = "ZZZZZ";
        interpolationTypeOperation26.Type = "https";
        java.time.Instant instant34 = interpolationTypeOperation26.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation37 = interpolationTypeOperation35.setUser("0001-01-01T00:00:00.000Z");
        interpolationTypeOperation37.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation41 = interpolationTypeOperation37.setComments("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation44 = interpolationTypeOperation42.setUser("0001-01-01T00:00:00.000Z");
        interpolationTypeOperation44.Comments = "/AQUARIUS";
        java.lang.String str47 = interpolationTypeOperation44.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation50 = interpolationTypeOperation48.setUser("0001-01-01T00:00:00.000Z");
        java.time.Instant instant51 = interpolationTypeOperation50.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.lang.String str53 = interpolationTypeOperation52.getType();
        java.lang.String str54 = interpolationTypeOperation52.getUser();
        java.time.Instant instant55 = interpolationTypeOperation52.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation[] interpolationTypeOperationArray56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation[] { interpolationTypeOperation15, interpolationTypeOperation20, interpolationTypeOperation26, interpolationTypeOperation41, interpolationTypeOperation44, interpolationTypeOperation50, interpolationTypeOperation52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation> interpolationTypeOperationList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation>) interpolationTypeOperationList57, interpolationTypeOperationArray56);
        metadataChangeTransaction13.InterpolationTypeOperations = interpolationTypeOperationList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction60 = metadataChangeTransaction0.setInterpolationTypeOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation>) interpolationTypeOperationList57);
        java.time.Instant instant61 = metadataChangeTransaction60.getAppliedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType62 = metadataChangeTransaction60.getContentType();
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertNotNull(noteOperationArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(methodOperationList10);
        org.junit.Assert.assertNotNull(noteOperationList11);
        org.junit.Assert.assertNull(gapToleranceOperationList12);
        org.junit.Assert.assertNull(gapToleranceOperationList14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(interpolationTypeOperation20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/AQUARIUS" + "'", str23, "/AQUARIUS");
        org.junit.Assert.assertNotNull(interpolationType25);
        org.junit.Assert.assertNotNull(interpolationTypeOperation28);
        org.junit.Assert.assertNull(metadataChangeOperationType29);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNotNull(interpolationTypeOperation37);
        org.junit.Assert.assertNotNull(interpolationTypeOperation41);
        org.junit.Assert.assertNotNull(interpolationTypeOperation44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/AQUARIUS" + "'", str47, "/AQUARIUS");
        org.junit.Assert.assertNotNull(interpolationTypeOperation50);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNotNull(interpolationTypeOperationArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNull(metadataChangeContentType62);
    }

    @Test
    public void test52592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52592");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectRelyingPartyConfiguration postOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectRelyingPartyConfiguration();
        postOpenIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = postOpenIdConnectRelyingPartyConfiguration0.setIdentifierClaim("POST");
        java.lang.String str5 = postOpenIdConnectRelyingPartyConfiguration0.getIssuerIdentifier();
        postOpenIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test52593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52593");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21, extendedAttributeArray20);
        postActivity19.ExtendedAttributes = extendedAttributeList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation17.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList25 = samplingLocation24.getStandards();
        samplingLocation24.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str28 = samplingLocation24.Name;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList29 = samplingLocation24.SamplingLocationGroups;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList30 = samplingLocation24.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation32 = samplingLocation24.setName("multipart/form-data; boundary=****c052e2e0-9b0e-4df2-9a74-52850b5df85a****");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNotNull(extendedAttributeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(standardSimpleList25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(samplingLocationGroupList29);
        org.junit.Assert.assertNotNull(extendedAttributeList30);
        org.junit.Assert.assertNotNull(samplingLocation32);
    }

    @Test
    public void test52594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52594");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str1 = inspection0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection3 = inspection0.setModel("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection5 = inspection0.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str6 = inspection5.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection8 = inspection5.setManufacturer("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str9 = inspection8.SerialNumber;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(inspection3);
        org.junit.Assert.assertNotNull(inspection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(inspection8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test52595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52595");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList5 = postObservationV2_2.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = postObservationV2_2.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = postObservationV2_2.getStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device8 = postObservationV2_2.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str10 = collectionMethod9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_11 = postObservationV2_2.setCollectionMethod(collectionMethod9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType12 = postObservationV2_11.DataClassification;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(ruleValidationDetailsList5);
        org.junit.Assert.assertNull(qualityControlType6);
        org.junit.Assert.assertNull(observationStatistics7);
        org.junit.Assert.assertNull(device8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postObservationV2_11);
        org.junit.Assert.assertNull(dataClassificationType12);
    }

    @Test
    public void test52596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52596");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup4 = putAnalyticalGroup2.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup6 = putAnalyticalGroup4.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str7 = putAnalyticalGroup4.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup9 = putAnalyticalGroup4.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 1);
        java.lang.String str10 = putAnalyticalGroup9.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType12 = analyticalGroup11.getType();
        analyticalGroup11.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.Integer int15 = analyticalGroup11.getNumberOfAnalysisMethodsInGroupItems();
        analyticalGroup11.NumberOfObservedPropertiesInGroupItems = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup19 = analyticalGroup11.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = putAnalysisMethod20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal24 = observationMinimal22.setSpecimen(specimenNestedInActivity23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observationMinimal24.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue27 = categoricalResult26.getFixedValue();
        observationMinimal24.CategoricalResult = categoricalResult26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult29.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue32 = categoricalResult29.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult29.NullMeasureQualifier = nullMeasureQualifier33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult35 = categoricalResult26.setNullMeasureQualifier(nullMeasureQualifier33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier36 = categoricalResult26.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup39 = putAnalyticalGroup37.setAnalyticalGroupItems(analyticalGroupItemList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails42 = labResultDetails40.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan43.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime46 = samplingPlan43.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit49 = putUnitGroupWithUnit47.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType50 = putUnitGroupWithUnit47.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = samplingPlanPlannedActivity52.setAuditAttributes(auditAttributes53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = auditAttributes55.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity54.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = samplingPlanPlannedActivity54.AuditAttributes;
        putAccessGroup51.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit61 = putUnitGroupWithUnit47.setAuditAttributes(auditAttributes59);
        samplingPlan43.AuditAttributes = auditAttributes59;
        java.time.OffsetDateTime offsetDateTime63 = null;
        auditAttributes59.ModificationTime = offsetDateTime63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails65 = labResultDetails40.setAuditAttributes(auditAttributes59);
        putAnalyticalGroup39.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier67 = nullMeasureQualifier36.setAuditAttributes(auditAttributes59);
        putAnalysisMethod20.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = putAnalysisMethod20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup70 = analyticalGroup11.setAuditAttributes(auditAttributes69);
        putAnalyticalGroup9.AuditAttributes = auditAttributes69;
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNotNull(putAnalyticalGroup4);
        org.junit.Assert.assertNotNull(putAnalyticalGroup6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putAnalyticalGroup9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(analyticalGroupType12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(analyticalGroup19);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(observationMinimal24);
        org.junit.Assert.assertNull(observedProperty25);
        org.junit.Assert.assertNull(categoricalValue27);
        org.junit.Assert.assertNull(categoricalValue32);
        org.junit.Assert.assertNotNull(categoricalResult35);
        org.junit.Assert.assertNotNull(nullMeasureQualifier36);
        org.junit.Assert.assertNotNull(putAnalyticalGroup39);
        org.junit.Assert.assertNotNull(labResultDetails42);
        org.junit.Assert.assertNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit49);
        org.junit.Assert.assertNull(unitGroupSystemCodeType50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity54);
        org.junit.Assert.assertNotNull(auditAttributes57);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit61);
        org.junit.Assert.assertNotNull(labResultDetails65);
        org.junit.Assert.assertNotNull(nullMeasureQualifier67);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(analyticalGroup70);
    }

    @Test
    public void test52597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52597");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str2 = inspection1.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection4 = inspection1.setSubLocationIdentifier("");
        inspection4.Model = "9999-12-31T23:59:59.999Z";
        inspection4.Comments = "MinDuration";
        java.lang.String str9 = inspection4.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection11 = inspection4.setSerialNumber("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType inspectionType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.FieldMeter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection13 = inspection11.setInspectionType(inspectionType12);
        inspection0.InspectionType = inspectionType12;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(inspection4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinDuration" + "'", str9, "MinDuration");
        org.junit.Assert.assertNotNull(inspection11);
        org.junit.Assert.assertTrue("'" + inspectionType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.FieldMeter + "'", inspectionType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.FieldMeter));
        org.junit.Assert.assertNotNull(inspection13);
    }

    @Test
    public void test52598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52598");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        specimenWithObservations0.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation6.CustomId = "hi!";
        java.lang.String str9 = observation6.CustomId;
        java.lang.String str10 = observation6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium11 = null;
        observation6.Medium = medium11;
        java.lang.String str13 = observation6.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier16 = putNullMeasureQualifier14.setId("hi!");
        java.lang.String str17 = putNullMeasureQualifier14.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22, observedPropertyArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = postLabAnalysisMethod20.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod20.setAuditAttributes(auditAttributes25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList27 = postLabAnalysisMethod26.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier30 = putNullMeasureQualifier28.setDescription("");
        putNullMeasureQualifier28.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str34 = standardDefinition33.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime36 = putSchedule35.StartDate;
        java.time.OffsetDateTime offsetDateTime37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule38 = putSchedule35.setEndDate(offsetDateTime37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putSchedule38.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime40 = null;
        putSchedule38.LastGenerationDate = offsetDateTime40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType42 = putSchedule38.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = plannedFieldResult43.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails45.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails49 = labResultDetails47.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult50 = plannedFieldResult43.setAuditAttributes(auditAttributes48);
        putSchedule38.AuditAttributes = auditAttributes48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition52 = standardDefinition33.setAuditAttributes(auditAttributes48);
        java.time.OffsetDateTime offsetDateTime53 = auditAttributes48.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier54 = putNullMeasureQualifier28.setAuditAttributes(auditAttributes48);
        postLabAnalysisMethod26.AuditAttributes = auditAttributes48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier56 = putNullMeasureQualifier14.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation57 = observation6.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations58 = specimenWithObservations0.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate61 = specimenTemplate59.setCustomId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList62 = specimenTemplate61.LabInstructionTemplates;
        specimenWithObservations58.TemplateCreatedFrom = specimenTemplate61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str65 = shippingContainer64.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity66.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity70 = postActivity66.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity72 = postActivity70.setAuditAttributes(auditAttributes71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer73 = shippingContainer64.setAuditAttributes(auditAttributes71);
        java.lang.String str74 = shippingContainer64.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations75 = specimenWithObservations58.setShippingContainer(shippingContainer64);
        java.lang.String str76 = specimenWithObservations58.Id;
        java.lang.Boolean boolean77 = specimenWithObservations58.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer78 = specimenWithObservations58.ShippingContainer;
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(observedPropertyArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyList27);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(putSchedule38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType42);
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(labResultDetails49);
        org.junit.Assert.assertNotNull(plannedFieldResult50);
        org.junit.Assert.assertNotNull(standardDefinition52);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier54);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier56);
        org.junit.Assert.assertNotNull(observation57);
        org.junit.Assert.assertNotNull(specimenWithObservations58);
        org.junit.Assert.assertNotNull(specimenTemplate61);
        org.junit.Assert.assertNull(labInstructionTemplateList62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(postActivity70);
        org.junit.Assert.assertNotNull(postActivity72);
        org.junit.Assert.assertNotNull(shippingContainer73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(specimenWithObservations75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "/AQUARIUS" + "'", str76, "/AQUARIUS");
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(shippingContainer78);
    }

    @Test
    public void test52599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52599");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        java.util.List<java.lang.String> strList28 = getGroupedObservationsV2_26.ActivityIds;
        java.util.List<java.lang.String> strList29 = getGroupedObservationsV2_26.getAnalysisMethodSimpleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setImportHistoryEventId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str32 = getGroupedObservationsV2_31.FieldVisitId;
        java.time.Instant instant33 = getGroupedObservationsV2_31.getEndResultTime();
        java.util.List<java.lang.String> strList34 = getGroupedObservationsV2_31.Ids;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test52600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52600");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries2.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postBasicTimeSeries2.UtcOffset = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        java.lang.String str10 = postBasicTimeSeries2.getComment();
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test52601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52601");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str1 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        controlConditionActivity2.DateCleaned = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest9 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryTo(instant6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList11 = getSpecimens10.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens13 = getSpecimens10.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str15 = getChartDataV2_14.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = getChartDataV2_14.setFilterId("");
        java.util.List<java.lang.String> strList18 = getChartDataV2_14.ResultGrades;
        getChartDataV2_14.MinNumericResultValue = 100.0d;
        java.lang.Double double21 = getChartDataV2_14.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_23.setDataClassifications((java.util.List<java.lang.String>) strList27);
        postTag22.PickListValues = strList27;
        getChartDataV2_14.SamplingContextTagIds = strList27;
        getSpecimens10.ActivityTypes = strList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str35 = getChartDataV2_34.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_34.setFilterId("");
        java.util.List<java.lang.String> strList38 = getChartDataV2_34.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList41 = getObservationsV2_40.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        getObservationsV2_40.ResultGrades = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems58 = getExtendedAttributeDropdownlistitems39.setSearch((java.util.List<java.lang.String>) strList53);
        getChartDataV2_34.ObservedPropertyIds = strList53;
        getChartDataV2_34.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList63 = getExportObservations62.getLabReportIds();
        java.lang.String str64 = getExportObservations62.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj66 = getActivityTemplates65.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        getActivityTemplates65.Type = strList78;
        getExportObservations62.AnalyticalGroupIds = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_84 = getChartDataV2_34.setAnalysisMethodIds((java.util.List<java.lang.String>) strList78);
        getLabAnalysisMethods33.ObservedPropertyIds = strList78;
        getSpecimens10.FieldTripIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj89 = timeAlignedDataServiceRequest88.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse90 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant91 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse92 = locationDescriptionListServiceResponse90.setNextToken(instant91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest93 = timeAlignedDataServiceRequest88.setQueryFrom(instant91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription94 = timeSeriesDescription87.setRawStartTime(instant91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens95 = getSpecimens10.setBefore(instant91);
        timeSeriesApprovalsTransactionListServiceRequest9.QueryTo = instant91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest98 = timeSeriesApprovalsTransactionListServiceRequest9.setTimeSeriesUniqueId("'.'SSSSSSS");
        java.time.Instant instant99 = timeSeriesApprovalsTransactionListServiceRequest98.QueryTo;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(getSpecimens13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(getChartDataV2_17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(double21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems58);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(getChartDataV2_84);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse92);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest93);
        org.junit.Assert.assertNotNull(timeSeriesDescription94);
        org.junit.Assert.assertNotNull(getSpecimens95);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest98);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test52602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52602");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate[] labInstructionTemplateArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate>) labInstructionTemplateList4, labInstructionTemplateArray3);
        specimenTemplate0.LabInstructionTemplates = labInstructionTemplateList4;
        specimenTemplate0.FiltrationComment = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = specimenTemplate0.setFiltered((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(labInstructionTemplateArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(specimenTemplate10);
    }

    @Test
    public void test52603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52603");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty0.Name = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup3 = putObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType4 = putObservedProperty0.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty6 = putObservedProperty0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit7 = putObservedProperty0.DefaultUnit;
        org.junit.Assert.assertNull(unitGroup3);
        org.junit.Assert.assertNull(resultType4);
        org.junit.Assert.assertNotNull(putObservedProperty6);
        org.junit.Assert.assertNull(unit7);
    }

    @Test
    public void test52604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52604");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList1 = getExportSamplingLocations0.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList5 = locationDescriptionListServiceResponse4.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant7 = ratingCurveListServiceRequest6.QueryTo;
        java.lang.String str8 = ratingCurveListServiceRequest6.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType21 = null;
        controlConditionActivity20.ControlCleaned = controlCleanedType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        controlConditionActivity20.DateCleaned = instant24;
        timeAlignedDataServiceRequest19.QueryFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse9.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest29 = ratingCurveListServiceRequest6.setQueryTo(instant24);
        java.time.Instant instant30 = ratingCurveListServiceRequest29.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse4.setNextToken(instant30);
        getExportSamplingLocations0.StartModificationTime = instant30;
        java.time.Instant instant33 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str36 = getActivities35.getCustomId();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = getActivities35.setFromStartTime(instant37);
        putRecurringReport34.NextGenerationDate = instant37;
        getExportSamplingLocations0.EndModificationTime = instant37;
        java.lang.Integer int41 = getExportSamplingLocations0.getLimit();
        java.util.List<java.lang.String> strList42 = getExportSamplingLocations0.getLocationTypeIds();
        java.util.List<java.lang.String> strList43 = getExportSamplingLocations0.Search;
        java.lang.Integer int44 = getExportSamplingLocations0.Limit;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNull(locationDescriptionList5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(getActivities38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(int44);
    }

    @Test
    public void test52605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52605");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = samplingPlanPlannedActivity1.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = auditAttributes4.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity3.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = samplingPlanPlannedActivity3.AuditAttributes;
        putAccessGroup0.AuditAttributes = auditAttributes8;
        java.lang.String str10 = putAccessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup12 = putAccessGroup0.setName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup14 = putAccessGroup12.setCanEditAllData((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup16 = putAccessGroup12.setCanEditAllData((java.lang.Boolean) true);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList17 = putAccessGroup12.SamplingLocationGroups;
        java.lang.String str18 = putAccessGroup12.Name;
        java.lang.String str19 = putAccessGroup12.getId();
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity3);
        org.junit.Assert.assertNotNull(auditAttributes6);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putAccessGroup12);
        org.junit.Assert.assertNotNull(putAccessGroup14);
        org.junit.Assert.assertNotNull(putAccessGroup16);
        org.junit.Assert.assertNull(samplingLocationGroupList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "https" + "'", str18, "https");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test52606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52606");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = postObservationV2_8.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_11 = postObservationV2_8.setLabResultDetails(labResultDetails10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = postObservationV2_11.getObservedProperty();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(plannedFieldResult9);
        org.junit.Assert.assertNotNull(postObservationV2_11);
        org.junit.Assert.assertNull(observedProperty12);
    }

    @Test
    public void test52607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52607");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList6 = postCalculatedDerivedTimeSeries5.TimeSeriesUniqueIds;
        java.lang.String str7 = postCalculatedDerivedTimeSeries5.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries5.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str10 = postCalculatedDerivedTimeSeries9.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart13 = inputPart11.setHeaders((java.lang.Object) interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries9.setInterpolationType(interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase15 = putParameter0.setInterpolationType(interpolationType12);
        java.lang.String str16 = parameterBase15.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = parameterBase15.setMaxValue((java.lang.Double) (-1.0d));
        parameterBase15.MaxValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase22 = parameterBase15.setUnitIdentifier("'.'SSSSSSS");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(parameterBase15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase22);
    }

    @Test
    public void test52608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52608");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList36 = getGroupedObservationsV2_26.LabResultLabAnalysisMethodIds;
        getGroupedObservationsV2_26.SpecimenName = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_40 = getGroupedObservationsV2_26.setDepthUnitId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<java.lang.String> strList41 = getGroupedObservationsV2_40.getLabResultLaboratoryIds();
        java.util.List<java.lang.String> strList42 = getGroupedObservationsV2_40.LabResultLaboratoryIds;
        java.lang.String str43 = getGroupedObservationsV2_40.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str45 = referencePoint44.Name;
        java.time.Instant instant46 = referencePoint44.getPrimarySinceDate();
        java.lang.Double double47 = referencePoint44.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList48 = referencePoint44.ReferencePointPeriods;
        java.time.Instant instant49 = referencePoint44.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        postRecurringReport52.NextGenerationDate = instant56;
        java.time.Instant instant59 = postRecurringReport52.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset60 = statisticalDateTimeOffset51.setDateTimeOffset(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest61 = ratingModelEffectiveShiftsByStageValuesServiceRequest50.setMeasurementTime(instant59);
        referencePoint44.DecommissionedDate = instant59;
        getGroupedObservationsV2_40.StartModificationTime = instant59;
        getGroupedObservationsV2_40.ActivityCustomId = "multipart/form-data; boundary=****4e5cd403-2823-4e43-9a3f-5d99e3f50f4e****";
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(double47);
        org.junit.Assert.assertNull(referencePointPeriodList48);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset60);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest61);
    }

    @Test
    public void test52609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52609");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType3 = putUnitGroupWithUnit0.SystemCode;
        java.lang.String str4 = putUnitGroupWithUnit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        putUnitGroupWithUnit0.SystemCode = unitGroupSystemCodeType5;
        java.lang.Boolean boolean7 = putUnitGroupWithUnit0.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit9 = putUnitGroupWithUnit0.setCustomId("multipart/form-data; boundary=****022375a8-70cd-4ba3-9c8e-31a17ba81297****");
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNull(unitGroupSystemCodeType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit9);
    }

    @Test
    public void test52610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52610");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData();
        java.lang.String str8 = iceCoveredData7.IceAssemblyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = volumetricDischargeReading9.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        adcpDischargeActivity11.TransducerDepth = quantityWithDisplay12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary14.BaseFlow = baseFlowType19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary14.DischargeUncertainty = dischargeUncertainty21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary23.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary23.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = dischargeSummary23.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = doubleWithDisplay27.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary23.setDurationInHours(doubleWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty31 = dischargeUncertainty21.setQuantitativeUncertainty(doubleWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity32 = adcpDischargeActivity11.setTopEstimateExponent(doubleWithDisplay27);
        java.lang.String str33 = adcpDischargeActivity11.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant35 = crossSectionSurveyActivity34.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str37 = pointVelocityDischargeActivity36.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity36.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity36.setSoftwareVersion("");
        java.lang.String str42 = pointVelocityDischargeActivity41.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity41.StartPoint = startPointType43;
        crossSectionSurveyActivity34.StartingPoint = startPointType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant47 = crossSectionSurveyActivity46.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str49 = pointVelocityDischargeActivity48.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity48.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity48.setSoftwareVersion("");
        java.lang.String str54 = pointVelocityDischargeActivity53.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType55 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity53.StartPoint = startPointType55;
        crossSectionSurveyActivity46.StartingPoint = startPointType55;
        crossSectionSurveyActivity34.StartingPoint = startPointType55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity34.Stage = datumConvertedQuantityWithDisplay59;
        adcpDischargeActivity11.DischargeCoefficientVariation = datumConvertedQuantityWithDisplay59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading62 = volumetricDischargeReading9.setDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay59);
        iceCoveredData7.IceThickness = datumConvertedQuantityWithDisplay59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData65 = iceCoveredData7.setUnderIceCoefficient((java.lang.Double) (-1.0d));
        java.lang.String str66 = iceCoveredData7.getIceAssemblyType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData68 = iceCoveredData7.setUnderIceCoefficient((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical69 = vertical0.setIceCoveredData(iceCoveredData68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType70 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical71 = vertical69.setVerticalType(verticalType70);
        java.lang.String str72 = vertical71.Comments;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + baseFlowType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(doubleWithDisplay26);
        org.junit.Assert.assertNotNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(dischargeUncertainty31);
        org.junit.Assert.assertNotNull(adcpDischargeActivity32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + startPointType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + startPointType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType55.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(volumetricDischargeReading62);
        org.junit.Assert.assertNotNull(iceCoveredData65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(iceCoveredData68);
        org.junit.Assert.assertNotNull(vertical69);
        org.junit.Assert.assertNotNull(vertical71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test52611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52611");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddData;
        java.lang.Boolean boolean3 = role0.CanEditAppendConfigurations;
        java.lang.Boolean boolean4 = role0.isCanEditLocationDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role6 = role0.setCanEditLocationDetails((java.lang.Boolean) false);
        role0.UniqueId = "-PT87591240H";
        java.lang.String str9 = role0.Name;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(role6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test52612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52612");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.time.Instant instant49 = putBulkEditResultGradesV2_0.EndObservedTime;
        java.util.List<java.lang.String> strList50 = putBulkEditResultGradesV2_0.Media;
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNull(strList50);
    }

    @Test
    public void test52613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52613");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Boolean boolean3 = roleBase2.CanAssignUserRoles;
        java.lang.Boolean boolean4 = roleBase2.isCanRemoveFieldVisits();
        java.lang.Boolean boolean5 = roleBase2.isCanAddAppendConfigurations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase7 = roleBase2.setCanAddOrRemoveLocations((java.lang.Boolean) true);
        java.lang.Boolean boolean8 = roleBase7.CanEditData;
        java.lang.Boolean boolean9 = roleBase7.CanAddAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase11 = roleBase7.setCanEditLocationDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean12 = roleBase11.CanAddData;
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(roleBase7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(roleBase11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test52614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52614");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        putExtendedAttribute65.Mandatory = true;
        java.lang.String str68 = putExtendedAttribute65.getCustomId();
        putExtendedAttribute65.Mandatory = false;
        java.lang.String str71 = putExtendedAttribute65.Id;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList72 = putExtendedAttribute65.DropDownListItems;
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(extendedAttributeListItemList72);
    }

    @Test
    public void test52615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52615");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str1 = domainObjectAttachment0.getId();
        java.lang.String str2 = domainObjectAttachment0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment4 = domainObjectAttachment0.setAttachment(attachment3);
        domainObjectAttachment0.Id = "MinInstant";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(domainObjectAttachment4);
    }

    @Test
    public void test52616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52616");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.lang.String str1 = noteOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        java.time.Instant instant15 = metadataChangeTransactionListServiceRequest14.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str17 = ratingModelEffectiveShiftsServiceRequest16.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest19 = ratingModelEffectiveShiftsServiceRequest16.setRatingModelIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.String str21 = referencePointBase20.LocationUniqueId;
        java.lang.String str22 = referencePointBase20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList24 = getExportSpecimens23.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant26 = qualifier25.DateApplied;
        java.lang.String str27 = qualifier25.User;
        java.lang.String str28 = qualifier25.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier35 = qualifier25.setDateApplied(instant32);
        getExportSpecimens23.Before = instant32;
        java.util.List<java.lang.String> strList37 = getExportSpecimens23.getLaboratoryIds();
        java.util.List<java.lang.String> strList38 = getExportSpecimens23.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType40 = samplingPlanPlannedActivityRecurrence39.RecurrenceFrequency;
        java.util.List<java.lang.String> strList41 = samplingPlanPlannedActivityRecurrence39.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier44 = putQualifier42.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest45.setTimeSeriesUniqueIds(strList57);
        putQualifier42.GroupIdentifiers = strList57;
        java.util.ArrayList<java.lang.String> strList63 = putQualifier42.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence39.MonthsOfYear = strList63;
        getExportSpecimens23.ActivityTypes = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens67 = getExportSpecimens23.setCursor("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = dischargeSummary69.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse72.setNextToken(instant73);
        dischargeSummary69.MeasurementTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = locationDescriptionListServiceResponse68.setNextToken(instant73);
        java.time.Instant instant77 = locationDescriptionListServiceResponse68.getNextToken();
        java.time.Instant instant78 = locationDescriptionListServiceResponse68.getNextToken();
        getExportSpecimens67.StartModificationTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase80 = referencePointBase20.setPrimarySinceDate(instant78);
        ratingModelEffectiveShiftsServiceRequest16.QueryTo = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest82 = metadataChangeTransactionListServiceRequest14.setQueryTo(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation83 = noteOperation0.setDateAppliedUtc(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation85 = noteOperation0.setUser("2021.8.9990");
        java.lang.String str86 = noteOperation0.getUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(qualifier35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(recurrenceFrequencyType40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(putQualifier44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(getExportSpecimens67);
        org.junit.Assert.assertNotNull(dischargeSummary71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(referencePointBase80);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest82);
        org.junit.Assert.assertNotNull(noteOperation83);
        org.junit.Assert.assertNotNull(noteOperation85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2021.8.9990" + "'", str86, "2021.8.9990");
    }

    @Test
    public void test52617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52617");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = roleFlattened0.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str5 = deleteFieldVisits4.Sort;
        deleteFieldVisits4.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        java.util.List<java.lang.String> strList15 = getObservationsV2_8.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        getObservationsV2_8.StartResultTime = instant19;
        java.lang.String[] strArray31 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_8.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits4.PlanningStatuses = strList32;
        roleFlattened0.RoleApprovalTransitions = strList32;
        java.lang.Boolean boolean37 = roleFlattened0.isCanReadData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str39 = getChartDataV2_38.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = getChartDataV2_38.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList43 = getObservationsV2_42.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        getObservationsV2_42.ResultGrades = strList55;
        java.lang.Double double60 = getObservationsV2_42.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str62 = deleteFieldVisits61.Sort;
        deleteFieldVisits61.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_65.setDataClassifications((java.util.List<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList72 = getObservationsV2_65.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary73.Reviewer = "";
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary73.MeasurementTime = instant76;
        getObservationsV2_65.StartResultTime = instant76;
        java.lang.String[] strArray88 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_65.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList89);
        deleteFieldVisits61.PlanningStatuses = strList89;
        getObservationsV2_42.Media = strList89;
        getChartDataV2_38.SpecimenIds = strList89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase95 = roleFlattened0.setRoleApprovalTransitions(strList89);
        java.util.ArrayList<java.lang.String> strList96 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase97 = roleFlattenedBase95.setRoleApprovalTransitions(strList96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase99 = roleFlattenedBase97.setCanAddAppendConfigurations((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(getChartDataV2_41);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(roleFlattenedBase95);
        org.junit.Assert.assertNotNull(roleFlattenedBase97);
        org.junit.Assert.assertNotNull(roleFlattenedBase99);
    }

    @Test
    public void test52618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52618");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened putRoleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = putRoleFlattened0.setCanEditLocationDetails((java.lang.Boolean) true);
        java.lang.Object obj3 = putRoleFlattened0.getResponseType();
        java.lang.Boolean boolean4 = putRoleFlattened0.isCanReadData();
        putRoleFlattened0.CanRemoveFieldVisits = true;
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test52619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52619");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        java.lang.Object obj53 = importItem35.getExistingItem();
        java.util.List<java.lang.String> strList54 = importItem35.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        java.util.List<java.lang.String> strList71 = getObservationsV2_56.getLabReportIds();
        importItem55.Errors = getObservationsV2_56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList74 = getObservationsV2_73.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.QualityControlTypes = strList86;
        getObservationsV2_73.ResultGrades = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem91 = importItem55.setFields((java.util.List<java.lang.String>) strList86);
        importItem35.Fields = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_34.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_95 = putBulkEditResultGradesV2_34.setNumericResultValue((java.lang.Double) 100.0d);
        java.lang.String str96 = putBulkEditResultGradesV2_95.SpecimenName;
        java.lang.String str97 = putBulkEditResultGradesV2_95.getActivityCustomId();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(importItem91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test52620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52620");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = specimen2.Laboratory;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = specimen2.getExtendedAttributes();
        specimen2.FiltrationComment = "/AQUARIUS/Publish/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = specimen2.getLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        java.lang.String str12 = laboratory8.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory14 = laboratory8.setPhoneNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen15 = specimen2.setLaboratory(laboratory14);
        java.lang.Integer int16 = specimen2.NumberOfReceivedObservations;
        java.lang.Integer int17 = specimen2.getNumberOfReceivedObservations();
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(laboratory3);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNull(laboratory7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(laboratory14);
        org.junit.Assert.assertNotNull(specimen15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test52621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52621");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        java.lang.String str1 = putTag0.Name;
        java.lang.String str2 = putTag0.getName();
        java.lang.String str3 = putTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = putTag0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag6 = putTag0.setDescription("MaxInstant");
        putTag6.Name = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str9 = putTag6.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNotNull(putTag6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MaxInstant" + "'", str9, "MaxInstant");
    }

    @Test
    public void test52622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52622");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str38 = putLocationType37.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        getObservationsV2_45.DepthUnitCustomId = "hi!";
        java.lang.String str48 = getObservationsV2_45.CustomId;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.QualityControlTypes = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_45.setMedia((java.util.List<java.lang.String>) strList61);
        putLocationType37.ExtendedAttributeDefinitionIds = strList61;
        putBulkEditResultGradesV2_0.LabResultLaboratoryIds = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_69 = putBulkEditResultGradesV2_0.setLimit((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_71 = putBulkEditResultGradesV2_0.setCustomId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_69);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_71);
    }

    @Test
    public void test52623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52623");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        java.lang.String str2 = appliedTag0.Name;
        java.lang.String str3 = appliedTag0.Name;
        java.lang.String str4 = appliedTag0.getKey();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test52624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52624");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.lang.String str3 = getObservationExportIIV2_0.FilterId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getLabReportIds();
        importItem4.Errors = getObservationsV2_5;
        java.lang.Object obj22 = importItem4.getExistingItem();
        importItem4.Input = "hi!";
        java.lang.Object obj25 = importItem4.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem27 = importItem4.setStatus(importItemStatusType26);
        importItem27.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate30.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = specimenTemplate30.setId("hi!");
        java.lang.Boolean boolean35 = specimenTemplate34.getFiltered();
        importItem27.Item = specimenTemplate34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        postTag38.PickListValues = strList43;
        java.util.ArrayList<java.lang.String> strList47 = postTag38.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor48 = processor37.setInputTimeSeriesUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem49 = importItem27.setWarningMessages((java.util.List<java.lang.String>) strList47);
        java.util.List<java.lang.String> strList50 = importItem27.getWarningMessages();
        getObservationExportIIV2_0.AnalysisMethodSimpleIds = strList50;
        java.lang.String str52 = getObservationExportIIV2_0.Sort;
        java.time.Instant instant53 = getObservationExportIIV2_0.EndModificationTime;
        java.lang.Double double54 = getObservationExportIIV2_0.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_56 = getObservationExportIIV2_0.setSpecimenName("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + importItemStatusType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem27);
        org.junit.Assert.assertNotNull(specimenTemplate34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(processor48);
        org.junit.Assert.assertNotNull(importItem49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(instant53);
        org.junit.Assert.assertNull(double54);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_56);
    }

    @Test
    public void test52625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52625");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = postFilter0.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = postFilter2.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime4 = postFilter2.StartTime;
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter6 = postFilter2.setEndTime(offsetDateTime5);
        java.lang.String str7 = postFilter2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList10 = postAnalysisMethod9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15, observedPropertyArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod13.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        postAnalysisMethod9.ObservedProperties = observedPropertyList15;
        java.lang.String str19 = postAnalysisMethod9.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = postAnalysisMethod20.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = postLabAnalysisMethod22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList26, observedPropertyArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod28 = postLabAnalysisMethod24.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList26);
        postAnalysisMethod20.ObservedProperties = observedPropertyList26;
        postAnalysisMethod9.ObservedProperties = observedPropertyList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod31 = putLabAnalysisMethod8.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList26);
        putLabAnalysisMethod31.MethodId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str35 = shippingContainer34.TrackingId;
        shippingContainer34.TrackingId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str38 = shippingContainer34.TrackingId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = putUnit39.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = putDetectioncondition41.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition44 = putDetectioncondition41.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = samplingPlanPlannedActivity45.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = auditAttributes48.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity47.AuditAttributes = auditAttributes48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = samplingPlanPlannedActivity47.AuditAttributes;
        putDetectioncondition41.AuditAttributes = auditAttributes52;
        putUnit39.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes52.setCreationUserProfileId("http");
        shippingContainer34.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod58 = putLabAnalysisMethod31.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = putAnalysisMethod59.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod62 = putAnalysisMethod59.setMethodId("hi!:///AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList63 = putAnalysisMethod59.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList65 = postAnalysisMethod64.ImportHistoryEventSimples;
        java.lang.String str66 = postAnalysisMethod64.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod68 = postAnalysisMethod64.setId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod70 = postAnalysisMethod64.setContext("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList71 = postAnalysisMethod64.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter74 = filter72.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter76 = filter74.setId("POST");
        filter76.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList79 = filter76.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter81 = filter76.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod84 = postLabAnalysisMethod82.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList86 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86, observedPropertyArray85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod88 = postLabAnalysisMethod84.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod90 = postLabAnalysisMethod84.setAuditAttributes(auditAttributes89);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList91 = postLabAnalysisMethod90.getObservedProperties();
        filter81.ObservedProperties = observedPropertyList91;
        postAnalysisMethod64.ObservedProperties = observedPropertyList91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod94 = putAnalysisMethod59.setObservedProperties(observedPropertyList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod95 = putLabAnalysisMethod31.setObservedProperties(observedPropertyList91);
        java.lang.String str96 = putLabAnalysisMethod95.getMethodId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList97 = putLabAnalysisMethod95.ObservedProperties;
        postFilter2.ObservedProperties = observedPropertyList97;
        org.junit.Assert.assertNotNull(postFilter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(postFilter6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(observedPropertyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod24);
        org.junit.Assert.assertNotNull(observedPropertyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod28);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str38, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(putDetectioncondition44);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity47);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod58);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertNotNull(putAnalysisMethod62);
        org.junit.Assert.assertNull(importHistoryEventSimpleList63);
        org.junit.Assert.assertNull(importHistoryEventSimpleList65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(postAnalysisMethod68);
        org.junit.Assert.assertNotNull(postAnalysisMethod70);
        org.junit.Assert.assertNull(observedPropertyList71);
        org.junit.Assert.assertNotNull(filter74);
        org.junit.Assert.assertNotNull(filter76);
        org.junit.Assert.assertNull(observedPropertyList79);
        org.junit.Assert.assertNotNull(filter81);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod84);
        org.junit.Assert.assertNotNull(observedPropertyArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod88);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod90);
        org.junit.Assert.assertNotNull(observedPropertyList91);
        org.junit.Assert.assertNotNull(putAnalysisMethod94);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "'.'SSSSSSS" + "'", str96, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(observedPropertyList97);
    }

    @Test
    public void test52626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52626");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint8.setApprovalLevel2((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint13.setApprovalLevel4((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint13.setMethod4("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
    }

    @Test
    public void test52627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52627");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.Double double1 = referencePointBase0.Longitude;
        java.time.Instant instant2 = referencePointBase0.getPrimarySinceDate();
        referencePointBase0.LocationUniqueId = "MinDuration";
        java.time.Instant instant5 = referencePointBase0.getPrimarySinceDate();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test52628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52628");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary1 = dischargeActivity0.DischargeSummary;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList2 = dischargeActivity0.VolumetricDischargeActivities;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList3 = dischargeActivity0.VolumetricDischargeActivities;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList4 = dischargeActivity0.getEngineeredStructureDischargeActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList7, adcpDischargeActivityArray6);
        dischargeActivity5.AdcpDischargeActivities = adcpDischargeActivityList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList11, engineeredStructureDischargeActivityArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity13 = dischargeActivity5.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList11);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList14 = dischargeActivity13.EngineeredStructureDischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList17, adcpDischargeActivityArray16);
        dischargeActivity15.AdcpDischargeActivities = adcpDischargeActivityList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity20 = dischargeActivity13.setAdcpDischargeActivities(adcpDischargeActivityList17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity21 = dischargeActivity0.setAdcpDischargeActivities(adcpDischargeActivityList17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList24, adcpDischargeActivityArray23);
        dischargeActivity22.AdcpDischargeActivities = adcpDischargeActivityList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList28, engineeredStructureDischargeActivityArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity30 = dischargeActivity22.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList28);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList31 = dischargeActivity30.EngineeredStructureDischargeActivities;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList32 = dischargeActivity30.getEngineeredStructureDischargeActivities();
        dischargeActivity0.EngineeredStructureDischargeActivities = engineeredStructureDischargeActivityList32;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList34 = dischargeActivity0.getAdcpDischargeActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeActivity0.DischargeSummary;
        org.junit.Assert.assertNull(dischargeSummary1);
        org.junit.Assert.assertNull(volumetricDischargeActivityList2);
        org.junit.Assert.assertNull(volumetricDischargeActivityList3);
        org.junit.Assert.assertNull(engineeredStructureDischargeActivityList4);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dischargeActivity13);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList14);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dischargeActivity20);
        org.junit.Assert.assertNotNull(dischargeActivity21);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dischargeActivity30);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList31);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList32);
        org.junit.Assert.assertNotNull(adcpDischargeActivityList34);
        org.junit.Assert.assertNull(dischargeSummary35);
    }

    @Test
    public void test52629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52629");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin();
        putFieldDataPlugin0.PluginPriority = 100;
        putFieldDataPlugin0.IsEnabled = true;
        putFieldDataPlugin0.IsEnabled = false;
        java.lang.String str7 = putFieldDataPlugin0.getUniqueId();
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test52630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52630");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity0.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium3 = activity0.getMedium();
        org.junit.Assert.assertNull(medium3);
    }

    @Test
    public void test52631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52631");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = dischargeSummary0.isMeanGageHeightWasDatumConverted();
        java.lang.Integer int4 = dischargeSummary0.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary0.setMeasurementId("9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
    }

    @Test
    public void test52632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52632");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList5 = activityWithDetails0.getSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails7 = activityWithDetails0.setId("MaxInstant");
        activityWithDetails0.SourceActivityId = "";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList10 = activityWithDetails0.getObservations();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNull(specimenNestedInActivityList5);
        org.junit.Assert.assertNotNull(activityWithDetails7);
        org.junit.Assert.assertNull(observationMinimalList10);
    }

    @Test
    public void test52633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52633");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str1 = postLocationAttachment0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postLocationAttachment0.getFile();
        java.lang.String str3 = postLocationAttachment0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment6 = postReportAttachment4.setTitle("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment8 = postReportAttachment4.setTitle("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment10 = postReportAttachment4.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment11.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] applyTagRequestArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] { applyTagRequest14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>) applyTagRequestList16, applyTagRequestArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment18 = postReportAttachment11.setTags(applyTagRequestList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment19 = postReportAttachment4.setTags(applyTagRequestList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment20 = postLocationAttachment0.setTags(applyTagRequestList16);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList21 = postLocationAttachment20.getTags();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postReportAttachment6);
        org.junit.Assert.assertNotNull(postReportAttachment8);
        org.junit.Assert.assertNotNull(postReportAttachment10);
        org.junit.Assert.assertNotNull(applyTagRequestArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(postReportAttachment18);
        org.junit.Assert.assertNotNull(postReportAttachment19);
        org.junit.Assert.assertNotNull(postLocationAttachment20);
        org.junit.Assert.assertNotNull(applyTagRequestList21);
    }

    @Test
    public void test52634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52634");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        java.lang.Object obj53 = importItem35.getExistingItem();
        java.util.List<java.lang.String> strList54 = importItem35.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        java.util.List<java.lang.String> strList71 = getObservationsV2_56.getLabReportIds();
        importItem55.Errors = getObservationsV2_56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList74 = getObservationsV2_73.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.QualityControlTypes = strList86;
        getObservationsV2_73.ResultGrades = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem91 = importItem55.setFields((java.util.List<java.lang.String>) strList86);
        importItem35.Fields = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_34.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList86);
        java.time.Instant instant94 = putBulkEditResultGradesV2_93.StartObservedTime;
        putBulkEditResultGradesV2_93.ActivityCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_98 = putBulkEditResultGradesV2_93.setTargetResultGrade("multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****");
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(importItem91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNull(instant94);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_98);
    }

    @Test
    public void test52635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52635");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.lang.String str1 = user0.getCustomId();
        java.util.List<java.lang.String> strList2 = user0.getRoles();
        java.lang.String str3 = user0.getEmail();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList5 = putUserV2_4.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_7 = putUserV2_4.setUserType(userType6);
        user0.UserType = userType6;
        java.lang.String str9 = user0.getCustomId();
        java.lang.String str10 = user0.Id;
        java.util.List<java.lang.String> strList11 = user0.getAccessGroups();
        java.util.List<java.lang.String> strList12 = user0.Roles;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + userType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test52636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52636");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse();
        java.lang.String str2 = fieldVisitDataByLocationServiceResponse1.Summary;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] fieldVisitArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>) fieldVisitList4, fieldVisitArray3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse6 = fieldVisitDataByLocationServiceResponse1.setFieldVisitData(fieldVisitList4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList7 = fieldVisitDataByLocationServiceResponse6.getFieldVisitData();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList8 = fieldVisitDataByLocationServiceResponse6.FieldVisitData;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList9 = fieldVisitDataByLocationServiceResponse6.getFieldVisitData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse10 = fieldVisitDataByLocationServiceResponse0.setFieldVisitData(fieldVisitList9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse();
        java.lang.String str12 = fieldVisitDataByLocationServiceResponse11.Summary;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] fieldVisitArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>) fieldVisitList14, fieldVisitArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse16 = fieldVisitDataByLocationServiceResponse11.setFieldVisitData(fieldVisitList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse17 = fieldVisitDataByLocationServiceResponse10.setFieldVisitData(fieldVisitList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse();
        java.lang.String str19 = fieldVisitDataByLocationServiceResponse18.Summary;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] fieldVisitArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>) fieldVisitList21, fieldVisitArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse23 = fieldVisitDataByLocationServiceResponse18.setFieldVisitData(fieldVisitList21);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList24 = fieldVisitDataByLocationServiceResponse23.getFieldVisitData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse();
        java.lang.String str26 = fieldVisitDataByLocationServiceResponse25.Summary;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] fieldVisitArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit>) fieldVisitList28, fieldVisitArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse30 = fieldVisitDataByLocationServiceResponse25.setFieldVisitData(fieldVisitList28);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit> fieldVisitList31 = fieldVisitDataByLocationServiceResponse30.getFieldVisitData();
        fieldVisitDataByLocationServiceResponse23.FieldVisitData = fieldVisitList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceResponse fieldVisitDataByLocationServiceResponse33 = fieldVisitDataByLocationServiceResponse10.setFieldVisitData(fieldVisitList31);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fieldVisitArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse6);
        org.junit.Assert.assertNotNull(fieldVisitList7);
        org.junit.Assert.assertNotNull(fieldVisitList8);
        org.junit.Assert.assertNotNull(fieldVisitList9);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(fieldVisitArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse16);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(fieldVisitArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse23);
        org.junit.Assert.assertNotNull(fieldVisitList24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(fieldVisitArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse30);
        org.junit.Assert.assertNotNull(fieldVisitList31);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceResponse33);
    }

    @Test
    public void test52637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52637");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean64 = referencePointPeriod63.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod63.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str67 = referencePointPeriod63.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod69 = referencePointPeriod63.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod71 = referencePointPeriod63.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod72 = locationDatumPeriod0.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection73 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod74 = locationDatumPeriod72.setMeasurementDirection(measurementDirection73);
        locationDatumPeriod74.UnitIdentifier = "zZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange77 = locationDatumPeriod74.TimeRange;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(referencePointPeriod69);
        org.junit.Assert.assertTrue("'" + measurementDirection70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(referencePointPeriod71);
        org.junit.Assert.assertNotNull(locationDatumPeriod72);
        org.junit.Assert.assertTrue("'" + measurementDirection73 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection73.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(locationDatumPeriod74);
        org.junit.Assert.assertNull(timeRange77);
    }

    @Test
    public void test52638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52638");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = plannedFieldResult11.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_13 = putObservationV2_2.setPlannedFieldResult(plannedFieldResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = putObservationV2_13.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList16 = importItemTaxon15.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon18 = importItemTaxon15.setItem(taxon17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str20 = postCalculatedDerivedTimeSeries19.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList21 = postCalculatedDerivedTimeSeries19.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon22 = importItemTaxon18.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList24 = importItemObject23.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList26, importChangeItemArray25);
        importItemObject23.ItemComparison = importChangeItemList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject37 = importItemObject23.setExistingItem((java.lang.Object) putLocationTags29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser40 = openIdConnectUser38.setIdentifier("");
        java.lang.Boolean boolean41 = openIdConnectUser40.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject42 = importItemObject23.setErrors((java.lang.Object) openIdConnectUser40);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList43 = importItemObject42.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon44 = importItemTaxon22.setItemComparison(importChangeItemList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList46 = importItemTaxon45.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon48 = importItemTaxon45.setItem(taxon47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str50 = postCalculatedDerivedTimeSeries49.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList51 = postCalculatedDerivedTimeSeries49.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon52 = importItemTaxon48.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon54 = importItemTaxon48.setExistingItem(taxon53);
        importItemTaxon22.Item = taxon53;
        taxon53.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str58 = taxon53.ItisTsn;
        java.lang.String str59 = taxon53.getCommonName();
        java.lang.String str60 = taxon53.getItisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel61 = taxon53.TaxonomyLevel;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon63 = taxon53.setItisTsn("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str64 = taxon53.Id;
        putObservationV2_13.RelatedTaxon = taxon53;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(putObservationV2_13);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(importItemTaxon18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(extendedAttributeValueList21);
        org.junit.Assert.assertNotNull(importItemTaxon22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(importChangeItemArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(importItemObject37);
        org.junit.Assert.assertNotNull(openIdConnectUser40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(importItemObject42);
        org.junit.Assert.assertNotNull(importChangeItemList43);
        org.junit.Assert.assertNotNull(importItemTaxon44);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(importItemTaxon48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(extendedAttributeValueList51);
        org.junit.Assert.assertNotNull(importItemTaxon52);
        org.junit.Assert.assertNotNull(importItemTaxon54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str58, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(taxonomyLevel61);
        org.junit.Assert.assertNotNull(taxon63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test52639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52639");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.RatingModelIdentifier;
        java.time.Instant instant2 = ratingModelEffectiveShiftsServiceRequest0.getQueryFrom();
        java.time.Instant instant3 = ratingModelEffectiveShiftsServiceRequest0.QueryTo;
        java.time.Instant instant4 = ratingModelEffectiveShiftsServiceRequest0.QueryTo;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
    }

    @Test
    public void test52640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52640");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int1 = searchResultObservedProperty0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty3 = searchResultObservedProperty0.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8, observedPropertyArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod6.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = postLabAnalysisMethod6.setAuditAttributes(auditAttributes11);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList13 = postLabAnalysisMethod12.getObservedProperties();
        searchResultObservedProperty0.DomainObjects = observedPropertyList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty16 = searchResultObservedProperty0.setCursor("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.Integer int17 = searchResultObservedProperty16.TotalCount;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultObservedProperty3);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(observedPropertyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod12);
        org.junit.Assert.assertNotNull(observedPropertyList13);
        org.junit.Assert.assertNotNull(searchResultObservedProperty16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test52641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52641");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.String str2 = role0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role4 = role0.setCanEditData((java.lang.Boolean) true);
        role0.CanAddAppendConfigurations = false;
        java.lang.Boolean boolean7 = role0.isCanAddOrRemoveLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long10 = roleApprovalTransition9.getToApprovalLevel();
        java.lang.Long long11 = roleApprovalTransition9.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long13 = roleApprovalTransition12.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition14.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition19 = roleApprovalTransition17.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = roleApprovalTransition17.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long23 = roleApprovalTransition22.getToApprovalLevel();
        java.lang.Long long24 = roleApprovalTransition22.ToApprovalLevel;
        java.lang.Long long25 = roleApprovalTransition22.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long27 = roleApprovalTransition26.getToApprovalLevel();
        java.lang.Long long28 = roleApprovalTransition26.ToApprovalLevel;
        java.lang.Long long29 = roleApprovalTransition26.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition9, roleApprovalTransition12, roleApprovalTransition16, roleApprovalTransition17, roleApprovalTransition22, roleApprovalTransition26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList31, roleApprovalTransitionArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase33 = postRole8.setRoleApprovalTransitions(roleApprovalTransitionList31);
        role0.RoleApprovalTransitions = roleApprovalTransitionList31;
        role0.CanAddOrRemoveLocations = false;
        role0.CanAssignUserRoles = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(role4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNull(long11);
        org.junit.Assert.assertNull(long13);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNotNull(roleApprovalTransition19);
        org.junit.Assert.assertNotNull(roleApprovalTransition21);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNull(long25);
        org.junit.Assert.assertNull(long27);
        org.junit.Assert.assertNull(long28);
        org.junit.Assert.assertNull(long29);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(roleBase33);
    }

    @Test
    public void test52642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52642");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceResponse timeSeriesDescriptionListByUniqueIdServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceResponse();
        java.lang.String str1 = timeSeriesDescriptionListByUniqueIdServiceResponse0.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription[] timeSeriesDescriptionArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription>) timeSeriesDescriptionList3, timeSeriesDescriptionArray2);
        timeSeriesDescriptionListByUniqueIdServiceResponse0.TimeSeriesDescriptions = timeSeriesDescriptionList3;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList6 = timeSeriesDescriptionListByUniqueIdServiceResponse0.TimeSeriesDescriptions;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList7 = timeSeriesDescriptionListByUniqueIdServiceResponse0.getTimeSeriesDescriptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionList6);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionList7);
    }

    @Test
    public void test52643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52643");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        timeAlignedPoint8.GradeCode1 = 1L;
        timeAlignedPoint8.GradeName8 = "POST";
        java.lang.Long long16 = timeAlignedPoint8.ApprovalLevel1;
        java.lang.String str17 = timeAlignedPoint8.DisplayValue1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint8.setMethod5("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint8.setApprovalName4("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint23 = timeAlignedPoint21.setQualifiers5("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        java.lang.String str24 = timeAlignedPoint23.getGradeName8();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(long16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
        org.junit.Assert.assertNotNull(timeAlignedPoint23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "POST" + "'", str24, "POST");
    }

    @Test
    public void test52644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52644");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary2.DifferenceDuringVisit = doubleWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment5 = dischargeSummary2.getAdjustment();
        java.lang.String str6 = dischargeSummary2.getGageHeightComments();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(adjustment5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52645");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.lang.Boolean boolean2 = pointVelocityDischargeActivity0.MeterInspectedAfter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity4 = pointVelocityDischargeActivity0.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        java.lang.String str5 = pointVelocityDischargeActivity0.Model;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test52646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52646");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setLocationName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse5 = locationDataServiceResponse3.setDescription("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        locationDataServiceResponse5.Identifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str8 = locationDataServiceResponse5.LocationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse10 = locationDataServiceResponse5.setDescription("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint> referencePointList11 = locationDataServiceResponse10.getReferencePoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum12 = locationDataServiceResponse10.getLocationDatum();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNotNull(locationDataServiceResponse5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locationDataServiceResponse10);
        org.junit.Assert.assertNull(referencePointList11);
        org.junit.Assert.assertNull(locationDatum12);
    }

    @Test
    public void test52647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52647");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.lang.String str1 = fieldTripBasic0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate2.setAuditAttributes(auditAttributes3);
        java.lang.String str5 = postFieldVisitActivityWithTemplate4.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = postFieldVisitActivityWithTemplate4.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = postFieldVisitActivityWithTemplate4.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str10 = labInstructionTemplate9.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime12 = putSchedule11.StartDate;
        java.time.OffsetDateTime offsetDateTime13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = putSchedule11.setEndDate(offsetDateTime13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = putSchedule14.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime16 = null;
        putSchedule14.LastGenerationDate = offsetDateTime16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType18 = putSchedule14.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = plannedFieldResult19.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails21.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult26 = plannedFieldResult19.setAuditAttributes(auditAttributes24);
        putSchedule14.AuditAttributes = auditAttributes24;
        labInstructionTemplate9.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str30 = labInstructionTemplate29.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime32 = putSchedule31.StartDate;
        java.time.OffsetDateTime offsetDateTime33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule34 = putSchedule31.setEndDate(offsetDateTime33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = putSchedule34.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime36 = null;
        putSchedule34.LastGenerationDate = offsetDateTime36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType38 = putSchedule34.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = plannedFieldResult39.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails41.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails43.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult39.setAuditAttributes(auditAttributes44);
        putSchedule34.AuditAttributes = auditAttributes44;
        labInstructionTemplate29.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate49 = labInstructionTemplate9.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate50 = postFieldVisitActivityWithTemplate4.setAuditAttributes(auditAttributes44);
        fieldTripBasic0.AuditAttributes = auditAttributes44;
        java.time.OffsetDateTime offsetDateTime52 = null;
        fieldTripBasic0.StartTime = offsetDateTime52;
        fieldTripBasic0.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic57 = fieldTripBasic0.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate7);
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(putSchedule14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType18);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(plannedFieldResult26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(putSchedule34);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType38);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(labInstructionTemplate49);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate50);
        org.junit.Assert.assertNotNull(fieldTripBasic57);
    }

    @Test
    public void test52648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52648");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        observation0.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation0.setNumericResult(numericResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod8 = observation7.CollectionMethod;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(collectionMethod8);
    }

    @Test
    public void test52649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52649");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse appendResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse();
        java.lang.String str1 = appendResponse0.getAppendRequestIdentifier();
        java.lang.String str2 = appendResponse0.AppendRequestIdentifier;
        java.lang.String str3 = appendResponse0.AppendRequestIdentifier;
        java.lang.String str4 = appendResponse0.AppendRequestIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test52650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52650");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        java.lang.String str2 = appliedTag0.UniqueId;
        java.lang.String str3 = appliedTag0.getValue();
        java.lang.String str4 = appliedTag0.UniqueId;
        java.lang.String str5 = appliedTag0.Name;
        java.lang.String str6 = appliedTag0.Name;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52651");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        getObservationsV2_0.QualityControlTypes = strList11;
        java.util.List<java.lang.String> strList15 = getObservationsV2_0.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_0.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList19 = fieldVisitDataServiceResponse18.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse21 = fieldVisitDataServiceResponse18.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        fieldVisitDataServiceResponse18.ResponseTime = instant25;
        getObservationsV2_0.StartObservedTime = instant25;
        getObservationsV2_0.Cursor = "/AQUARIUS";
        java.util.List<java.lang.String> strList31 = getObservationsV2_0.getSpecimenIds();
        java.util.List<java.lang.String> strList32 = null;
        getObservationsV2_0.DataClassifications = strList32;
        java.time.Instant instant34 = getObservationsV2_0.StartResultTime;
        java.time.Instant instant35 = null;
        getObservationsV2_0.StartResultTime = instant35;
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList19);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNull(instant34);
    }

    @Test
    public void test52652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52652");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities35.Limit = 10;
        java.util.List<java.lang.String> strList38 = getActivities35.ActivityTemplateId;
        java.lang.String str39 = getActivities35.Sort;
        java.util.List<java.lang.String> strList40 = getActivities35.CollectionMethodIds;
        java.lang.String str41 = getActivities35.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType44 = putUserV2_43.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities56 = getActivities45.setToStartTime(instant55);
        java.lang.String str57 = getActivities56.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList59 = getObservationsV2_58.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        getObservationsV2_58.ResultGrades = strList71;
        getActivities56.Media = strList71;
        putUserV2_43.AccessGroups = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens78 = getSpecimens42.setSamplingLocationIds((java.util.List<java.lang.String>) strList71);
        getActivities35.ActivityTemplateId = strList71;
        getGroupedObservationsV2_34.CollectionMethodIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_82 = getGroupedObservationsV2_34.setFieldVisitId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_84 = getGroupedObservationsV2_82.setDepthUnitId("/AQUARIUS/Provisioning/v1");
        java.time.Instant instant85 = getGroupedObservationsV2_82.getStartModificationTime();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(userType44);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(getActivities56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(getSpecimens78);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_82);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_84);
        org.junit.Assert.assertNull(instant85);
    }

    @Test
    public void test52653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52653");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase2 = postLocation0.setLocationType("hi!");
        postLocation0.UtcOffset = "/AQUARIUS/Acquisition/v2";
        java.lang.String str5 = postLocation0.getUtcOffset();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postLocation0.ExtendedAttributeValues;
        org.junit.Assert.assertNotNull(locationBase2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(extendedAttributeValueList6);
    }

    @Test
    public void test52654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52654");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.CustomId;
        java.lang.String str2 = putLabReport0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod6 = postActivity3.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str8 = postAccessGroup7.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = locationGroupType9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType12 = locationGroupType9.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        locationGroupType12.AuditAttributes = auditAttributes44;
        postAccessGroup7.AuditAttributes = auditAttributes44;
        postActivity3.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport49 = putLabReport0.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = putLabReport49.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport52 = putLabReport49.setId("****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(collectionMethod6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNotNull(locationGroupType12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(putLabReport49);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(putLabReport52);
    }

    @Test
    public void test52655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52655");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription28.setRawStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = statisticalDateTimeOffset18.setDateTimeOffset(instant32);
        timeSeries0.LastModifiedTime = instant32;
        timeSeries0.ComputationIdentifier = "https";
        java.lang.Boolean boolean40 = timeSeries0.isPublish();
        timeSeries0.LocationUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries44 = timeSeries0.setUnit("http://MaxDurationhttp/json/reply/Integer");
        timeSeries0.LocationName = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        timeSeries0.LocationUniqueId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries50 = timeSeries0.setLabel("ZZZZZ");
        java.lang.String str51 = timeSeries0.getLocationName();
        timeSeries0.LocationIdentifier = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset36);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
        org.junit.Assert.assertNotNull(timeSeries44);
        org.junit.Assert.assertNotNull(timeSeries50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****" + "'", str51, "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
    }

    @Test
    public void test52656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52656");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = postFieldVisit0.getSamplingPlan();
        java.lang.String str4 = postFieldVisit0.getNotes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent8 = importHistoryEvent6.setImportTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent10 = importHistoryEvent8.setImportType(importType9);
        importHistoryEvent8.TimeZoneOffset = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent13 = labReportImportHistoryEvent5.setImportHistoryEvent(importHistoryEvent8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory15.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory19 = laboratory15.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport20 = labReport14.setLaboratory(laboratory19);
        java.lang.String str21 = labReport20.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReport20.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime24 = null;
        labReport23.DateReceived = offsetDateTime24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = labReport23.setCustomId("MinInstant");
        java.time.OffsetDateTime offsetDateTime28 = null;
        labReport23.DateReceived = offsetDateTime28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent30 = labReportImportHistoryEvent5.setLabReport(labReport23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport31 = labReportImportHistoryEvent5.LabReport;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        postLabReport32.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime36 = putFieldTrip35.StartTime;
        java.time.OffsetDateTime offsetDateTime37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip38 = putFieldTrip35.setStartTime(offsetDateTime37);
        java.time.OffsetDateTime offsetDateTime39 = null;
        putFieldTrip35.StartTime = offsetDateTime39;
        java.time.OffsetDateTime offsetDateTime41 = null;
        putFieldTrip35.StartTime = offsetDateTime41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str45 = domainObjectAttachment44.getId();
        java.lang.String str46 = domainObjectAttachment44.getId();
        domainObjectAttachment44.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = domainObjectAttachment44.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = domainObjectAttachment50.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str54 = domainObjectAttachment53.getId();
        java.lang.String str55 = domainObjectAttachment53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment50, domainObjectAttachment53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList57, domainObjectAttachmentArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit59 = fieldVisit43.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList57);
        putFieldTrip35.Attachments = domainObjectAttachmentList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport61 = postLabReport32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList57);
        labReport31.Attachments = domainObjectAttachmentList57;
        postFieldVisit0.Attachments = domainObjectAttachmentList57;
        org.junit.Assert.assertNull(samplingPlan3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importHistoryEvent8);
        org.junit.Assert.assertTrue("'" + importType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent10);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent13);
        org.junit.Assert.assertNotNull(laboratory19);
        org.junit.Assert.assertNotNull(labReport20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(labReport23);
        org.junit.Assert.assertNotNull(labReport27);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent30);
        org.junit.Assert.assertNotNull(labReport31);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(putFieldTrip38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(domainObjectAttachment50);
        org.junit.Assert.assertNotNull(domainObjectAttachment52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(fieldVisit59);
        org.junit.Assert.assertNotNull(postLabReport61);
    }

    @Test
    public void test52657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52657");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int1 = gradeOperation0.StackPosition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation3 = gradeOperation0.setUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        gradeOperation3.GradeCode = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        gradeOperation3.GradeCode = "/AQUARIUS";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(gradeOperation3);
    }

    @Test
    public void test52658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52658");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark35.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark40 = locationRemark38.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        locationRemark40.FromTime = instant42;
        locationRemark37.CreateTime = instant42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = putBulkEditResultGradesV2_34.setEndModificationTime(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant48 = ratingCurveListServiceRequest47.QueryTo;
        java.lang.String str49 = ratingCurveListServiceRequest47.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary51.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        dischargeSummary51.MeasurementTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse50.setNextToken(instant55);
        java.time.Instant instant59 = locationDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType62 = null;
        controlConditionActivity61.ControlCleaned = controlCleanedType62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = locationDescriptionListServiceResponse64.setNextToken(instant65);
        controlConditionActivity61.DateCleaned = instant65;
        timeAlignedDataServiceRequest60.QueryFrom = instant65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse50.setNextToken(instant65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest70 = ratingCurveListServiceRequest47.setQueryTo(instant65);
        java.time.Instant instant71 = ratingCurveListServiceRequest70.getQueryTo();
        putBulkEditResultGradesV2_46.StartModificationTime = instant71;
        java.util.List<java.lang.String> strList73 = putBulkEditResultGradesV2_46.Search;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNotNull(locationRemark40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse66);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test52659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52659");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip2 = getFieldTrip0.setId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.String str3 = getFieldTrip0.getId();
        org.junit.Assert.assertNotNull(getFieldTrip2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****" + "'", str3, "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
    }

    @Test
    public void test52660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52660");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        searchResultAttachment0.Cursor = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment5.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] attachmentArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList10, attachmentArray9);
        searchResultAttachment8.DomainObjects = attachmentList10;
        searchResultAttachment5.DomainObjects = attachmentList10;
        searchResultAttachment0.DomainObjects = attachmentList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment16 = searchResultAttachment0.setTotalCount((java.lang.Integer) 4);
        java.lang.String str17 = searchResultAttachment16.Cursor;
        org.junit.Assert.assertNotNull(attachmentArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(searchResultAttachment16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/AQUARIUS" + "'", str17, "/AQUARIUS");
    }

    @Test
    public void test52661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52661");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        java.lang.String str1 = fieldVisitDataByLocationServiceRequest0.getConvertToStandardReferenceDatum();
        java.lang.Boolean boolean2 = fieldVisitDataByLocationServiceRequest0.isIncludeInvalidActivities();
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest6 = fieldVisitDataByLocationServiceRequest4.setIncludeNodeDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList7 = fieldVisitDataByLocationServiceRequest6.getActivities();
        java.lang.Boolean boolean8 = fieldVisitDataByLocationServiceRequest6.isConvertToLocalAssumedDatum();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType> inspectionTypeList9 = fieldVisitDataByLocationServiceRequest6.InspectionTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType11, activityType12, activityType13, activityType14, activityType15, activityType16, activityType17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList19, activityTypeArray18);
        fieldVisitDataByLocationServiceRequest10.Activities = activityTypeList19;
        fieldVisitDataByLocationServiceRequest6.Activities = activityTypeList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest23 = fieldVisitDataByLocationServiceRequest0.setActivities(activityTypeList19);
        java.lang.Boolean boolean24 = fieldVisitDataByLocationServiceRequest23.isIncludeInvalidActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Inspection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType32 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.ControlCondition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType25, activityType26, activityType27, activityType28, activityType29, activityType30, activityType31, activityType32, activityType33, activityType34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList36, activityTypeArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest38 = fieldVisitDataByLocationServiceRequest23.setActivities(activityTypeList36);
        java.lang.Boolean boolean39 = fieldVisitDataByLocationServiceRequest23.isIncludeNodeDetails();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest6);
        org.junit.Assert.assertNull(activityTypeList7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(inspectionTypeList9);
        org.junit.Assert.assertTrue("'" + activityType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment + "'", activityType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment));
        org.junit.Assert.assertTrue("'" + activityType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow + "'", activityType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow));
        org.junit.Assert.assertTrue("'" + activityType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertNotNull(activityTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + activityType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Inspection + "'", activityType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Inspection));
        org.junit.Assert.assertTrue("'" + activityType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertTrue("'" + activityType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp + "'", activityType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp));
        org.junit.Assert.assertTrue("'" + activityType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertTrue("'" + activityType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp + "'", activityType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeAdcp));
        org.junit.Assert.assertTrue("'" + activityType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType32.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertTrue("'" + activityType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.ControlCondition + "'", activityType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.ControlCondition));
        org.junit.Assert.assertNotNull(activityTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest38);
        org.junit.Assert.assertNull(boolean39);
    }

    @Test
    public void test52662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52662");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = noteOperation0.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark4 = locationRemark2.setDescription("MaxInstant");
        java.lang.String str5 = locationRemark4.getTypeName();
        java.time.Instant instant6 = locationRemark4.CreateTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark8 = locationRemark4.setTypeName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str10 = referencePointPeriod9.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase12 = referencePointPeriod9.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod9.Uncertainty = 10.0d;
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase16 = referencePointPeriod9.setValidFrom(instant15);
        locationRemark4.ToTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant19 = qualifier18.DateApplied;
        java.lang.String str20 = qualifier18.User;
        java.lang.String str21 = qualifier18.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = dischargeSummary23.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse26.setNextToken(instant27);
        dischargeSummary23.MeasurementTime = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse22.setNextToken(instant27);
        java.time.Instant instant31 = locationDescriptionListServiceResponse22.getNextToken();
        java.time.Instant instant32 = locationDescriptionListServiceResponse22.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange33 = qualifier18.setStartTime(instant32);
        locationRemark4.ToTime = instant32;
        noteOperation0.DateAppliedUtc = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType36 = noteOperation0.getOperationType();
        java.time.Instant instant37 = noteOperation0.DateAppliedUtc;
        java.lang.String str38 = noteOperation0.NoteText;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = noteOperation0.OperationType;
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNotNull(locationRemark4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(locationRemark8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(referencePointPeriodBase12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(referencePointPeriodBase16);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(timeRange33);
        org.junit.Assert.assertNull(metadataChangeOperationType36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(metadataChangeOperationType39);
    }

    @Test
    public void test52663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52663");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setComment("ZZZZZ");
        java.lang.String str4 = attachmentRepresentation0.getFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation6 = attachmentRepresentation0.setSuccess((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation8 = attachmentRepresentation0.setLatitude("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(attachmentRepresentation6);
        org.junit.Assert.assertNotNull(attachmentRepresentation8);
    }

    @Test
    public void test52664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52664");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime15 = postSchedule14.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime17 = putSchedule16.StartDate;
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule19 = putSchedule16.setEndDate(offsetDateTime18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = putSchedule19.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime21 = putSchedule19.getEndDate();
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule23 = putSchedule19.setStartDate(offsetDateTime22);
        java.lang.Integer int24 = putSchedule19.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule19.RecurrenceDayMonthly = recurrenceDayMonthlyType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule27 = postSchedule14.setRecurrenceDayMonthly(recurrenceDayMonthlyType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = postSchedule14.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule31 = schedule29.setCustomId("");
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule33 = schedule29.setStartDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule35 = schedule33.setRecurrenceType(recurrenceType34);
        java.time.OffsetDateTime offsetDateTime36 = schedule35.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        schedule35.RecurrenceDayMonthly = recurrenceDayMonthlyType37;
        postSchedule14.RecurrenceDayMonthly = recurrenceDayMonthlyType37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule40 = postSchedule13.setRecurrenceDayMonthly(recurrenceDayMonthlyType37);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList41 = postSchedule13.getSchedulePlannedActivities();
        postSchedule13.CustomId = "multipart/form-data; boundary=****4e5cd403-2823-4e43-9a3f-5d99e3f50f4e****";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(putSchedule19);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(putSchedule23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule27);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNotNull(schedule31);
        org.junit.Assert.assertNotNull(schedule33);
        org.junit.Assert.assertTrue("'" + recurrenceType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule35);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule40);
        org.junit.Assert.assertNull(schedulePlannedActivityList41);
    }

    @Test
    public void test52665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52665");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory getScheduleHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory();
        java.lang.String str1 = getScheduleHistory0.Id;
        getScheduleHistory0.Id = "ZZZZZ";
        java.lang.Object obj4 = getScheduleHistory0.getResponseType();
        java.lang.Object obj5 = getScheduleHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory getScheduleHistory7 = getScheduleHistory0.setId("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getScheduleHistory7);
    }

    @Test
    public void test52666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52666");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        java.lang.String str1 = postReportPlugin0.AssemblyName;
        java.lang.String str2 = postReportPlugin0.getAssemblyName();
        java.lang.String str3 = postReportPlugin0.AssemblyName;
        postReportPlugin0.AssemblyName = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test52667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52667");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        java.lang.Object obj2 = postTag0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postTag0.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
        org.junit.Assert.assertNull(auditAttributes3);
    }

    @Test
    public void test52668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52668");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset();
        putBaseStandardReferenceDatumOffset0.OffsetToBaseReference = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset4 = putBaseStandardReferenceDatumOffset0.setStandardIdentifier("MinDuration");
        putBaseStandardReferenceDatumOffset0.StandardIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset8 = putBaseStandardReferenceDatumOffset0.setMethod("MinInstant");
        putBaseStandardReferenceDatumOffset0.StandardIdentifier = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset12 = putBaseStandardReferenceDatumOffset0.setComments("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset14 = putBaseStandardReferenceDatumOffset0.setLocationUniqueId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Double double15 = putBaseStandardReferenceDatumOffset14.getUncertainty();
        putBaseStandardReferenceDatumOffset14.Method = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset8);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset12);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset14);
        org.junit.Assert.assertNull(double15);
    }

    @Test
    public void test52669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52669");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit4 = putUnit0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = putUnit0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postDetectioncondition6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition9 = postDetectioncondition6.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition6.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition6.Name = "";
        postDetectioncondition6.Description = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition17 = postDetectioncondition6.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str19 = taxonomyLevel18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel21 = taxonomyLevel18.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel23 = taxonomyLevel18.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = postObservedProperty24.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType27 = postObservedProperty24.getAnalysisType();
        postObservedProperty24.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = postObservedProperty24.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35, observedPropertyArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod37 = postLabAnalysisMethod33.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType39 = analyticalGroup38.getType();
        analyticalGroup38.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = null;
        analyticalGroupItem48.AnalysisMethod = analysisMethod51;
        java.lang.String str53 = analyticalGroupItem48.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = null;
        analyticalGroupItem59.AnalysisMethod = analysisMethod62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem43, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem54, analyticalGroupItem57, analyticalGroupItem59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65, analyticalGroupItemArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup67 = analyticalGroup42.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65);
        analyticalGroup38.AnalyticalGroupItems = analyticalGroupItemList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup38.AuditAttributes = auditAttributes69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod71 = postLabAnalysisMethod37.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty72 = postObservedProperty24.setAuditAttributes(auditAttributes69);
        taxonomyLevel23.AuditAttributes = auditAttributes69;
        postDetectioncondition17.AuditAttributes = auditAttributes69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit75 = putUnit0.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit77 = putUnit75.setCustomId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup78 = putUnit75.UnitGroup;
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNotNull(putUnit4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postDetectioncondition9);
        org.junit.Assert.assertNotNull(postDetectioncondition17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(taxonomyLevel21);
        org.junit.Assert.assertNotNull(taxonomyLevel23);
        org.junit.Assert.assertNotNull(postObservedProperty26);
        org.junit.Assert.assertNull(analysisType27);
        org.junit.Assert.assertNull(quantity30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(observedPropertyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod37);
        org.junit.Assert.assertNull(analyticalGroupType39);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(analyticalGroup67);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod71);
        org.junit.Assert.assertNotNull(postObservedProperty72);
        org.junit.Assert.assertNotNull(putUnit75);
        org.junit.Assert.assertNotNull(putUnit77);
        org.junit.Assert.assertNull(unitGroup78);
    }

    @Test
    public void test52670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52670");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen0.Preservative = preservativeType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = postLabAnalysisMethod5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList9, observedPropertyArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod7.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType13 = analyticalGroup12.getType();
        analyticalGroup12.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = null;
        analyticalGroupItem22.AnalysisMethod = analysisMethod25;
        java.lang.String str27 = analyticalGroupItem22.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = null;
        analyticalGroupItem33.AnalysisMethod = analysisMethod36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem17, analyticalGroupItem19, analyticalGroupItem22, analyticalGroupItem28, analyticalGroupItem31, analyticalGroupItem33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39, analyticalGroupItemArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup41 = analyticalGroup16.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39);
        analyticalGroup12.AnalyticalGroupItems = analyticalGroupItemList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup12.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod45 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes43);
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes43.setModificationTime(offsetDateTime46);
        postSpecimen0.AuditAttributes = auditAttributes47;
        java.lang.String str49 = postSpecimen0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = null;
        analyticalGroup50.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup54 = analyticalGroup50.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str56 = samplingContextTag55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag58 = samplingContextTag55.setAuditAttributes(auditAttributes57);
        java.lang.String str59 = samplingContextTag55.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = putDetectioncondition61.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition64 = putDetectioncondition61.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity67 = samplingPlanPlannedActivity65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = auditAttributes68.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity67.AuditAttributes = auditAttributes68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = samplingPlanPlannedActivity67.AuditAttributes;
        putDetectioncondition61.AuditAttributes = auditAttributes72;
        analysisMethodSimple60.AuditAttributes = auditAttributes72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag75 = samplingContextTag55.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup76 = analyticalGroup50.setAuditAttributes(auditAttributes72);
        java.lang.String str77 = analyticalGroup50.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup79 = analyticalGroup50.setDescription("2021.4.62.0");
        postSpecimen0.AnalyticalGroup = analyticalGroup50;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNotNull(postLabAnalysisMethod7);
        org.junit.Assert.assertNotNull(observedPropertyArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNull(analyticalGroupType13);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(analyticalGroup41);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(analyticalGroup54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(samplingContextTag58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(auditAttributes62);
        org.junit.Assert.assertNotNull(putDetectioncondition64);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity67);
        org.junit.Assert.assertNotNull(auditAttributes70);
        org.junit.Assert.assertNotNull(auditAttributes72);
        org.junit.Assert.assertNotNull(samplingContextTag75);
        org.junit.Assert.assertNotNull(analyticalGroup76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(analyticalGroup79);
    }

    @Test
    public void test52671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52671");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.NumericValue8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setGradeCode4((java.lang.Long) 1L);
        java.lang.String str12 = timeAlignedPoint11.GradeName5;
        java.lang.String str13 = timeAlignedPoint11.getMethod2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint11.setApprovalName6("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
    }

    @Test
    public void test52672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52672");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_2 = postUserV2_0.setUserProfile(userProfile1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription5 = locationDescription3.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription5.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        openIdConnectRelyingPartyConfiguration8.OptionalIssuerDiscoveryUri = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        getObservationsV2_17.DepthUnitCustomId = "hi!";
        java.lang.String str20 = getObservationsV2_17.DepthUnitId;
        java.util.List<java.lang.String> strList21 = null;
        getObservationsV2_17.ProjectIds = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_25 = postUserV2_23.setUserProfile(userProfile24);
        java.lang.Object obj26 = postUserV2_25.getResponseType();
        java.util.List<java.lang.String> strList27 = postUserV2_25.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = reading28.getValue();
        reading28.ReferencePointUniqueId = "hi!";
        java.lang.String str32 = reading28.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary35.DifferenceDuringVisit = doubleWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = doubleWithDisplay36.setNumeric((java.lang.Double) 100.0d);
        reading28.Value = doubleWithDisplay39;
        java.lang.Boolean boolean41 = reading28.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = reading28.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        getObservationsV2_50.DepthUnitCustomId = "hi!";
        java.lang.String str53 = getObservationsV2_50.CustomId;
        java.util.List<java.lang.String> strList54 = getObservationsV2_50.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_50.setMedia((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str72 = getObservationsV2_71.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        getObservationsV2_71.ProjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_50.setObservedPropertyIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading81 = reading28.setReadingQualifiers(strList76);
        postUserV2_25.Roles = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_83 = getObservationsV2_17.setIds((java.util.List<java.lang.String>) strList76);
        openIdConnectRelyingPartyConfiguration8.HostedDomains = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription85 = locationDescription7.setSecondaryFolders(strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_86 = postUserV2_0.setAccessGroups((java.util.List<java.lang.String>) strList76);
        java.lang.String str87 = postUserV2_0.CustomId;
        org.junit.Assert.assertNotNull(postUserV2_2);
        org.junit.Assert.assertNotNull(locationDescription5);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(postUserV2_25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(doubleWithDisplay39);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(reading43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(reading81);
        org.junit.Assert.assertNotNull(getObservationsV2_83);
        org.junit.Assert.assertNotNull(locationDescription85);
        org.junit.Assert.assertNotNull(postUserV2_86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test52673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52673");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap1 = correction0.Parameters;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder2 = correction0.getProcessingOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction4 = correction0.setType(correctionType3);
        java.lang.String str5 = correction4.User;
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(correctionProcessingOrder2);
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift));
        org.junit.Assert.assertNotNull(correction4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test52674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52674");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        java.lang.String str3 = dischargeSummary2.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary2.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType6 = dischargeSummary5.MeasurementGrade;
        java.lang.Boolean boolean7 = dischargeSummary5.MeanGageHeightWasDatumConverted;
        java.time.Instant instant8 = dischargeSummary5.MeasurementStartTime;
        dischargeSummary5.DischargeMethod = "hi!";
        java.lang.String str11 = dischargeSummary5.MeanGageHeightMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        dischargeSummary12.MeanGageHeight = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = dischargeSummary12.getDifferenceDuringVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = dischargeSummary12.DifferenceDuringVisit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = dischargeSummary12.DifferenceDuringVisit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double23 = adjustment22.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType24 = adjustment22.getAdjustmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment26 = adjustment22.setAdjustmentType(adjustmentType25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary21.setAdjustment(adjustment26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary12.setAdjustment(adjustment26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary29.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary31.DifferenceDuringVisit = doubleWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment34 = dischargeSummary31.getAdjustment();
        java.time.Instant instant35 = dischargeSummary31.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType36 = dischargeSummary31.getBaseFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType39 = null;
        controlConditionActivity38.ControlCleaned = controlCleanedType39;
        java.lang.String str41 = controlConditionActivity38.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary42.Reviewer = "";
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary42.MeasurementTime = instant45;
        controlConditionActivity38.DateCleaned = instant45;
        gageHeightReading37.ReadingTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = doubleWithDisplay49.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str52 = doubleWithDisplay51.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading53 = gageHeightReading37.setGageHeight(doubleWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary56.Reviewer = "";
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary56.MeasurementTime = instant59;
        postRecurringReport55.NextGenerationDate = instant59;
        java.time.Instant instant62 = postRecurringReport55.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset63 = statisticalDateTimeOffset54.setDateTimeOffset(instant62);
        gageHeightReading53.ReadingTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] gageHeightReadingArray65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] { gageHeightReading53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>) gageHeightReadingList66, gageHeightReadingArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = dischargeSummary31.setGageHeightReadings(gageHeightReadingList66);
        dischargeSummary28.GageHeightReadings = gageHeightReadingList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary5.setGageHeightReadings(gageHeightReadingList66);
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNull(measurementGradeType6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNull(double23);
        org.junit.Assert.assertNull(adjustmentType24);
        org.junit.Assert.assertTrue("'" + adjustmentType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount + "'", adjustmentType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount));
        org.junit.Assert.assertNotNull(adjustment26);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNull(adjustment34);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(baseFlowType36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(doubleWithDisplay51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(gageHeightReading53);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset63);
        org.junit.Assert.assertNotNull(gageHeightReadingArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dischargeSummary68);
        org.junit.Assert.assertNotNull(dischargeSummary70);
    }

    @Test
    public void test52675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52675");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem();
        getExtendedAttributeDropdownlistitemListItem0.Id = "";
        java.lang.Object obj3 = getExtendedAttributeDropdownlistitemListItem0.getResponseType();
        java.lang.String str4 = getExtendedAttributeDropdownlistitemListItem0.Id;
        java.lang.String str5 = getExtendedAttributeDropdownlistitemListItem0.getId();
        java.lang.String str6 = getExtendedAttributeDropdownlistitemListItem0.getDropDownListItemId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem8 = getExtendedAttributeDropdownlistitemListItem0.setDropDownListItemId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitemListItem8);
    }

    @Test
    public void test52676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52676");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        java.lang.String str9 = observation6.getMediumSubdivision();
        observation6.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType12 = observation6.QualityControlType;
        java.lang.String str13 = observation6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation6.getResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_17 = postObservationV2_15.setLabInstruction(labInstruction16);
        java.lang.String str18 = postObservationV2_17.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod19 = postObservationV2_17.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation20.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation20.setCategoricalResult(categoricalResult23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation20.DataClassification = dataClassificationType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_27 = postObservationV2_17.setDataClassification(dataClassificationType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple28 = postObservationV2_27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity29.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity32.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity32.setPlannedActivity(plannedActivity35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType37 = postActivity32.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate39.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList44 = specimenTemplate43.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = specimenTemplate45.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList50 = specimenTemplate49.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate39, specimenTemplate42, specimenTemplate43, specimenTemplate47, specimenTemplate48, specimenTemplate49 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList52, specimenTemplateArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate54 = postFieldVisitActivityWithTemplate38.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate56 = postFieldVisitActivityWithTemplate54.setCollectionMethod(collectionMethod55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = postActivity32.setCollectionMethod(collectionMethod55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity32.Medium = medium58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity60 = activity29.setMedium(medium58);
        postObservationV2_27.Medium = medium58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity62.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity66 = postActivity62.setPlannedActivity(plannedActivity65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType67 = postActivity62.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate69.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList74 = specimenTemplate73.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate77 = specimenTemplate75.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList80 = specimenTemplate79.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate69, specimenTemplate72, specimenTemplate73, specimenTemplate77, specimenTemplate78, specimenTemplate79 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList82, specimenTemplateArray81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate84 = postFieldVisitActivityWithTemplate68.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate86 = postFieldVisitActivityWithTemplate84.setCollectionMethod(collectionMethod85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity87 = postActivity62.setCollectionMethod(collectionMethod85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium88 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity62.Medium = medium88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes90 = medium88.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType91 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium92 = medium88.setSystemCode(mediumSystemCodeType91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium93 = medium58.setSystemCode(mediumSystemCodeType91);
        java.lang.String str94 = medium58.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation95 = observation6.setMedium(medium58);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(qualityControlType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(postObservationV2_17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(collectionMethod19);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertTrue("'" + dataClassificationType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_27);
        org.junit.Assert.assertNull(analysisMethodSimple28);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNull(activityType37);
        org.junit.Assert.assertNull(labInstructionTemplateList44);
        org.junit.Assert.assertNotNull(specimenTemplate47);
        org.junit.Assert.assertNull(labInstructionTemplateList50);
        org.junit.Assert.assertNotNull(specimenTemplateArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate54);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate56);
        org.junit.Assert.assertNotNull(postActivity57);
        org.junit.Assert.assertNotNull(activity60);
        org.junit.Assert.assertNotNull(postActivity66);
        org.junit.Assert.assertNull(activityType67);
        org.junit.Assert.assertNull(labInstructionTemplateList74);
        org.junit.Assert.assertNotNull(specimenTemplate77);
        org.junit.Assert.assertNull(labInstructionTemplateList80);
        org.junit.Assert.assertNotNull(specimenTemplateArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate84);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate86);
        org.junit.Assert.assertNotNull(postActivity87);
        org.junit.Assert.assertNull(auditAttributes90);
        org.junit.Assert.assertTrue("'" + mediumSystemCodeType91 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR + "'", mediumSystemCodeType91.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR));
        org.junit.Assert.assertNotNull(medium92);
        org.junit.Assert.assertNotNull(medium93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(observation95);
    }

    @Test
    public void test52677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52677");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType3 = putUnitGroupWithUnit0.SystemCode;
        java.lang.String str4 = putUnitGroupWithUnit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        putUnitGroupWithUnit0.SystemCode = unitGroupSystemCodeType5;
        java.lang.Boolean boolean7 = putUnitGroupWithUnit0.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit9 = putUnitGroupWithUnit0.setCustomId("zZZZZ");
        putUnitGroupWithUnit9.Id = "multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****";
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNull(unitGroupSystemCodeType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit9);
    }

    @Test
    public void test52678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52678");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationNote0.Tags;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = locationNote0.getTags();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList4 = locationNote3.Tags;
        java.time.Instant instant5 = locationNote3.getFromTimeUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str7 = locationMonitoringMethod6.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList8 = null;
        locationMonitoringMethod6.Tags = tagMetadataList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str11 = locationMonitoringMethod10.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod13 = locationMonitoringMethod10.setParameter("MinDuration");
        locationMonitoringMethod13.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory17 = attachment16.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment19 = attachment16.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription22 = locationDescription20.setIdentifier("");
        locationDescription22.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str26 = locationMonitoringMethod25.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod28 = locationMonitoringMethod25.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList30, tagMetadataArray29);
        locationMonitoringMethod28.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription33 = locationDescription22.setTags(tagMetadataList30);
        attachment19.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod35 = locationMonitoringMethod13.setTags(tagMetadataList30);
        locationMonitoringMethod6.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote37 = locationNote3.setTags(tagMetadataList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary38.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        dischargeSummary38.MeasurementTime = instant42;
        locationNote37.ToTimeUtc = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote46 = locationNote0.setCreateTimeUtc(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary49.Reviewer = "";
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary49.MeasurementTime = instant52;
        postRecurringReport48.NextGenerationDate = instant52;
        java.time.Instant instant55 = postRecurringReport48.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset56 = statisticalDateTimeOffset47.setDateTimeOffset(instant55);
        java.lang.Boolean boolean57 = statisticalDateTimeOffset56.isRepresentsEndOfTimePeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset59 = statisticalDateTimeOffset56.setRepresentsEndOfTimePeriod((java.lang.Boolean) false);
        java.time.Instant instant60 = statisticalDateTimeOffset59.DateTimeOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote61 = locationNote46.setToTimeUtc(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList63 = getExportSpecimens62.getProjectIds();
        java.util.List<java.lang.String> strList64 = getExportSpecimens62.FieldVisitId;
        java.util.List<java.lang.String> strList65 = getExportSpecimens62.ActivityTypes;
        java.util.List<java.lang.String> strList66 = getExportSpecimens62.getActivityTypes();
        java.util.List<java.lang.String> strList67 = getExportSpecimens62.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment68.Description = "2021.4.62.0";
        java.lang.String str71 = postReportAttachment68.Title;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment73 = postReportAttachment68.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval74 = postReportAttachment68.getSourceTimeRange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList76 = getExportSpecimens75.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant78 = qualifier77.DateApplied;
        java.lang.String str79 = qualifier77.User;
        java.lang.String str80 = qualifier77.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj82 = timeAlignedDataServiceRequest81.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant84 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse85 = locationDescriptionListServiceResponse83.setNextToken(instant84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest86 = timeAlignedDataServiceRequest81.setQueryFrom(instant84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier87 = qualifier77.setDateApplied(instant84);
        getExportSpecimens75.Before = instant84;
        postReportAttachment68.CreatedTime = instant84;
        getExportSpecimens62.StartModificationTime = instant84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote91 = locationNote46.setToTimeUtc(instant84);
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNull(tagMetadataList2);
        org.junit.Assert.assertNull(tagMetadataList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationMonitoringMethod13);
        org.junit.Assert.assertNull(attachmentCategory17);
        org.junit.Assert.assertNotNull(attachment19);
        org.junit.Assert.assertNotNull(locationDescription22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locationMonitoringMethod28);
        org.junit.Assert.assertNotNull(tagMetadataArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locationDescription33);
        org.junit.Assert.assertNotNull(locationMonitoringMethod35);
        org.junit.Assert.assertNotNull(locationNote37);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationNote46);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset56);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationNote61);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(postReportAttachment73);
        org.junit.Assert.assertNull(interval74);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNull(instant78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse85);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest86);
        org.junit.Assert.assertNotNull(qualifier87);
        org.junit.Assert.assertNotNull(locationNote91);
    }

    @Test
    public void test52679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52679");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setIsEnabled((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin8 = reportPlugin0.setIsEnabled((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNotNull(reportPlugin8);
    }

    @Test
    public void test52680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52680");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        java.lang.String str1 = locationDatumPeriod0.Standard;
        java.lang.String str2 = locationDatumPeriod0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod4 = locationDatumPeriod0.setStandard("/AQUARIUS/Publish/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod6 = locationDatumPeriod4.setMethod("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locationDatumPeriod4);
        org.junit.Assert.assertNotNull(locationDatumPeriod6);
    }

    @Test
    public void test52681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52681");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = fieldVisitReading0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading3 = fieldVisitReading0.setSubLocationIdentifier("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading5 = fieldVisitReading0.setFieldVisitIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str6 = fieldVisitReading0.getSerialNumber();
        fieldVisitReading0.SubLocationIdentifier = "zZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading0.setPublish((java.lang.Boolean) false);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(fieldVisitReading3);
        org.junit.Assert.assertNotNull(fieldVisitReading5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
    }

    @Test
    public void test52682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52682");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList3 = locationDescription2.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType5 = getExtendedAttributes4.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str7 = deleteFieldVisits6.getSort();
        java.util.List<java.lang.String> strList8 = deleteFieldVisits6.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList16 = getObservationsV2_9.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        getObservationsV2_9.StartResultTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        controlConditionActivity24.DateCleaned = instant28;
        timeAlignedDataServiceRequest23.QueryFrom = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.ActivityIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = timeAlignedDataServiceRequest23.setTimeSeriesOutputUnitIds(strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_9.setCollectionMethodIds((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits49 = deleteFieldVisits6.setSamplingPlanIds((java.util.List<java.lang.String>) strList43);
        getExtendedAttributes4.Ids = strList43;
        locationDescription2.SecondaryFolders = strList43;
        locationDescription2.Publish = true;
        java.lang.Boolean boolean54 = locationDescription2.isPublish();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(appliesToType5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest47);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(deleteFieldVisits49);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
    }

    @Test
    public void test52683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52683");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData2 = openWaterData0.setDryLineCorrection((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = openWaterData2.DistanceToWaterSurface;
        org.junit.Assert.assertNotNull(openWaterData2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
    }

    @Test
    public void test52684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52684");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationDatum deleteLocationDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationDatum();
        deleteLocationDatum0.LocationUniqueId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str3 = deleteLocationDatum0.getLocationUniqueId();
        deleteLocationDatum0.LocationUniqueId = "PT87591240H";
        deleteLocationDatum0.LocationUniqueId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str8 = deleteLocationDatum0.getLocationUniqueId();
        java.lang.String str9 = deleteLocationDatum0.getLocationUniqueId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str3, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str8, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str9, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test52685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52685");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str1 = samplingContextTag0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag3 = samplingContextTag0.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag5 = samplingContextTag0.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag7 = samplingContextTag5.setName("9999-12-31T23:59:59.999Z");
        samplingContextTag7.Description = "https";
        samplingContextTag7.Name = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(samplingContextTag3);
        org.junit.Assert.assertNotNull(samplingContextTag5);
        org.junit.Assert.assertNotNull(samplingContextTag7);
    }

    @Test
    public void test52686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52686");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.String str39 = deleteActivities0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double41 = putBulkEditResultGradesV2_40.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        java.util.List<java.lang.String> strList57 = getObservationsV2_42.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList58 = getObservationsV2_42.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType59 = getObservationsV2_42.FieldResultType;
        java.time.Instant instant60 = getObservationsV2_42.getEndObservedTime();
        java.lang.String str61 = getObservationsV2_42.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        java.util.ArrayList<java.lang.String> strList70 = putLocationTags69.TagUniqueIds;
        getObservationsV2_42.ProjectIds = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_72 = putBulkEditResultGradesV2_40.setSearch((java.util.List<java.lang.String>) strList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str74 = setting73.getKey();
        java.lang.String str75 = setting73.getDescription();
        java.lang.String str76 = setting73.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = dischargeSummary77.setMeanGageHeightMethod("hi!");
        java.lang.String str80 = dischargeSummary79.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = dischargeSummary79.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj84 = timeAlignedDataServiceRequest83.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant86 = sensor85.getLastModifiedUtc();
        java.time.Instant instant87 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor88 = sensor85.setLastModifiedUtc(instant87);
        java.time.Instant instant89 = sensor85.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest83.setQueryTo(instant89);
        dischargeSummary82.MeasurementStartTime = instant89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting92 = setting73.setLastModifiedTime(instant89);
        putBulkEditResultGradesV2_40.StartModificationTime = instant89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities94 = deleteActivities0.setToStartTime(instant89);
        java.util.List<java.lang.String> strList95 = null;
        deleteActivities0.SamplingLocationIds = strList95;
        deleteActivities0.Cursor = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(fieldResultType59);
        org.junit.Assert.assertNull(instant60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(dischargeSummary79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(dischargeSummary82);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(sensor88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(setting92);
        org.junit.Assert.assertNotNull(deleteActivities94);
    }

    @Test
    public void test52687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52687");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str1 = postExtendedAttribute0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType2 = postExtendedAttribute0.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute11 = postExtendedAttribute0.setAuditAttributes(auditAttributes10);
        java.lang.String str12 = postExtendedAttribute0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType13 = postExtendedAttribute0.AppliesToType;
        postExtendedAttribute0.Mandatory = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(dataType2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postExtendedAttribute11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(appliesToType13);
    }

    @Test
    public void test52688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52688");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2();
        java.lang.String str1 = postObservationImportV2_0.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_3 = postObservationImportV2_0.setTimeZoneOffset("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_5 = postObservationImportV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) false);
        postObservationImportV2_0.FileType = "multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postObservationImportV2_3);
        org.junit.Assert.assertNotNull(postObservationImportV2_5);
    }

    @Test
    public void test52689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52689");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        java.util.ArrayList<java.lang.String> strList9 = postTag0.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList12, tagApplicabilityArray11);
        postTag0.Applicability = tagApplicabilityList12;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList15 = postTag0.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        postTag16.PickListValues = strList21;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList25 = postTag16.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase27 = postTag16.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_29.setDataClassifications((java.util.List<java.lang.String>) strList33);
        postTag28.PickListValues = strList33;
        java.util.ArrayList<java.lang.String> strList37 = postTag28.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability38 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList40, tagApplicabilityArray39);
        postTag28.Applicability = tagApplicabilityList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase44 = postTag28.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType45 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase46 = postTag28.setValueType(tagValueType45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        postTag47.PickListValues = strList52;
        java.util.ArrayList<java.lang.String> strList56 = postTag47.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability57 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability57 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList59, tagApplicabilityArray58);
        postTag47.Applicability = tagApplicabilityList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase63 = postTag47.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType64 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase65 = postTag47.setValueType(tagValueType64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = getObservationsV2_67.setDataClassifications((java.util.List<java.lang.String>) strList71);
        postTag66.PickListValues = strList71;
        java.util.ArrayList<java.lang.String> strList75 = postTag66.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray80 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_83 = getObservationsV2_77.setDataClassifications((java.util.List<java.lang.String>) strList81);
        postTag76.PickListValues = strList81;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList85 = postTag76.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability86 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability86 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList88, tagApplicabilityArray87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase90 = postTag76.setApplicability(tagApplicabilityList88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase91 = postTag66.setApplicability(tagApplicabilityList88);
        postTag47.Applicability = tagApplicabilityList88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase93 = tagRequestBase46.setApplicability(tagApplicabilityList88);
        tagRequestBase27.Applicability = tagApplicabilityList88;
        postTag0.Applicability = tagApplicabilityList88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType96 = postTag0.getValueType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType97 = null;
        postTag0.ValueType = tagValueType97;
        java.lang.Object obj99 = postTag0.getResponseType();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + tagApplicability10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(tagApplicabilityList15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(tagApplicabilityList25);
        org.junit.Assert.assertNotNull(tagRequestBase27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + tagApplicability38 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability38.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(tagRequestBase44);
        org.junit.Assert.assertTrue("'" + tagValueType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType45.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase46);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + tagApplicability57 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability57.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(tagRequestBase63);
        org.junit.Assert.assertTrue("'" + tagValueType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType64.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase65);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_83);
        org.junit.Assert.assertNull(tagApplicabilityList85);
        org.junit.Assert.assertTrue("'" + tagApplicability86 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments + "'", tagApplicability86.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments));
        org.junit.Assert.assertNotNull(tagApplicabilityArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(tagRequestBase90);
        org.junit.Assert.assertNotNull(tagRequestBase91);
        org.junit.Assert.assertNotNull(tagRequestBase93);
        org.junit.Assert.assertNull(tagValueType96);
        org.junit.Assert.assertNotNull(obj99);
        org.junit.Assert.assertEquals(obj99.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj99), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj99), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
    }

    @Test
    public void test52690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52690");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        java.lang.String str2 = attachment0.Comment;
        java.lang.Integer int3 = attachment0.FileSize;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setId("/AQUARIUS");
        attachment5.FileSize = 100;
        java.lang.String str8 = attachment5.getLongitude();
        java.time.OffsetDateTime offsetDateTime9 = attachment5.getDateTaken();
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(offsetDateTime9);
    }

    @Test
    public void test52691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52691");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int1 = searchResultSpreadsheetTemplate0.TotalCount;
        java.lang.String str2 = searchResultSpreadsheetTemplate0.Cursor;
        java.lang.Integer int3 = searchResultSpreadsheetTemplate0.getTotalCount();
        searchResultSpreadsheetTemplate0.TotalCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList6 = searchResultSpreadsheetTemplate0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int8 = searchResultSpreadsheetTemplate7.TotalCount;
        java.lang.Integer int9 = searchResultSpreadsheetTemplate7.TotalCount;
        java.lang.String str10 = searchResultSpreadsheetTemplate7.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate12 = searchResultSpreadsheetTemplate7.setCursor("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int14 = searchResultSpreadsheetTemplate13.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate16 = searchResultSpreadsheetTemplate13.setCursor("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate19 = spreadsheetTemplate17.setType(spreadsheetTemplateType18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType21 = spreadsheetTemplate20.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType22 = spreadsheetTemplate20.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType23 = null;
        spreadsheetTemplate20.Type = spreadsheetTemplateType23;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = spreadsheetTemplate20.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType27 = spreadsheetTemplate26.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType28 = spreadsheetTemplate26.getType();
        spreadsheetTemplate26.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate32 = spreadsheetTemplate26.setType(spreadsheetTemplateType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate35 = spreadsheetTemplate33.setType(spreadsheetTemplateType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType37 = spreadsheetTemplate36.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType38 = spreadsheetTemplate36.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType41 = spreadsheetTemplate40.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType42 = spreadsheetTemplate40.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType43 = null;
        spreadsheetTemplate40.Type = spreadsheetTemplateType43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType46 = spreadsheetTemplate45.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType47 = spreadsheetTemplate45.getType();
        spreadsheetTemplate45.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate51 = spreadsheetTemplate45.setType(spreadsheetTemplateType50);
        java.lang.String str52 = spreadsheetTemplate51.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate55 = spreadsheetTemplate53.setType(spreadsheetTemplateType54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate58 = spreadsheetTemplate56.setType(spreadsheetTemplateType57);
        spreadsheetTemplate56.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType62 = spreadsheetTemplate61.getType();
        spreadsheetTemplate61.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] spreadsheetTemplateArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] { spreadsheetTemplate19, spreadsheetTemplate20, spreadsheetTemplate26, spreadsheetTemplate33, spreadsheetTemplate36, spreadsheetTemplate39, spreadsheetTemplate40, spreadsheetTemplate51, spreadsheetTemplate55, spreadsheetTemplate56, spreadsheetTemplate61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList66, spreadsheetTemplateArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate68 = searchResultSpreadsheetTemplate13.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList66);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList69 = searchResultSpreadsheetTemplate68.DomainObjects;
        searchResultSpreadsheetTemplate12.DomainObjects = spreadsheetTemplateList69;
        searchResultSpreadsheetTemplate0.DomainObjects = spreadsheetTemplateList69;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(spreadsheetTemplateList6);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate12);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate16);
        org.junit.Assert.assertNotNull(spreadsheetTemplate19);
        org.junit.Assert.assertNull(spreadsheetTemplateType21);
        org.junit.Assert.assertNull(spreadsheetTemplateType22);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNull(spreadsheetTemplateType27);
        org.junit.Assert.assertNull(spreadsheetTemplateType28);
        org.junit.Assert.assertNotNull(spreadsheetTemplate32);
        org.junit.Assert.assertNotNull(spreadsheetTemplate35);
        org.junit.Assert.assertNull(spreadsheetTemplateType37);
        org.junit.Assert.assertNull(spreadsheetTemplateType38);
        org.junit.Assert.assertNull(spreadsheetTemplateType41);
        org.junit.Assert.assertNull(spreadsheetTemplateType42);
        org.junit.Assert.assertNull(spreadsheetTemplateType46);
        org.junit.Assert.assertNull(spreadsheetTemplateType47);
        org.junit.Assert.assertNotNull(spreadsheetTemplate51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "https" + "'", str52, "https");
        org.junit.Assert.assertNotNull(spreadsheetTemplate55);
        org.junit.Assert.assertNotNull(spreadsheetTemplate58);
        org.junit.Assert.assertNull(spreadsheetTemplateType62);
        org.junit.Assert.assertNotNull(spreadsheetTemplateArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate68);
        org.junit.Assert.assertNotNull(spreadsheetTemplateList69);
    }

    @Test
    public void test52692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52692");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj1 = postSession0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession3 = postSession0.setEncryptedPassword("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession5 = postSession3.setLocale("/AQUARIUS");
        java.lang.String str6 = postSession3.Locale;
        postSession3.Locale = "POST";
        java.lang.String str9 = postSession3.Username;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession11 = postSession3.setUsername("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession13 = postSession11.setLocale("MinInstant");
        postSession11.Locale = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNotNull(postSession5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS" + "'", str6, "/AQUARIUS");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postSession11);
        org.junit.Assert.assertNotNull(postSession13);
    }

    @Test
    public void test52693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52693");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory2 = getActivityHistory0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory4 = getActivityHistory2.setId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.Object obj5 = getActivityHistory2.getResponseType();
        java.lang.Object obj6 = getActivityHistory2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory8 = getActivityHistory2.setId("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        org.junit.Assert.assertNotNull(getActivityHistory2);
        org.junit.Assert.assertNotNull(getActivityHistory4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getActivityHistory8);
    }

    @Test
    public void test52694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52694");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint();
        java.time.Instant instant1 = referencePoint0.PrimarySinceDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str3 = referencePointPeriod2.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str5 = referencePointPeriod4.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase7 = referencePointPeriod4.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod4.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase11 = referencePointPeriod4.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod12.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant15 = referencePointPeriod12.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod16.Comment = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod19.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant22 = referencePointPeriod19.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str24 = referencePointPeriod23.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str26 = referencePointPeriod25.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase28 = referencePointPeriod25.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod25.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase32 = referencePointPeriod25.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str34 = referencePointPeriod33.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase36 = referencePointPeriod33.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod33.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase40 = referencePointPeriod33.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str42 = referencePointPeriod41.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase44 = referencePointPeriod41.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.time.Instant instant46 = referencePointPeriod45.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str49 = referencePointPeriod48.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase51 = referencePointPeriod48.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod48.Uncertainty = 10.0d;
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase55 = referencePointPeriod48.setValidFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str57 = referencePointPeriod56.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod[] referencePointPeriodArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod[] { referencePointPeriod2, referencePointPeriod4, referencePointPeriod12, referencePointPeriod16, referencePointPeriod19, referencePointPeriod23, referencePointPeriod25, referencePointPeriod33, referencePointPeriod41, referencePointPeriod45, referencePointPeriod47, referencePointPeriod48, referencePointPeriod56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod> referencePointPeriodList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod>) referencePointPeriodList59, referencePointPeriodArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint61 = referencePoint0.setReferencePointPeriods(referencePointPeriodList59);
        referencePoint61.Description = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase65 = referencePoint61.setDescription("MaxInstant");
        java.lang.Double double66 = referencePointBase65.Latitude;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(referencePointPeriodBase7);
        org.junit.Assert.assertNotNull(referencePointPeriodBase11);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(referencePointPeriodBase28);
        org.junit.Assert.assertNotNull(referencePointPeriodBase32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(referencePointPeriodBase36);
        org.junit.Assert.assertNotNull(referencePointPeriodBase40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(referencePointPeriodBase44);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(referencePointPeriodBase51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(referencePointPeriodBase55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(referencePointPeriodArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(referencePoint61);
        org.junit.Assert.assertNotNull(referencePointBase65);
        org.junit.Assert.assertNull(double66);
    }

    @Test
    public void test52695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52695");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address2 = address0.setCityName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        address0.CountryCode = "POST";
        address0.StateProvinceCode = "";
        org.junit.Assert.assertNotNull(address2);
    }

    @Test
    public void test52696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52696");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str1 = putUnitGroup0.getCustomId();
        putUnitGroup0.SupportsConversion = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType4 = putUnitGroup0.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit7 = putUnit5.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit9 = putUnit5.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putUnit5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = postDetectioncondition11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition14 = postDetectioncondition11.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition11.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition11.Name = "";
        postDetectioncondition11.Description = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition22 = postDetectioncondition11.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str24 = taxonomyLevel23.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel26 = taxonomyLevel23.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel28 = taxonomyLevel23.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty31 = postObservedProperty29.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType32 = postObservedProperty29.getAnalysisType();
        postObservedProperty29.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = postObservedProperty29.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = postLabAnalysisMethod36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList40, observedPropertyArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = postLabAnalysisMethod38.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = analyticalGroup43.getType();
        analyticalGroup43.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = null;
        analyticalGroupItem53.AnalysisMethod = analysisMethod56;
        java.lang.String str58 = analyticalGroupItem53.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = analyticalGroupItem64.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem64.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = null;
        analyticalGroupItem64.AnalysisMethod = analysisMethod67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem48, analyticalGroupItem50, analyticalGroupItem53, analyticalGroupItem59, analyticalGroupItem62, analyticalGroupItem64 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList70, analyticalGroupItemArray69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup72 = analyticalGroup47.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList70);
        analyticalGroup43.AnalyticalGroupItems = analyticalGroupItemList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup43.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod76 = postLabAnalysisMethod42.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty77 = postObservedProperty29.setAuditAttributes(auditAttributes74);
        taxonomyLevel28.AuditAttributes = auditAttributes74;
        postDetectioncondition22.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit80 = putUnit5.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup81 = putUnitGroup0.setAuditAttributes(auditAttributes74);
        java.lang.Object obj82 = putUnitGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup84 = putUnitGroup0.setSupportsConversion((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(unitGroupSystemCodeType4);
        org.junit.Assert.assertNotNull(putUnit7);
        org.junit.Assert.assertNotNull(putUnit9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(postDetectioncondition14);
        org.junit.Assert.assertNotNull(postDetectioncondition22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(taxonomyLevel26);
        org.junit.Assert.assertNotNull(taxonomyLevel28);
        org.junit.Assert.assertNotNull(postObservedProperty31);
        org.junit.Assert.assertNull(analysisType32);
        org.junit.Assert.assertNull(quantity35);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod38);
        org.junit.Assert.assertNotNull(observedPropertyArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod42);
        org.junit.Assert.assertNull(analyticalGroupType44);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod65);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(analyticalGroup72);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod76);
        org.junit.Assert.assertNotNull(postObservedProperty77);
        org.junit.Assert.assertNotNull(putUnit80);
        org.junit.Assert.assertNotNull(putUnitGroup81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertNotNull(putUnitGroup84);
    }

    @Test
    public void test52697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52697");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        java.lang.Boolean boolean1 = postRole0.isCanRemoveFieldVisits();
        java.lang.Boolean boolean2 = postRole0.CanEditAppendConfigurations;
        postRole0.CanEditLocationDetails = false;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test52698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52698");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.String str2 = role0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role4 = role0.setCanEditData((java.lang.Boolean) true);
        role0.CanAddAppendConfigurations = false;
        java.lang.Boolean boolean7 = role0.isCanAddOrRemoveLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role9 = role0.setCanAddOrRemoveLocations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role11 = role9.setCanReadData((java.lang.Boolean) false);
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(role4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(role9);
        org.junit.Assert.assertNotNull(role11);
    }

    @Test
    public void test52699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52699");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.AssemblyName = "";
        reportPlugin0.IsEnabled = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setFolderName("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin8 = reportPlugin0.setAssemblyName("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        reportPlugin0.AssemblyName = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNotNull(reportPlugin8);
    }

    @Test
    public void test52700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52700");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        referencePoint0.UniqueId = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        java.time.Instant instant13 = locationDescriptionListServiceResponse3.NextToken;
        referencePoint0.DecommissionedDate = instant13;
        java.time.Instant instant15 = referencePoint0.getDecommissionedDate();
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test52701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52701");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_2 = postUserV2_0.setUserProfile(userProfile1);
        java.lang.Object obj3 = postUserV2_0.getResponseType();
        java.lang.String str4 = postUserV2_0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType5 = postUserV2_0.getUserType();
        org.junit.Assert.assertNotNull(postUserV2_2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(userType5);
    }

    @Test
    public void test52702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52702");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole putRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole();
        java.lang.Object obj1 = putRole0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase3 = putRole0.setCanEditData((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertNotNull(roleBase3);
    }

    @Test
    public void test52703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52703");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str1 = getExportObservations0.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations0.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations5.setSort("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.CustomId;
        java.util.List<java.lang.String> strList18 = getObservationsV2_14.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_14.setMedia((java.util.List<java.lang.String>) strList30);
        getExportObservations5.SamplingLocationGroupIds = strList30;
        java.lang.String str36 = getExportObservations5.FilterId;
        java.lang.String str37 = getExportObservations5.getDepthUnitId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test52704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52704");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.time.Instant instant1 = ratingModelDescriptionListServiceResponse0.NextToken;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList2 = ratingModelDescriptionListServiceResponse0.getRatingModelDescriptions();
        java.time.Instant instant3 = ratingModelDescriptionListServiceResponse0.NextToken;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList4 = ratingModelDescriptionListServiceResponse0.RatingModelDescriptions;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(ratingModelDescriptionList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(ratingModelDescriptionList4);
    }

    @Test
    public void test52705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52705");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection65 = locationDatumPeriod0.MeasurementDirection;
        java.lang.String str66 = locationDatumPeriod0.getMethod();
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
        org.junit.Assert.assertNull(measurementDirection65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test52706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52706");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup1 = specimen0.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen3 = specimen0.setPreservative(preservativeType2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = specimen0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType5 = specimen0.Preservative;
        java.lang.String str6 = specimen0.getName();
        org.junit.Assert.assertNull(analyticalGroup1);
        org.junit.Assert.assertTrue("'" + preservativeType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNotNull(specimen3);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertTrue("'" + preservativeType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52707");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading2.ReadingType = fieldVisitReadingType5;
        java.util.ArrayList<java.lang.String> strList7 = fieldVisitReading2.getQualifiers();
        java.lang.Integer int8 = fieldVisitReading2.getGradeCode();
        java.lang.String str9 = fieldVisitReading2.getControlCondition();
        java.lang.String str10 = fieldVisitReading2.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType12 = calibrationCheck11.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = calibrationCheck11.Value;
        java.lang.String str14 = calibrationCheck11.getModel();
        java.time.Instant instant15 = calibrationCheck11.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails16 = null;
        calibrationCheck11.StandardDetails = standardDetails16;
        java.lang.String str18 = calibrationCheck11.getNodeDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType20 = gapToleranceOperation19.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList22 = fieldVisitDataServiceResponse21.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse24 = fieldVisitDataServiceResponse21.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        fieldVisitDataServiceResponse21.ResponseTime = instant28;
        gapToleranceOperation19.DateAppliedUtc = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str33 = gapToleranceOperation32.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation35 = gapToleranceOperation32.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase38 = locationDatumPeriod36.setComment("'.'SSSSSSS");
        java.lang.String str39 = locationDatumPeriodBase38.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase43 = locationDatumPeriodBase38.setValidFrom(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange44 = gapToleranceOperation32.setStartTime(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange45 = gapToleranceOperation19.setEndTime(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck46 = calibrationCheck11.setTime(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading47 = fieldVisitReading2.setTime(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading49 = fieldVisitReading2.setComments("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType51 = null;
        uncertainty50.UncertaintyType = uncertaintyType51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay53 = uncertainty50.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType55 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty54.QualitativeUncertainty = qualitativeUncertaintyType55;
        uncertainty50.QualitativeUncertainty = qualitativeUncertaintyType55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType58 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty59 = uncertainty50.setQualitativeUncertainty(qualitativeUncertaintyType58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType61 = null;
        uncertainty60.UncertaintyType = uncertaintyType61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay63 = uncertainty60.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty64.QualitativeUncertainty = qualitativeUncertaintyType65;
        uncertainty60.QualitativeUncertainty = qualitativeUncertaintyType65;
        uncertainty59.QualitativeUncertainty = qualitativeUncertaintyType65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType69 = null;
        uncertainty59.QualitativeUncertainty = qualitativeUncertaintyType69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType71 = uncertainty59.UncertaintyType;
        fieldVisitReading2.Uncertainty = uncertainty59;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(calibrationCheckType12);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(metadataChangeOperationType20);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList22);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(gapToleranceOperation35);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase43);
        org.junit.Assert.assertNotNull(timeRange44);
        org.junit.Assert.assertNotNull(timeRange45);
        org.junit.Assert.assertNotNull(calibrationCheck46);
        org.junit.Assert.assertNotNull(fieldVisitReading47);
        org.junit.Assert.assertNotNull(fieldVisitReading49);
        org.junit.Assert.assertNull(doubleWithDisplay53);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType55.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty59);
        org.junit.Assert.assertNull(doubleWithDisplay63);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNull(uncertaintyType71);
    }

    @Test
    public void test52708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52708");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation3 = correctionOperation1.setType(correctionType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation1.OperationType = metadataChangeOperationType4;
        java.time.Instant instant6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = correctionOperation1.setDateAppliedUtc(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = methodOperation8.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation11 = methodOperation8.setOperationType(metadataChangeOperationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = correctionOperation7.setOperationType(metadataChangeOperationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation15 = correctionOperation13.setType(correctionType14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation13.OperationType = metadataChangeOperationType16;
        java.time.Instant instant18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = correctionOperation13.setDateAppliedUtc(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = methodOperation20.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation23 = methodOperation20.setOperationType(metadataChangeOperationType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation24 = correctionOperation19.setOperationType(metadataChangeOperationType22);
        correctionOperation7.OperationType = metadataChangeOperationType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType27 = trendLineAnalysisServiceRequest26.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark30 = locationRemark28.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        locationRemark30.FromTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark36 = locationRemark30.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod39 = timeSeriesThresholdPeriod37.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription42 = locationDescription40.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType44 = null;
        controlConditionActivity43.ControlCleaned = controlCleanedType44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        controlConditionActivity43.DateCleaned = instant47;
        locationDescription42.LastModified = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod51 = timeSeriesThresholdPeriod39.setAppliedTime(instant47);
        locationRemark36.ToTime = instant47;
        trendLineAnalysisServiceRequest26.QueryFrom = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation54 = correctionOperation7.setDateAppliedUtc(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList56, correctionOperationArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction58 = metadataChangeTransaction0.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction60 = metadataChangeTransaction0.setAppliedByUser("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction62 = metadataChangeTransaction0.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList63 = metadataChangeTransaction62.CorrectionOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction65 = metadataChangeTransaction62.setAppliedByUser("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertTrue("'" + correctionType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation3);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation7);
        org.junit.Assert.assertNull(metadataChangeOperationType9);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation11);
        org.junit.Assert.assertNotNull(correctionOperation12);
        org.junit.Assert.assertTrue("'" + correctionType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation15);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation19);
        org.junit.Assert.assertNull(metadataChangeOperationType21);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation23);
        org.junit.Assert.assertNotNull(correctionOperation24);
        org.junit.Assert.assertNull(trendLineAnalysisType27);
        org.junit.Assert.assertNotNull(locationRemark30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationRemark36);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod39);
        org.junit.Assert.assertNotNull(locationDescription42);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod51);
        org.junit.Assert.assertNotNull(correctionOperation54);
        org.junit.Assert.assertNotNull(correctionOperationArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction58);
        org.junit.Assert.assertNotNull(metadataChangeTransaction60);
        org.junit.Assert.assertNotNull(metadataChangeTransaction62);
        org.junit.Assert.assertNotNull(correctionOperationList63);
        org.junit.Assert.assertNotNull(metadataChangeTransaction65);
    }

    @Test
    public void test52709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52709");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit0.setSymbol("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit0.setSingularName("'.'SSSSSSS");
        java.lang.String str7 = unit6.getSymbol();
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test52710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52710");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport();
        getLabReport0.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport4 = getLabReport0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport6 = getLabReport4.setId("");
        java.lang.String str7 = getLabReport4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport9 = getLabReport4.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport11 = getLabReport4.setId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport13 = getLabReport4.setId("POST");
        java.lang.String str14 = getLabReport13.getId();
        java.lang.String str15 = getLabReport13.Id;
        org.junit.Assert.assertNotNull(getLabReport4);
        org.junit.Assert.assertNotNull(getLabReport6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(getLabReport9);
        org.junit.Assert.assertNotNull(getLabReport11);
        org.junit.Assert.assertNotNull(getLabReport13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "POST" + "'", str14, "POST");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "POST" + "'", str15, "POST");
    }

    @Test
    public void test52711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52711");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant3 = sensor2.getLastModifiedUtc();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor5 = sensor2.setLastModifiedUtc(instant4);
        java.time.Instant instant6 = sensor2.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = timeAlignedDataServiceRequest0.setQueryTo(instant6);
        java.time.Instant instant8 = timeAlignedDataServiceRequest0.QueryFrom;
        java.time.Instant instant9 = timeAlignedDataServiceRequest0.getQueryFrom();
        java.time.Instant instant10 = timeAlignedDataServiceRequest0.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = timeAlignedDataServiceRequest0.setApplyRounding((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(sensor5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest12);
    }

    @Test
    public void test52712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52712");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList1 = auditHistory0.getAuditChanges();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList2 = auditHistory0.getAuditChanges();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory4 = auditHistory0.setModificationTime(offsetDateTime3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList5 = auditHistory4.AuditChanges;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList7 = postUser6.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser9 = postUser6.setEmail("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser11 = postUser6.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Object obj12 = postUser6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser14 = postUser6.setUserType(userType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str16 = userProfile15.LastName;
        postUser14.UserProfile = userProfile15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory18 = auditHistory4.setUserProfile(userProfile15);
        org.junit.Assert.assertNull(auditChangeList1);
        org.junit.Assert.assertNull(auditChangeList2);
        org.junit.Assert.assertNotNull(auditHistory4);
        org.junit.Assert.assertNull(auditChangeList5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(postUser9);
        org.junit.Assert.assertNotNull(postUser11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertTrue("'" + userType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(auditHistory18);
    }

    @Test
    public void test52713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52713");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_8 = putObservationV2_6.setObservedProperty(observedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult9 = putObservationV2_6.getNumericResult();
        java.lang.String str10 = putObservationV2_6.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        observation13.LabInstruction = labInstruction14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod16 = observation13.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier17 = null;
        observation13.NullMeasureQualifier = nullMeasureQualifier17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation13.DataClassification = dataClassificationType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_21 = putObservationV2_6.setDataClassification(dataClassificationType19);
        putObservationV2_2.DataClassification = dataClassificationType19;
        putObservationV2_2.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str25 = putObservationV2_2.getCustomId();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(putObservationV2_8);
        org.junit.Assert.assertNull(numericResult9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(collectionMethod16);
        org.junit.Assert.assertTrue("'" + dataClassificationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNotNull(putObservationV2_21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str25, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test52714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52714");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        putOpenIdConnectUser0.CanLaunchRatingDevelopmentToolbox = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase6 = putOpenIdConnectUser0.setActive((java.lang.Boolean) true);
        java.lang.Boolean boolean7 = userBase6.Active;
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNotNull(userBase6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
    }

    @Test
    public void test52715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52715");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList4, extendedAttributeValueArray3);
        postLocation0.ExtendedAttributeValues = extendedAttributeValueList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase8 = postLocation0.setElevation((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase10 = postLocation0.setLatitude((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase12 = postLocation0.setLocationName("multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNotNull(extendedAttributeValueArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locationBase8);
        org.junit.Assert.assertNotNull(locationBase10);
        org.junit.Assert.assertNotNull(locationBase12);
    }

    @Test
    public void test52716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52716");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        postTag0.Id = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.lang.String str6 = postTag0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag8 = postTag0.setId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
        org.junit.Assert.assertNotNull(postTag8);
    }

    @Test
    public void test52717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52717");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = putActivity0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity5 = null;
        putActivity4.PlannedActivity = plannedActivity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = null;
        putActivity7.PlannedActivity = plannedActivity8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity10.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity10.setPlannedActivity(plannedActivity13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str16 = samplingContextTag15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag15.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = samplingContextTag18.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str24 = samplingContextTag23.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        samplingContextTag23.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = samplingContextTag27.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag20, samplingContextTag21, samplingContextTag23, samplingContextTag30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32, samplingContextTagArray31);
        postActivity10.SamplingContextTags = samplingContextTagList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity35 = putActivity7.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32);
        putActivity4.SamplingContextTags = samplingContextTagList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity37 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod38 = putActivity0.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity39 = putActivity0.PlannedActivity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity41 = putActivity0.setPlannedActivity(plannedActivity40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails42.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime45 = activityWithDetails42.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration46 = activityWithDetails42.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList47 = activityWithDetails42.getSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails49 = activityWithDetails42.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = indexConfiguration50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = indexConfiguration50.AuditAttributes;
        indexConfiguration50.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = indexConfiguration50.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = unit56.AuditAttributes;
        unit56.Name = "2021.4.62.0";
        java.lang.String str60 = unit56.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit62 = unit56.setName("MinDuration");
        java.lang.String str63 = unit56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = unit56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration65 = indexConfiguration50.setUnit(unit56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails66 = activityWithDetails49.setIndexConfiguration(indexConfiguration65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType67 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.OTHER_QC;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails68 = activityWithDetails66.setType(activityWithDetailsType67);
        putActivity0.Type = activityWithDetailsType67;
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNotNull(samplingContextTag20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(samplingContextTag30);
        org.junit.Assert.assertNotNull(samplingContextTagArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putActivity35);
        org.junit.Assert.assertNotNull(putActivity37);
        org.junit.Assert.assertNull(collectionMethod38);
        org.junit.Assert.assertNull(plannedActivity39);
        org.junit.Assert.assertNotNull(putActivity41);
        org.junit.Assert.assertNull(offsetDateTime45);
        org.junit.Assert.assertNull(indexConfiguration46);
        org.junit.Assert.assertNull(specimenNestedInActivityList47);
        org.junit.Assert.assertNotNull(activityWithDetails49);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNull(unit55);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(unit62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(auditAttributes64);
        org.junit.Assert.assertNotNull(indexConfiguration65);
        org.junit.Assert.assertNotNull(activityWithDetails66);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.OTHER_QC + "'", activityWithDetailsType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.OTHER_QC));
        org.junit.Assert.assertNotNull(activityWithDetails68);
    }

    @Test
    public void test52718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52718");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("https");
        openIdConnectRelyingPartyConfigurationBase4.OptionalIssuerDiscoveryUri = "2021.4.62.0";
        openIdConnectRelyingPartyConfigurationBase4.IdentifierClaim = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase10 = openIdConnectRelyingPartyConfigurationBase4.setClientSecret("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        java.time.Instant instant18 = getObservationsV2_11.getStartObservedTime();
        java.util.List<java.lang.String> strList19 = getObservationsV2_11.Ids;
        java.util.List<java.lang.String> strList20 = getObservationsV2_11.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase21 = openIdConnectRelyingPartyConfigurationBase10.setScopes(strList20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase23 = openIdConnectRelyingPartyConfigurationBase21.setDisplayName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str24 = openIdConnectRelyingPartyConfigurationBase21.ClientSecret;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase21);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str24, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test52719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52719");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setLoggerFileName("");
        java.lang.String str9 = putActivity0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList11 = chartData10.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData13 = chartData10.setDepthUnitGroupWithUnits(unitGroupWithUnits12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits14 = chartData10.UnitGroupWithUnits;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation15 = chartData10.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty16.CasNumber = "MinDuration";
        java.lang.String str19 = observedProperty16.getCasNumber();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList20 = observedProperty16.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData21 = chartData10.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_24 = postObservationV2_22.setLabInstruction(labInstruction23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails25.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_30 = postObservationV2_24.setLabResultDetails(labResultDetails29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium31 = postObservationV2_24.getMedium();
        java.lang.String str32 = postObservationV2_24.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType33 = postObservationV2_24.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty36 = postObservedProperty34.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType37 = postObservedProperty34.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity38 = postObservedProperty34.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity40 = null;
        putActivity39.PlannedActivity = plannedActivity40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity42.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity46 = postActivity42.setPlannedActivity(plannedActivity45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str48 = samplingContextTag47.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag50 = samplingContextTag47.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag50.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str54 = samplingContextTag53.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str56 = samplingContextTag55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = null;
        samplingContextTag55.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str60 = samplingContextTag59.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag62 = samplingContextTag59.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag52, samplingContextTag53, samplingContextTag55, samplingContextTag62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList64, samplingContextTagArray63);
        postActivity42.SamplingContextTags = samplingContextTagList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity67 = putActivity39.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration68 = null;
        putActivity39.IndexConfiguration = indexConfiguration68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str71 = metricConfiguration70.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty72.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration75 = metricConfiguration70.setObservedProperty(observedProperty72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType76 = observedProperty72.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup78 = postObservedProperty77.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit80 = null;
        quantity79.Unit = unit80;
        postObservedProperty77.LowerLimit = quantity79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity83 = postObservedProperty77.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit84 = quantity83.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty85 = observedProperty72.setUpperLimit(quantity83);
        putActivity39.Depth = quantity83;
        postObservedProperty34.LowerLimit = quantity83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_88 = postObservationV2_24.setDepth(quantity83);
        observedProperty16.LowerLimit = quantity83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity90 = putActivity0.setDepth(quantity83);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList91 = putActivity90.getSpecimens();
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(chartDataPointList11);
        org.junit.Assert.assertNotNull(chartData13);
        org.junit.Assert.assertNull(unitGroupWithUnits14);
        org.junit.Assert.assertNull(samplingLocation15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MinDuration" + "'", str19, "MinDuration");
        org.junit.Assert.assertNull(importHistoryEventSimpleList20);
        org.junit.Assert.assertNotNull(chartData21);
        org.junit.Assert.assertNotNull(postObservationV2_24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(postObservationV2_30);
        org.junit.Assert.assertNull(medium31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(dataClassificationType33);
        org.junit.Assert.assertNotNull(postObservedProperty36);
        org.junit.Assert.assertNull(analysisType37);
        org.junit.Assert.assertNull(quantity38);
        org.junit.Assert.assertNotNull(postActivity46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(samplingContextTag50);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(samplingContextTag62);
        org.junit.Assert.assertNotNull(samplingContextTagArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putActivity67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(metricConfiguration75);
        org.junit.Assert.assertNull(resultType76);
        org.junit.Assert.assertNull(unitGroup78);
        org.junit.Assert.assertNotNull(quantity83);
        org.junit.Assert.assertNull(unit84);
        org.junit.Assert.assertNotNull(observedProperty85);
        org.junit.Assert.assertNotNull(postObservationV2_88);
        org.junit.Assert.assertNotNull(putActivity90);
        org.junit.Assert.assertNull(specimenNestedInActivityList91);
    }

    @Test
    public void test52720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52720");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime2 = activity1.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity4 = activity1.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList26, plannedActivityArray25);
        putFieldVisit24.PlannedActivities = plannedActivityList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = domainObjectAttachment29.setAttachment(attachment32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str35 = domainObjectAttachment34.getId();
        java.lang.String str36 = domainObjectAttachment34.getId();
        domainObjectAttachment34.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment34.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        java.lang.String str43 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = domainObjectAttachment41.setAttachment(attachment44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        java.lang.String str50 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = domainObjectAttachment48.setAttachment(attachment51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str54 = domainObjectAttachment53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment29, domainObjectAttachment34, domainObjectAttachment41, domainObjectAttachment46, domainObjectAttachment48, domainObjectAttachment53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56, domainObjectAttachmentArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit24.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56);
        samplingLocation22.Attachments = domainObjectAttachmentList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation61 = samplingLocation22.setAddress(address60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation61.setHorizontalCollectionMethod("https");
        activity4.SamplingLocation = samplingLocation61;
        activity4.LoggerFileName = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations67 = specimenWithObservations0.setActivity(activity4);
        java.lang.String str68 = activity4.LoggerFileName;
        java.lang.String str69 = activity4.getCustomId();
        activity4.Refreshed = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity73 = activity4.setCustomId("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(activity4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNotNull(plannedActivityArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(domainObjectAttachment45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(domainObjectAttachment52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putFieldVisit58);
        org.junit.Assert.assertNotNull(samplingLocation61);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNotNull(specimenWithObservations67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(activity73);
    }

    @Test
    public void test52721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52721");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened putRoleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened();
        java.lang.Boolean boolean1 = putRoleFlattened0.isCanEditAppendConfigurations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase3 = putRoleFlattened0.setCanAddOrRemoveLocations((java.lang.Boolean) true);
        java.lang.String str4 = roleFlattenedBase3.getName();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(roleFlattenedBase3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test52722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52722");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] monitoringMethodArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod> monitoringMethodList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>) monitoringMethodList2, monitoringMethodArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse4 = monitoringMethodListServiceResponse0.setMonitoringMethods(monitoringMethodList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse6 = monitoringMethodListServiceResponse4.setSummary("MaxInstant");
        java.lang.String str7 = monitoringMethodListServiceResponse6.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse9 = monitoringMethodListServiceResponse6.setResponseVersion((java.lang.Integer) 5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest12 = fieldVisitDescriptionListServiceRequest10.setQueryTo(instant11);
        java.time.Instant instant13 = fieldVisitDescriptionListServiceRequest10.getQueryTo();
        java.lang.Boolean boolean14 = fieldVisitDescriptionListServiceRequest10.IncludeInvalidFieldVisits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant16 = locationDatumPeriod15.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod18 = locationDatumPeriod15.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj21 = timeAlignedDataServiceRequest20.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = timeAlignedDataServiceRequest20.setQueryFrom(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription26 = timeSeriesDescription19.setRawStartTime(instant23);
        locationDatumPeriod15.ValidFrom = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest28 = fieldVisitDescriptionListServiceRequest10.setChangesSinceToken(instant23);
        monitoringMethodListServiceResponse9.ResponseTime = instant23;
        org.junit.Assert.assertNotNull(monitoringMethodArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse4);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxInstant" + "'", str7, "MaxInstant");
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNotNull(locationDatumPeriod18);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest25);
        org.junit.Assert.assertNotNull(timeSeriesDescription26);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest28);
    }

    @Test
    public void test52723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52723");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        postExtendedAttribute0.ValueType = tagValueType1;
        java.lang.Boolean boolean3 = postExtendedAttribute0.Required;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute5 = postExtendedAttribute0.setRequired((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = editableExtendedAttribute5.VisibleInDatasetList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType7 = editableExtendedAttribute5.getValueType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType8 = editableExtendedAttribute5.ValueType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrips getFieldTrips9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrips();
        java.lang.Integer int10 = getFieldTrips9.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrips getFieldTrips12 = getFieldTrips9.setLimit((java.lang.Integer) (-1));
        getFieldTrips12.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType16 = getObservationExportIIV2_15.getFormat();
        java.lang.String str17 = getObservationExportIIV2_15.getDepthUnitId();
        java.util.List<java.lang.String> strList18 = getObservationExportIIV2_15.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        java.util.List<java.lang.String> strList34 = getObservationsV2_19.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList35 = getObservationsV2_19.DataClassifications;
        java.util.List<java.lang.String> strList36 = getObservationsV2_19.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj38 = timeAlignedDataServiceRequest37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        getObservationsV2_45.DepthUnitCustomId = "hi!";
        java.lang.String str48 = getObservationsV2_45.CustomId;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.QualityControlTypes = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_45.setMedia((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str67 = getObservationsV2_66.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        getObservationsV2_68.SpecimenIds = strList71;
        getObservationsV2_66.ProjectIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_45.setObservedPropertyIds((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = timeAlignedDataServiceRequest37.setTimeSeriesOutputUnitIds(strList71);
        getObservationsV2_19.LabReportIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_78 = getObservationExportIIV2_15.setMedia((java.util.List<java.lang.String>) strList71);
        getFieldTrips12.Search = strList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute80 = editableExtendedAttribute5.setPickListValues(strList71);
        org.junit.Assert.assertTrue("'" + tagValueType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(editableExtendedAttribute5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + tagValueType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertTrue("'" + tagValueType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(getFieldTrips12);
        org.junit.Assert.assertNull(getObservationExportIIFormatType16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest76);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_78);
        org.junit.Assert.assertNotNull(editableExtendedAttribute80);
    }

    @Test
    public void test52724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52724");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setRecurrence(samplingPlanPlannedActivityRecurrence1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        activityTemplate3.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod6 = activityTemplate3.CollectionMethod;
        activityTemplate3.Comment = "MaxInstant";
        samplingPlanPlannedActivity0.ActivityTemplate = activityTemplate3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType11 = samplingPlanPlannedActivityRecurrence10.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = samplingPlanPlannedActivity0.setRecurrence(samplingPlanPlannedActivityRecurrence10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity15 = samplingPlanPlannedActivity13.setRecurrence(samplingPlanPlannedActivityRecurrence14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = null;
        activityTemplate16.AuditAttributes = auditAttributes17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod19 = activityTemplate16.CollectionMethod;
        activityTemplate16.Comment = "MaxInstant";
        samplingPlanPlannedActivity13.ActivityTemplate = activityTemplate16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType24 = samplingPlanPlannedActivityRecurrence23.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = samplingPlanPlannedActivity13.setRecurrence(samplingPlanPlannedActivityRecurrence23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.BI_WEEKLY;
        samplingPlanPlannedActivityRecurrence23.RecurrenceFrequency = recurrenceFrequencyType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType28 = samplingPlanPlannedActivityRecurrence23.RecurrenceFrequency;
        samplingPlanPlannedActivityRecurrence10.RecurrenceFrequency = recurrenceFrequencyType28;
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNull(collectionMethod6);
        org.junit.Assert.assertNull(temporalExpressionType11);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity12);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity15);
        org.junit.Assert.assertNull(collectionMethod19);
        org.junit.Assert.assertNull(temporalExpressionType24);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity25);
        org.junit.Assert.assertTrue("'" + recurrenceFrequencyType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.BI_WEEKLY + "'", recurrenceFrequencyType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.BI_WEEKLY));
        org.junit.Assert.assertTrue("'" + recurrenceFrequencyType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.BI_WEEKLY + "'", recurrenceFrequencyType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.BI_WEEKLY));
    }

    @Test
    public void test52725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52725");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str3 = adcpDischargeActivity0.getBottomEstimateMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = adcpDischargeActivity0.TransducerDepth;
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
    }

    @Test
    public void test52726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52726");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest2 = fieldVisitDescriptionListServiceRequest0.setQueryTo(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest4 = fieldVisitDescriptionListServiceRequest0.setIncludeInvalidFieldVisits((java.lang.Boolean) true);
        java.lang.String str5 = fieldVisitDescriptionListServiceRequest4.getLocationIdentifier();
        java.lang.Object obj6 = fieldVisitDescriptionListServiceRequest4.getResponseType();
        java.lang.String str7 = fieldVisitDescriptionListServiceRequest4.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant9 = activeMeterCalibration8.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant11 = activeMeterCalibration10.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double13 = activeMeterCalibrationEquation12.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double15 = activeMeterCalibrationEquation14.getSlope();
        java.lang.String str16 = activeMeterCalibrationEquation14.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double18 = activeMeterCalibrationEquation17.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation12, activeMeterCalibrationEquation14, activeMeterCalibrationEquation17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList20, activeMeterCalibrationEquationArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration22 = activeMeterCalibration10.setEquations(activeMeterCalibrationEquationList20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList23 = activeMeterCalibration10.getEquations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration24 = activeMeterCalibration8.setEquations(activeMeterCalibrationEquationList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant26 = activeMeterCalibration25.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant28 = activeMeterCalibration27.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double30 = activeMeterCalibrationEquation29.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double32 = activeMeterCalibrationEquation31.getSlope();
        java.lang.String str33 = activeMeterCalibrationEquation31.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double35 = activeMeterCalibrationEquation34.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation29, activeMeterCalibrationEquation31, activeMeterCalibrationEquation34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList37, activeMeterCalibrationEquationArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration39 = activeMeterCalibration27.setEquations(activeMeterCalibrationEquationList37);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList40 = activeMeterCalibration27.getEquations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration41 = activeMeterCalibration25.setEquations(activeMeterCalibrationEquationList40);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList42 = activeMeterCalibration25.getEquations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration43 = activeMeterCalibration8.setEquations(activeMeterCalibrationEquationList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str45 = timeSeriesApprovalsTransactionListServiceRequest44.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType47 = null;
        controlConditionActivity46.ControlCleaned = controlCleanedType47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse49.setNextToken(instant50);
        controlConditionActivity46.DateCleaned = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest53 = timeSeriesApprovalsTransactionListServiceRequest44.setQueryTo(instant50);
        timeSeriesApprovalsTransactionListServiceRequest44.TimeSeriesUniqueId = "https";
        java.time.Instant instant56 = timeSeriesApprovalsTransactionListServiceRequest44.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList58 = fieldVisitDataServiceResponse57.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse60 = fieldVisitDataServiceResponse57.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary61.Reviewer = "";
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary61.MeasurementTime = instant64;
        fieldVisitDataServiceResponse57.ResponseTime = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest67 = timeSeriesApprovalsTransactionListServiceRequest44.setQueryFrom(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration68 = activeMeterCalibration8.setFirstUsedDate(instant64);
        fieldVisitDescriptionListServiceRequest4.QueryTo = instant64;
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest2);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration22);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList23);
        org.junit.Assert.assertNotNull(activeMeterCalibration24);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNull(double32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(double35);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration39);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList40);
        org.junit.Assert.assertNotNull(activeMeterCalibration41);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList42);
        org.junit.Assert.assertNotNull(activeMeterCalibration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest53);
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList58);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse60);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest67);
        org.junit.Assert.assertNotNull(activeMeterCalibration68);
    }

    @Test
    public void test52727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52727");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str1 = analysisMethodSimple0.getId();
        java.lang.String str2 = analysisMethodSimple0.getId();
        analysisMethodSimple0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = analysisMethodSimple0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple7 = analysisMethodSimple0.setContext("2021.8.9990");
        analysisMethodSimple7.Id = "multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(analysisMethodSimple7);
    }

    @Test
    public void test52728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52728");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest();
        java.lang.Object obj1 = expandedStageTableServiceRequest0.getResponseType();
        java.lang.Double double2 = expandedStageTableServiceRequest0.getEndValue();
        java.lang.Double double3 = expandedStageTableServiceRequest0.getStepSize();
        java.lang.Double double4 = expandedStageTableServiceRequest0.getStartValue();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(double4);
    }

    @Test
    public void test52729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52729");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        java.lang.String str1 = referenceStandardOffset0.getStandard();
        java.lang.Double double2 = referenceStandardOffset0.getUncertainty();
        referenceStandardOffset0.Uncertainty = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset6 = referenceStandardOffset0.setMethod("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset8 = referenceStandardOffset0.setOffsetToReferenceStandard((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset10 = referenceStandardOffset8.setMethod("http://MaxDurationhttp/json/reply/String");
        referenceStandardOffset10.Uncertainty = 0.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(referenceStandardOffset6);
        org.junit.Assert.assertNotNull(referenceStandardOffset8);
        org.junit.Assert.assertNotNull(referenceStandardOffset10);
    }

    @Test
    public void test52730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52730");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity4 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = postActivityTemplate0.getMedium();
        postActivityTemplate0.Comment = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType8 = postActivityTemplate0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate10 = postActivityTemplate0.setComment("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType11 = postActivityTemplate0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = postActivityTemplate0.AuditAttributes;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNull(quantity4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNull(mediumType8);
        org.junit.Assert.assertNotNull(postActivityTemplate10);
        org.junit.Assert.assertNull(mediumType11);
        org.junit.Assert.assertNull(auditAttributes12);
    }

    @Test
    public void test52731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52731");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType15 = importItemObject0.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = categoricalResult16.setValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setExistingItem((java.lang.Object) "https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_22 = postObservationV2_20.setLabInstruction(labInstruction21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus23.Id = "0001-01-01T00:00:00.000Z";
        resultStatus23.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = putDetectioncondition28.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition31 = putDetectioncondition28.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putDetectioncondition28.AuditAttributes = auditAttributes39;
        resultStatus23.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_42 = postObservationV2_20.setResultStatus(resultStatus23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity44 = null;
        putActivity43.Depth = quantity44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList47, metricResultArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity49 = putActivity43.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType50 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity51 = putActivity43.setType(activityWithDetailsType50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putActivity51.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str55 = metricConfiguration54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty56.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration59 = metricConfiguration54.setObservedProperty(observedProperty56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType60 = observedProperty56.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup62 = postObservedProperty61.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit64 = null;
        quantity63.Unit = unit64;
        postObservedProperty61.LowerLimit = quantity63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity67 = postObservedProperty61.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit68 = quantity67.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty69 = observedProperty56.setUpperLimit(quantity67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation70 = samplingLocation53.setElevation(quantity67);
        java.lang.Double double71 = quantity67.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity72 = putActivity51.setDepth(quantity67);
        postObservationV2_42.Depth = quantity67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject74 = importItemObject0.setExistingItem((java.lang.Object) postObservationV2_42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_76 = postObservationV2_42.setId("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNull(importItemStatusType15);
        org.junit.Assert.assertNotNull(categoricalResult18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(postObservationV2_22);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(putDetectioncondition31);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(postObservationV2_42);
        org.junit.Assert.assertNotNull(metricResultArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(putActivity49);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType50.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity51);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(metricConfiguration59);
        org.junit.Assert.assertNull(resultType60);
        org.junit.Assert.assertNull(unitGroup62);
        org.junit.Assert.assertNotNull(quantity67);
        org.junit.Assert.assertNull(unit68);
        org.junit.Assert.assertNotNull(observedProperty69);
        org.junit.Assert.assertNotNull(samplingLocation70);
        org.junit.Assert.assertNull(double71);
        org.junit.Assert.assertNotNull(putActivity72);
        org.junit.Assert.assertNotNull(importItemObject74);
        org.junit.Assert.assertNotNull(postObservationV2_76);
    }

    @Test
    public void test52732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52732");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setGradeCode6((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint0.setMethod9("/AQUARIUS/Publish/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint0.setGradeCode7((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint16.setGradeCode2((java.lang.Long) (-1L));
        java.lang.Double double19 = timeAlignedPoint18.getNumericValue9();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
        org.junit.Assert.assertNull(double19);
    }

    @Test
    public void test52733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52733");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        java.lang.String str4 = laboratory1.PhoneNumber;
        laboratory1.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        java.lang.String str10 = laboratory7.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory1, laboratory7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12, laboratoryArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory14 = searchResultLaboratory0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12);
        searchResultLaboratory14.TotalCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory18 = searchResultLaboratory14.setCursor("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        searchResultLaboratory18.TotalCount = 4;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(laboratoryArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory14);
        org.junit.Assert.assertNotNull(searchResultLaboratory18);
    }

    @Test
    public void test52734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52734");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList8 = timeSeriesDataServiceResponse3.getGapTolerances();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList10 = timeSeriesDataServiceResponse9.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse12 = timeSeriesDataServiceResponse9.setTimeRange(statisticalTimeRange11);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList13 = null;
        timeSeriesDataServiceResponse9.Approvals = approvalList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType16 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest17 = trendLineAnalysisServiceRequest15.setType(trendLineAnalysisType16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType18 = trendLineAnalysisServiceRequest17.Type;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList19 = trendLineAnalysisServiceRequest17.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj21 = timeAlignedDataServiceRequest20.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str23 = attachment22.getUrl();
        java.lang.String str24 = attachment22.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double26 = putBulkEditResultGradesV2_25.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        java.util.List<java.lang.String> strList42 = getObservationsV2_27.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList43 = getObservationsV2_27.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType44 = getObservationsV2_27.FieldResultType;
        java.time.Instant instant45 = getObservationsV2_27.getEndObservedTime();
        java.lang.String str46 = getObservationsV2_27.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray51 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags47.setTagUniqueIds(strList52);
        java.util.ArrayList<java.lang.String> strList55 = putLocationTags54.TagUniqueIds;
        getObservationsV2_27.ProjectIds = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_57 = putBulkEditResultGradesV2_25.setSearch((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_59 = putBulkEditResultGradesV2_57.setLabResultLaboratoryIds(strList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType61 = calibrationCheck60.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = calibrationCheck60.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary64.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        dischargeSummary64.MeasurementTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse63.setNextToken(instant68);
        java.time.Instant instant72 = locationDescriptionListServiceResponse63.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck73 = calibrationCheck60.setTime(instant72);
        putBulkEditResultGradesV2_59.StartResultTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment75 = attachment22.setDateUploaded(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = timeAlignedDataServiceRequest20.setQueryFrom(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest77 = trendLineAnalysisServiceRequest17.setQueryFrom(instant72);
        java.time.Instant instant78 = trendLineAnalysisServiceRequest17.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType80 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest81 = trendLineAnalysisServiceRequest79.setType(trendLineAnalysisType80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset83 = null;
        timeSeriesPoint82.Timestamp = statisticalDateTimeOffset83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset86 = timeSeriesPoint85.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset88 = timeSeriesPoint87.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint82, timeSeriesPoint85, timeSeriesPoint87 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList90 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList90, timeSeriesPointArray89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest92 = trendLineAnalysisServiceRequest81.setPoints(timeSeriesPointList90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest93 = trendLineAnalysisServiceRequest17.setPoints(timeSeriesPointList90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse94 = timeSeriesDataServiceResponse9.setPoints(timeSeriesPointList90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse95 = timeSeriesDataServiceResponse3.setPoints(timeSeriesPointList90);
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(gapToleranceList8);
        org.junit.Assert.assertNull(interpolationTypeList10);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse12);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest17);
        org.junit.Assert.assertNull(trendLineAnalysisType18);
        org.junit.Assert.assertNull(timeSeriesPointList19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(double26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(fieldResultType44);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_57);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_59);
        org.junit.Assert.assertNull(calibrationCheckType61);
        org.junit.Assert.assertNull(doubleWithDisplay62);
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(calibrationCheck73);
        org.junit.Assert.assertNotNull(attachment75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest76);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest81);
        org.junit.Assert.assertNull(statisticalDateTimeOffset86);
        org.junit.Assert.assertNull(statisticalDateTimeOffset88);
        org.junit.Assert.assertNotNull(timeSeriesPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest92);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest93);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse94);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse95);
    }

    @Test
    public void test52735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52735");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        java.lang.String str3 = postSamplingLocation2.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation6 = postSamplingLocation4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = postSamplingLocation4.setAddress(address7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postSamplingLocation8.getElevation();
        postSamplingLocation8.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = postSamplingLocation8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList15, samplingLocationGroupArray14);
        postAccessGroup13.SamplingLocationGroups = samplingLocationGroupList15;
        postSamplingLocation8.SamplingLocationGroups = samplingLocationGroupList15;
        postSamplingLocation2.SamplingLocationGroups = samplingLocationGroupList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType20 = postSamplingLocation2.Type;
        java.lang.String str21 = postSamplingLocation2.VerticalDatum;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation23 = postSamplingLocation2.setCustomId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation26 = putSamplingLocation24.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup28 = postObservedProperty27.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit30 = null;
        quantity29.Unit = unit30;
        postObservedProperty27.LowerLimit = quantity29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity33 = postObservedProperty27.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = quantity33.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation35 = putSamplingLocation26.setElevation(quantity33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation36.setPlannedFieldResult(plannedFieldResult37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction39 = null;
        observation38.LabInstruction = labInstruction39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = observation38.setStatistics(observationStatistics41);
        java.time.OffsetDateTime offsetDateTime43 = observation42.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList44 = observation42.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation42.setObservedProperty(observedProperty45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade47 = observation46.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup49 = postObservedProperty48.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51, importHistoryEventSimpleArray50);
        postObservedProperty48.ImportHistoryEventSimples = importHistoryEventSimpleList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation54 = observation46.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation55 = putSamplingLocation26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType56 = putSamplingLocation26.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation58 = putSamplingLocation26.setDescription("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation61 = putSamplingLocation59.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList62 = putSamplingLocation59.ExtendedAttributes;
        java.lang.String str63 = putSamplingLocation59.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation65 = putSamplingLocation59.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation67 = putSamplingLocation65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup69 = postObservedProperty68.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit71 = null;
        quantity70.Unit = unit71;
        postObservedProperty68.LowerLimit = quantity70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity74 = postObservedProperty68.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit75 = quantity74.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation76 = putSamplingLocation67.setElevation(quantity74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation79 = postSamplingLocation77.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation81 = postSamplingLocation77.setAddress(address80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity82 = postSamplingLocation81.getElevation();
        postSamplingLocation81.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = postSamplingLocation81.getAuditAttributes();
        java.lang.String str86 = postSamplingLocation81.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation88 = postSamplingLocation81.setTimeZone(timeZone87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone91 = timeZone89.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        postSamplingLocation81.TimeZone = timeZone91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation93 = putSamplingLocation76.setTimeZone(timeZone91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation94 = putSamplingLocation58.setTimeZone(timeZone91);
        java.lang.String str95 = timeZone91.getCustomId();
        postSamplingLocation23.TimeZone = timeZone91;
        postSamplingLocation23.HorizontalCollectionMethod = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postSamplingLocation6);
        org.junit.Assert.assertNotNull(postSamplingLocation8);
        org.junit.Assert.assertNull(quantity9);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(locationType20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(postSamplingLocation23);
        org.junit.Assert.assertNotNull(putSamplingLocation26);
        org.junit.Assert.assertNull(unitGroup28);
        org.junit.Assert.assertNotNull(quantity33);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNotNull(putSamplingLocation35);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNotNull(observation42);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNull(importHistoryEventSimpleList44);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertNull(resultGrade47);
        org.junit.Assert.assertNull(unitGroup49);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(observation54);
        org.junit.Assert.assertNotNull(putSamplingLocation55);
        org.junit.Assert.assertNull(locationType56);
        org.junit.Assert.assertNotNull(putSamplingLocation58);
        org.junit.Assert.assertNotNull(putSamplingLocation61);
        org.junit.Assert.assertNull(extendedAttributeList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(putSamplingLocation65);
        org.junit.Assert.assertNotNull(putSamplingLocation67);
        org.junit.Assert.assertNull(unitGroup69);
        org.junit.Assert.assertNotNull(quantity74);
        org.junit.Assert.assertNull(unit75);
        org.junit.Assert.assertNotNull(putSamplingLocation76);
        org.junit.Assert.assertNotNull(postSamplingLocation79);
        org.junit.Assert.assertNotNull(postSamplingLocation81);
        org.junit.Assert.assertNull(quantity82);
        org.junit.Assert.assertNull(auditAttributes85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(postSamplingLocation88);
        org.junit.Assert.assertNotNull(timeZone91);
        org.junit.Assert.assertNotNull(putSamplingLocation93);
        org.junit.Assert.assertNotNull(putSamplingLocation94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str95, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test52736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52736");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = pointVelocityDischargeActivity0.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        java.lang.String str9 = pointVelocityDischargeActivity0.getMeterEquation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity10.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity10.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = pointVelocityDischargeActivity10.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList17 = pointVelocityDischargeActivity16.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity16.DistanceToMeter = datumConvertedQuantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity0.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.Boolean boolean22 = pointVelocityDischargeActivity21.isSuspensionCoefficientUsed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = pointVelocityDischargeActivity21.setVelocityObservationMethod("2021.8.9990");
        pointVelocityDischargeActivity24.NodeDetails = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str28 = pointVelocityDischargeActivity27.getModel();
        java.lang.String str29 = pointVelocityDischargeActivity27.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        pointVelocityDischargeActivity27.Width = quantityWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType32 = null;
        pointVelocityDischargeActivity27.StartPoint = startPointType32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = pointVelocityDischargeActivity27.Width;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant36 = crossSectionSurveyActivity35.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str38 = pointVelocityDischargeActivity37.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity40 = pointVelocityDischargeActivity37.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity42 = pointVelocityDischargeActivity37.setSoftwareVersion("");
        java.lang.String str43 = pointVelocityDischargeActivity42.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity42.StartPoint = startPointType44;
        crossSectionSurveyActivity35.StartingPoint = startPointType44;
        pointVelocityDischargeActivity27.StartPoint = startPointType44;
        pointVelocityDischargeActivity24.StartPoint = startPointType44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity49 = pointVelocityDischargeActivity0.setStartPoint(startPointType44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType dischargeMethodType50 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MeanSection;
        pointVelocityDischargeActivity0.DischargeMethod = dischargeMethodType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement52 = pointVelocityDischargeActivity0.DischargeChannelMeasurement;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity16);
        org.junit.Assert.assertNull(verticalList17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity40);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + startPointType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity49);
        org.junit.Assert.assertTrue("'" + dischargeMethodType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MeanSection + "'", dischargeMethodType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MeanSection));
        org.junit.Assert.assertNull(dischargeChannelMeasurement52);
    }

    @Test
    public void test52737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52737");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon18.ItisUrl = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation21.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation26.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation26.setCategoricalResult(categoricalResult29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32, importHistoryEventSimpleArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = observation26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod35 = postLabAnalysisMethod25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty36 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation37 = putSamplingLocation21.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon38 = postTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        putTaxon17.ImportHistoryEventSimples = importHistoryEventSimpleList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon41 = putTaxon17.setSource("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(observation34);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod35);
        org.junit.Assert.assertNotNull(postObservedProperty36);
        org.junit.Assert.assertNotNull(putSamplingLocation37);
        org.junit.Assert.assertNotNull(postTaxon38);
        org.junit.Assert.assertNotNull(putTaxon41);
    }

    @Test
    public void test52738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52738");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser2 = deleteUser0.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser4 = deleteUser2.setUniqueId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        deleteUser4.UniqueId = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser8 = deleteUser4.setUniqueId("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        org.junit.Assert.assertNotNull(deleteUser2);
        org.junit.Assert.assertNotNull(deleteUser4);
        org.junit.Assert.assertNotNull(deleteUser8);
    }

    @Test
    public void test52739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52739");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.StartTime;
        putFilter0.Description = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.time.OffsetDateTime offsetDateTime4 = putFilter0.getEndTime();
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter6 = putFilter0.setEndTime(offsetDateTime5);
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter8 = putFilter0.setStartTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str10 = shippingContainer9.TrackingId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit11.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList16, plannedActivityArray15);
        putFieldVisit14.PlannedActivities = plannedActivityList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = putFieldVisit11.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit25 = putFieldVisit11.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer26 = shippingContainer9.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter27 = putFilter0.setAuditAttributes(auditAttributes23);
        java.time.OffsetDateTime offsetDateTime28 = putFilter0.getStartTime();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(putFilter6);
        org.junit.Assert.assertNotNull(putFilter8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(plannedActivityArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(putFieldVisit19);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(putFieldVisit25);
        org.junit.Assert.assertNotNull(shippingContainer26);
        org.junit.Assert.assertNotNull(putFilter27);
        org.junit.Assert.assertNull(offsetDateTime28);
    }

    @Test
    public void test52740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52740");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        postProject0.StartTime = offsetDateTime3;
        java.time.OffsetDateTime offsetDateTime5 = postProject0.EndTime;
        java.lang.Object obj6 = postProject0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postProject0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject9 = postProject0.setCustomId("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postProject9);
    }

    @Test
    public void test52741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52741");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        java.lang.Double double22 = getObservationsV2_4.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.Sort;
        deleteFieldVisits23.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        java.lang.String[] strArray50 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList51);
        deleteFieldVisits23.PlanningStatuses = strList51;
        getObservationsV2_4.Media = strList51;
        getChartDataV2_0.SpecimenIds = strList51;
        java.lang.Integer int57 = getChartDataV2_0.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_0.setDepthUnitId("/AQUARIUS/Acquisition/v2");
        java.util.List<java.lang.String> strList60 = getChartDataV2_59.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_59.setSort("-PT87591240H");
        java.util.List<java.lang.String> strList63 = getChartDataV2_62.Media;
        java.util.List<java.lang.String> strList64 = getChartDataV2_62.ActivityIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(strList64);
    }

    @Test
    public void test52742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52742");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity2 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity0.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity6 = pointVelocityDischargeActivity0.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = pointVelocityDischargeActivity6.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        crossSectionPoint9.Distance = quantityWithDisplay10;
        crossSectionPoint9.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = crossSectionPoint9.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint9.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint16.setElevation(quantityWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        crossSectionPoint18.Depth = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint18.Depth = datumConvertedQuantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = crossSectionPoint18.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = pointVelocityDischargeActivity6.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay23);
        java.lang.Boolean boolean25 = pointVelocityDischargeActivity6.MeterInspectedBefore;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = pointVelocityDischargeActivity6.VelocityAverage;
        java.lang.String str27 = pointVelocityDischargeActivity6.NodeDetails;
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity6);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity8);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNotNull(quantityWithDisplay23);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test52743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52743");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        tag2.AppliesToLocationNotes = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str7 = postExtendedAttribute6.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute9 = postExtendedAttribute6.setVisibleInDatasetList((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        postExtendedAttribute6.ValueType = tagValueType10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag12 = tag2.setValueType(tagValueType10);
        tag2.AppliesToReports = false;
        tag2.AppliesToAttachments = false;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(editableExtendedAttribute9);
        org.junit.Assert.assertTrue("'" + tagValueType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tag12);
    }

    @Test
    public void test52744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52744");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = analyticalGroupItem0.setAnalysisMethod(analysisMethod2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty4.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem7 = analyticalGroupItem3.setObservedProperty(observedProperty4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = analyticalGroupItem7.ObservedProperty;
        observedProperty8.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType11 = observedProperty8.getAnalysisType();
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNotNull(analyticalGroupItem3);
        org.junit.Assert.assertNotNull(analyticalGroupItem7);
        org.junit.Assert.assertNotNull(observedProperty8);
        org.junit.Assert.assertNull(analysisType11);
    }

    @Test
    public void test52745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52745");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int1 = gradeOperation0.getStackPosition();
        java.lang.String str2 = gradeOperation0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = gradeOperation0.getOperationType();
        java.lang.Integer int4 = gradeOperation0.StackPosition;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test52746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52746");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType2 = postSchedule0.getRecurrenceDayWeekly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup3 = postSchedule0.SamplingLocationGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime5 = postSchedule4.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime7 = putSchedule6.StartDate;
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule6.setEndDate(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putSchedule9.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime11 = putSchedule9.getEndDate();
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule13 = putSchedule9.setStartDate(offsetDateTime12);
        java.lang.Integer int14 = putSchedule9.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule9.RecurrenceDayMonthly = recurrenceDayMonthlyType15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule17 = postSchedule4.setRecurrenceDayMonthly(recurrenceDayMonthlyType15);
        java.time.OffsetDateTime offsetDateTime18 = postSchedule4.EndDate;
        java.lang.String str19 = postSchedule4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule22 = schedule20.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList24, schedulePlannedActivityArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule26 = schedule22.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        schedule22.RecurrenceType = recurrenceType27;
        schedule22.CustomId = "https";
        java.time.OffsetDateTime offsetDateTime31 = schedule22.LastGenerationDate;
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule33 = schedule22.setEndDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList36, plannedActivityArray35);
        putFieldVisit34.PlannedActivities = plannedActivityList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str40 = domainObjectAttachment39.getId();
        java.lang.String str41 = domainObjectAttachment39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment39.setAttachment(attachment42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str45 = domainObjectAttachment44.getId();
        java.lang.String str46 = domainObjectAttachment44.getId();
        domainObjectAttachment44.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = domainObjectAttachment44.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        java.lang.String str53 = domainObjectAttachment51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = domainObjectAttachment51.setAttachment(attachment54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str59 = domainObjectAttachment58.getId();
        java.lang.String str60 = domainObjectAttachment58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = domainObjectAttachment58.setAttachment(attachment61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str64 = domainObjectAttachment63.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment39, domainObjectAttachment44, domainObjectAttachment51, domainObjectAttachment56, domainObjectAttachment58, domainObjectAttachment63 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList66, domainObjectAttachmentArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit68 = putFieldVisit34.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList66);
        java.time.OffsetDateTime offsetDateTime69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit70 = putFieldVisit34.setEndTime(offsetDateTime69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule73 = schedule71.setCustomId("");
        java.time.OffsetDateTime offsetDateTime74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule75 = schedule71.setStartDate(offsetDateTime74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule77 = schedule75.setRecurrenceType(recurrenceType76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit78 = putFieldVisit70.setSchedule(schedule75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule81 = schedule79.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList83 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83, schedulePlannedActivityArray82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule85 = schedule81.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup86 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule87 = schedule85.setSamplingLocationGroup(samplingLocationGroup86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType88 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule89 = schedule87.setRecurrenceDayWeekly(recurrenceDayWeeklyType88);
        java.time.OffsetDateTime offsetDateTime90 = schedule89.EndDate;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList91 = schedule89.SchedulePlannedActivities;
        schedule75.SchedulePlannedActivities = schedulePlannedActivityList91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule93 = schedule22.setSchedulePlannedActivities(schedulePlannedActivityList91);
        postSchedule4.SchedulePlannedActivities = schedulePlannedActivityList91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule95 = postSchedule0.setSchedulePlannedActivities(schedulePlannedActivityList91);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(recurrenceDayWeeklyType2);
        org.junit.Assert.assertNull(samplingLocationGroup3);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(putSchedule13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule17);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(schedule22);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(schedule26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(schedule33);
        org.junit.Assert.assertNotNull(plannedActivityArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(domainObjectAttachment50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(domainObjectAttachment55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachment62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putFieldVisit68);
        org.junit.Assert.assertNotNull(putFieldVisit70);
        org.junit.Assert.assertNotNull(schedule73);
        org.junit.Assert.assertNotNull(schedule75);
        org.junit.Assert.assertTrue("'" + recurrenceType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule77);
        org.junit.Assert.assertNotNull(putFieldVisit78);
        org.junit.Assert.assertNotNull(schedule81);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(schedule85);
        org.junit.Assert.assertNotNull(schedule87);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY + "'", recurrenceDayWeeklyType88.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY));
        org.junit.Assert.assertNotNull(schedule89);
        org.junit.Assert.assertNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(schedulePlannedActivityList91);
        org.junit.Assert.assertNotNull(schedule93);
        org.junit.Assert.assertNotNull(postSchedule95);
    }

    @Test
    public void test52747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52747");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups2 = getUnitGroups0.setSystemCode(getUnitGroupsSystemCodeType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType3 = getUnitGroups2.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups6 = getUnitGroups4.setSystemCode(getUnitGroupsSystemCodeType5);
        java.lang.String str7 = getUnitGroups4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups10 = getUnitGroups8.setSystemCode(getUnitGroupsSystemCodeType9);
        java.lang.String str11 = getUnitGroups8.CustomId;
        java.lang.String str12 = getUnitGroups8.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType13 = getUnitGroups8.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups15 = getUnitGroups8.setSystemCode(getUnitGroupsSystemCodeType14);
        getUnitGroups4.SystemCode = getUnitGroupsSystemCodeType14;
        getUnitGroups2.SystemCode = getUnitGroupsSystemCodeType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups19 = getUnitGroups2.setCustomId("MaxDuration");
        java.lang.String str20 = getUnitGroups19.getCustomId();
        org.junit.Assert.assertNotNull(getUnitGroups2);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType3);
        org.junit.Assert.assertNotNull(getUnitGroups6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getUnitGroups10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType13);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups15);
        org.junit.Assert.assertNotNull(getUnitGroups19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MaxDuration" + "'", str20, "MaxDuration");
    }

    @Test
    public void test52748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52748");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList3 = postSpecimen0.getObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = postSpecimen0.getShippingContainer();
        java.lang.String str5 = postSpecimen0.FiltrationComment;
        postSpecimen0.NumberOfRequestedObservations = (-1);
        java.lang.Boolean boolean8 = postSpecimen0.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen10 = postSpecimen0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = null;
        analyticalGroupItem17.AnalysisMethod = analysisMethod20;
        java.lang.String str22 = analyticalGroupItem17.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = null;
        analyticalGroupItem28.AnalysisMethod = analysisMethod31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem12, analyticalGroupItem14, analyticalGroupItem17, analyticalGroupItem23, analyticalGroupItem26, analyticalGroupItem28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList34, analyticalGroupItemArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup36 = analyticalGroup11.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList34);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList37 = null;
        analyticalGroup11.AnalyticalGroupItems = analyticalGroupItemList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen39 = postSpecimen10.setAnalyticalGroup(analyticalGroup11);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(observationList3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(postSpecimen10);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(analyticalGroup36);
        org.junit.Assert.assertNotNull(postSpecimen39);
    }

    @Test
    public void test52749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52749");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory1 = attachment0.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment3 = attachment0.setGpsLatitude((java.lang.Double) 100.0d);
        attachment0.GpsLongitude = 100.0d;
        java.time.Instant instant6 = attachment0.getDateUploaded();
        org.junit.Assert.assertNull(attachmentCategory1);
        org.junit.Assert.assertNotNull(attachment3);
        org.junit.Assert.assertNull(instant6);
    }

    @Test
    public void test52750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52750");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList1 = analysisMethodImportSummary0.getImportJobErrors();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod> importItemAnalysisMethodList2 = analysisMethodImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary4 = analysisMethodImportSummary0.setNewCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary5.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary9 = observedPropertyImportSummary5.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = reading11.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = reading11.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading16 = reading14.setModel("MaxInstant");
        java.lang.Integer int17 = reading16.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField21 = extendedAttributeField19.setDisplayName("");
        java.lang.Boolean boolean22 = extendedAttributeField21.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj24 = timeAlignedDataServiceRequest23.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_25.setDataClassifications((java.util.List<java.lang.String>) strList29);
        getObservationsV2_31.DepthUnitCustomId = "hi!";
        java.lang.String str34 = getObservationsV2_31.CustomId;
        java.util.List<java.lang.String> strList35 = getObservationsV2_31.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_31.setMedia((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str53 = getObservationsV2_52.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        getObservationsV2_52.ProjectIds = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_31.setObservedPropertyIds((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = timeAlignedDataServiceRequest23.setTimeSeriesOutputUnitIds(strList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField63 = extendedAttributeField21.setValueOptions((java.util.List<java.lang.String>) strList57);
        putBulkEditResultGradesV2_18.AnalysisMethodSimpleIds = strList57;
        reading16.ReadingQualifiers = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty66 = importItemObservedProperty10.setFields((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList68, importItemObservedPropertyArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary70 = observedPropertyImportSummary5.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary72 = observedPropertyImportSummary70.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary73.UpdateCount = (-1);
        java.lang.Integer int76 = observationImportSummary73.ExpectedCount;
        java.lang.String str77 = observationImportSummary73.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList79, importErrorArray78);
        observationImportSummary73.ImportJobErrors = importErrorList79;
        observedPropertyImportSummary70.ImportJobErrors = importErrorList79;
        analysisMethodImportSummary4.ImportJobErrors = importErrorList79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary85 = analysisMethodImportSummary4.setSkippedCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod> importItemAnalysisMethodList86 = analysisMethodImportSummary85.getNonErrorImportItems();
        org.junit.Assert.assertNull(importErrorList1);
        org.junit.Assert.assertNull(importItemAnalysisMethodList2);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary4);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary9);
        org.junit.Assert.assertNull(doubleWithDisplay12);
        org.junit.Assert.assertNotNull(reading14);
        org.junit.Assert.assertNotNull(reading16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(extendedAttributeField21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest62);
        org.junit.Assert.assertNotNull(extendedAttributeField63);
        org.junit.Assert.assertNotNull(importItemObservedProperty66);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary70);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary72);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(importErrorArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary85);
        org.junit.Assert.assertNull(importItemAnalysisMethodList86);
    }

    @Test
    public void test52751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52751");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration calibration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration();
        java.lang.Double double1 = calibration0.getRangeStart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration calibration3 = calibration0.setIntercept((java.lang.Double) 100.0d);
        java.lang.Double double4 = calibration0.getRangeStart();
        java.lang.Double double5 = calibration0.getRangeStart();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(calibration3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(double5);
    }

    @Test
    public void test52752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52752");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = plannedFieldResult0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails2.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult7 = plannedFieldResult0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        plannedFieldResult7.AuditAttributes = auditAttributes8;
        java.lang.String str10 = plannedFieldResult7.Comment;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(plannedFieldResult7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test52753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52753");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroupWithUnit deleteUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroupWithUnit();
        java.lang.String str1 = deleteUnitGroupWithUnit0.Id;
        deleteUnitGroupWithUnit0.Id = "/AQUARIUS/Provisioning/v1";
        deleteUnitGroupWithUnit0.Id = "2021.4.62.0";
        java.lang.String str6 = deleteUnitGroupWithUnit0.Id;
        java.lang.String str7 = deleteUnitGroupWithUnit0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroupWithUnit deleteUnitGroupWithUnit9 = deleteUnitGroupWithUnit0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        deleteUnitGroupWithUnit9.Id = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021.4.62.0" + "'", str6, "2021.4.62.0");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2021.4.62.0" + "'", str7, "2021.4.62.0");
        org.junit.Assert.assertNotNull(deleteUnitGroupWithUnit9);
    }

    @Test
    public void test52754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52754");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = role2.isCanEditData();
        java.lang.Boolean boolean4 = role2.CanAddAppendConfigurations;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test52755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52755");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit searchResultUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit();
        java.lang.Integer int1 = searchResultUnit0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList2 = searchResultUnit0.getDomainObjects();
        java.lang.String str3 = searchResultUnit0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit searchResultUnit5 = searchResultUnit0.setTotalCount((java.lang.Integer) 7);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(searchResultUnit5);
    }

    @Test
    public void test52756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52756");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        java.lang.String str3 = dischargeSummary2.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        vertical4.EffectiveDepth = quantityWithDisplay5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical4.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        java.lang.Double double9 = vertical4.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = null;
        crossSectionPoint10.Distance = quantityWithDisplay11;
        crossSectionPoint10.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = crossSectionPoint10.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint17 = crossSectionPoint10.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = crossSectionPoint17.setElevation(quantityWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint19.Depth = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint19.Depth = datumConvertedQuantityWithDisplay22;
        java.lang.String str24 = datumConvertedQuantityWithDisplay22.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical25 = vertical4.setSegmentArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay22);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList26 = vertical4.getCalibrations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str28 = pointVelocityDischargeActivity27.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity27.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity27.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str33 = pointVelocityDischargeActivity32.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str35 = pointVelocityDischargeActivity34.getModel();
        pointVelocityDischargeActivity34.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity34.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity34.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int42 = pointVelocityDischargeActivity34.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str44 = pointVelocityDischargeActivity43.getModel();
        java.lang.String str45 = pointVelocityDischargeActivity43.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        pointVelocityDischargeActivity43.Width = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType48 = null;
        pointVelocityDischargeActivity43.StartPoint = startPointType48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList51, verticalArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity43.setVerticals(verticalList51);
        pointVelocityDischargeActivity34.Verticals = verticalList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity32.setVerticals(verticalList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = null;
        crossSectionPoint56.Distance = quantityWithDisplay57;
        crossSectionPoint56.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = crossSectionPoint56.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint63 = crossSectionPoint56.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint65 = crossSectionPoint63.setElevation(quantityWithDisplay64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay66 = null;
        crossSectionPoint65.Depth = quantityWithDisplay66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint65.Depth = datumConvertedQuantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint65.Elevation = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity72 = pointVelocityDischargeActivity55.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay70);
        vertical4.EffectiveDepth = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = dischargeSummary2.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay70);
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(vertical8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNotNull(crossSectionPoint17);
        org.junit.Assert.assertNotNull(crossSectionPoint19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(vertical25);
        org.junit.Assert.assertNull(calibrationList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(verticalArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNull(quantityWithDisplay61);
        org.junit.Assert.assertNotNull(crossSectionPoint63);
        org.junit.Assert.assertNotNull(crossSectionPoint65);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity72);
        org.junit.Assert.assertNotNull(dischargeSummary74);
    }

    @Test
    public void test52757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52757");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        attachment0.Id = "http";
        attachment0.ContentType = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str7 = auditAttributesFull6.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile8 = auditAttributesFull6.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull10 = auditAttributesFull6.setModificationUserProfile(userProfile9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = attachment0.setAuditAttributes(auditAttributesFull6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str13 = auditAttributesFull12.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = auditAttributesFull12.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull16 = auditAttributesFull12.setModificationUserProfile(userProfile15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull18 = auditAttributesFull16.setModificationUserProfile(userProfile17);
        java.time.OffsetDateTime offsetDateTime19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull20 = auditAttributesFull18.setModificationTime(offsetDateTime19);
        attachment11.AuditAttributes = auditAttributesFull20;
        java.time.OffsetDateTime offsetDateTime22 = null;
        auditAttributesFull20.ModificationTime = offsetDateTime22;
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(userProfile8);
        org.junit.Assert.assertNotNull(auditAttributesFull10);
        org.junit.Assert.assertNotNull(attachment11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(userProfile14);
        org.junit.Assert.assertNotNull(auditAttributesFull16);
        org.junit.Assert.assertNotNull(auditAttributesFull18);
        org.junit.Assert.assertNotNull(auditAttributesFull20);
    }

    @Test
    public void test52758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52758");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition2 = resultDetectionCondition0.setName("ZZZZZ");
        java.lang.String str3 = resultDetectionCondition0.getName();
        java.lang.String str4 = resultDetectionCondition0.getCustomId();
        org.junit.Assert.assertNotNull(resultDetectionCondition2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZZZZZ" + "'", str3, "ZZZZZ");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test52759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52759");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics2 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics4 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 1);
        fieldVisitStatistics4.QcSampleCount = 1;
        java.lang.Integer int7 = fieldVisitStatistics4.getFieldResultCount();
        fieldVisitStatistics4.RoutineSampleCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics11 = fieldVisitStatistics4.setVerticalProfileCount((java.lang.Integer) 2);
        fieldVisitStatistics11.QcSampleCount = 2;
        java.lang.Integer int14 = fieldVisitStatistics11.getFieldResultCount();
        org.junit.Assert.assertNotNull(fieldVisitStatistics2);
        org.junit.Assert.assertNotNull(fieldVisitStatistics4);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(fieldVisitStatistics11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test52760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52760");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        java.lang.String str8 = engineeredStructureDischargeActivity7.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = engineeredStructureDischargeActivity7.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType11 = dischargeChannelMeasurement10.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        dischargeChannelMeasurement10.Discharge = quantityWithDisplay12;
        dischargeChannelMeasurement10.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType17 = dischargeChannelMeasurement16.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeChannelMeasurement16.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType19 = dischargeChannelMeasurement16.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement21 = dischargeChannelMeasurement16.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream;
        dischargeChannelMeasurement21.MeasurementLocationToGage = measurementLocationToGageType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement24 = dischargeChannelMeasurement10.setMeasurementLocationToGage(measurementLocationToGageType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading;
        dischargeChannelMeasurement10.DeploymentMethod = deploymentMethodType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity27 = engineeredStructureDischargeActivity7.setDischargeChannelMeasurement(dischargeChannelMeasurement10);
        engineeredStructureDischargeActivity7.StructureType = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary30.Reviewer = "";
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary30.MeasurementTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary30.BaseFlow = baseFlowType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = dischargeSummary30.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList39 = ratingModelDescriptionListServiceResponse38.RatingModelDescriptions;
        java.time.Instant instant40 = ratingModelDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType42 = calibrationCheck41.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = calibrationCheck41.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = dischargeSummary45.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse48.setNextToken(instant49);
        dischargeSummary45.MeasurementTime = instant49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse44.setNextToken(instant49);
        java.time.Instant instant53 = locationDescriptionListServiceResponse44.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck54 = calibrationCheck41.setTime(instant53);
        java.time.Instant instant55 = calibrationCheck54.Time;
        ratingModelDescriptionListServiceResponse38.NextToken = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary30.setMeasurementEndTime(instant55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str59 = pointVelocityDischargeActivity58.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity61 = pointVelocityDischargeActivity58.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity63 = pointVelocityDischargeActivity58.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay65 = vertical64.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType66 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical64.VerticalType = verticalType66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType69 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation70 = velocityObservation68.setDeploymentMethod(deploymentMethodType69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType72 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation73 = velocityObservation71.setDeploymentMethod(deploymentMethodType72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList75, velocityDepthObservationArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation77 = velocityObservation73.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation78 = velocityObservation68.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical79 = vertical64.setVelocityObservation(velocityObservation68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical81 = vertical79.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay80);
        pointVelocityDischargeActivity58.Width = datumConvertedQuantityWithDisplay80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary83 = dischargeSummary57.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity84 = engineeredStructureDischargeActivity7.setMeanHead((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay80);
        java.lang.String str85 = engineeredStructureDischargeActivity84.getEquationForSelectedStructure();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(channelMaterialType11);
        org.junit.Assert.assertNull(channelMaterialType17);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(horizontalFlowType19);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement21);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream + "'", measurementLocationToGageType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement24);
        org.junit.Assert.assertTrue("'" + deploymentMethodType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading + "'", deploymentMethodType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading));
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity27);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + baseFlowType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(calibrationCheckType42);
        org.junit.Assert.assertNull(doubleWithDisplay43);
        org.junit.Assert.assertNotNull(dischargeSummary47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(calibrationCheck54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity61);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity63);
        org.junit.Assert.assertNull(quantityWithDisplay65);
        org.junit.Assert.assertTrue("'" + verticalType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType66.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType69 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType69.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation70);
        org.junit.Assert.assertTrue("'" + deploymentMethodType72 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType72.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation73);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(velocityObservation77);
        org.junit.Assert.assertNotNull(velocityObservation78);
        org.junit.Assert.assertNotNull(vertical79);
        org.junit.Assert.assertNotNull(vertical81);
        org.junit.Assert.assertNotNull(dischargeSummary83);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test52761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52761");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        java.lang.Double double4 = getObservationExportIIV2_0.NumericResultValue;
        getObservationExportIIV2_0.DepthValue = 100.0d;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(double4);
    }

    @Test
    public void test52762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52762");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str1 = applyTagRequest0.UniqueId;
        java.lang.String str2 = applyTagRequest0.getValue();
        applyTagRequest0.Value = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        applyTagRequest0.UniqueId = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test52763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52763");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory2 = getFilterHistory0.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory4 = getFilterHistory0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory6 = getFilterHistory4.setId("0001-01-01T00:00:00.000Z");
        java.lang.String str7 = getFilterHistory6.Id;
        java.lang.String str8 = getFilterHistory6.getId();
        java.lang.String str9 = getFilterHistory6.getId();
        org.junit.Assert.assertNotNull(getFilterHistory2);
        org.junit.Assert.assertNotNull(getFilterHistory4);
        org.junit.Assert.assertNotNull(getFilterHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str7, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str8, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str9, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test52764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52764");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.lang.String str1 = user0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList3 = putUserV2_2.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_2.setUserType(userType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user6 = user0.setUserType(userType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean8 = getFieldVisitReadingsByLocationServiceRequest7.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest7.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest12 = getFieldVisitReadingsByLocationServiceRequest7.setLocationUniqueId("2021.4.62.0");
        getFieldVisitReadingsByLocationServiceRequest12.Publish = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList16 = getExportObservations15.getLabReportIds();
        java.lang.String str17 = getExportObservations15.DepthUnitCustomId;
        java.util.List<java.lang.String> strList18 = getExportObservations15.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str20 = getChartDataV2_19.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_22 = getChartDataV2_19.setFilterId("");
        java.util.List<java.lang.String> strList23 = getChartDataV2_19.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems43 = getExtendedAttributeDropdownlistitems24.setSearch((java.util.List<java.lang.String>) strList38);
        getChartDataV2_19.ObservedPropertyIds = strList38;
        getChartDataV2_19.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList48 = getExportObservations47.getLabReportIds();
        java.lang.String str49 = getExportObservations47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj51 = getActivityTemplates50.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        getActivityTemplates50.Type = strList63;
        getExportObservations47.AnalyticalGroupIds = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_69 = getChartDataV2_19.setAnalysisMethodIds((java.util.List<java.lang.String>) strList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations70 = getExportObservations15.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest71 = getFieldVisitReadingsByLocationServiceRequest12.setParameters(strList63);
        user0.Roles = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user74 = user0.setCustomId("multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertTrue("'" + userType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest12);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(getChartDataV2_22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems43);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(getChartDataV2_69);
        org.junit.Assert.assertNotNull(getExportObservations70);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest71);
        org.junit.Assert.assertNotNull(user74);
    }

    @Test
    public void test52765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52765");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon7 = null;
        observation2.RelatedTaxon = taxon7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setResultStatus(resultStatus9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str13 = metricConfiguration12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty14.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration12.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType18 = observedProperty14.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postObservedProperty19.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = quantity25.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = observedProperty14.setUpperLimit(quantity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation11.setElevation(quantity25);
        observation10.SamplingLocation = samplingLocation11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction30 = observation10.getLabInstruction();
        java.time.OffsetDateTime offsetDateTime31 = observation10.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType32 = observation10.QualityControlType;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNull(resultType18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(quantity25);
        org.junit.Assert.assertNull(unit26);
        org.junit.Assert.assertNotNull(observedProperty27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(labInstruction30);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNull(qualityControlType32);
    }

    @Test
    public void test52766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52766");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList1 = fieldVisitReading0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading3 = fieldVisitReading0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.ArrayList<java.lang.String> strList4 = fieldVisitReading0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading0.setComments("-PT87591240H");
        java.lang.Boolean boolean7 = fieldVisitReading0.isUseLocationDatumAsReference();
        java.lang.String str8 = fieldVisitReading0.FieldVisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading0.setGradeCode((java.lang.Integer) 0);
        java.time.Instant instant11 = fieldVisitReading0.getTime();
        fieldVisitReading0.GradeCode = 0;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(fieldVisitReading3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNull(instant11);
    }

    @Test
    public void test52767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52767");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity2 = null;
        putActivity1.PlannedActivity = plannedActivity2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity4.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity4.setPlannedActivity(plannedActivity7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str10 = samplingContextTag9.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag12 = samplingContextTag9.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = samplingContextTag12.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str16 = samplingContextTag15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str18 = samplingContextTag17.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        samplingContextTag17.AuditAttributes = auditAttributes19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag21.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag14, samplingContextTag15, samplingContextTag17, samplingContextTag24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList26, samplingContextTagArray25);
        postActivity4.SamplingContextTags = samplingContextTagList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity29 = putActivity1.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity31 = putActivity29.setCollectionMethod(collectionMethod30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = putDetectioncondition32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition35 = putDetectioncondition32.setCustomId("http");
        java.lang.String str36 = putDetectioncondition32.getName();
        java.lang.String str37 = putDetectioncondition32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation40 = postSamplingLocation38.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation41.setPlannedFieldResult(plannedFieldResult42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction44 = null;
        observation43.LabInstruction = labInstruction44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = observation43.setStatistics(observationStatistics46);
        java.time.OffsetDateTime offsetDateTime48 = observation47.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = observation47.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation47.setObservedProperty(observedProperty50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade52 = observation51.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails53.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAuditAttributes(auditAttributes56);
        observation51.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation59 = postSamplingLocation40.setAuditAttributes(auditAttributes56);
        putDetectioncondition32.AuditAttributes = auditAttributes56;
        putActivity31.AuditAttributes = auditAttributes56;
        activityWithDetails0.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity63 = activityWithDetails0.getPlannedActivity();
        activityWithDetails0.SourceActivityId = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails66.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime69 = activityWithDetails66.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList70 = activityWithDetails66.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity72 = null;
        putActivity71.Depth = quantity72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList75, metricResultArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity77 = putActivity71.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails78 = activityWithDetails66.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails79 = activityWithDetails0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str81 = collectionMethod80.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = plannedFieldResult82.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails86 = labResultDetails84.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails88 = labResultDetails86.setAuditAttributes(auditAttributes87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult89 = plannedFieldResult82.setAuditAttributes(auditAttributes87);
        collectionMethod80.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails91 = activityWithDetails79.setCollectionMethod(collectionMethod80);
        activityWithDetails91.Comment = "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****";
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(samplingContextTag12);
        org.junit.Assert.assertNotNull(samplingContextTag14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNotNull(samplingContextTagArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putActivity29);
        org.junit.Assert.assertNotNull(putActivity31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(putDetectioncondition35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(postSamplingLocation40);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(observation47);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNull(importHistoryEventSimpleList49);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNull(resultGrade52);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(postSamplingLocation59);
        org.junit.Assert.assertNull(plannedActivity63);
        org.junit.Assert.assertNull(offsetDateTime69);
        org.junit.Assert.assertNull(specimenNestedInActivityList70);
        org.junit.Assert.assertNotNull(metricResultArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(putActivity77);
        org.junit.Assert.assertNotNull(activityWithDetails78);
        org.junit.Assert.assertNotNull(activityWithDetails79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(auditAttributes83);
        org.junit.Assert.assertNotNull(labResultDetails86);
        org.junit.Assert.assertNotNull(labResultDetails88);
        org.junit.Assert.assertNotNull(plannedFieldResult89);
        org.junit.Assert.assertNotNull(activityWithDetails91);
    }

    @Test
    public void test52768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52768");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        java.lang.String str6 = locationDescription2.getName();
        locationDescription2.Identifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription10 = locationDescription2.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription12 = locationDescription2.setIsExternalLocation((java.lang.Boolean) true);
        java.util.ArrayList<java.lang.String> strList13 = locationDescription2.getSecondaryFolders();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(locationDescription10);
        org.junit.Assert.assertNotNull(locationDescription12);
        org.junit.Assert.assertNull(strList13);
    }

    @Test
    public void test52769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52769");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics0.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics0.P50 = 1.0d;
        java.lang.Double double5 = observationStatistics0.Max;
        observationStatistics0.Count = 4;
        java.lang.Double double8 = observationStatistics0.getMin();
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(double8);
    }

    @Test
    public void test52770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52770");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.time.Instant instant1 = timeSeriesThresholdPeriod0.StartTime;
        timeSeriesThresholdPeriod0.ReferenceValue = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod5 = timeSeriesThresholdPeriod0.setSuppressData((java.lang.Boolean) false);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod5);
    }

    @Test
    public void test52771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52771");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        java.lang.String str1 = putAttachment0.Resolution;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment3 = putAttachment0.setResolution("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str5 = auditAttributesFull4.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull7 = auditAttributesFull4.setCreationUserProfile(userProfile6);
        auditAttributesFull4.ModificationUserProfileId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        auditAttributesFull4.CreationUserProfileId = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime12 = auditAttributesFull4.CreationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull14 = auditAttributesFull4.setCreationUserProfileId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment15 = putAttachment3.setAuditAttributes(auditAttributesFull14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull16 = putAttachment3.AuditAttributes;
        putAttachment3.ContentType = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putAttachment3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributesFull7);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(auditAttributesFull14);
        org.junit.Assert.assertNotNull(putAttachment15);
        org.junit.Assert.assertNotNull(auditAttributesFull16);
    }

    @Test
    public void test52772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52772");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str1 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration0.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList6 = openIdConnectRelyingPartyConfiguration0.getHostedDomains();
        java.lang.String str7 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        java.lang.String str8 = openIdConnectRelyingPartyConfiguration0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList10 = getExportObservations9.getLabReportIds();
        java.lang.String str11 = getExportObservations9.DepthUnitCustomId;
        java.util.List<java.lang.String> strList12 = getExportObservations9.getSearch();
        java.util.List<java.lang.String> strList13 = getExportObservations9.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        postRecurringReport15.NextGenerationDate = instant19;
        java.time.Instant instant22 = postRecurringReport15.getNextGenerationDate();
        java.lang.String str23 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant22);
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations25 = getExportObservations9.setEndObservedTime(instant22);
        java.lang.String str26 = getExportObservations9.getFilterId();
        java.lang.String str27 = getExportObservations9.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList29 = getAnalyticalGroups28.getAnalyticalGroupTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest31.setQueryFrom(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = timeAlignedDataServiceRequest31.setTimeSeriesOutputUnitIds(strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation46 = importItemObservation30.setFields((java.util.List<java.lang.String>) strList42);
        java.lang.Object obj47 = importItemObservation46.getErrors();
        java.util.List<java.lang.String> strList48 = importItemObservation46.getWarningMessages();
        java.util.List<java.lang.String> strList49 = importItemObservation46.WarningMessages;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        java.lang.Object obj58 = putLocationTags57.getResponseType();
        java.util.ArrayList<java.lang.String> strList59 = putLocationTags57.getTagUniqueIds();
        importItemObservation46.WarningMessages = strList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups61 = getAnalyticalGroups28.setAnalyticalGroupTypes((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations62 = getExportObservations9.setSpecimenIds((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration63 = openIdConnectRelyingPartyConfiguration0.setHostedDomains((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration65 = openIdConnectRelyingPartyConfiguration63.setIssuerIdentifier("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxDuration" + "'", str7, "MaxDuration");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str23, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest45);
        org.junit.Assert.assertNotNull(importItemObservation46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(getAnalyticalGroups61);
        org.junit.Assert.assertNotNull(getExportObservations62);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration63);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration65);
    }

    @Test
    public void test52773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52773");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double4 = putBulkEditResultGradesV2_3.DepthValue;
        java.util.List<java.lang.String> strList5 = putBulkEditResultGradesV2_3.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_11 = putBulkEditResultGradesV2_3.setStartModificationTime(instant9);
        qualifier2.DateApplied = instant9;
        crossSectionSurveyActivity0.StartTime = instant9;
        java.lang.String str14 = crossSectionSurveyActivity0.getRelativeLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType15 = crossSectionSurveyActivity0.getStartingPoint();
        java.lang.String str16 = crossSectionSurveyActivity0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeSummary17.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary17.Discharge;
        java.lang.Integer int20 = dischargeSummary17.getGradeCode();
        java.lang.String str21 = dischargeSummary17.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse23.setNextToken(instant28);
        java.time.Instant instant32 = locationDescriptionListServiceResponse23.getNextToken();
        attachment22.DateLastAccessed = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary17.setMeasurementStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity35 = crossSectionSurveyActivity0.setEndTime(instant32);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList36 = crossSectionSurveyActivity35.getCrossSectionPoints();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(startPointType15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity35);
        org.junit.Assert.assertNull(crossSectionPointList36);
    }

    @Test
    public void test52774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52774");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = putActivityTemplate0.setMedium(mediumType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str5 = putActivityTemplate4.getId();
        java.lang.String str6 = putActivityTemplate4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate10 = putActivityTemplate4.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod11 = putActivityTemplate10.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate14 = postFieldVisitActivityWithTemplate12.setAuditAttributes(auditAttributes13);
        java.lang.String str15 = postFieldVisitActivityWithTemplate14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY;
        postFieldVisitActivityWithTemplate14.Type = activityTemplateType16;
        putActivityTemplate10.Type = activityTemplateType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate19 = putActivityTemplate3.setType(activityTemplateType16);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + mediumType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(putActivityTemplate10);
        org.junit.Assert.assertNull(collectionMethod11);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + activityTemplateType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(putActivityTemplate19);
    }

    @Test
    public void test52775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52775");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse4 = postLocationAttachmentResponse0.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag5.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag9 = appliedTag5.setKey("http");
        java.lang.String str10 = appliedTag9.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag13 = appliedTag11.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag15 = appliedTag11.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag17 = appliedTag11.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag9, appliedTag11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList19, appliedTagArray18);
        postLocationAttachmentResponse0.Tags = appliedTagList19;
        postLocationAttachmentResponse0.LocationUniqueId = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        postLocationAttachmentResponse0.FileName = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse27 = postLocationAttachmentResponse0.setFileName("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse4);
        org.junit.Assert.assertNotNull(appliedTag9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(appliedTag13);
        org.junit.Assert.assertNotNull(appliedTag15);
        org.junit.Assert.assertNotNull(appliedTag17);
        org.junit.Assert.assertNotNull(appliedTagArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse27);
    }

    @Test
    public void test52776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52776");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations5 = specimenWithObservations3.setNumberOfRequestedObservations((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList6 = specimenWithObservations5.ExtendedAttributes;
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNotNull(specimenWithObservations5);
        org.junit.Assert.assertNull(extendedAttributeList6);
    }

    @Test
    public void test52777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52777");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal2.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue5 = categoricalResult4.getFixedValue();
        observationMinimal2.CategoricalResult = categoricalResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult7.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue10 = categoricalResult7.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult7.NullMeasureQualifier = nullMeasureQualifier11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult13 = categoricalResult4.setNullMeasureQualifier(nullMeasureQualifier11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str15 = categoricalValue14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = categoricalValue14.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult17 = categoricalResult13.setFixedValue(categoricalValue14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue18 = categoricalResult17.FixedValue;
        java.lang.String str19 = categoricalResult17.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier20 = categoricalResult17.NullMeasureQualifier;
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(categoricalValue5);
        org.junit.Assert.assertNull(categoricalValue10);
        org.junit.Assert.assertNotNull(categoricalResult13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(categoricalResult17);
        org.junit.Assert.assertNotNull(categoricalValue18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(nullMeasureQualifier20);
    }

    @Test
    public void test52778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52778");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setNumericResult(numericResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen13 = putObservationV2_2.Specimen;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation14.setPlannedFieldResult(plannedFieldResult15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction17 = null;
        observation16.LabInstruction = labInstruction17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation16.setStatistics(observationStatistics19);
        java.time.OffsetDateTime offsetDateTime21 = observation20.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = observation20.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device26 = device24.setType("/AQUARIUS/Acquisition/v2");
        device26.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation23.setDevice(device26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation20.setDevice(device26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_31 = putObservationV2_2.setDevice(device26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int33 = locationObservationsGroup32.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str36 = metricConfiguration35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty37.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration40 = metricConfiguration35.setObservedProperty(observedProperty37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType41 = observedProperty37.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup43 = postObservedProperty42.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit45 = null;
        quantity44.Unit = unit45;
        postObservedProperty42.LowerLimit = quantity44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity48 = postObservedProperty42.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit49 = quantity48.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = observedProperty37.setUpperLimit(quantity48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation51 = samplingLocation34.setElevation(quantity48);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList52 = samplingLocation51.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList55, plannedActivityArray54);
        putFieldVisit53.PlannedActivities = plannedActivityList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str59 = domainObjectAttachment58.getId();
        java.lang.String str60 = domainObjectAttachment58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = domainObjectAttachment58.setAttachment(attachment61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str64 = domainObjectAttachment63.getId();
        java.lang.String str65 = domainObjectAttachment63.getId();
        domainObjectAttachment63.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = domainObjectAttachment63.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str71 = domainObjectAttachment70.getId();
        java.lang.String str72 = domainObjectAttachment70.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment74 = domainObjectAttachment70.setAttachment(attachment73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str76 = domainObjectAttachment75.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str78 = domainObjectAttachment77.getId();
        java.lang.String str79 = domainObjectAttachment77.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment81 = domainObjectAttachment77.setAttachment(attachment80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str83 = domainObjectAttachment82.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment58, domainObjectAttachment63, domainObjectAttachment70, domainObjectAttachment75, domainObjectAttachment77, domainObjectAttachment82 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList85 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList85, domainObjectAttachmentArray84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit87 = putFieldVisit53.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList85);
        samplingLocation51.Attachments = domainObjectAttachmentList85;
        java.lang.String str89 = samplingLocation51.getCustomId();
        locationObservationsGroup32.SamplingLocation = samplingLocation51;
        putObservationV2_31.SamplingLocation = samplingLocation51;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertNull(specimen13);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNull(importHistoryEventSimpleList22);
        org.junit.Assert.assertNotNull(device26);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(putObservationV2_31);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(metricConfiguration40);
        org.junit.Assert.assertNull(resultType41);
        org.junit.Assert.assertNull(unitGroup43);
        org.junit.Assert.assertNotNull(quantity48);
        org.junit.Assert.assertNull(unit49);
        org.junit.Assert.assertNotNull(observedProperty50);
        org.junit.Assert.assertNotNull(samplingLocation51);
        org.junit.Assert.assertNull(domainObjectAttachmentList52);
        org.junit.Assert.assertNotNull(plannedActivityArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachment62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(domainObjectAttachment69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(domainObjectAttachment74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(domainObjectAttachment81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putFieldVisit87);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test52779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52779");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.String str1 = importChangeItem0.PropertyName;
        java.lang.String str2 = importChangeItem0.getPropertyName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double4 = putBulkEditResultGradesV2_3.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList21 = getObservationsV2_5.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType22 = getObservationsV2_5.FieldResultType;
        java.time.Instant instant23 = getObservationsV2_5.getEndObservedTime();
        java.lang.String str24 = getObservationsV2_5.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        java.util.ArrayList<java.lang.String> strList33 = putLocationTags32.TagUniqueIds;
        getObservationsV2_5.ProjectIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_35 = putBulkEditResultGradesV2_3.setSearch((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = putBulkEditResultGradesV2_35.ActivityIds;
        java.lang.String str37 = putBulkEditResultGradesV2_35.getCustomId();
        importChangeItem0.Left = putBulkEditResultGradesV2_35;
        java.lang.Object obj39 = importChangeItem0.Right;
        java.lang.String str40 = importChangeItem0.PropertyName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(fieldResultType22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test52780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52780");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = attachment0.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setComment("");
        attachment5.Id = "MinDuration";
        attachment5.ContentType = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = attachment5.setComment("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str13 = auditAttributesFull12.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = auditAttributesFull12.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull16 = auditAttributesFull12.setModificationUserProfile(userProfile15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull18 = auditAttributesFull12.setModificationUserProfile(userProfile17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment19 = attachment11.setAuditAttributes(auditAttributesFull18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = attachment19.setLongitude("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        java.lang.String str22 = attachment21.getContentType();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNotNull(attachment11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(userProfile14);
        org.junit.Assert.assertNotNull(auditAttributesFull16);
        org.junit.Assert.assertNotNull(auditAttributesFull18);
        org.junit.Assert.assertNotNull(attachment19);
        org.junit.Assert.assertNotNull(attachment21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****" + "'", str22, "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
    }

    @Test
    public void test52781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52781");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        java.lang.String str3 = postSamplingLocation2.getName();
        postSamplingLocation2.Longitude = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = postSamplingLocation2.setElevation(quantity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation9 = postSamplingLocation2.setCustomId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation11 = postSamplingLocation9.setName("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        postSamplingLocation11.Latitude = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        postSamplingLocation11.VerticalDatum = "";
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postSamplingLocation7);
        org.junit.Assert.assertNotNull(postSamplingLocation9);
        org.junit.Assert.assertNotNull(postSamplingLocation11);
    }

    @Test
    public void test52782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52782");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_8 = putBulkEditResultGradesV2_0.setStartModificationTime(instant6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList28 = fieldVisitDataServiceResponse27.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse30 = fieldVisitDataServiceResponse27.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        fieldVisitDataServiceResponse27.ResponseTime = instant34;
        getObservationsV2_9.StartObservedTime = instant34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_38 = putBulkEditResultGradesV2_0.setStartModificationTime(instant34);
        java.time.Instant instant39 = putBulkEditResultGradesV2_38.getEndResultTime();
        java.util.List<java.lang.String> strList40 = putBulkEditResultGradesV2_38.LabReportIds;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList28);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_38);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNull(strList40);
    }

    @Test
    public void test52783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52783");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        java.lang.Double double3 = putUnit0.getBaseMultiplier();
        java.lang.String str4 = putUnit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit6 = putUnit0.setCustomId("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putUnit6);
    }

    @Test
    public void test52784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52784");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setFieldVisit(fieldVisit5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = postActivity6.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation8.setPlannedFieldResult(plannedFieldResult9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction11 = null;
        observation10.LabInstruction = labInstruction11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation10.setStatistics(observationStatistics13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon15 = null;
        observation10.RelatedTaxon = taxon15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation10.setResultStatus(resultStatus17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str21 = metricConfiguration20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty22.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration20.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType26 = observedProperty22.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup28 = postObservedProperty27.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit30 = null;
        quantity29.Unit = unit30;
        postObservedProperty27.LowerLimit = quantity29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity33 = postObservedProperty27.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = quantity33.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = observedProperty22.setUpperLimit(quantity33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = samplingLocation19.setElevation(quantity33);
        observation18.SamplingLocation = samplingLocation19;
        samplingLocation19.Name = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation42 = putSamplingLocation40.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup44 = postObservedProperty43.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit46 = null;
        quantity45.Unit = unit46;
        postObservedProperty43.LowerLimit = quantity45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity49 = postObservedProperty43.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit50 = quantity49.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation51 = putSamplingLocation42.setElevation(quantity49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str53 = metricConfiguration52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty54.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration57 = metricConfiguration52.setObservedProperty(observedProperty54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType58 = observedProperty54.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup60 = postObservedProperty59.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit62 = null;
        quantity61.Unit = unit62;
        postObservedProperty59.LowerLimit = quantity61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity65 = postObservedProperty59.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit66 = quantity65.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty67 = observedProperty54.setUpperLimit(quantity65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation69.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation73 = observation69.setCategoricalResult(categoricalResult72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75, importHistoryEventSimpleArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation77 = observation69.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod78 = postLabAnalysisMethod68.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75);
        observedProperty67.ImportHistoryEventSimples = importHistoryEventSimpleList75;
        putSamplingLocation42.ImportHistoryEventSimples = importHistoryEventSimpleList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation81 = samplingLocation19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation84 = postSamplingLocation82.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address85 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation86 = postSamplingLocation82.setAddress(address85);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList87 = postSamplingLocation86.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address88 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address90 = address88.setStreetName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation91 = postSamplingLocation86.setAddress(address88);
        samplingLocation19.Address = address88;
        postActivity6.SamplingLocation = samplingLocation19;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList94 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity95 = postActivity6.setSamplingContextTags(samplingContextTagList94);
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertNull(resultType26);
        org.junit.Assert.assertNull(unitGroup28);
        org.junit.Assert.assertNotNull(quantity33);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNotNull(observedProperty35);
        org.junit.Assert.assertNotNull(samplingLocation36);
        org.junit.Assert.assertNotNull(putSamplingLocation42);
        org.junit.Assert.assertNull(unitGroup44);
        org.junit.Assert.assertNotNull(quantity49);
        org.junit.Assert.assertNull(unit50);
        org.junit.Assert.assertNotNull(putSamplingLocation51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(metricConfiguration57);
        org.junit.Assert.assertNull(resultType58);
        org.junit.Assert.assertNull(unitGroup60);
        org.junit.Assert.assertNotNull(quantity65);
        org.junit.Assert.assertNull(unit66);
        org.junit.Assert.assertNotNull(observedProperty67);
        org.junit.Assert.assertNotNull(observation73);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(observation77);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod78);
        org.junit.Assert.assertNotNull(samplingLocation81);
        org.junit.Assert.assertNotNull(postSamplingLocation84);
        org.junit.Assert.assertNotNull(postSamplingLocation86);
        org.junit.Assert.assertNull(importHistoryEventSimpleList87);
        org.junit.Assert.assertNotNull(address90);
        org.junit.Assert.assertNotNull(postSamplingLocation91);
        org.junit.Assert.assertNotNull(postActivity95);
    }

    @Test
    public void test52785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52785");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        java.util.ArrayList<java.lang.String> strList1 = sensorsAndGaugesServiceRequest0.TagValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest3 = sensorsAndGaugesServiceRequest0.setLocationIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.ArrayList<java.lang.String> strList4 = sensorsAndGaugesServiceRequest0.getLocationUniqueIds();
        java.util.ArrayList<java.lang.String> strList5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest6 = sensorsAndGaugesServiceRequest0.setTagKeys(strList5);
        java.util.ArrayList<java.lang.String> strList7 = sensorsAndGaugesServiceRequest6.TagKeys;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test52786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52786");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium9 = postObservationV2_2.getMedium();
        java.lang.String str10 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType11 = postObservationV2_2.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = postObservedProperty12.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType15 = postObservedProperty12.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = postObservedProperty12.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity18 = null;
        putActivity17.PlannedActivity = plannedActivity18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity20.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = postActivity20.setPlannedActivity(plannedActivity23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = samplingContextTag28.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str32 = samplingContextTag31.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        samplingContextTag33.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str38 = samplingContextTag37.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = samplingContextTag37.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag30, samplingContextTag31, samplingContextTag33, samplingContextTag40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList42, samplingContextTagArray41);
        postActivity20.SamplingContextTags = samplingContextTagList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity45 = putActivity17.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration46 = null;
        putActivity17.IndexConfiguration = indexConfiguration46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str49 = metricConfiguration48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty50.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration53 = metricConfiguration48.setObservedProperty(observedProperty50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType54 = observedProperty50.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup56 = postObservedProperty55.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = null;
        quantity57.Unit = unit58;
        postObservedProperty55.LowerLimit = quantity57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity61 = postObservedProperty55.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit62 = quantity61.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty63 = observedProperty50.setUpperLimit(quantity61);
        putActivity17.Depth = quantity61;
        postObservedProperty12.LowerLimit = quantity61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_66 = postObservationV2_2.setDepth(quantity61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_68 = postObservationV2_66.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity69 = postObservationV2_66.getActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation70 = postObservationV2_66.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon71 = postObservationV2_66.RelatedTaxon;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(medium9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(dataClassificationType11);
        org.junit.Assert.assertNotNull(postObservedProperty14);
        org.junit.Assert.assertNull(analysisType15);
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNotNull(postActivity24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTag30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(samplingContextTag40);
        org.junit.Assert.assertNotNull(samplingContextTagArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putActivity45);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(metricConfiguration53);
        org.junit.Assert.assertNull(resultType54);
        org.junit.Assert.assertNull(unitGroup56);
        org.junit.Assert.assertNotNull(quantity61);
        org.junit.Assert.assertNull(unit62);
        org.junit.Assert.assertNotNull(observedProperty63);
        org.junit.Assert.assertNotNull(postObservationV2_66);
        org.junit.Assert.assertNotNull(postObservationV2_68);
        org.junit.Assert.assertNull(activity69);
        org.junit.Assert.assertNull(samplingLocation70);
        org.junit.Assert.assertNull(taxon71);
    }

    @Test
    public void test52787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52787");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.lang.Object obj18 = importItem0.getExistingItem();
        importItem0.Input = "hi!";
        java.lang.Object obj21 = importItem0.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem23 = importItem0.setStatus(importItemStatusType22);
        importItem23.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate26.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = specimenTemplate26.setId("hi!");
        java.lang.Boolean boolean31 = specimenTemplate30.getFiltered();
        importItem23.Item = specimenTemplate30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList34 = reportPluginResponse33.getResults();
        importItem23.ExistingItem = reportPluginList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart38 = inputPart36.setHeaders((java.lang.Object) interpolationType37);
        java.lang.String str39 = inputPart36.BodyAsString;
        importItem23.Item = inputPart36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType41 = importItem23.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj44 = timeAlignedDataServiceRequest43.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest43.setQueryFrom(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest43.setTimeSeriesOutputUnitIds(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation58 = importItemObservation42.setFields((java.util.List<java.lang.String>) strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = importItemObservation58.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation62 = importItemSamplingLocation60.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        java.util.List<java.lang.String> strList79 = getObservationsV2_64.getLabReportIds();
        importItem63.Errors = getObservationsV2_64;
        java.lang.Object obj81 = importItem63.getExistingItem();
        importItem63.Input = "hi!";
        java.lang.Object obj84 = importItem63.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType85 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem86 = importItem63.setStatus(importItemStatusType85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation87 = importItemSamplingLocation62.setStatus(importItemStatusType85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType88 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation89 = importItemSamplingLocation62.setStatus(importItemStatusType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation90 = importItemObservation58.setStatus(importItemStatusType88);
        importItem23.Status = importItemStatusType88;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + importItemStatusType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem23);
        org.junit.Assert.assertNotNull(specimenTemplate30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNull(reportPluginList34);
        org.junit.Assert.assertTrue("'" + interpolationType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + importItemStatusType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(importItemObservation58);
        org.junit.Assert.assertNull(observation59);
        org.junit.Assert.assertNotNull(importItemSamplingLocation62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + importItemStatusType85 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType85.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem86);
        org.junit.Assert.assertNotNull(importItemSamplingLocation87);
        org.junit.Assert.assertTrue("'" + importItemStatusType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType88.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation89);
        org.junit.Assert.assertNotNull(importItemObservation90);
    }

    @Test
    public void test52788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52788");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData2 = postImportVerticalProfileData0.setActivityId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData4 = postImportVerticalProfileData0.setSamplingLocationIds("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData6 = postImportVerticalProfileData0.setSamplingLocationIds("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData8 = postImportVerticalProfileData6.setSamplingLocationIds("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData10 = postImportVerticalProfileData8.setActivityId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData12 = postImportVerticalProfileData10.setTimeZoneOffset("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str13 = postImportVerticalProfileData12.getTimeZoneOffset();
        java.lang.String str14 = postImportVerticalProfileData12.SamplingLocationIds;
        postImportVerticalProfileData12.TimeZoneOffset = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNotNull(postImportVerticalProfileData2);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData4);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData6);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData8);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData10);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str13, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str14, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
    }

    @Test
    public void test52789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52789");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutConfigurableDropDownListItem putConfigurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutConfigurableDropDownListItem();
        putConfigurableDropDownListItem0.DisplayName = "'.'SSSSSSS";
        putConfigurableDropDownListItem0.DisplayName = "0001-01-01T00:00:00.000Z";
        java.lang.Integer int5 = putConfigurableDropDownListItem0.DisplayOrder;
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test52790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52790");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonHistory getTaxonHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonHistory();
        java.lang.String str1 = getTaxonHistory0.getId();
        java.lang.Object obj2 = getTaxonHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonHistory getTaxonHistory4 = getTaxonHistory0.setId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        getTaxonHistory4.Id = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getTaxonHistory4);
    }

    @Test
    public void test52791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52791");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading2.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading2.setSerialNumber("2021.4.62.0");
        java.lang.String str7 = fieldVisitReading6.ReferencePointUniqueId;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test52792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52792");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        locationDataServiceResponse0.Latitude = 0.0d;
        locationDataServiceResponse0.Latitude = 0.0d;
        java.lang.String str6 = locationDataServiceResponse0.getElevationUnits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription14 = timeSeriesDescription7.setRawStartTime(instant11);
        java.lang.String str15 = timeSeriesDescription7.Unit;
        java.lang.String str16 = timeSeriesDescription7.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = timeSeriesDescription7.setUtcOffsetIsoDuration("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        extendedAttribute19.UniqueId = "https";
        java.lang.Object obj22 = extendedAttribute19.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute25 = extendedAttribute23.setUniqueId("/AQUARIUS/Provisioning/v1");
        extendedAttribute23.Type = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute30 = extendedAttribute28.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str31 = extendedAttribute30.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute34 = extendedAttribute32.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str35 = extendedAttribute34.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] { extendedAttribute19, extendedAttribute23, extendedAttribute30, extendedAttribute34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList37, extendedAttributeArray36);
        timeSeriesDescription18.ExtendedAttributes = extendedAttributeList37;
        locationDataServiceResponse0.ExtendedAttributes = extendedAttributeList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse42 = locationDataServiceResponse0.setIsExternalLocation((java.lang.Boolean) false);
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(timeSeriesDescription14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeSeriesDescription18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(extendedAttribute25);
        org.junit.Assert.assertNotNull(extendedAttribute30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(extendedAttribute34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(extendedAttributeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locationDataServiceResponse42);
    }

    @Test
    public void test52793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52793");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon2 = putTaxon0.setSource("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter5 = filter3.setEndTime(offsetDateTime4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList6 = filter3.ObservedProperties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str8 = postExtendedAttribute7.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType9 = postExtendedAttribute7.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = samplingPlanPlannedActivity10.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = auditAttributes13.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity12.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = samplingPlanPlannedActivity12.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute18 = postExtendedAttribute7.setAuditAttributes(auditAttributes17);
        java.time.OffsetDateTime offsetDateTime19 = auditAttributes17.getModificationTime();
        filter3.AuditAttributes = auditAttributes17;
        putTaxon0.AuditAttributes = auditAttributes17;
        org.junit.Assert.assertNotNull(putTaxon2);
        org.junit.Assert.assertNotNull(filter5);
        org.junit.Assert.assertNull(observedPropertyList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(dataType9);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity12);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNotNull(postExtendedAttribute18);
        org.junit.Assert.assertNull(offsetDateTime19);
    }

    @Test
    public void test52794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52794");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.getId();
        java.lang.String str2 = postAccessGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup4 = postAccessGroup0.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup6 = postAccessGroup0.setId("2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postAccessGroup4);
        org.junit.Assert.assertNotNull(postAccessGroup6);
    }

    @Test
    public void test52795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52795");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod4 = monitoringMethod0.setDescription("");
        java.lang.String str5 = monitoringMethod0.Description;
        java.lang.String str6 = monitoringMethod0.getParameter();
        java.lang.String str7 = monitoringMethod0.DisplayName;
        monitoringMethod0.DisplayName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNotNull(monitoringMethod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str6, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test52796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52796");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift10 = effectiveShift0.setTimestamp(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest11.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        dischargeSummary15.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse14.setNextToken(instant19);
        java.time.Instant instant23 = locationDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse14.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest34 = correctionListServiceRequest11.setQueryTo(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.util.ArrayList<java.lang.Double> doubleList36 = ratingModelEffectiveShiftsByStageValuesServiceResponse35.EffectiveShiftValues;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str38 = getChartDataV2_37.getActivityCustomId();
        java.util.List<java.lang.String> strList39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_40 = getChartDataV2_37.setSearch(strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        java.util.List<java.lang.String> strList48 = getObservationsV2_41.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary49.Reviewer = "";
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary49.MeasurementTime = instant52;
        getObservationsV2_41.StartResultTime = instant52;
        java.lang.String[] strArray64 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = getObservationsV2_41.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription70 = locationDescription68.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType72 = null;
        controlConditionActivity71.ControlCleaned = controlCleanedType72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant75 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = locationDescriptionListServiceResponse74.setNextToken(instant75);
        controlConditionActivity71.DateCleaned = instant75;
        locationDescription70.LastModified = instant75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_67.setStartResultTime(instant75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_80 = getChartDataV2_37.setEndObservedTime(instant75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse81 = ratingModelEffectiveShiftsByStageValuesServiceResponse35.setTimestamp(instant75);
        correctionListServiceRequest34.QueryTo = instant75;
        effectiveShift10.Timestamp = instant75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift85 = effectiveShift10.setValue((java.lang.Double) (-1.0d));
        java.time.Instant instant86 = effectiveShift10.getTimestamp();
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(effectiveShift10);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(correctionListServiceRequest34);
        org.junit.Assert.assertNull(doubleList36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(getChartDataV2_40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_67);
        org.junit.Assert.assertNotNull(locationDescription70);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNotNull(getChartDataV2_80);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse81);
        org.junit.Assert.assertNotNull(effectiveShift85);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test52797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52797");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer();
        java.lang.String str1 = postShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer3 = postShippingContainer0.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer5 = postShippingContainer0.setComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postShippingContainer0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer8 = postShippingContainer0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postShippingContainer0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer11 = postShippingContainer0.setTrackingId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postShippingContainer3);
        org.junit.Assert.assertNotNull(postShippingContainer5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(postShippingContainer8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postShippingContainer11);
    }

    @Test
    public void test52798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52798");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag();
        java.lang.Integer int1 = searchResultSamplingContextTag0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag3 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag5 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList6 = searchResultSamplingContextTag0.getDomainObjects();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag3);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag5);
        org.junit.Assert.assertNull(samplingContextTagList6);
    }

    @Test
    public void test52799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52799");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] unitGroupWithUnitsArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>) unitGroupWithUnitsList2, unitGroupWithUnitsArray1);
        searchResultUnitGroupWithUnits0.DomainObjects = unitGroupWithUnitsList2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList5 = searchResultUnitGroupWithUnits0.DomainObjects;
        org.junit.Assert.assertNotNull(unitGroupWithUnitsArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(unitGroupWithUnitsList5);
    }

    @Test
    public void test52800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52800");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean3 = role2.CanRemoveAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role5 = role2.setCanAddAppendConfigurations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] roleArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] { role2 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>) roleList7, roleArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse9 = rolesResponse1.setResults(roleList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse10 = rolesResponse0.setResults(roleList7);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList11 = rolesResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList12 = rolesResponse0.getResults();
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(role5);
        org.junit.Assert.assertNotNull(roleArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(rolesResponse9);
        org.junit.Assert.assertNotNull(rolesResponse10);
        org.junit.Assert.assertNotNull(roleList11);
        org.junit.Assert.assertNotNull(roleList12);
    }

    @Test
    public void test52801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52801");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.ApprovalName5;
        java.lang.String str8 = timeAlignedPoint0.getApprovalName6();
        java.lang.String str9 = timeAlignedPoint0.GradeName8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setApprovalName4("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str12 = timeAlignedPoint0.getQualifiers10();
        java.lang.Long long13 = timeAlignedPoint0.getGradeCode2();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(long13);
    }

    @Test
    public void test52802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52802");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        java.lang.String str1 = postSpreadsheetTemplate0.Id;
        java.lang.String str2 = postSpreadsheetTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType3 = postSpreadsheetTemplate0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails4.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails4.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails4.setAuditAttributes(auditAttributes9);
        java.lang.String str11 = labResultDetails10.getAnalysisComment();
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails10.setDatePrepared(offsetDateTime12);
        java.lang.String str14 = labResultDetails10.getAnalysisComment();
        java.lang.String str15 = labResultDetails10.getDilutionFactor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint18 = chartDataPoint16.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double19 = chartDataPoint18.Value;
        java.lang.String str20 = chartDataPoint18.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint22 = chartDataPoint18.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint24 = chartDataPoint22.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = resultDetectionCondition25.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition28 = resultDetectionCondition25.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint29 = chartDataPoint22.setResultDetectionCondition(resultDetectionCondition25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str31 = putLabReport30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = postDetectioncondition32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition35 = postDetectioncondition32.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition32.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition39 = postDetectioncondition32.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition32.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj42 = postDetectioncondition32.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = samplingPlanPlannedActivity43.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = auditAttributes46.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity45.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition50 = postDetectioncondition32.setAuditAttributes(auditAttributes46);
        putLabReport30.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition52 = resultDetectionCondition25.setAuditAttributes(auditAttributes46);
        labResultDetails10.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate54 = postSpreadsheetTemplate0.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType55 = postSpreadsheetTemplate0.Type;
        java.lang.String str56 = postSpreadsheetTemplate0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = postSpreadsheetTemplate0.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(spreadsheetTemplateType3);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str11, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str14, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(chartDataPoint18);
        org.junit.Assert.assertNull(double19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chartDataPoint22);
        org.junit.Assert.assertNotNull(chartDataPoint24);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNotNull(resultDetectionCondition28);
        org.junit.Assert.assertNotNull(chartDataPoint29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(postDetectioncondition35);
        org.junit.Assert.assertNotNull(postDetectioncondition39);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity45);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(postDetectioncondition50);
        org.junit.Assert.assertNotNull(resultDetectionCondition52);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate54);
        org.junit.Assert.assertNull(spreadsheetTemplateType55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(auditAttributes57);
    }

    @Test
    public void test52803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52803");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes2 = deleteTimeSeriesNotes0.setTimeRange(interval1);
        deleteTimeSeriesNotes2.UniqueId = "/AQUARIUS";
        java.lang.String str5 = deleteTimeSeriesNotes2.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend8 = postTimeSeriesOverwriteAppend6.setTimeRange(interval7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend6.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval11 = postTimeSeriesOverwriteAppend10.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend13 = postTimeSeriesOverwriteAppend10.setTimeRange(interval12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes14 = deleteTimeSeriesNotes2.setTimeRange(interval12);
        java.lang.String str15 = deleteTimeSeriesNotes14.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval16 = deleteTimeSeriesNotes14.TimeRange;
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend8);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend13);
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/AQUARIUS" + "'", str15, "/AQUARIUS");
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test52804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52804");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = postExtendedAttribute0.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = postExtendedAttribute0.getAppliesToType();
        java.lang.String str3 = postExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan4.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime7 = samplingPlan4.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit10 = putUnitGroupWithUnit8.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType11 = putUnitGroupWithUnit8.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity15 = samplingPlanPlannedActivity13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = auditAttributes16.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity15.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = samplingPlanPlannedActivity15.AuditAttributes;
        putAccessGroup12.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit22 = putUnitGroupWithUnit8.setAuditAttributes(auditAttributes20);
        samplingPlan4.AuditAttributes = auditAttributes20;
        java.time.OffsetDateTime offsetDateTime24 = null;
        auditAttributes20.ModificationTime = offsetDateTime24;
        postExtendedAttribute0.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = postExtendedAttribute0.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime28 = null;
        auditAttributes27.ModificationTime = offsetDateTime28;
        org.junit.Assert.assertNull(dataType1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit10);
        org.junit.Assert.assertNull(unitGroupSystemCodeType11);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity15);
        org.junit.Assert.assertNotNull(auditAttributes18);
        org.junit.Assert.assertNotNull(auditAttributes20);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit22);
        org.junit.Assert.assertNotNull(auditAttributes27);
    }

    @Test
    public void test52805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52805");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        labInstructionMinimal0.AnalysisMethod = analysisMethodMinimal1;
        java.lang.String str3 = analysisMethodMinimal1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal5 = analysisMethodMinimal1.setId("");
        java.lang.String str6 = analysisMethodMinimal5.getId();
        analysisMethodMinimal5.Name = "http://MaxDurationhttp";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(analysisMethodMinimal5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test52806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52806");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setComment("https");
        java.lang.String str5 = putTimeSeries4.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries7 = putTimeSeries4.setTimeSeriesUniqueId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries9 = putTimeSeries4.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        putTimeSeries4.Label = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        java.lang.String str12 = putTimeSeries4.getComment();
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(putTimeSeries7);
        org.junit.Assert.assertNotNull(putTimeSeries9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "https" + "'", str12, "https");
    }

    @Test
    public void test52807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52807");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationMonitoringMethod0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod5 = locationMonitoringMethod3.setParameter("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod3.setSerialNumber("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod9 = locationMonitoringMethod7.setSerialNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str10 = locationMonitoringMethod7.Name;
        java.lang.String str11 = locationMonitoringMethod7.SerialNumber;
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNotNull(locationMonitoringMethod5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
        org.junit.Assert.assertNotNull(locationMonitoringMethod9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str11, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test52808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52808");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails6 = activityWithDetails0.setObservations(observationMinimalList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = activityWithDetails0.getDevice();
        java.lang.Boolean boolean8 = activityWithDetails0.getRefreshed();
        java.time.OffsetDateTime offsetDateTime9 = activityWithDetails0.EndTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList10 = activityWithDetails0.MetricResults;
        java.lang.String str11 = activityWithDetails0.getCustomId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList12 = activityWithDetails0.Specimens;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNotNull(activityWithDetails6);
        org.junit.Assert.assertNull(device7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(metricResultList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(specimenNestedInActivityList12);
    }

    @Test
    public void test52809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52809");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.util.List<java.lang.String> strList5 = getObservationExportIIV2_0.getIds();
        java.util.List<java.lang.String> strList6 = getObservationExportIIV2_0.LabReportIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test52810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52810");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str1 = postLocationAttachment0.LocationUniqueId;
        java.lang.String str2 = postLocationAttachment0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl;
        postLocationAttachmentResponse3.AttachmentCategory = attachmentCategory4;
        postLocationAttachment0.AttachmentCategory = attachmentCategory4;
        postLocationAttachment0.LocationUniqueId = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str9 = postLocationAttachment0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment11 = postLocationAttachment0.setComments("2021.4.62.0");
        java.lang.String str12 = postLocationAttachment0.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList13 = postLocationAttachment0.Tags;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + attachmentCategory4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl + "'", attachmentCategory4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postLocationAttachment11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str12, "9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNull(applyTagRequestList13);
    }

    @Test
    public void test52811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52811");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setDescription("ZZZZZ");
        java.lang.String str19 = putStandard16.getDescription();
        java.lang.String str20 = putStandard16.Name;
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZZZZZ" + "'", str19, "ZZZZZ");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test52812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52812");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterId();
        java.lang.String str5 = locationMonitoringMethod0.UniqueId;
        java.time.Instant instant6 = locationMonitoringMethod0.getLastModifiedUtc();
        locationMonitoringMethod0.Name = "/AQUARIUS/Acquisition/v2";
        java.lang.String str9 = locationMonitoringMethod0.getName();
        java.lang.String str10 = locationMonitoringMethod0.getParameter();
        java.lang.String str11 = locationMonitoringMethod0.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod13 = locationMonitoringMethod0.setMethod("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod15 = locationMonitoringMethod0.setParameter("****26835278-3e68-484a-a157-468aab2e69a2****");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList16 = locationMonitoringMethod15.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod18 = locationMonitoringMethod15.setUniqueId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str9, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationMonitoringMethod13);
        org.junit.Assert.assertNotNull(locationMonitoringMethod15);
        org.junit.Assert.assertNull(tagMetadataList16);
        org.junit.Assert.assertNotNull(locationMonitoringMethod18);
    }

    @Test
    public void test52813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52813");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums getStandardReferenceDatums0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums();
        getStandardReferenceDatums0.LocationUniqueId = "MaxDuration";
        getStandardReferenceDatums0.LocationUniqueId = "****26835278-3e68-484a-a157-468aab2e69a2****";
        getStandardReferenceDatums0.LocationUniqueId = "MaxInstant";
        java.lang.String str7 = getStandardReferenceDatums0.getLocationUniqueId();
        getStandardReferenceDatums0.LocationUniqueId = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxInstant" + "'", str7, "MaxInstant");
    }

    @Test
    public void test52814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52814");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag4 = tag0.setAppliesToLocations((java.lang.Boolean) true);
        tag4.Key = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType7 = tag4.ValueType;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertNull(tagValueType7);
    }

    @Test
    public void test52815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52815");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.Unknown;
        calibrationCheck0.CalibrationCheckType = calibrationCheckType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setSensorUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck6.setParameterId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.Boolean boolean9 = calibrationCheck6.IsValid;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertTrue("'" + calibrationCheckType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.Unknown + "'", calibrationCheckType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.Unknown));
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test52816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52816");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType2 = null;
        controlConditionActivity1.ControlCleaned = controlCleanedType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        controlConditionActivity1.DateCleaned = instant5;
        timeAlignedDataServiceRequest0.QueryFrom = instant5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.ActivityIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList20);
        java.lang.Boolean boolean25 = timeAlignedDataServiceRequest0.isApplyRounding();
        timeAlignedDataServiceRequest0.UtcOffset = 100.0d;
        java.time.Instant instant28 = timeAlignedDataServiceRequest0.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest30 = timeAlignedDataServiceRequest0.setUtcOffset((java.lang.Double) 1.0d);
        java.util.ArrayList<java.lang.String> strList31 = timeAlignedDataServiceRequest0.TimeSeriesOutputUnitIds;
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest30);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test52817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52817");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent2.setImportType(importType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean7 = roleFlattened6.CanRemoveFieldVisits;
        roleFlattened6.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str11 = putLocationType10.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_12.setDataClassifications((java.util.List<java.lang.String>) strList16);
        getObservationsV2_18.DepthUnitCustomId = "hi!";
        java.lang.String str21 = getObservationsV2_18.CustomId;
        java.util.List<java.lang.String> strList22 = getObservationsV2_18.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_18.setMedia((java.util.List<java.lang.String>) strList34);
        putLocationType10.ExtendedAttributeDefinitionIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase40 = roleFlattened6.setRoleApprovalTransitions(strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits41 = deleteFieldVisits5.setIds((java.util.List<java.lang.String>) strList34);
        importHistoryEvent2.DomainObjectIds = strList34;
        java.lang.String str43 = importHistoryEvent2.FileName;
        importHistoryEvent2.FileName = "http://MaxDurationhttp/json/reply/Integer";
        java.time.OffsetDateTime offsetDateTime46 = importHistoryEvent2.getImportTime();
        java.lang.String str47 = importHistoryEvent2.TimeZoneOffset;
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertTrue("'" + importType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(roleFlattenedBase40);
        org.junit.Assert.assertNotNull(deleteFieldVisits41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(offsetDateTime46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test52818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52818");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.SurfaceCoefficient;
        java.lang.String str2 = openWaterData0.getSuspensionWeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = openWaterData0.DistanceToMeter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading4.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading6.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading6.setSerialNumber("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList12 = fieldVisitReading11.DatumConvertedValues;
        fieldVisitReading11.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = volumetricDischargeReading15.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = calibrationCheck17.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = doubleWithDisplay20.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str23 = doubleWithDisplay22.getDisplay();
        calibrationCheck19.Difference = doubleWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = pointVelocityDischargeActivity25.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity25.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity25.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList32 = pointVelocityDischargeActivity31.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity31.DistanceToMeter = datumConvertedQuantityWithDisplay33;
        calibrationCheck19.Standard = datumConvertedQuantityWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading36 = volumetricDischargeReading15.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay33);
        fieldVisitReading11.AdjustmentAmount = datumConvertedQuantityWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading38 = fieldVisitReading6.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData39 = openWaterData0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading42 = fieldVisitReading40.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading44 = fieldVisitReading42.setApproval(fieldVisitApproval43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading46 = fieldVisitReading42.setUseLocationDatumAsReference((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading48 = fieldVisitReading42.setReadingType(fieldVisitReadingType47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant50 = crossSectionSurveyActivity49.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        gageHeightReading51.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = null;
        vertical54.EffectiveDepth = quantityWithDisplay55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical58 = vertical54.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = dischargeSummary59.setPublish((java.lang.Boolean) false);
        java.lang.String str62 = dischargeSummary61.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary63.Reviewer = "";
        dischargeSummary63.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary63.MeasurementGrade = measurementGradeType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary61.setMeasurementGrade(measurementGradeType68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity71.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity71.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity77 = pointVelocityDischargeActivity71.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList78 = pointVelocityDischargeActivity77.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity77.DistanceToMeter = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary81 = dischargeSummary61.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical82 = vertical58.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical84 = vertical58.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay85 = vertical58.EffectiveDepth;
        gageHeightReading51.GageHeight = quantityWithDisplay85;
        crossSectionSurveyActivity49.Stage = quantityWithDisplay85;
        fieldVisitReading42.AdjustmentAmount = quantityWithDisplay85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData89 = openWaterData39.setDistanceToWaterSurface(quantityWithDisplay85);
        java.lang.Double double90 = openWaterData89.DryLineAngle;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList12);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(calibrationCheck19);
        org.junit.Assert.assertNotNull(doubleWithDisplay22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNull(verticalList32);
        org.junit.Assert.assertNotNull(volumetricDischargeReading36);
        org.junit.Assert.assertNotNull(fieldVisitReading38);
        org.junit.Assert.assertNotNull(openWaterData39);
        org.junit.Assert.assertNotNull(fieldVisitReading42);
        org.junit.Assert.assertNotNull(fieldVisitReading44);
        org.junit.Assert.assertNotNull(fieldVisitReading46);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine + "'", fieldVisitReadingType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine));
        org.junit.Assert.assertNotNull(fieldVisitReading48);
        org.junit.Assert.assertNull(instant50);
        org.junit.Assert.assertNotNull(vertical58);
        org.junit.Assert.assertNotNull(dischargeSummary61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + measurementGradeType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity77);
        org.junit.Assert.assertNull(verticalList78);
        org.junit.Assert.assertNotNull(dischargeSummary81);
        org.junit.Assert.assertNotNull(vertical82);
        org.junit.Assert.assertNotNull(vertical84);
        org.junit.Assert.assertNotNull(quantityWithDisplay85);
        org.junit.Assert.assertNotNull(openWaterData89);
        org.junit.Assert.assertNull(double90);
    }

    @Test
    public void test52819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52819");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation6.setResultGrade(resultGrade11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = observation6.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity15.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity15.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity21 = null;
        putActivity20.PlannedActivity = plannedActivity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str29 = samplingContextTag28.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = samplingContextTag28.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = samplingContextTag31.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str35 = samplingContextTag34.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        samplingContextTag36.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = samplingContextTag40.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag33, samplingContextTag34, samplingContextTag36, samplingContextTag43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45, samplingContextTagArray44);
        postActivity23.SamplingContextTags = samplingContextTagList45;
        putActivity20.SamplingContextTags = samplingContextTagList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = postActivity19.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList52, extendedAttributeArray51);
        postActivity50.ExtendedAttributes = extendedAttributeList52;
        postActivity49.ExtendedAttributes = extendedAttributeList52;
        observation6.ExtendedAttributes = extendedAttributeList52;
        java.lang.String str57 = observation6.getId();
        java.time.OffsetDateTime offsetDateTime58 = null;
        observation6.ResultTime = offsetDateTime58;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(observationStatistics13);
        org.junit.Assert.assertNull(plannedFieldResult14);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(samplingContextTag31);
        org.junit.Assert.assertNotNull(samplingContextTag33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(samplingContextTag43);
        org.junit.Assert.assertNotNull(samplingContextTagArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(postActivity49);
        org.junit.Assert.assertNotNull(extendedAttributeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test52820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52820");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField5 = extendedAttributeField2.setDisplayName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField7 = extendedAttributeField5.setColumnSize((java.lang.Integer) 4);
        extendedAttributeField7.IsReadOnly = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField11 = extendedAttributeField7.setColumnSize((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttributeField5);
        org.junit.Assert.assertNotNull(extendedAttributeField7);
        org.junit.Assert.assertNotNull(extendedAttributeField11);
    }

    @Test
    public void test52821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52821");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        postDatumConvertedTimeSeries0.ComputationIdentifier = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType7 = postDatumConvertedTimeSeries0.InterpolationType;
        java.lang.String str8 = postDatumConvertedTimeSeries0.SubLocationIdentifier;
        java.lang.String str9 = postDatumConvertedTimeSeries0.SubLocationIdentifier;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(interpolationType7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test52822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52822");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.String str2 = postSpecimen0.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        java.lang.String str12 = laboratory8.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails5.setLaboratory(laboratory8);
        java.lang.String str14 = laboratory8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen15 = postSpecimen0.setLaboratory(laboratory8);
        postSpecimen15.FiltrationComment = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        java.lang.String str19 = putSpecimen18.Description;
        java.lang.String str20 = putSpecimen18.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate21.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate21.setId("hi!");
        java.lang.Boolean boolean26 = specimenTemplate25.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen27 = putSpecimen18.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen28 = postSpecimen15.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType29 = postSpecimen28.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType31 = analyticalGroup30.getType();
        analyticalGroup30.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        java.lang.String str45 = analyticalGroupItem40.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = null;
        analyticalGroupItem51.AnalysisMethod = analysisMethod54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem35, analyticalGroupItem37, analyticalGroupItem40, analyticalGroupItem46, analyticalGroupItem49, analyticalGroupItem51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList57, analyticalGroupItemArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup59 = analyticalGroup34.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList57);
        analyticalGroup30.AnalyticalGroupItems = analyticalGroupItemList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup30.AuditAttributes = auditAttributes61;
        java.lang.String str63 = analyticalGroup30.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType64 = analyticalGroup30.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup66 = analyticalGroup30.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen67 = postSpecimen28.setAnalyticalGroup(analyticalGroup30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen69 = postSpecimen67.setName("PT87591240H");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MaxInstant" + "'", str14, "MaxInstant");
        org.junit.Assert.assertNotNull(postSpecimen15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(putSpecimen27);
        org.junit.Assert.assertNotNull(postSpecimen28);
        org.junit.Assert.assertNull(specimenViewStatusType29);
        org.junit.Assert.assertNull(analyticalGroupType31);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(analyticalGroup59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(analyticalGroupType64);
        org.junit.Assert.assertNotNull(analyticalGroup66);
        org.junit.Assert.assertNotNull(postSpecimen67);
        org.junit.Assert.assertNotNull(postSpecimen69);
    }

    @Test
    public void test52823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52823");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip5 = putFieldTrip3.setParticipants("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList6 = putFieldTrip3.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip8 = putFieldTrip3.setCustomId("MaxInstant");
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip10 = putFieldTrip8.setStartTime(offsetDateTime9);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit> fieldVisitList11 = null;
        putFieldTrip8.FieldVisits = fieldVisitList11;
        java.time.OffsetDateTime offsetDateTime13 = putFieldTrip8.EndTime;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNotNull(putFieldTrip5);
        org.junit.Assert.assertNull(domainObjectAttachmentList6);
        org.junit.Assert.assertNotNull(putFieldTrip8);
        org.junit.Assert.assertNotNull(putFieldTrip10);
        org.junit.Assert.assertNull(offsetDateTime13);
    }

    @Test
    public void test52824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52824");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType2 = dischargeChannelMeasurement0.getChannelEvenness();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement4 = dischargeChannelMeasurement0.setDistanceToGage(quantityWithDisplay3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft;
        dischargeChannelMeasurement4.CurrentMeter = currentMeterType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.StationaryBoat;
        dischargeChannelMeasurement4.DeploymentMethod = deploymentMethodType7;
        java.lang.String str9 = dischargeChannelMeasurement4.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType11 = dischargeChannelMeasurement10.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        dischargeChannelMeasurement10.Discharge = quantityWithDisplay12;
        java.lang.String str14 = dischargeChannelMeasurement10.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = null;
        crossSectionPoint15.Distance = quantityWithDisplay16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = crossSectionPoint15.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint21 = crossSectionPoint19.setDistance(quantityWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = dischargeSummary22.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary22.Discharge;
        java.lang.Integer int25 = dischargeSummary22.getGradeCode();
        java.lang.String str26 = dischargeSummary22.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary22.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = crossSectionPoint19.setElevation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint30 = crossSectionPoint15.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType32 = dischargeChannelMeasurement31.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay33 = dischargeChannelMeasurement31.Discharge;
        java.lang.String str34 = dischargeChannelMeasurement31.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement36 = dischargeChannelMeasurement31.setDischarge(quantityWithDisplay35);
        java.lang.String str37 = dischargeChannelMeasurement36.getMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType40 = dischargeChannelMeasurement39.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay41 = dischargeChannelMeasurement39.Discharge;
        java.time.Instant instant42 = dischargeChannelMeasurement39.EndTime;
        dischargeChannelMeasurement39.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity45 = engineeredStructureDischargeActivity38.setDischargeChannelMeasurement(dischargeChannelMeasurement39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement46 = engineeredStructureDischargeActivity38.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        engineeredStructureDischargeActivity38.MeanHead = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement49 = dischargeChannelMeasurement36.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        crossSectionPoint30.Depth = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement51 = dischargeChannelMeasurement10.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        dischargeChannelMeasurement4.Discharge = datumConvertedQuantityWithDisplay47;
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(channelEvennessType2);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement4);
        org.junit.Assert.assertTrue("'" + currentMeterType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft + "'", currentMeterType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft));
        org.junit.Assert.assertTrue("'" + deploymentMethodType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.StationaryBoat + "'", deploymentMethodType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.StationaryBoat));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(channelMaterialType11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNotNull(crossSectionPoint21);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(crossSectionPoint29);
        org.junit.Assert.assertNotNull(crossSectionPoint30);
        org.junit.Assert.assertNull(channelMaterialType32);
        org.junit.Assert.assertNull(quantityWithDisplay33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(channelMaterialType40);
        org.junit.Assert.assertNull(quantityWithDisplay41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity45);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement46);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement49);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement51);
    }

    @Test
    public void test52825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52825");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setFolderName("2021.4.62.0");
        java.lang.String str7 = reportPlugin0.Version;
        java.lang.String str8 = reportPlugin0.Version;
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test52826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52826");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int1 = gradeOperation0.StackPosition;
        java.lang.String str2 = gradeOperation0.getComments();
        java.lang.String str3 = gradeOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant5 = interpolationTypeOperation4.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = interpolationTypeOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant8 = interpolationTypeOperation7.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation10 = interpolationTypeOperation7.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation11 = interpolationTypeOperation4.setOperationType(metadataChangeOperationType9);
        gradeOperation0.OperationType = metadataChangeOperationType9;
        java.lang.String str13 = gradeOperation0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType14 = null;
        gradeOperation0.OperationType = metadataChangeOperationType14;
        java.lang.String str16 = gradeOperation0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant18 = interpolationTypeOperation17.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = interpolationTypeOperation17.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant21 = interpolationTypeOperation20.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation23 = interpolationTypeOperation20.setOperationType(metadataChangeOperationType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation24 = interpolationTypeOperation17.setOperationType(metadataChangeOperationType22);
        gradeOperation0.OperationType = metadataChangeOperationType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.lang.String str27 = interpolationTypeOperation26.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType interpolationType29 = interpolationTypeOperation26.setType("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int31 = gradeOperation30.StackPosition;
        java.lang.String str32 = gradeOperation30.getComments();
        java.lang.String str33 = gradeOperation30.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant35 = interpolationTypeOperation34.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType36 = interpolationTypeOperation34.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant38 = interpolationTypeOperation37.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation40 = interpolationTypeOperation37.setOperationType(metadataChangeOperationType39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation41 = interpolationTypeOperation34.setOperationType(metadataChangeOperationType39);
        gradeOperation30.OperationType = metadataChangeOperationType39;
        java.lang.String str43 = gradeOperation30.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType44 = null;
        gradeOperation30.OperationType = metadataChangeOperationType44;
        java.lang.String str46 = gradeOperation30.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant48 = interpolationTypeOperation47.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType49 = interpolationTypeOperation47.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant51 = interpolationTypeOperation50.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType52 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation53 = interpolationTypeOperation50.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation54 = interpolationTypeOperation47.setOperationType(metadataChangeOperationType52);
        gradeOperation30.OperationType = metadataChangeOperationType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation56 = interpolationTypeOperation26.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation57 = gradeOperation0.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double59 = putBulkEditResultGradesV2_58.DepthValue;
        java.util.List<java.lang.String> strList60 = putBulkEditResultGradesV2_58.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary61.Reviewer = "";
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary61.MeasurementTime = instant64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_66 = putBulkEditResultGradesV2_58.setStartModificationTime(instant64);
        java.lang.String str67 = putBulkEditResultGradesV2_66.getFilterId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_69 = putBulkEditResultGradesV2_66.setTargetResultGrade("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        java.lang.Boolean boolean71 = timeSeriesDataRawServiceRequest70.ApplyRounding;
        timeSeriesDataRawServiceRequest70.ApplyRounding = false;
        java.lang.String str74 = timeSeriesDataRawServiceRequest70.Unit;
        java.lang.String str75 = timeSeriesDataRawServiceRequest70.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList77 = getChartDataV2_76.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType80 = null;
        controlConditionActivity79.ControlCleaned = controlCleanedType80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        controlConditionActivity79.DateCleaned = instant83;
        timeAlignedDataServiceRequest78.QueryFrom = instant83;
        getChartDataV2_76.StartResultTime = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest88 = timeSeriesDataRawServiceRequest70.setQueryTo(instant83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_89 = putBulkEditResultGradesV2_69.setStartModificationTime(instant83);
        gradeOperation0.EndTime = instant83;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(metadataChangeOperationType6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation10);
        org.junit.Assert.assertNotNull(interpolationTypeOperation11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(metadataChangeOperationType19);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation23);
        org.junit.Assert.assertNotNull(interpolationTypeOperation24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(interpolationType29);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(metadataChangeOperationType36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation40);
        org.junit.Assert.assertNotNull(interpolationTypeOperation41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(metadataChangeOperationType49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation53);
        org.junit.Assert.assertNotNull(interpolationTypeOperation54);
        org.junit.Assert.assertNotNull(interpolationTypeOperation56);
        org.junit.Assert.assertNotNull(gradeOperation57);
        org.junit.Assert.assertNull(double59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_69);
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest88);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_89);
    }

    @Test
    public void test52827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52827");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setIdentifier("");
        java.lang.String str3 = openIdConnectUser2.FirstName;
        java.lang.String str4 = openIdConnectUser2.getLastName();
        java.lang.Boolean boolean5 = openIdConnectUser2.isActive();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test52828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52828");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = labResultDetails6.getLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport11 = labResultDetails6.LabReport;
        java.lang.String str12 = labResultDetails6.AnalysisComment;
        java.lang.String str13 = labResultDetails6.getAnalysisComment();
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(laboratory10);
        org.junit.Assert.assertNull(labReport11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str12, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str13, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test52829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52829");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType3 = null;
        observation0.QualityControlType = qualityControlType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = observation0.PlannedFieldResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult6 = observation0.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        observation0.NumericResult = numericResult7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult10 = numericResult7.setRoundedValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations13 = specimenWithObservations11.setNumberOfReceivedObservations((java.lang.Integer) 1);
        java.lang.String str14 = specimenWithObservations13.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenWithObservations13.getTemplateCreatedFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        putAccessGroup16.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup27 = putAccessGroup16.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = putAccessGroup16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations29 = specimenWithObservations13.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult30 = numericResult10.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = numericResult30.Quantity;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(plannedFieldResult5);
        org.junit.Assert.assertNull(plannedFieldResult6);
        org.junit.Assert.assertNotNull(numericResult10);
        org.junit.Assert.assertNotNull(specimenWithObservations13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(putAccessGroup27);
        org.junit.Assert.assertNotNull(auditAttributes28);
        org.junit.Assert.assertNotNull(specimenWithObservations29);
        org.junit.Assert.assertNotNull(numericResult30);
        org.junit.Assert.assertNull(quantity31);
    }

    @Test
    public void test52830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52830");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_0.setActivityCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        java.time.Instant instant8 = getObservationsV2_6.getEndModificationTime();
        java.util.List<java.lang.String> strList9 = getObservationsV2_6.Media;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.ActivityTypes;
        java.util.List<java.lang.String> strList11 = getObservationsV2_6.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        getObservationsV2_20.DepthUnitCustomId = "hi!";
        java.lang.String str23 = getObservationsV2_20.CustomId;
        java.util.List<java.lang.String> strList24 = getObservationsV2_20.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_20.setMedia((java.util.List<java.lang.String>) strList36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str42 = getObservationsV2_41.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        getObservationsV2_41.ProjectIds = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_20.setObservedPropertyIds((java.util.List<java.lang.String>) strList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = timeAlignedDataServiceRequest12.setTimeSeriesOutputUnitIds(strList46);
        getObservationsV2_6.DataClassifications = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods53 = getLabAnalysisMethods5.setObservedPropertyIds((java.util.List<java.lang.String>) strList46);
        getChartDataV2_4.ResultGrades = strList46;
        java.util.List<java.lang.String> strList55 = getChartDataV2_4.AnalysisMethodSimpleIds;
        java.lang.String str56 = getChartDataV2_4.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_4.setLimit((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_60 = getChartDataV2_58.setNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_60.setSort("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest51);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods53);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNotNull(getChartDataV2_60);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
    }

    @Test
    public void test52831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52831");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold0.ReferenceCode = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ThresholdType thresholdType3 = timeSeriesThreshold0.getType();
        java.lang.Integer int4 = timeSeriesThreshold0.getSeverity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold6 = timeSeriesThreshold0.setSeverity((java.lang.Integer) 1);
        java.lang.String str7 = timeSeriesThreshold6.DisplayColor;
        org.junit.Assert.assertNull(thresholdType3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(timeSeriesThreshold6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test52832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52832");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = postFieldVisit0.getSamplingPlan();
        postFieldVisit0.Notes = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postFieldVisit0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan7.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan7.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup12 = samplingPlan7.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlan7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup14 = samplingPlan7.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan16 = samplingPlan7.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.time.OffsetDateTime offsetDateTime17 = samplingPlan7.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = samplingPlan7.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 2);
        postFieldVisit0.SamplingPlan = samplingPlan7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple21 = postFieldVisit0.getFieldTrip();
        org.junit.Assert.assertNull(samplingPlan3);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(samplingLocationGroup14);
        org.junit.Assert.assertNotNull(samplingPlan16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(samplingPlan19);
        org.junit.Assert.assertNull(fieldTripSimple21);
    }

    @Test
    public void test52833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52833");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        postCollectionMethod0.IdentifierOrganization = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = postCollectionMethod0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod5 = postCollectionMethod0.setIdentifierOrganization("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = postCollectionMethod0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod8 = postCollectionMethod0.setIdentifierOrganization("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod10 = postCollectionMethod0.setCustomId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str11 = postCollectionMethod0.getName();
        java.lang.String str12 = postCollectionMethod0.getId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postCollectionMethod5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postCollectionMethod8);
        org.junit.Assert.assertNotNull(postCollectionMethod10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test52834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52834");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType();
        java.lang.Integer int1 = searchResultLocationGroupType0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType3 = searchResultLocationGroupType0.setCursor("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType();
        java.lang.Integer int5 = searchResultLocationGroupType4.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = locationGroupType6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType9 = locationGroupType6.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = locationGroupType9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = locationGroupType9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = locationGroupType12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType15 = locationGroupType12.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = locationGroupType16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType19 = locationGroupType16.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        locationGroupType19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType23 = locationGroupType19.setCustomId("http");
        java.lang.String str24 = locationGroupType23.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = locationGroupType25.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = locationGroupType25.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = locationGroupType28.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType31 = locationGroupType28.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = locationGroupType32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType35 = locationGroupType32.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = locationGroupType32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str38 = putActivityTemplate37.getId();
        java.lang.String str39 = putActivityTemplate37.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = auditAttributes40.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate43 = putActivityTemplate37.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType44 = locationGroupType32.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = locationGroupType44.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType[] locationGroupTypeArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType[] { locationGroupType9, locationGroupType15, locationGroupType23, locationGroupType25, locationGroupType28, locationGroupType44 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType>) locationGroupTypeList47, locationGroupTypeArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType49 = searchResultLocationGroupType4.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType>) locationGroupTypeList47);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList50 = searchResultLocationGroupType49.DomainObjects;
        searchResultLocationGroupType3.DomainObjects = locationGroupTypeList50;
        searchResultLocationGroupType3.Cursor = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultLocationGroupType3);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(locationGroupType9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(locationGroupType15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(locationGroupType19);
        org.junit.Assert.assertNotNull(locationGroupType23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(locationGroupType31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(locationGroupType35);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(auditAttributes42);
        org.junit.Assert.assertNotNull(putActivityTemplate43);
        org.junit.Assert.assertNotNull(locationGroupType44);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(locationGroupTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(searchResultLocationGroupType49);
        org.junit.Assert.assertNotNull(locationGroupTypeList50);
    }

    @Test
    public void test52835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52835");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation2.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setCategoricalResult(categoricalResult5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8, importHistoryEventSimpleArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty12 = postObservedProperty0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = postObservedProperty0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = postObservedProperty0.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = postObservedProperty0.LowerLimit;
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(postObservedProperty12);
        org.junit.Assert.assertNotNull(postObservedProperty14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNull(quantity16);
    }

    @Test
    public void test52836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52836");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationHistory getSamplingLocationHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationHistory();
        java.lang.Object obj1 = getSamplingLocationHistory0.getResponseType();
        java.lang.String str2 = getSamplingLocationHistory0.Id;
        java.lang.String str3 = getSamplingLocationHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationHistory getSamplingLocationHistory5 = getSamplingLocationHistory0.setId("MinInstant");
        java.lang.String str6 = getSamplingLocationHistory5.Id;
        getSamplingLocationHistory5.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getSamplingLocationHistory5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinInstant" + "'", str6, "MinInstant");
    }

    @Test
    public void test52837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52837");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant1 = interpolationTypeOperation0.DateAppliedUtc;
        java.time.Instant instant2 = interpolationTypeOperation0.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation5 = correctionOperation3.setType(correctionType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation3.OperationType = metadataChangeOperationType6;
        java.time.Instant instant8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation9 = correctionOperation3.setDateAppliedUtc(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = methodOperation10.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation13 = methodOperation10.setOperationType(metadataChangeOperationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation9.setOperationType(metadataChangeOperationType12);
        interpolationTypeOperation0.OperationType = metadataChangeOperationType12;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertTrue("'" + correctionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation5);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation9);
        org.junit.Assert.assertNull(metadataChangeOperationType11);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation13);
        org.junit.Assert.assertNotNull(correctionOperation14);
    }

    @Test
    public void test52838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52838");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation0.OperationType = metadataChangeOperationType3;
        java.time.Instant instant5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation6 = correctionOperation0.setDateAppliedUtc(instant5);
        java.lang.Integer int7 = correctionOperation0.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation9 = correctionOperation0.setType(correctionType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder10 = correctionOperation9.ProcessingOrder;
        java.util.HashMap<java.lang.String, java.lang.Object> strMap11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = correctionOperation9.setParameters(strMap11);
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + correctionType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint + "'", correctionType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint));
        org.junit.Assert.assertNotNull(correctionOperation9);
        org.junit.Assert.assertNull(correctionProcessingOrder10);
        org.junit.Assert.assertNotNull(correctionOperation12);
    }

    @Test
    public void test52839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52839");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = postLabAnalysisMethod1.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList5, observedPropertyArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = postLabAnalysisMethod3.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList5);
        analysisMethod8.MethodId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str13 = postFieldVisitActivityWithTemplate12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = postFieldVisitActivityWithTemplate12.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = plannedFieldResult16.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType25 = analyticalGroup24.getType();
        analyticalGroup24.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        java.lang.String str39 = analyticalGroupItem34.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = null;
        analyticalGroupItem45.AnalysisMethod = analysisMethod48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem29, analyticalGroupItem31, analyticalGroupItem34, analyticalGroupItem40, analyticalGroupItem43, analyticalGroupItem45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList51, analyticalGroupItemArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup28.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList51);
        analyticalGroup24.AnalyticalGroupItems = analyticalGroupItemList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup24.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult57 = plannedFieldResult23.setAuditAttributes(auditAttributes55);
        postFieldVisitActivityWithTemplate15.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport59 = postLabReport11.setAuditAttributes(auditAttributes55);
        java.time.OffsetDateTime offsetDateTime60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport61 = postLabReport11.setDateReceived(offsetDateTime60);
        postLabReport11.CaseNarrative = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation66 = observation64.setPlannedFieldResult(plannedFieldResult65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction67 = null;
        observation66.LabInstruction = labInstruction67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation70 = observation66.setStatistics(observationStatistics69);
        java.time.OffsetDateTime offsetDateTime71 = observation70.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList72 = observation70.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation74 = observation70.setObservedProperty(observedProperty73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade75 = observation74.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails78 = labResultDetails76.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails80 = labResultDetails78.setAuditAttributes(auditAttributes79);
        observation74.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport82 = postLabReport11.setAuditAttributes(auditAttributes79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = postLabReport82.AuditAttributes;
        analysisMethod8.AuditAttributes = auditAttributes83;
        java.lang.String str85 = auditAttributes83.CreationUserProfileId;
        org.junit.Assert.assertNotNull(postLabAnalysisMethod3);
        org.junit.Assert.assertNotNull(observedPropertyArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod7);
        org.junit.Assert.assertNotNull(analysisMethod8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(plannedFieldResult23);
        org.junit.Assert.assertNull(analyticalGroupType25);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertNotNull(plannedFieldResult57);
        org.junit.Assert.assertNotNull(postLabReport59);
        org.junit.Assert.assertNotNull(postLabReport61);
        org.junit.Assert.assertNotNull(observation66);
        org.junit.Assert.assertNotNull(observation70);
        org.junit.Assert.assertNull(offsetDateTime71);
        org.junit.Assert.assertNull(importHistoryEventSimpleList72);
        org.junit.Assert.assertNotNull(observation74);
        org.junit.Assert.assertNull(resultGrade75);
        org.junit.Assert.assertNotNull(labResultDetails78);
        org.junit.Assert.assertNotNull(labResultDetails80);
        org.junit.Assert.assertNotNull(postLabReport82);
        org.junit.Assert.assertNotNull(auditAttributes83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test52840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52840");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory1 = attachment0.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment3 = attachment0.setFileName("");
        attachment0.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment7 = attachment0.setUploadedByUser("MinDuration");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList8 = attachment0.getTags();
        java.lang.String str9 = attachment0.Url;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory11 = attachment10.AttachmentCategory;
        java.lang.Double double12 = attachment10.GpsLongitude;
        java.lang.String str13 = attachment10.UploadedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment15 = attachment10.setUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.Double double17 = attachment16.getGpsLongitude();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList18 = attachment16.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment20 = attachment16.setUrl("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription23 = locationDescription21.setIdentifier("");
        locationDescription23.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str27 = locationMonitoringMethod26.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod29 = locationMonitoringMethod26.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList31, tagMetadataArray30);
        locationMonitoringMethod29.Tags = tagMetadataList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription34 = locationDescription23.setTags(tagMetadataList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment35 = attachment16.setTags(tagMetadataList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str37 = tagMetadata36.getValue();
        java.lang.String str38 = tagMetadata36.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str40 = tagMetadata39.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str42 = tagMetadata41.getValue();
        java.lang.String str43 = tagMetadata41.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] { tagMetadata36, tagMetadata39, tagMetadata41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList45, tagMetadataArray44);
        attachment35.Tags = tagMetadataList45;
        attachment15.Tags = tagMetadataList45;
        attachment0.Tags = tagMetadataList45;
        java.lang.Double double50 = attachment0.getGpsLatitude();
        attachment0.Comment = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList54 = importItemTaxon53.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon56 = importItemTaxon53.setItem(taxon55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str58 = timeSeriesApprovalsTransactionListServiceRequest57.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType60 = null;
        controlConditionActivity59.ControlCleaned = controlCleanedType60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = locationDescriptionListServiceResponse62.setNextToken(instant63);
        controlConditionActivity59.DateCleaned = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest66 = timeSeriesApprovalsTransactionListServiceRequest57.setQueryTo(instant63);
        timeSeriesApprovalsTransactionListServiceRequest57.TimeSeriesUniqueId = "https";
        java.time.Instant instant69 = timeSeriesApprovalsTransactionListServiceRequest57.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList71 = fieldVisitDataServiceResponse70.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse73 = fieldVisitDataServiceResponse70.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary74.Reviewer = "";
        java.time.Instant instant77 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary74.MeasurementTime = instant77;
        fieldVisitDataServiceResponse70.ResponseTime = instant77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest80 = timeSeriesApprovalsTransactionListServiceRequest57.setQueryFrom(instant77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon81 = importItemTaxon53.setErrors((java.lang.Object) instant77);
        attachment0.DateLastAccessed = instant77;
        org.junit.Assert.assertNull(attachmentCategory1);
        org.junit.Assert.assertNotNull(attachment3);
        org.junit.Assert.assertNotNull(attachment7);
        org.junit.Assert.assertNull(tagMetadataList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(attachmentCategory11);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(attachment15);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNull(tagMetadataList18);
        org.junit.Assert.assertNotNull(attachment20);
        org.junit.Assert.assertNotNull(locationDescription23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locationMonitoringMethod29);
        org.junit.Assert.assertNotNull(tagMetadataArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locationDescription34);
        org.junit.Assert.assertNotNull(attachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(tagMetadataArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(double50);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(importItemTaxon56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse64);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest66);
        org.junit.Assert.assertNull(instant69);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList71);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse73);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest80);
        org.junit.Assert.assertNotNull(importItemTaxon81);
    }

    @Test
    public void test52841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52841");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime15 = putSchedule14.StartDate;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule14.setEndDate(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putSchedule17.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime19 = null;
        putSchedule17.LastGenerationDate = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType21 = putSchedule17.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = plannedFieldResult22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = plannedFieldResult22.setAuditAttributes(auditAttributes27);
        putSchedule17.AuditAttributes = auditAttributes27;
        postLaboratory13.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory33 = postLaboratory13.setEmailAddress("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory35 = postLaboratory13.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory37 = postLaboratory35.setPointOfContact("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str38 = postLaboratory35.getEmailAddress();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory40 = postLaboratory35.setPointOfContact("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str41 = postLaboratory40.EmailAddress;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(plannedFieldResult29);
        org.junit.Assert.assertNotNull(postLaboratory33);
        org.junit.Assert.assertNotNull(postLaboratory35);
        org.junit.Assert.assertNotNull(postLaboratory37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str38, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(postLaboratory40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str41, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test52842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52842");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        java.time.OffsetDateTime offsetDateTime5 = observation0.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = observation0.getObservedProperty();
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNull(observedProperty6);
    }

    @Test
    public void test52843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52843");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.String str1 = postVisitFileToVisit0.VisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postVisitFileToVisit0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit4 = postVisitFileToVisit0.setVisitIdentifier("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        java.lang.String str5 = postVisitFileToVisit0.VisitIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNotNull(postVisitFileToVisit4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "****82feecb1-0c54-43a1-b60a-302dc897d638****" + "'", str5, "****82feecb1-0c54-43a1-b60a-302dc897d638****");
    }

    @Test
    public void test52844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52844");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation();
        java.lang.String str1 = putLocation0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation3 = putLocation0.setLocationUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation5 = putLocation3.setLocationUniqueId("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putLocation3);
        org.junit.Assert.assertNotNull(putLocation5);
    }

    @Test
    public void test52845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52845");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem();
        java.lang.String str1 = fixedDropDownListItem0.getDropDownListDisplayName();
        java.lang.String str2 = fixedDropDownListItem0.DisplayName;
        java.lang.String str3 = fixedDropDownListItem0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem5 = fixedDropDownListItem0.setId("/AQUARIUS/Acquisition/v2");
        fixedDropDownListItem5.DropDownListId = "POST";
        java.lang.String str8 = fixedDropDownListItem5.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem10 = fixedDropDownListItem5.setDropDownListId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem12 = fixedDropDownListItem5.setDropDownListId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fixedDropDownListItem5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str8, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(fixedDropDownListItem10);
        org.junit.Assert.assertNotNull(fixedDropDownListItem12);
    }

    @Test
    public void test52846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52846");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon searchResultTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon();
        java.lang.Integer int1 = searchResultTaxon0.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList2 = searchResultTaxon0.DomainObjects;
        java.lang.Integer int3 = searchResultTaxon0.getTotalCount();
        searchResultTaxon0.TotalCount = 1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList6 = searchResultTaxon0.DomainObjects;
        searchResultTaxon0.Cursor = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(taxonList2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(taxonList6);
    }

    @Test
    public void test52847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52847");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        chartDataPoint2.ObservationId = "2021.4.62.0";
        java.lang.String str5 = chartDataPoint2.MdlValueUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint7 = chartDataPoint2.setMdlValueUnitCustomId("multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint10 = chartDataPoint8.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double11 = chartDataPoint10.Value;
        java.lang.String str12 = chartDataPoint10.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint14 = chartDataPoint10.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint16 = chartDataPoint14.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = resultDetectionCondition17.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition20 = resultDetectionCondition17.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint21 = chartDataPoint14.setResultDetectionCondition(resultDetectionCondition17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition22 = chartDataPoint14.getResultDetectionCondition();
        resultDetectionCondition22.Description = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint25 = chartDataPoint2.setResultDetectionCondition(resultDetectionCondition22);
        java.lang.String str26 = resultDetectionCondition22.getId();
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertNotNull(chartDataPoint7);
        org.junit.Assert.assertNotNull(chartDataPoint10);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(chartDataPoint14);
        org.junit.Assert.assertNotNull(chartDataPoint16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(resultDetectionCondition20);
        org.junit.Assert.assertNotNull(chartDataPoint21);
        org.junit.Assert.assertNotNull(resultDetectionCondition22);
        org.junit.Assert.assertNotNull(chartDataPoint25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/AQUARIUS" + "'", str26, "/AQUARIUS");
    }

    @Test
    public void test52848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52848");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode2 = putQualityCode0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Integer int3 = putQualityCode2.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode5 = putQualityCode2.setColor("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode7 = putQualityCode2.setColor("2021.4.62.0");
        java.lang.String str8 = putQualityCode2.getDescription();
        java.lang.String str9 = putQualityCode2.getColor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode11 = putQualityCode2.setColor("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        org.junit.Assert.assertNotNull(putQualityCode2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(putQualityCode5);
        org.junit.Assert.assertNotNull(putQualityCode7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.4.62.0" + "'", str9, "2021.4.62.0");
        org.junit.Assert.assertNotNull(putQualityCode11);
    }

    @Test
    public void test52849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52849");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation0.setStatistics(observationStatistics4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation0.setMediumSubdivision("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation8.setPlannedFieldResult(plannedFieldResult9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation10.setResultStatus(resultStatus11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus13.SystemCode = resultStatusSystemCodeType14;
        resultStatus13.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str19 = categoricalValue18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate21.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate23.Preservative = preservativeType24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = labResultDetails28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = specimenTemplate23.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition32 = postDetectioncondition20.setAuditAttributes(auditAttributes29);
        categoricalValue18.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus34 = resultStatus13.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation10.setResultStatus(resultStatus34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType36 = resultStatus34.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation37 = observation7.setResultStatus(resultStatus34);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertTrue("'" + preservativeType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(labResultDetails30);
        org.junit.Assert.assertNotNull(specimenTemplate31);
        org.junit.Assert.assertNotNull(postDetectioncondition32);
        org.junit.Assert.assertNotNull(resultStatus34);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(observation37);
    }

    @Test
    public void test52850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52850");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior1 = postThresholdType0.getCheckForBehavior();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption2 = postThresholdType0.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType3.CheckForBehavior = thresholdBehavior4;
        java.lang.String str6 = postThresholdType3.getReferenceValueCode();
        java.lang.String str7 = postThresholdType3.getReferenceValueCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption8 = postThresholdType3.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown;
        postThresholdType3.ThresholdSuppressionOption = thresholdSuppressionOption9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType11 = postThresholdType0.setThresholdSuppressionOption(thresholdSuppressionOption9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType12.CheckForBehavior = thresholdBehavior13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType16 = postThresholdType12.setCheckForBehavior(thresholdBehavior15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior17 = postThresholdType16.getCheckForBehavior();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType20 = thresholdType18.setThresholdSuppressionOption(thresholdSuppressionOption19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType22 = thresholdType18.setSeverity(thresholdTypeSeverity21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType23 = postThresholdType16.setSeverity(thresholdTypeSeverity21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType24.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        thresholdType24.ThresholdSuppressionOption = thresholdSuppressionOption27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption29 = thresholdType24.getThresholdSuppressionOption();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior30 = thresholdType24.getCheckForBehavior();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow;
        thresholdType24.CheckForBehavior = thresholdBehavior31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior33 = thresholdType24.getCheckForBehavior();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType34.CheckForBehavior = thresholdBehavior35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior37 = postThresholdType34.CheckForBehavior;
        thresholdType24.CheckForBehavior = thresholdBehavior37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType39 = postThresholdType23.setCheckForBehavior(thresholdBehavior37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType40 = postThresholdType0.setCheckForBehavior(thresholdBehavior37);
        org.junit.Assert.assertNull(thresholdBehavior1);
        org.junit.Assert.assertNull(thresholdSuppressionOption2);
        org.junit.Assert.assertTrue("'" + thresholdBehavior4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(thresholdSuppressionOption8);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown + "'", thresholdSuppressionOption9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown));
        org.junit.Assert.assertNotNull(postThresholdType11);
        org.junit.Assert.assertTrue("'" + thresholdBehavior13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNotNull(postThresholdType16);
        org.junit.Assert.assertNull(thresholdBehavior17);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable + "'", thresholdSuppressionOption19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable));
        org.junit.Assert.assertNotNull(thresholdType20);
        org.junit.Assert.assertTrue("'" + thresholdTypeSeverity21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info + "'", thresholdTypeSeverity21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info));
        org.junit.Assert.assertNotNull(thresholdType22);
        org.junit.Assert.assertNotNull(postThresholdType23);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertNull(thresholdBehavior30);
        org.junit.Assert.assertTrue("'" + thresholdBehavior31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow + "'", thresholdBehavior31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow));
        org.junit.Assert.assertTrue("'" + thresholdBehavior33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow + "'", thresholdBehavior33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow));
        org.junit.Assert.assertTrue("'" + thresholdBehavior35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertTrue("'" + thresholdBehavior37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNotNull(postThresholdType39);
        org.junit.Assert.assertNotNull(postThresholdType40);
    }

    @Test
    public void test52851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52851");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity();
        getActivity0.Id = "https";
        getActivity0.Detail = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity6 = getActivity0.setDetail((java.lang.Boolean) true);
        getActivity0.Detail = false;
        getActivity0.Id = "zZZZZ";
        getActivity0.Detail = true;
        org.junit.Assert.assertNotNull(getActivity6);
    }

    @Test
    public void test52852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52852");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary2 = observationImportSummary0.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = observationImportSummary2.setExpectedCount((java.lang.Integer) 0);
        java.lang.Integer int5 = observationImportSummary2.NewCount;
        java.lang.String str6 = observationImportSummary2.SummaryReportText;
        java.lang.Integer int7 = observationImportSummary2.SuccessCount;
        org.junit.Assert.assertNotNull(observationImportSummary2);
        org.junit.Assert.assertNotNull(observationImportSummary4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test52853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52853");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute2 = getExtendedAttribute0.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute4 = getExtendedAttribute2.setId("");
        getExtendedAttribute4.Id = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        getExtendedAttribute4.Id = "MinInstant";
        org.junit.Assert.assertNotNull(getExtendedAttribute2);
        org.junit.Assert.assertNotNull(getExtendedAttribute4);
    }

    @Test
    public void test52854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52854");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "hi!", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ", "2021.4.62.0", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "/AQUARIUS", "hi!", "'.'SSSSSSS" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getExportSpecimens0.LaboratoryIds = strList15;
        java.util.List<java.lang.String> strList18 = getExportSpecimens0.getLaboratoryIds();
        java.util.List<java.lang.String> strList19 = getExportSpecimens0.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str21 = deleteFieldVisits20.Sort;
        deleteFieldVisits20.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        java.util.List<java.lang.String> strList39 = getObservationsV2_24.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = getObservationsV2_24.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList42 = getObservationsV2_41.getMedia();
        java.time.Instant instant43 = getObservationsV2_41.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_41.setProjectIds((java.util.List<java.lang.String>) strList47);
        deleteFieldVisits20.Search = strList47;
        getExportSpecimens0.ProjectIds = strList47;
        java.util.List<java.lang.String> strList53 = getExportSpecimens0.getFieldVisitId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(getObservationsV2_41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(strList53);
    }

    @Test
    public void test52855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52855");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        java.util.ArrayList<java.lang.String> strList9 = postTag0.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList12, tagApplicabilityArray11);
        postTag0.Applicability = tagApplicabilityList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag0.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = tagRequestBase16.getValueType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType18 = tagRequestBase16.getValueType();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + tagApplicability10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertNull(tagValueType17);
        org.junit.Assert.assertNull(tagValueType18);
    }

    @Test
    public void test52856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52856");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.String str1 = locationDataServiceResponse0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setLocationType("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        java.lang.Double double4 = locationDataServiceResponse0.Srid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse6 = locationDataServiceResponse0.setElevation((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard8 = locationDatum7.ReferenceStandard;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod> locationDatumPeriodList9 = locationDatum7.DatumPeriods;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod> locationDatumPeriodList10 = locationDatum7.getDatumPeriods();
        locationDataServiceResponse6.LocationDatum = locationDatum7;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod> locationDatumPeriodList12 = locationDatum7.DatumPeriods;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNotNull(locationDataServiceResponse6);
        org.junit.Assert.assertNull(locationReferenceStandard8);
        org.junit.Assert.assertNull(locationDatumPeriodList9);
        org.junit.Assert.assertNull(locationDatumPeriodList10);
        org.junit.Assert.assertNull(locationDatumPeriodList12);
    }

    @Test
    public void test52857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52857");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = locationDatumPeriod0.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod66 = locationDatumPeriod64.setComments("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod68 = locationDatumPeriod64.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod70 = locationDatumPeriod64.setComments("");
        java.lang.Double double71 = locationDatumPeriod70.getUncertainty();
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(timeRange62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
        org.junit.Assert.assertNotNull(locationDatumPeriod66);
        org.junit.Assert.assertNotNull(locationDatumPeriod68);
        org.junit.Assert.assertNotNull(locationDatumPeriod70);
        org.junit.Assert.assertNull(double71);
    }

    @Test
    public void test52858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52858");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList3 = getExportSpecimens2.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant5 = qualifier4.DateApplied;
        java.lang.String str6 = qualifier4.User;
        java.lang.String str7 = qualifier4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier4.setDateApplied(instant11);
        getExportSpecimens2.Before = instant11;
        java.util.List<java.lang.String> strList16 = getExportSpecimens2.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = getObservationsV2_19.setDataClassifications((java.util.List<java.lang.String>) strList23);
        postTag18.PickListValues = strList23;
        java.util.ArrayList<java.lang.String> strList27 = postTag18.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor28 = processor17.setInputTimeSeriesUniqueIds(strList27);
        getExportSpecimens2.SamplingLocationGroupIds = strList27;
        getSpecimens0.SpecimenStatuses = strList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str32 = deleteFieldVisits31.Sort;
        deleteFieldVisits31.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        java.util.List<java.lang.String> strList50 = getObservationsV2_35.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_35.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList53 = getObservationsV2_52.getMedia();
        java.time.Instant instant54 = getObservationsV2_52.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_52.setProjectIds((java.util.List<java.lang.String>) strList58);
        deleteFieldVisits31.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens63 = getSpecimens0.setSearch((java.util.List<java.lang.String>) strList58);
        java.lang.String str64 = getSpecimens63.Cursor;
        java.util.List<java.lang.String> strList65 = getSpecimens63.SpecimenStatuses;
        java.util.List<java.lang.String> strList66 = getSpecimens63.getLaboratoryIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(qualifier14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_25);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(processor28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(instant54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNotNull(getSpecimens63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(strList66);
    }

    @Test
    public void test52859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52859");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType1 = getGroupedObservationsV2_0.SampleFraction;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = reading2.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading2.ReadingType = readingType4;
        java.time.Instant instant6 = reading2.Time;
        reading2.MonitoringMethod = "";
        reading2.Unit = "MaxInstant";
        reading2.IsValid = false;
        java.lang.String str13 = reading2.getModel();
        java.lang.Integer int14 = reading2.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading16 = reading2.setGroundWaterMeasurement(groundWaterMeasurement15);
        java.lang.String str17 = reading2.getMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str19 = deleteFieldVisits18.Sort;
        deleteFieldVisits18.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant22 = deleteFieldVisits18.EndStartTime;
        java.util.List<java.lang.String> strList23 = deleteFieldVisits18.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList25 = getObservationsV2_24.SamplingContextTagIds;
        java.time.Instant instant26 = getObservationsV2_24.getEndModificationTime();
        java.util.List<java.lang.String> strList27 = getObservationsV2_24.Media;
        java.util.List<java.lang.String> strList28 = getObservationsV2_24.ActivityTypes;
        java.util.List<java.lang.String> strList29 = getObservationsV2_24.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        getObservationsV2_24.LabResultLabAnalysisMethodIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits37 = deleteFieldVisits18.setFieldTripIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = reading2.setReadingQualifiers(strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_39 = getGroupedObservationsV2_0.setSamplingContextTagIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_41 = getGroupedObservationsV2_39.setDepthUnitId("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str42 = getGroupedObservationsV2_39.getSort();
        java.util.List<java.lang.String> strList43 = getGroupedObservationsV2_39.getAnalysisMethodIds();
        org.junit.Assert.assertNull(sampleFractionType1);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertTrue("'" + readingType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(reading16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits37);
        org.junit.Assert.assertNotNull(reading38);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_39);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList43);
    }

    @Test
    public void test52860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52860");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setUniqueId("9999-12-31T23:59:59.999Z");
        location5.LocationName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.Double double8 = location5.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location10 = location5.setElevation((java.lang.Double) 10.0d);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = location5.getExtendedAttributeValues();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(location10);
        org.junit.Assert.assertNull(extendedAttributeValueList11);
    }

    @Test
    public void test52861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52861");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = pointVelocityDischargeActivity0.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity0.MeterInspectedAfter = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = velocityDepthObservation11.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = velocityDepthObservation11.Velocity;
        java.lang.Double double14 = velocityDepthObservation11.getDepthMultiplier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation16 = velocityDepthObservation11.setIsVelocityEstimated((java.lang.Boolean) false);
        java.lang.Boolean boolean17 = velocityDepthObservation11.IsVelocityEstimated;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation19 = velocityDepthObservation11.setRevolutionCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        vertical20.EffectiveDepth = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical24 = vertical20.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical27 = vertical25.setSegmentVelocity(quantityWithDisplay26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical29 = vertical25.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical32 = vertical30.setFlowDirection(flowDirectionType31);
        vertical29.FlowDirection = flowDirectionType31;
        vertical20.FlowDirection = flowDirectionType31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setMeanGageHeightMethod("hi!");
        java.lang.String str38 = dischargeSummary37.MeasurementId;
        java.lang.String str39 = dischargeSummary37.GageHeightComments;
        java.time.Instant instant40 = dischargeSummary37.getMeasurementEndTime();
        java.lang.Integer int41 = dischargeSummary37.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading42.IsUsed = false;
        java.lang.Boolean boolean45 = volumetricDischargeReading42.IsUsed;
        volumetricDischargeReading42.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity50 = adcpDischargeActivity48.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = adcpDischargeActivity50.TopEstimateExponent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement52 = adcpDischargeActivity50.getDischargeChannelMeasurement();
        java.lang.String str53 = adcpDischargeActivity50.getDepthReference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = vertical54.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical57 = vertical54.setSegmentDischarge(quantityWithDisplay56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical59 = vertical57.setVerticalNumber((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        crossSectionPoint60.Distance = quantityWithDisplay61;
        crossSectionPoint60.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay65 = crossSectionPoint60.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint67 = crossSectionPoint60.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay68 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint69 = crossSectionPoint67.setElevation(quantityWithDisplay68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay70 = null;
        crossSectionPoint69.Depth = quantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint69.Depth = datumConvertedQuantityWithDisplay72;
        vertical57.SegmentWidth = datumConvertedQuantityWithDisplay72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity75 = adcpDischargeActivity50.setArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading76 = volumetricDischargeReading42.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary77 = dischargeSummary37.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay72);
        vertical20.SegmentVelocity = datumConvertedQuantityWithDisplay72;
        velocityDepthObservation19.Velocity = datumConvertedQuantityWithDisplay72;
        pointVelocityDischargeActivity0.VelocityAverage = datumConvertedQuantityWithDisplay72;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity8);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNotNull(velocityDepthObservation16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(velocityDepthObservation19);
        org.junit.Assert.assertNotNull(vertical24);
        org.junit.Assert.assertNotNull(vertical27);
        org.junit.Assert.assertNotNull(vertical29);
        org.junit.Assert.assertTrue("'" + flowDirectionType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical32);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + false + "'", boolean45, false);
        org.junit.Assert.assertNotNull(adcpDischargeActivity50);
        org.junit.Assert.assertNull(doubleWithDisplay51);
        org.junit.Assert.assertNull(dischargeChannelMeasurement52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertNotNull(vertical57);
        org.junit.Assert.assertNotNull(vertical59);
        org.junit.Assert.assertNull(quantityWithDisplay65);
        org.junit.Assert.assertNotNull(crossSectionPoint67);
        org.junit.Assert.assertNotNull(crossSectionPoint69);
        org.junit.Assert.assertNotNull(adcpDischargeActivity75);
        org.junit.Assert.assertNotNull(volumetricDischargeReading76);
        org.junit.Assert.assertNotNull(dischargeSummary77);
    }

    @Test
    public void test52862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52862");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        postRecurringReport2.NextGenerationDate = instant6;
        java.time.Instant instant9 = postRecurringReport2.getNextGenerationDate();
        java.lang.String str10 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant9);
        metadataChangeTransactionListServiceRequest1.QueryFrom = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest12 = downchainProcessorListByRatingModelServiceRequest0.setQueryTo(instant9);
        java.lang.String str13 = downchainProcessorListByRatingModelServiceRequest0.RatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList15 = getExportObservations14.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations17 = getExportObservations14.setNumericResultValue((java.lang.Double) (-1.0d));
        java.util.List<java.lang.String> strList18 = getExportObservations14.AnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str21 = getObservationsV2_20.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        getObservationsV2_20.ProjectIds = strList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_29 = putBulkEditResultGradesV2_19.setTaxonIds((java.util.List<java.lang.String>) strList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str31 = timeSeriesApprovalsTransactionListServiceRequest30.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType33 = null;
        controlConditionActivity32.ControlCleaned = controlCleanedType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        controlConditionActivity32.DateCleaned = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest39 = timeSeriesApprovalsTransactionListServiceRequest30.setQueryTo(instant36);
        timeSeriesApprovalsTransactionListServiceRequest30.TimeSeriesUniqueId = "https";
        java.time.Instant instant42 = timeSeriesApprovalsTransactionListServiceRequest30.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList44 = fieldVisitDataServiceResponse43.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse46 = fieldVisitDataServiceResponse43.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary47.Reviewer = "";
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary47.MeasurementTime = instant50;
        fieldVisitDataServiceResponse43.ResponseTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest53 = timeSeriesApprovalsTransactionListServiceRequest30.setQueryFrom(instant50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_54 = putBulkEditResultGradesV2_29.setStartObservedTime(instant50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations14.setEndModificationTime(instant50);
        java.time.Instant instant56 = getExportObservations55.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest57 = downchainProcessorListByRatingModelServiceRequest0.setQueryTo(instant56);
        java.lang.Object obj58 = downchainProcessorListByRatingModelServiceRequest0.getResponseType();
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str10, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(getExportObservations17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest39);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList44);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest53);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
    }

    @Test
    public void test52863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52863");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList1 = inspectionActivity0.getInspections();
        java.lang.String str2 = inspectionActivity0.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList3 = inspectionActivity0.Inspections;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList4 = inspectionActivity0.Readings;
        java.lang.String str5 = inspectionActivity0.Party;
        java.lang.Boolean boolean6 = inspectionActivity0.IsValid;
        java.lang.Integer int7 = inspectionActivity0.NumberOfReadingsNotDatumConverted;
        org.junit.Assert.assertNull(inspectionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(inspectionList3);
        org.junit.Assert.assertNull(readingList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test52864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52864");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds2 = timeSeriesUniqueIds0.setIsDeleted((java.lang.Boolean) true);
        java.time.Instant instant3 = timeSeriesUniqueIds2.getFirstPointChanged();
        java.time.Instant instant4 = timeSeriesUniqueIds2.FirstPointChanged;
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
    }

    @Test
    public void test52865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52865");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PublicKey publicKey0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PublicKey();
        publicKey0.Xml = "";
        java.lang.Integer int3 = publicKey0.KeySize;
        publicKey0.KeySize = 5;
        publicKey0.KeySize = 1;
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test52866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52866");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType2 = fieldVisit0.PlanningStatus;
        java.lang.String str3 = fieldVisit0.getNotes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit5 = fieldVisit0.setId("2021.8.9990");
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(planningStatusType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisit5);
    }

    @Test
    public void test52867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52867");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        getObservationsV2_1.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList11 = null;
        getObservationsV2_1.SamplingContextTagIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription13.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        controlConditionActivity16.DateCleaned = instant20;
        locationDescription15.LastModified = instant20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_1.setStartResultTime(instant20);
        getExportObservations0.StartObservedTime = instant20;
        java.util.List<java.lang.String> strList26 = getExportObservations0.getLabReportIds();
        java.lang.String str27 = getExportObservations0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = importItemTaxon28.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj31 = importItemTaxon28.Errors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj33 = putLocationType32.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon34 = importItemTaxon28.setErrors((java.lang.Object) putLocationType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList36 = getExportObservations35.getLabReportIds();
        java.lang.String str37 = getExportObservations35.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj39 = getActivityTemplates38.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        getObservationsV2_40.SpecimenIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray50 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags46.setTagUniqueIds(strList51);
        getObservationsV2_40.QualityControlTypes = strList51;
        getActivityTemplates38.Type = strList51;
        getExportObservations35.AnalyticalGroupIds = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon57 = importItemTaxon34.setFields((java.util.List<java.lang.String>) strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations58 = getExportObservations0.setIds((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList59 = getExportObservations0.getActivityIds();
        java.util.List<java.lang.String> strList60 = getExportObservations0.SamplingLocationIds;
        java.lang.String str61 = getExportObservations0.getFieldVisitId();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(importItemTaxon30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(importItemTaxon34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNotNull(importItemTaxon57);
        org.junit.Assert.assertNotNull(getExportObservations58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test52868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52868");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.lang.String str49 = postLabReport48.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport51 = postLabReport48.setCustomId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory52 = postLabReport51.getLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails53.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan56.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime59 = samplingPlan56.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit62 = putUnitGroupWithUnit60.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType63 = putUnitGroupWithUnit60.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity67 = samplingPlanPlannedActivity65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = auditAttributes68.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity67.AuditAttributes = auditAttributes68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = samplingPlanPlannedActivity67.AuditAttributes;
        putAccessGroup64.AuditAttributes = auditAttributes72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit74 = putUnitGroupWithUnit60.setAuditAttributes(auditAttributes72);
        samplingPlan56.AuditAttributes = auditAttributes72;
        java.time.OffsetDateTime offsetDateTime76 = null;
        auditAttributes72.ModificationTime = offsetDateTime76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails78 = labResultDetails53.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport79 = postLabReport51.setAuditAttributes(auditAttributes72);
        java.lang.String str80 = postLabReport51.getQcSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList81 = postLabReport51.ImportHistoryEventSimples;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(postLabReport51);
        org.junit.Assert.assertNull(laboratory52);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit62);
        org.junit.Assert.assertNull(unitGroupSystemCodeType63);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity67);
        org.junit.Assert.assertNotNull(auditAttributes70);
        org.junit.Assert.assertNotNull(auditAttributes72);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit74);
        org.junit.Assert.assertNotNull(labResultDetails78);
        org.junit.Assert.assertNotNull(postLabReport79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(importHistoryEventSimpleList81);
    }

    @Test
    public void test52869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52869");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        crossSectionPoint0.Distance = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = crossSectionPoint0.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint6 = crossSectionPoint4.setDistance(quantityWithDisplay5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeSummary7.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeSummary7.Discharge;
        java.lang.Integer int10 = dischargeSummary7.getGradeCode();
        java.lang.String str11 = dischargeSummary7.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary7.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint14 = crossSectionPoint4.setElevation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint15 = crossSectionPoint0.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = crossSectionPoint0.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = crossSectionPoint0.Elevation;
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(crossSectionPoint6);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(crossSectionPoint14);
        org.junit.Assert.assertNotNull(crossSectionPoint15);
        org.junit.Assert.assertNotNull(quantityWithDisplay16);
        org.junit.Assert.assertNull(quantityWithDisplay17);
    }

    @Test
    public void test52870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52870");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        java.lang.String str1 = roundServiceRequest0.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        java.lang.String str3 = ratingModelInputValuesServiceRequest2.RatingModelIdentifier;
        ratingModelInputValuesServiceRequest2.RatingModelIdentifier = "POST";
        java.lang.String str6 = ratingModelInputValuesServiceRequest2.RatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest7.ApplyShifts = true;
        java.time.Instant instant10 = ratingModelOutputValuesServiceRequest7.getEffectiveTime();
        java.lang.String str11 = ratingModelOutputValuesServiceRequest7.getRatingModelIdentifier();
        java.time.Instant instant12 = ratingModelOutputValuesServiceRequest7.EffectiveTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest13.ApplyShifts = true;
        java.time.Instant instant16 = ratingModelOutputValuesServiceRequest13.getEffectiveTime();
        java.lang.String str17 = ratingModelOutputValuesServiceRequest13.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest19 = ratingModelOutputValuesServiceRequest13.setApplyShifts((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest21 = ratingModelOutputValuesServiceRequest19.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList27 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList27, doubleArray26);
        ratingModelOutputValuesServiceResponse22.OutputValues = doubleList27;
        ratingModelOutputValuesServiceRequest21.InputValues = doubleList27;
        ratingModelOutputValuesServiceRequest7.InputValues = doubleList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList35 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList35, doubleArray34);
        ratingModelInputValuesServiceResponse32.InputValues = doubleList35;
        java.util.ArrayList<java.lang.Double> doubleList38 = ratingModelInputValuesServiceResponse32.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList39 = ratingModelInputValuesServiceResponse32.InputValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList45 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList45, doubleArray44);
        ratingModelOutputValuesServiceResponse40.OutputValues = doubleList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse48 = ratingModelInputValuesServiceResponse32.setInputValues(doubleList45);
        ratingModelOutputValuesServiceRequest7.InputValues = doubleList45;
        java.util.ArrayList<java.lang.Double> doubleList50 = ratingModelOutputValuesServiceRequest7.getInputValues();
        ratingModelInputValuesServiceRequest2.OutputValues = doubleList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest52 = roundServiceRequest0.setData(doubleList50);
        java.lang.String str53 = roundServiceRequest0.getMethodCode();
        roundServiceRequest0.ParameterDisplayId = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest19);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleList38);
        org.junit.Assert.assertNotNull(doubleList39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(ratingModelInputValuesServiceResponse48);
        org.junit.Assert.assertNotNull(doubleList50);
        org.junit.Assert.assertNotNull(roundServiceRequest52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test52871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52871");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_0.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType5 = null;
        controlConditionActivity4.ControlCleaned = controlCleanedType5;
        java.lang.String str7 = controlConditionActivity4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        controlConditionActivity4.DateCleaned = instant11;
        gageHeightReading3.ReadingTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = doubleWithDisplay15.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str18 = doubleWithDisplay17.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading19 = gageHeightReading3.setGageHeight(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setMeanGageHeightMethod("hi!");
        java.lang.String str24 = dischargeSummary23.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary23.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck27.setTime(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary23.setMeasurementTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_42 = getChartDataV2_20.setStartResultTime(instant39);
        gageHeightReading3.ReadingTime = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = getChartDataV2_0.setStartObservedTime(instant39);
        java.lang.String str45 = getChartDataV2_0.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_47 = getChartDataV2_0.setSpecimenName("https");
        java.time.Instant instant48 = getChartDataV2_0.getEndObservedTime();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(gageHeightReading19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(getChartDataV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(getChartDataV2_47);
        org.junit.Assert.assertNull(instant48);
    }

    @Test
    public void test52872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52872");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.getCorrectedStartTime();
        java.lang.String str2 = timeSeriesDescription0.getComputationIdentifier();
        timeSeriesDescription0.TimeSeriesType = "-PT87591240H";
        java.lang.String str5 = timeSeriesDescription0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        java.util.List<java.lang.String> strList13 = getObservationsV2_6.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        getObservationsV2_6.StartResultTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = timeSeriesDescription0.setCorrectedStartTime(instant17);
        java.lang.String str21 = timeSeriesDescription20.getComment();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(timeSeriesDescription20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test52873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52873");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        getChartDataV2_0.MinNumericResultValue = 10.0d;
        java.time.Instant instant8 = getChartDataV2_0.getEndObservedTime();
        java.util.List<java.lang.String> strList9 = getChartDataV2_0.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str11 = postUser10.Id;
        postUser10.Email = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int15 = getFieldVisits14.Limit;
        java.util.List<java.lang.String> strList16 = getFieldVisits14.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList18 = getSpecimens17.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType20 = putUserV2_19.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = dischargeSummary23.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse26.setNextToken(instant27);
        dischargeSummary23.MeasurementTime = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse22.setNextToken(instant27);
        java.time.Instant instant31 = locationDescriptionListServiceResponse22.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities32 = getActivities21.setToStartTime(instant31);
        java.lang.String str33 = getActivities32.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList35 = getObservationsV2_34.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        getObservationsV2_34.ResultGrades = strList47;
        getActivities32.Media = strList47;
        putUserV2_19.AccessGroups = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens54 = getSpecimens17.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits55 = getFieldVisits14.setSearch((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser56 = postUser10.setAccessGroups((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_57 = getChartDataV2_0.setSamplingContextTagIds((java.util.List<java.lang.String>) strList47);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(userType20);
        org.junit.Assert.assertNotNull(dischargeSummary25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(getActivities32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(getSpecimens54);
        org.junit.Assert.assertNotNull(getFieldVisits55);
        org.junit.Assert.assertNotNull(postUser56);
        org.junit.Assert.assertNotNull(getChartDataV2_57);
    }

    @Test
    public void test52874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52874");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity4 = fieldVisitDataServiceResponse3.getGageHeightAtZeroFlowActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str6 = levelSurveyActivity5.getParty();
        java.lang.String str7 = levelSurveyActivity5.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList8 = levelSurveyActivity5.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity10 = levelSurveyActivity5.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList12, levelSurveyMeasurementArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity14 = levelSurveyActivity10.setLevelMeasurements(levelSurveyMeasurementList12);
        fieldVisitDataServiceResponse3.LevelSurveyActivity = levelSurveyActivity10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval16 = fieldVisitDataServiceResponse3.Approval;
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(levelSurveyMeasurementList8);
        org.junit.Assert.assertNotNull(levelSurveyActivity10);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity14);
        org.junit.Assert.assertNull(fieldVisitApproval16);
    }

    @Test
    public void test52875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52875");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        labResultDetails6.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails6.setDilutionFactor("http");
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails6.setDateReceived(offsetDateTime14);
        java.lang.String str16 = labResultDetails15.AnalysisComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str18 = labResultDetails17.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails17.setLaboratory(laboratory19);
        java.time.OffsetDateTime offsetDateTime21 = null;
        labResultDetails17.DatePrepared = offsetDateTime21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = labResultDetails17.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        labResultDetails17.LabReport = labReport24;
        labResultDetails15.LabReport = labReport24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = labResultDetails15.AuditAttributes;
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str16, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNull(auditAttributes27);
    }

    @Test
    public void test52876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52876");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability tagApplicability1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] tagApplicabilityArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] { tagApplicability1 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>) tagApplicabilityList3, tagApplicabilityArray2);
        tagListServiceRequest0.Applicability = tagApplicabilityList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability tagApplicability7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] tagApplicabilityArray8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] { tagApplicability7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>) tagApplicabilityList9, tagApplicabilityArray8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest11 = tagListServiceRequest6.setApplicability(tagApplicabilityList9);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList12 = tagListServiceRequest11.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability tagApplicability13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToAttachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] tagApplicabilityArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] { tagApplicability13 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>) tagApplicabilityList15, tagApplicabilityArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest17 = tagListServiceRequest11.setApplicability(tagApplicabilityList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest18 = tagListServiceRequest0.setApplicability(tagApplicabilityList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability tagApplicability20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] tagApplicabilityArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability[] { tagApplicability20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability>) tagApplicabilityList22, tagApplicabilityArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagListServiceRequest tagListServiceRequest24 = tagListServiceRequest19.setApplicability(tagApplicabilityList22);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList25 = tagListServiceRequest24.Applicability;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability> tagApplicabilityList26 = tagListServiceRequest24.Applicability;
        tagListServiceRequest18.Applicability = tagApplicabilityList26;
        java.lang.Object obj28 = tagListServiceRequest18.getResponseType();
        java.lang.Object obj29 = tagListServiceRequest18.getResponseType();
        java.lang.Object obj30 = tagListServiceRequest18.getResponseType();
        org.junit.Assert.assertTrue("'" + tagApplicability1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToLocations + "'", tagApplicability1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(tagApplicabilityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + tagApplicability7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports + "'", tagApplicability7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports));
        org.junit.Assert.assertNotNull(tagApplicabilityArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(tagListServiceRequest11);
        org.junit.Assert.assertNotNull(tagApplicabilityList12);
        org.junit.Assert.assertTrue("'" + tagApplicability13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToAttachments + "'", tagApplicability13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToAttachments));
        org.junit.Assert.assertNotNull(tagApplicabilityArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(tagListServiceRequest17);
        org.junit.Assert.assertNotNull(tagListServiceRequest18);
        org.junit.Assert.assertTrue("'" + tagApplicability20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports + "'", tagApplicability20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagApplicability.AppliesToReports));
        org.junit.Assert.assertNotNull(tagApplicabilityArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(tagListServiceRequest24);
        org.junit.Assert.assertNotNull(tagApplicabilityList25);
        org.junit.Assert.assertNotNull(tagApplicabilityList26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TagListServiceResponse");
    }

    @Test
    public void test52877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52877");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Object obj3 = putProject0.getResponseType();
        putProject0.ScopeStatement = "hi!";
        java.time.OffsetDateTime offsetDateTime6 = putProject0.EndTime;
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertNull(offsetDateTime6);
    }

    @Test
    public void test52878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52878");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.Object obj1 = importChangeItem0.getRight();
        java.lang.String str2 = importChangeItem0.getPropertyName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest3.setTimeSeriesUniqueIds(strList15);
        java.util.ArrayList<java.lang.String> strList20 = timeAlignedDataServiceRequest3.TimeSeriesOutputUnitIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = timeAlignedDataServiceRequest3.setIncludeGapMarkers((java.lang.Boolean) false);
        importChangeItem0.Right = timeAlignedDataServiceRequest22;
        java.lang.Object obj24 = importChangeItem0.Right;
        java.lang.Object obj25 = importChangeItem0.getRight();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem27 = importChangeItem0.setPropertyName("");
        java.lang.Object obj28 = importChangeItem0.getLeft();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(importChangeItem27);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test52879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52879");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan0.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan0.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup5 = samplingPlan0.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan7 = samplingPlan0.setAuditAttributes(auditAttributes6);
        java.time.OffsetDateTime offsetDateTime8 = samplingPlan0.getLastGenerationDate();
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup5);
        org.junit.Assert.assertNotNull(samplingPlan7);
        org.junit.Assert.assertNull(offsetDateTime8);
    }

    @Test
    public void test52880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52880");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.Integer int2 = getObservationExportIIV2_0.getLimit();
        java.time.Instant instant3 = null;
        getObservationExportIIV2_0.StartModificationTime = instant3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.util.List<java.lang.String> strList6 = locationType5.getExtendedAttributeDefinitionIds();
        java.util.List<java.lang.String> strList7 = locationType5.ExtendedAttributeDefinitionIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports8.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList12 = getObservationsV2_11.SamplingContextTagIds;
        java.time.Instant instant13 = getObservationsV2_11.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        getObservationsV2_11.ResultStatuses = strList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports22 = getLabReports8.setSearch((java.util.List<java.lang.String>) strList18);
        java.util.List<java.lang.String> strList23 = getLabReports8.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str25 = deleteFieldVisits24.getSort();
        java.util.List<java.lang.String> strList26 = deleteFieldVisits24.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType43 = null;
        controlConditionActivity42.ControlCleaned = controlCleanedType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        controlConditionActivity42.DateCleaned = instant46;
        timeAlignedDataServiceRequest41.QueryFrom = instant46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.ActivityIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = timeAlignedDataServiceRequest41.setTimeSeriesOutputUnitIds(strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = getObservationsV2_27.setCollectionMethodIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits67 = deleteFieldVisits24.setSamplingPlanIds((java.util.List<java.lang.String>) strList61);
        getLabReports8.LaboratoryIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType69 = locationType5.setExtendedAttributeDefinitionIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_70 = getObservationExportIIV2_0.setResultGrades((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = dischargeSummary72.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse75.setNextToken(instant76);
        dischargeSummary72.MeasurementTime = instant76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = locationDescriptionListServiceResponse71.setNextToken(instant76);
        java.time.Instant instant80 = locationDescriptionListServiceResponse71.getNextToken();
        java.time.Instant instant81 = locationDescriptionListServiceResponse71.NextToken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_82 = getObservationExportIIV2_70.setEndResultTime(instant81);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNotNull(getLabReports22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest65);
        org.junit.Assert.assertNotNull(getObservationsV2_66);
        org.junit.Assert.assertNotNull(deleteFieldVisits67);
        org.junit.Assert.assertNotNull(locationType69);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_70);
        org.junit.Assert.assertNotNull(dischargeSummary74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_82);
    }

    @Test
    public void test52881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52881");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTagHistory getTagHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTagHistory();
        java.lang.Object obj1 = getTagHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTagHistory getTagHistory3 = getTagHistory0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTagHistory getTagHistory5 = getTagHistory0.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getTagHistory3);
        org.junit.Assert.assertNotNull(getTagHistory5);
    }

    @Test
    public void test52882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52882");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        postVisitFileToVisit0.VisitIdentifier = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        postVisitFileToVisit0.VisitIdentifier = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
    }

    @Test
    public void test52883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52883");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setCustomId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        postProject4.Approved = false;
        postProject4.ApprovalAgency = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject10 = postProject4.setStartTime(offsetDateTime9);
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
        org.junit.Assert.assertNotNull(postProject10);
    }

    @Test
    public void test52884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52884");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        getAuthTokenServiceRequest5.EncryptedPassword = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest9 = getAuthTokenServiceRequest5.setUsername("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest11 = getAuthTokenServiceRequest5.setEncryptedPassword("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest13 = getAuthTokenServiceRequest11.setUsername("9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest9);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest11);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest13);
    }

    @Test
    public void test52885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52885");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str1 = samplingLocation0.Description;
        java.lang.String str2 = samplingLocation0.VerticalCollectionMethod;
        java.lang.String str3 = samplingLocation0.getLongitude();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = samplingLocation0.getExtendedAttributes();
        java.lang.String str5 = samplingLocation0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test52886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52886");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setDescription("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList5 = putTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str7 = timeSeries6.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        postRecurringReport9.NextGenerationDate = instant13;
        java.time.Instant instant16 = postRecurringReport9.getNextGenerationDate();
        java.lang.String str17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant16);
        metadataChangeTransactionListServiceRequest8.QueryFrom = instant16;
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest20 = metadataChangeTransactionListServiceRequest8.setQueryFrom(instant19);
        timeSeries6.LastModifiedTime = instant19;
        timeSeries6.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        postRecurringReport25.NextGenerationDate = instant29;
        java.time.Instant instant32 = postRecurringReport25.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset33 = statisticalDateTimeOffset24.setDateTimeOffset(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj36 = timeAlignedDataServiceRequest35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse37.setNextToken(instant38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest40 = timeAlignedDataServiceRequest35.setQueryFrom(instant38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription41 = timeSeriesDescription34.setRawStartTime(instant38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset42 = statisticalDateTimeOffset24.setDateTimeOffset(instant38);
        timeSeries6.LastModifiedTime = instant38;
        timeSeries6.ComputationIdentifier = "https";
        java.lang.Boolean boolean46 = timeSeries6.isPublish();
        timeSeries6.Identifier = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities49.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities53 = getActivities49.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant55 = qualifier54.DateApplied;
        java.lang.String str56 = qualifier54.User;
        java.lang.String str57 = qualifier54.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj59 = timeAlignedDataServiceRequest58.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest63 = timeAlignedDataServiceRequest58.setQueryFrom(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier64 = qualifier54.setDateApplied(instant61);
        java.time.Instant instant65 = qualifier64.getDateApplied();
        getActivities49.ToStartTime = instant65;
        timeSeries6.LastModifiedTime = instant65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries69 = timeSeries6.setComputationIdentifier("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries71 = timeSeries69.setUnit("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str73 = postStatisticalDerivedTimeSeries72.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList75 = postCalculatedDerivedTimeSeries74.TimeSeriesUniqueIds;
        java.lang.String str76 = postCalculatedDerivedTimeSeries74.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation77.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList81 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList81, extendedAttributeValueArray80);
        postLocation77.ExtendedAttributeValues = extendedAttributeValueList81;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries84 = postCalculatedDerivedTimeSeries74.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries85 = postStatisticalDerivedTimeSeries72.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries86 = timeSeries69.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries87 = putTimeSeries4.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList81);
        java.lang.String str88 = putTimeSeries87.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries90 = putTimeSeries87.setDescription("multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****");
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertNull(extendedAttributeValueList5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest20);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset33);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest40);
        org.junit.Assert.assertNotNull(timeSeriesDescription41);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset42);
        org.junit.Assert.assertEquals("'" + boolean46 + "' != '" + false + "'", boolean46, false);
        org.junit.Assert.assertNotNull(getActivities53);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest63);
        org.junit.Assert.assertNotNull(qualifier64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(timeSeries69);
        org.junit.Assert.assertNotNull(timeSeries71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries84);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries85);
        org.junit.Assert.assertNotNull(timeSeries86);
        org.junit.Assert.assertNotNull(putTimeSeries87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(putTimeSeries90);
    }

    @Test
    public void test52887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52887");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        attachmentRepresentation5.Resolution = "/AQUARIUS/Provisioning/v1";
        attachmentRepresentation5.FileName = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation11 = attachmentRepresentation5.setComment("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation13 = attachmentRepresentation5.setLongitude("MaxDuration");
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation15 = attachmentRepresentation5.setDateTaken(offsetDateTime14);
        java.lang.String str16 = attachmentRepresentation15.getLatitude();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation11);
        org.junit.Assert.assertNotNull(attachmentRepresentation13);
        org.junit.Assert.assertNotNull(attachmentRepresentation15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test52888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52888");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_0.setActivityCustomId("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_48.setDepthUnitId("http://MaxDurationhttp/json/reply/Float");
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
    }

    @Test
    public void test52889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52889");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList2, referenceStandardOffsetArray1);
        locationReferenceStandard0.ReferenceStandardOffsets = referenceStandardOffsetList2;
        locationReferenceStandard0.ReferenceStandard = "2021.4.62.0";
        java.lang.String str7 = locationReferenceStandard0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard9 = locationReferenceStandard0.setReferenceStandard("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList10 = locationReferenceStandard9.getReferenceStandardOffsets();
        java.lang.String str11 = locationReferenceStandard9.ReferenceStandard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard13 = locationReferenceStandard9.setComments("'.'SSSSSSS");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList14 = locationReferenceStandard13.getReferenceStandardOffsets();
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locationReferenceStandard9);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
        org.junit.Assert.assertNotNull(locationReferenceStandard13);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList14);
    }

    @Test
    public void test52890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52890");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest6.ReportTitle = "MinDuration";
        java.lang.String str9 = reportListServiceRequest6.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_10.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.getMedia();
        java.time.Instant instant29 = getObservationsV2_27.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_27.setProjectIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest37 = reportListServiceRequest6.setTagKeys(strList33);
        reportListServiceRequest6.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str41 = deleteFieldVisits40.Sort;
        deleteFieldVisits40.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList44 = deleteFieldVisits40.getScheduleIds();
        java.util.List<java.lang.String> strList45 = deleteFieldVisits40.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        deleteFieldVisits40.PlanningStatuses = strList55;
        reportListServiceRequest6.TagKeys = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_0.setSearch((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList59 = getChartDataV2_0.ProjectIds;
        java.util.List<java.lang.String> strList60 = getChartDataV2_0.getAnalyticalGroupIds();
        java.lang.String str61 = getChartDataV2_0.getFieldVisitId();
        java.util.List<java.lang.String> strList62 = getChartDataV2_0.ProjectIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(reportListServiceRequest37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test52891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52891");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList1 = getAnalyticalGroups0.getAnalyticalGroupTypes();
        java.util.List<java.lang.String> strList2 = getAnalyticalGroups0.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList4 = getShippingContainers3.Search;
        java.util.List<java.lang.String> strList5 = getShippingContainers3.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        java.util.List<java.lang.String> strList23 = getObservationsV2_8.getLabReportIds();
        importItem7.Errors = getObservationsV2_8;
        java.lang.Object obj25 = importItem7.getExistingItem();
        importItem7.Input = "hi!";
        java.lang.Object obj28 = importItem7.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem30 = importItem7.setStatus(importItemStatusType29);
        importItem30.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate33.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = specimenTemplate33.setId("hi!");
        java.lang.Boolean boolean38 = specimenTemplate37.getFiltered();
        importItem30.Item = specimenTemplate37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_42.setDataClassifications((java.util.List<java.lang.String>) strList46);
        postTag41.PickListValues = strList46;
        java.util.ArrayList<java.lang.String> strList50 = postTag41.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor51 = processor40.setInputTimeSeriesUniqueIds(strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem52 = importItem30.setWarningMessages((java.util.List<java.lang.String>) strList50);
        java.util.List<java.lang.String> strList53 = importItem30.getWarningMessages();
        getAnalysisMethods6.ObservedPropertyIds = strList53;
        getShippingContainers3.Search = strList53;
        getAnalyticalGroups0.ObservedPropertyIds = strList53;
        java.lang.Object obj57 = getAnalyticalGroups0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + importItemStatusType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem30);
        org.junit.Assert.assertNotNull(specimenTemplate37);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(processor51);
        org.junit.Assert.assertNotNull(importItem52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
    }

    @Test
    public void test52892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52892");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        java.lang.String str4 = reading0.MonitoringMethod;
        reading0.SubLocationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading8 = reading0.setSensorUniqueId("ZZZZZ");
        reading8.ReadingQualifier = "";
        reading8.ReferencePointUniqueId = "multipart/form-data; boundary=****a02903b2-8109-4914-8058-61246cf0a809****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(reading8);
    }

    @Test
    public void test52893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52893");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = null;
        adcpDischargeActivity2.TopEstimateExponent = doubleWithDisplay4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = adcpDischargeActivity2.getTransducerDepth();
        adcpDischargeActivity2.NodeDetails = "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****";
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(quantityWithDisplay6);
    }

    @Test
    public void test52894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52894");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        java.time.Instant instant65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_66 = deleteObservationsV2_64.setStartObservedTime(instant65);
        java.util.List<java.lang.String> strList67 = deleteObservationsV2_66.getSamplingContextTagIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_69 = deleteObservationsV2_66.setCursor("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNotNull(deleteObservationsV2_66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(deleteObservationsV2_69);
    }

    @Test
    public void test52895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52895");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        java.lang.String str6 = reading3.getParameterId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading8 = reading3.setParameter("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str9 = reading3.getNodeDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = reading3.setReadingType(readingType10);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(reading8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + readingType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.Unknown + "'", readingType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.Unknown));
        org.junit.Assert.assertNotNull(reading11);
    }

    @Test
    public void test52896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52896");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str1 = inspection0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection3 = inspection0.setSubLocationIdentifier("");
        inspection0.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection7 = inspection0.setSubLocationIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection9 = inspection7.setSubLocationIdentifier("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType inspectionType10 = inspection7.getInspectionType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(inspection3);
        org.junit.Assert.assertNotNull(inspection7);
        org.junit.Assert.assertNotNull(inspection9);
        org.junit.Assert.assertNull(inspectionType10);
    }

    @Test
    public void test52897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52897");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime1 = postFilter0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postFilter0.getAuditAttributes();
        postFilter0.Description = "'.'SSSSSSS";
        java.lang.Object obj5 = postFilter0.getResponseType();
        java.time.OffsetDateTime offsetDateTime6 = postFilter0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter8 = postFilter0.setDescription("http://MaxDurationhttp/json/reply/String");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(postFilter8);
    }

    @Test
    public void test52898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52898");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        java.lang.String str7 = observedProperty3.getDescription();
        observedProperty3.CustomId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard10 = observationStandard0.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty11.CasNumber = "MinDuration";
        java.lang.String str14 = observedProperty11.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = putObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty15.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType19 = putObservedProperty15.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType20 = putObservedProperty15.getAnalysisType();
        putObservedProperty15.Description = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty24 = putObservedProperty15.setResultType(resultType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observedProperty11.setResultType(resultType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = observedProperty25.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard28 = observationStandard0.setObservedProperty(observedProperty25);
        observationStandard28.RuleText = "http://MaxDurationhttp/json/reply/Double";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty31 = observationStandard28.getObservedProperty();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(observationStandard10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MinDuration" + "'", str14, "MinDuration");
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNull(analysisType19);
        org.junit.Assert.assertNull(analysisType20);
        org.junit.Assert.assertTrue("'" + resultType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty24);
        org.junit.Assert.assertNotNull(observedProperty25);
        org.junit.Assert.assertNotNull(observedProperty27);
        org.junit.Assert.assertNotNull(observationStandard28);
        org.junit.Assert.assertNotNull(observedProperty31);
    }

    @Test
    public void test52899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52899");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.time.Instant instant1 = noteOperation0.getDateAppliedUtc();
        java.time.Instant instant2 = noteOperation0.DateAppliedUtc;
        java.lang.String str3 = noteOperation0.NoteText;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant5 = timeSeriesDescription4.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription7 = timeSeriesDescription4.setLabel("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant9 = timeSeriesDescription8.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType12 = null;
        controlConditionActivity11.ControlCleaned = controlCleanedType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        controlConditionActivity11.DateCleaned = instant15;
        timeAlignedDataServiceRequest10.QueryFrom = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription19 = timeSeriesDescription8.setCorrectedEndTime(instant15);
        timeSeriesDescription4.RawEndTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription22 = timeSeriesDescription4.setComputationIdentifier("9999-12-31T23:59:59.9999999Z");
        java.time.Instant instant23 = timeSeriesDescription22.RawEndTime;
        noteOperation0.DateAppliedUtc = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = locationRemark25.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        locationRemark27.FromTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark27.setRemark("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str34 = locationRemark33.TypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest35.ApplyShifts = true;
        java.time.Instant instant38 = ratingModelOutputValuesServiceRequest35.getEffectiveTime();
        java.util.ArrayList<java.lang.Double> doubleList39 = ratingModelOutputValuesServiceRequest35.getInputValues();
        java.lang.Boolean boolean40 = ratingModelOutputValuesServiceRequest35.isApplyShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str42 = crossSectionSurveyActivity41.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity44 = crossSectionSurveyActivity41.setComments("ZZZZZ");
        java.time.Instant instant45 = crossSectionSurveyActivity44.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest46.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str50 = timeSeriesDescription49.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription52 = timeSeriesDescription49.setPublish((java.lang.Boolean) false);
        java.lang.String str53 = timeSeriesDescription52.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        getObservationsV2_60.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse63.setNextToken(instant64);
        getObservationsV2_60.EndObservedTime = instant64;
        timeSeriesDescription52.CorrectedEndTime = instant64;
        timeSeriesDataCorrectedServiceRequest46.QueryFrom = instant64;
        crossSectionSurveyActivity44.EndTime = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest70 = ratingModelOutputValuesServiceRequest35.setEffectiveTime(instant64);
        locationRemark33.ToTime = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation72 = noteOperation0.setDateAppliedUtc(instant64);
        java.lang.String str73 = noteOperation0.NoteText;
        java.time.Instant instant74 = noteOperation0.getDateAppliedUtc();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesDescription7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeSeriesDescription19);
        org.junit.Assert.assertNotNull(timeSeriesDescription22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationRemark27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(doubleList39);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity44);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(timeSeriesDescription52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest70);
        org.junit.Assert.assertNotNull(noteOperation72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(instant74);
    }

    @Test
    public void test52900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52900");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        ratingModelDescription0.InputUnit = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.lang.String str4 = ratingModelDescription0.getLocationIdentifier();
        java.lang.String str5 = ratingModelDescription0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription7 = ratingModelDescription0.setLabel("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(ratingModelDescription7);
    }

    @Test
    public void test52901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52901");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes();
        java.lang.String str1 = deleteTimeSeriesNotes0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval2 = deleteTimeSeriesNotes0.TimeRange;
        java.lang.Object obj3 = deleteTimeSeriesNotes0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes5 = deleteTimeSeriesNotes0.setUniqueId("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(interval2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$DeleteTimeSeriesNotesResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$DeleteTimeSeriesNotesResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$DeleteTimeSeriesNotesResponse");
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes5);
    }

    @Test
    public void test52902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52902");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries3 = postCalculatedDerivedTimeSeries0.setMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = postCalculatedDerivedTimeSeries4.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str9 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart12 = inputPart10.setHeaders((java.lang.Object) interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries8.setInterpolationType(interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries3.setInterpolationType(interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries16 = postCalculatedDerivedTimeSeries3.setLabel("http://MaxDurationhttp/json/reply/Float");
        postCalculatedDerivedTimeSeries3.UtcOffset = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str9, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart12);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries16);
    }

    @Test
    public void test52903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52903");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute();
        java.lang.String str1 = deleteExtendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute3 = deleteExtendedAttribute0.setUniqueId("0001-01-01T00:00:00.000Z");
        java.lang.String str4 = deleteExtendedAttribute3.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteExtendedAttribute3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str4, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test52904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52904");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = openWaterData0.getDistanceToMeter();
        openWaterData0.WetLineCorrection = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData6 = openWaterData0.setWetLineCorrection((java.lang.Double) 0.0d);
        java.lang.Double double7 = openWaterData0.getDryLineCorrection();
        java.lang.String str8 = openWaterData0.getSuspensionWeight();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNotNull(openWaterData6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test52905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52905");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteNullMeasureQualifier deleteNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteNullMeasureQualifier deleteNullMeasureQualifier2 = deleteNullMeasureQualifier0.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteNullMeasureQualifier deleteNullMeasureQualifier4 = deleteNullMeasureQualifier0.setId("https");
        deleteNullMeasureQualifier0.Id = "http://MaxDurationhttp/json/reply/Integer";
        org.junit.Assert.assertNotNull(deleteNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(deleteNullMeasureQualifier4);
    }

    @Test
    public void test52906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52906");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject();
        java.lang.String str1 = searchResultProject0.Cursor;
        java.lang.String str2 = searchResultProject0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList3 = searchResultProject0.getDomainObjects();
        java.lang.String str4 = searchResultProject0.getCursor();
        java.lang.String str5 = searchResultProject0.getCursor();
        searchResultProject0.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject9 = searchResultProject0.setTotalCount((java.lang.Integer) 100);
        java.lang.String str10 = searchResultProject9.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList11 = searchResultProject9.DomainObjects;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(projectList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(searchResultProject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(projectList11);
    }

    @Test
    public void test52907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52907");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        java.lang.Integer int1 = analyticalGroupSimple0.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple3 = analyticalGroupSimple0.setId("POST");
        analyticalGroupSimple3.Id = "";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(analyticalGroupSimple3);
    }

    @Test
    public void test52908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52908");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = gapToleranceOperation0.OperationType;
        java.lang.String str2 = gapToleranceOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = gapToleranceOperation0.getOperationType();
        java.lang.Double double4 = gapToleranceOperation0.getToleranceInMinutes();
        gapToleranceOperation0.Comments = "POST";
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(double4);
    }

    @Test
    public void test52909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52909");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit0.setDischargeActivities(dischargeActivityList7);
        java.lang.Boolean boolean9 = fieldVisit0.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork12 = completedWork10.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork14 = completedWork12.setBiologicalSampleTaken((java.lang.Boolean) true);
        java.lang.Boolean boolean15 = completedWork12.isSafetyInspectionPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription16 = fieldVisit0.setCompletedWork(completedWork12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList18 = inspectionActivity17.getInspections();
        java.lang.String str19 = inspectionActivity17.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList20 = inspectionActivity17.Inspections;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList21 = inspectionActivity17.Readings;
        java.lang.String str22 = inspectionActivity17.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList23 = inspectionActivity17.getReadings();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit24 = fieldVisit0.setInspectionActivity(inspectionActivity17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity26 = inspectionActivity17.setParty("http://MaxDurationhttp/json/reply/Float");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck> calibrationCheckList27 = inspectionActivity26.getCalibrationChecks();
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(completedWork12);
        org.junit.Assert.assertNotNull(completedWork14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(fieldVisitDescription16);
        org.junit.Assert.assertNull(inspectionList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(inspectionList20);
        org.junit.Assert.assertNull(readingList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(readingList23);
        org.junit.Assert.assertNotNull(fieldVisit24);
        org.junit.Assert.assertNotNull(inspectionActivity26);
        org.junit.Assert.assertNull(calibrationCheckList27);
    }

    @Test
    public void test52910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52910");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition2 = tagDefinition0.setValueType(tagValueType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition4 = tagDefinition0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.Boolean boolean5 = tagDefinition0.AppliesToAttachments;
        java.lang.Boolean boolean6 = tagDefinition0.isAppliesToSensorsGauges();
        java.lang.Boolean boolean7 = tagDefinition0.isAppliesToLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition0.setUniqueId("");
        java.lang.Boolean boolean10 = tagDefinition9.isAppliesToAttachments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition12 = tagDefinition9.setAppliesToLocationNotes((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(tagDefinition2);
        org.junit.Assert.assertNotNull(tagDefinition4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertNotNull(tagDefinition12);
    }

    @Test
    public void test52911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52911");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay3;
        java.lang.String str5 = adcpDischargeActivity0.getTopEstimateMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = adcpDischargeActivity0.setNodeDetails("multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(adcpDischargeActivity7);
    }

    @Test
    public void test52912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52912");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest2 = roundServiceRequest0.setUnitId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest4 = roundServiceRequest0.setMethodCode("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest5.ApplyShifts = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList13 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList13, doubleArray12);
        ratingModelOutputValuesServiceResponse8.OutputValues = doubleList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest16 = ratingModelOutputValuesServiceRequest5.setInputValues(doubleList13);
        java.util.ArrayList<java.lang.Double> doubleList17 = ratingModelOutputValuesServiceRequest5.getInputValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest18 = roundServiceRequest4.setData(doubleList17);
        java.lang.String str19 = roundServiceRequest18.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList23 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList23, doubleArray22);
        ratingModelInputValuesServiceResponse20.InputValues = doubleList23;
        java.util.ArrayList<java.lang.Double> doubleList26 = ratingModelInputValuesServiceResponse20.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList27 = ratingModelInputValuesServiceResponse20.InputValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList33 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList33, doubleArray32);
        ratingModelOutputValuesServiceResponse28.OutputValues = doubleList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse36 = ratingModelInputValuesServiceResponse20.setInputValues(doubleList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList43 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList43, doubleArray42);
        ratingModelOutputValuesServiceResponse38.OutputValues = doubleList43;
        ratingModelInputValuesServiceRequest37.OutputValues = doubleList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse47 = ratingModelInputValuesServiceResponse36.setInputValues(doubleList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary51.Reviewer = "";
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary51.MeasurementTime = instant54;
        postRecurringReport50.NextGenerationDate = instant54;
        java.time.Instant instant57 = postRecurringReport50.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset58 = statisticalDateTimeOffset49.setDateTimeOffset(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest59 = ratingModelEffectiveShiftsByStageValuesServiceRequest48.setMeasurementTime(instant57);
        ratingModelEffectiveShiftsByStageValuesServiceRequest59.RatingModelIdentifier = "";
        java.time.Instant instant62 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        ratingModelEffectiveShiftsByStageValuesServiceRequest59.MeasurementTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList68 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList68, doubleArray67);
        ratingModelInputValuesServiceResponse65.InputValues = doubleList68;
        java.util.ArrayList<java.lang.Double> doubleList71 = ratingModelInputValuesServiceResponse65.InputValues;
        ratingModelInputValuesServiceResponse64.InputValues = doubleList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest73 = ratingModelEffectiveShiftsByStageValuesServiceRequest59.setStageValues(doubleList71);
        ratingModelInputValuesServiceResponse36.InputValues = doubleList71;
        java.util.ArrayList<java.lang.Double> doubleList75 = ratingModelInputValuesServiceResponse36.InputValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest76 = roundServiceRequest18.setData(doubleList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest78 = roundServiceRequest18.setValueForNaN("MinDuration");
        org.junit.Assert.assertNotNull(roundServiceRequest2);
        org.junit.Assert.assertNotNull(roundServiceRequest4);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest16);
        org.junit.Assert.assertNotNull(doubleList17);
        org.junit.Assert.assertNotNull(roundServiceRequest18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleList26);
        org.junit.Assert.assertNotNull(doubleList27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(ratingModelInputValuesServiceResponse36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(ratingModelInputValuesServiceResponse47);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset58);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(doubleList71);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest73);
        org.junit.Assert.assertNotNull(doubleList75);
        org.junit.Assert.assertNotNull(roundServiceRequest76);
        org.junit.Assert.assertNotNull(roundServiceRequest78);
    }

    @Test
    public void test52913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52913");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = postSamplingLocation4.getElevation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = postSamplingLocation4.setCustomId("0001-01-01T00:00:00.000Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList8 = postSamplingLocation7.getExtendedAttributes();
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(postSamplingLocation7);
        org.junit.Assert.assertNull(extendedAttributeList8);
    }

    @Test
    public void test52914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52914");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup();
        java.lang.String str1 = deleteAnalyticalGroup0.Id;
        java.lang.String str2 = deleteAnalyticalGroup0.getId();
        java.lang.String str3 = deleteAnalyticalGroup0.Id;
        java.lang.String str4 = deleteAnalyticalGroup0.Id;
        deleteAnalyticalGroup0.Id = "2021.4.62.0";
        java.lang.String str7 = deleteAnalyticalGroup0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2021.4.62.0" + "'", str7, "2021.4.62.0");
    }

    @Test
    public void test52915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52915");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        searchResultUnitGroupWithUnits0.Cursor = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.String str3 = searchResultUnitGroupWithUnits0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits5 = searchResultUnitGroupWithUnits0.setCursor("https");
        java.lang.Integer int6 = searchResultUnitGroupWithUnits0.getTotalCount();
        java.lang.Integer int7 = searchResultUnitGroupWithUnits0.getTotalCount();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str3, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNotNull(searchResultUnitGroupWithUnits5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test52916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52916");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = chartData1.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData4 = chartData1.setDepthUnitGroupWithUnits(unitGroupWithUnits3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList6 = chartData5.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = chartData7.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits9 = null;
        chartData7.UnitGroupWithUnits = unitGroupWithUnits9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits11 = chartData7.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList12 = chartData7.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = chartData13.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData16 = chartData13.setDepthUnitGroupWithUnits(unitGroupWithUnits15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = chartData17.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = chartData19.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22, chartDataPointArray21);
        chartData19.DataPoints = chartDataPointList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData25 = chartData17.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = chartData17.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData28 = chartData17.setSamplingLocation(samplingLocation27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits29 = null;
        chartData17.UnitGroupWithUnits = unitGroupWithUnits29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData1, chartData5, chartData7, chartData16, chartData17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList32, chartDataArray31);
        multiChartData0.Charts = chartDataList32;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList35 = multiChartData0.Charts;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = chartData37.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData40 = chartData37.setDepthUnitGroupWithUnits(unitGroupWithUnits39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList42 = chartData41.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation44 = chartData43.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits45 = null;
        chartData43.UnitGroupWithUnits = unitGroupWithUnits45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits47 = chartData43.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList48 = chartData43.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = chartData49.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData52 = chartData49.setDepthUnitGroupWithUnits(unitGroupWithUnits51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = chartData53.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty56 = chartData55.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList58, chartDataPointArray57);
        chartData55.DataPoints = chartDataPointList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData61 = chartData53.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty62 = chartData53.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData64 = chartData53.setSamplingLocation(samplingLocation63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits65 = null;
        chartData53.UnitGroupWithUnits = unitGroupWithUnits65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData37, chartData41, chartData43, chartData52, chartData53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList68, chartDataArray67);
        multiChartData36.Charts = chartDataList68;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList71 = multiChartData36.Charts;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList72 = multiChartData36.getCharts();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData73 = multiChartData0.setCharts(chartDataList72);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList74 = multiChartData0.getCharts();
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNotNull(chartData4);
        org.junit.Assert.assertNull(chartDataPointList6);
        org.junit.Assert.assertNull(samplingLocation8);
        org.junit.Assert.assertNull(unitGroupWithUnits11);
        org.junit.Assert.assertNull(chartDataPointList12);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertNotNull(chartData16);
        org.junit.Assert.assertNull(samplingLocation18);
        org.junit.Assert.assertNull(observedProperty20);
        org.junit.Assert.assertNotNull(chartDataPointArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chartData25);
        org.junit.Assert.assertNull(observedProperty26);
        org.junit.Assert.assertNotNull(chartData28);
        org.junit.Assert.assertNotNull(chartDataArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chartDataList35);
        org.junit.Assert.assertNull(observedProperty38);
        org.junit.Assert.assertNotNull(chartData40);
        org.junit.Assert.assertNull(chartDataPointList42);
        org.junit.Assert.assertNull(samplingLocation44);
        org.junit.Assert.assertNull(unitGroupWithUnits47);
        org.junit.Assert.assertNull(chartDataPointList48);
        org.junit.Assert.assertNull(observedProperty50);
        org.junit.Assert.assertNotNull(chartData52);
        org.junit.Assert.assertNull(samplingLocation54);
        org.junit.Assert.assertNull(observedProperty56);
        org.junit.Assert.assertNotNull(chartDataPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chartData61);
        org.junit.Assert.assertNull(observedProperty62);
        org.junit.Assert.assertNotNull(chartData64);
        org.junit.Assert.assertNotNull(chartDataArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chartDataList71);
        org.junit.Assert.assertNotNull(chartDataList72);
        org.junit.Assert.assertNotNull(multiChartData73);
        org.junit.Assert.assertNotNull(chartDataList74);
    }

    @Test
    public void test52917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52917");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest4 = timeSeriesDataCorrectedServiceRequest0.setGetParts("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest6 = timeSeriesDataCorrectedServiceRequest4.setTimeSeriesUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.Boolean boolean7 = timeSeriesDataCorrectedServiceRequest6.isApplyRounding();
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest4);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test52918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52918");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSchedule getSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSchedule();
        java.lang.String str1 = getSchedule0.Id;
        java.lang.Object obj2 = getSchedule0.getResponseType();
        getSchedule0.Id = "ZZZZZ";
        java.lang.Object obj5 = getSchedule0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
    }

    @Test
    public void test52919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52919");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long3 = roleApprovalTransition2.getToApprovalLevel();
        java.lang.Long long4 = roleApprovalTransition2.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long6 = roleApprovalTransition5.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = roleApprovalTransition7.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = roleApprovalTransition10.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = roleApprovalTransition10.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long16 = roleApprovalTransition15.getToApprovalLevel();
        java.lang.Long long17 = roleApprovalTransition15.ToApprovalLevel;
        java.lang.Long long18 = roleApprovalTransition15.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long20 = roleApprovalTransition19.getToApprovalLevel();
        java.lang.Long long21 = roleApprovalTransition19.ToApprovalLevel;
        java.lang.Long long22 = roleApprovalTransition19.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition2, roleApprovalTransition5, roleApprovalTransition9, roleApprovalTransition10, roleApprovalTransition15, roleApprovalTransition19 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList24, roleApprovalTransitionArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase26 = postRole1.setRoleApprovalTransitions(roleApprovalTransitionList24);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList27 = postRole1.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole0.setRoleApprovalTransitions(roleApprovalTransitionList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long31 = roleApprovalTransition30.getToApprovalLevel();
        java.lang.Long long32 = roleApprovalTransition30.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long34 = roleApprovalTransition33.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition37 = roleApprovalTransition35.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition40 = roleApprovalTransition38.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition42 = roleApprovalTransition38.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long44 = roleApprovalTransition43.getToApprovalLevel();
        java.lang.Long long45 = roleApprovalTransition43.ToApprovalLevel;
        java.lang.Long long46 = roleApprovalTransition43.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long48 = roleApprovalTransition47.getToApprovalLevel();
        java.lang.Long long49 = roleApprovalTransition47.ToApprovalLevel;
        java.lang.Long long50 = roleApprovalTransition47.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition30, roleApprovalTransition33, roleApprovalTransition37, roleApprovalTransition38, roleApprovalTransition43, roleApprovalTransition47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList52, roleApprovalTransitionArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase54 = postRole29.setRoleApprovalTransitions(roleApprovalTransitionList52);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList55 = postRole29.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase56 = roleBase28.setRoleApprovalTransitions(roleApprovalTransitionList55);
        roleBase56.CanEditData = true;
        java.lang.Boolean boolean59 = roleBase56.CanRemoveFieldVisits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase62 = postRole60.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str63 = postRole60.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long66 = roleApprovalTransition65.getToApprovalLevel();
        java.lang.Long long67 = roleApprovalTransition65.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long69 = roleApprovalTransition68.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition72 = roleApprovalTransition70.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition75 = roleApprovalTransition73.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition77 = roleApprovalTransition73.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long79 = roleApprovalTransition78.getToApprovalLevel();
        java.lang.Long long80 = roleApprovalTransition78.ToApprovalLevel;
        java.lang.Long long81 = roleApprovalTransition78.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long83 = roleApprovalTransition82.getToApprovalLevel();
        java.lang.Long long84 = roleApprovalTransition82.ToApprovalLevel;
        java.lang.Long long85 = roleApprovalTransition82.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition65, roleApprovalTransition68, roleApprovalTransition72, roleApprovalTransition73, roleApprovalTransition78, roleApprovalTransition82 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList87 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList87, roleApprovalTransitionArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase89 = postRole64.setRoleApprovalTransitions(roleApprovalTransitionList87);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList90 = postRole64.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase91 = postRole60.setRoleApprovalTransitions(roleApprovalTransitionList90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase92 = roleBase56.setRoleApprovalTransitions(roleApprovalTransitionList90);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList93 = roleBase56.getRoleApprovalTransitions();
        java.lang.Boolean boolean94 = roleBase56.isCanRemoveFieldVisits();
        java.lang.Boolean boolean95 = roleBase56.isCanEditLocationDetails();
        org.junit.Assert.assertNull(long3);
        org.junit.Assert.assertNull(long4);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(roleApprovalTransition9);
        org.junit.Assert.assertNotNull(roleApprovalTransition12);
        org.junit.Assert.assertNotNull(roleApprovalTransition14);
        org.junit.Assert.assertNull(long16);
        org.junit.Assert.assertNull(long17);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(roleBase26);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList27);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNull(long31);
        org.junit.Assert.assertNull(long32);
        org.junit.Assert.assertNull(long34);
        org.junit.Assert.assertNotNull(roleApprovalTransition37);
        org.junit.Assert.assertNotNull(roleApprovalTransition40);
        org.junit.Assert.assertNotNull(roleApprovalTransition42);
        org.junit.Assert.assertNull(long44);
        org.junit.Assert.assertNull(long45);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNull(long48);
        org.junit.Assert.assertNull(long49);
        org.junit.Assert.assertNull(long50);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(roleBase54);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList55);
        org.junit.Assert.assertNotNull(roleBase56);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(roleBase62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str63, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(long66);
        org.junit.Assert.assertNull(long67);
        org.junit.Assert.assertNull(long69);
        org.junit.Assert.assertNotNull(roleApprovalTransition72);
        org.junit.Assert.assertNotNull(roleApprovalTransition75);
        org.junit.Assert.assertNotNull(roleApprovalTransition77);
        org.junit.Assert.assertNull(long79);
        org.junit.Assert.assertNull(long80);
        org.junit.Assert.assertNull(long81);
        org.junit.Assert.assertNull(long83);
        org.junit.Assert.assertNull(long84);
        org.junit.Assert.assertNull(long85);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(roleBase89);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList90);
        org.junit.Assert.assertNotNull(roleBase91);
        org.junit.Assert.assertNotNull(roleBase92);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList93);
        org.junit.Assert.assertNull(boolean94);
        org.junit.Assert.assertNull(boolean95);
    }

    @Test
    public void test52920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52920");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        java.lang.String str3 = controlConditionActivity0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType4 = controlConditionActivity0.getControlCleaned();
        java.lang.String str5 = controlConditionActivity0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = controlConditionActivity0.setFlowOverControl("/api");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(controlCleanedType4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(controlConditionActivity7);
    }

    @Test
    public void test52921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52921");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList2, qualifierGroupResponseArray1);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList8, qualifierGroupResponseArray7);
        qualifierGroupsResponse6.Results = qualifierGroupResponseList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse11 = qualifierGroupsResponse5.setResults(qualifierGroupResponseList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse12 = qualifierGroupsResponse0.setResults(qualifierGroupResponseList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList15, qualifierGroupResponseArray14);
        qualifierGroupsResponse13.Results = qualifierGroupResponseList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList21, qualifierGroupResponseArray20);
        qualifierGroupsResponse19.Results = qualifierGroupResponseList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse24 = qualifierGroupsResponse18.setResults(qualifierGroupResponseList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse25 = qualifierGroupsResponse13.setResults(qualifierGroupResponseList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList28, qualifierGroupResponseArray27);
        qualifierGroupsResponse26.Results = qualifierGroupResponseList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse31 = qualifierGroupsResponse13.setResults(qualifierGroupResponseList28);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList28;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList33 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse34 = qualifierGroupsResponse0.setResults(qualifierGroupResponseList33);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList35 = qualifierGroupsResponse34.Results;
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse11);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse12);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse24);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse25);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse31);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse34);
        org.junit.Assert.assertNull(qualifierGroupResponseList35);
    }

    @Test
    public void test52922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52922");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        java.lang.String str4 = location0.getLocationPath();
        java.lang.String str5 = location0.ElevationUnits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location7 = location0.setElevationUnits("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.Double double8 = location0.getLongitude();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(location7);
        org.junit.Assert.assertNull(double8);
    }

    @Test
    public void test52923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52923");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics0.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics0.P50 = 1.0d;
        java.lang.String str5 = observationStatistics0.ObservedPropertyId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = observationStatistics0.setMin((java.lang.Double) 0.0d);
        observationStatistics7.Min = (-1.0d);
        java.lang.String str10 = observationStatistics7.getObservedPropertyId();
        observationStatistics7.Max = 0.0d;
        observationStatistics7.Count = 4;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(observationStatistics7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str10, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test52924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52924");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        java.lang.String str30 = getGroupedObservationsV2_26.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_26.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_32.setDepthUnitCustomId("'.'SSSSSSS");
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
    }

    @Test
    public void test52925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52925");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList1 = fieldVisitReading0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        fieldVisitReading0.AdjustmentAmount = quantityWithDisplay2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = fieldVisitReading0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading0.setFieldVisitIdentifier("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = fieldVisitReading0.setFieldVisitIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = fieldVisitReading0.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType10 = fieldVisitReading0.ReadingType;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(fieldVisitReading8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(fieldVisitReadingType10);
    }

    @Test
    public void test52926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52926");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.IdentifierOrganization;
        putCollectionMethod0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty6.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration4.setObservedProperty(observedProperty6);
        java.lang.String str10 = metricConfiguration9.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration9.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration12.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = postSamplingLocationGroup15.getAuditAttributes();
        postSamplingLocationGroup15.Id = "POST";
        postSamplingLocationGroup15.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup22 = postSamplingLocationGroup15.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup24 = postSamplingLocationGroup15.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = locationGroupType25.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType28 = locationGroupType25.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        locationGroupType28.AuditAttributes = auditAttributes29;
        java.lang.String str31 = locationGroupType28.getId();
        postSamplingLocationGroup24.LocationGroupType = locationGroupType28;
        java.lang.String str33 = locationGroupType28.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = locationGroupType34.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType37 = locationGroupType34.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType39 = analyticalGroup38.getType();
        analyticalGroup38.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = null;
        analyticalGroupItem48.AnalysisMethod = analysisMethod51;
        java.lang.String str53 = analyticalGroupItem48.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = null;
        analyticalGroupItem59.AnalysisMethod = analysisMethod62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem43, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem54, analyticalGroupItem57, analyticalGroupItem59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65, analyticalGroupItemArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup67 = analyticalGroup42.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65);
        analyticalGroup38.AnalyticalGroupItems = analyticalGroupItemList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup38.AuditAttributes = auditAttributes69;
        locationGroupType37.AuditAttributes = auditAttributes69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType72 = locationGroupType28.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration73 = metricConfiguration12.setAuditAttributes(auditAttributes69);
        putCollectionMethod0.AuditAttributes = auditAttributes69;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup22);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup24);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNotNull(locationGroupType28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str33, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNotNull(locationGroupType37);
        org.junit.Assert.assertNull(analyticalGroupType39);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(analyticalGroup67);
        org.junit.Assert.assertNotNull(locationGroupType72);
        org.junit.Assert.assertNotNull(metricConfiguration73);
    }

    @Test
    public void test52927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52927");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList9 = activeMeterDetails8.MeterCalibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter11 = activeMeterDetails8.setModel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails13 = activeMeterDetails8.setConfiguration("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Unspecified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails15 = activeMeterDetails13.setMeterType(meterType14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails17 = activeMeterDetails13.setConfiguration("0001-01-01T00:00:00.0000000Z");
        java.lang.String str18 = activeMeterDetails13.getConfiguration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList9);
        org.junit.Assert.assertNotNull(currentMeter11);
        org.junit.Assert.assertNotNull(activeMeterDetails13);
        org.junit.Assert.assertTrue("'" + meterType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Unspecified + "'", meterType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Unspecified));
        org.junit.Assert.assertNotNull(activeMeterDetails15);
        org.junit.Assert.assertNotNull(activeMeterDetails17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0001-01-01T00:00:00.0000000Z" + "'", str18, "0001-01-01T00:00:00.0000000Z");
    }

    @Test
    public void test52928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52928");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        java.lang.String str3 = dischargeSummary2.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        dischargeSummary4.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary4.MeasurementGrade = measurementGradeType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary2.setMeasurementGrade(measurementGradeType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str13 = pointVelocityDischargeActivity12.getModel();
        java.lang.String str14 = pointVelocityDischargeActivity12.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        pointVelocityDischargeActivity12.Width = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement17 = pointVelocityDischargeActivity12.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        dischargeSummary18.MeasurementTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary25.BaseFlow = baseFlowType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary25.DischargeUncertainty = dischargeUncertainty32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty32.QualitativeUncertainty = qualitativeUncertaintyType34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType36 = dischargeUncertainty32.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary18.setDischargeUncertainty(dischargeUncertainty32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = null;
        crossSectionPoint38.Distance = quantityWithDisplay39;
        crossSectionPoint38.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = crossSectionPoint38.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = crossSectionPoint38.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = crossSectionPoint45.setElevation(quantityWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint47.Depth = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint47.Depth = datumConvertedQuantityWithDisplay50;
        java.lang.String str52 = datumConvertedQuantityWithDisplay50.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary18.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay50);
        pointVelocityDischargeActivity12.Area = datumConvertedQuantityWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary11.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay50);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList56 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setGageHeightReadings(gageHeightReadingList56);
        java.lang.String str58 = dischargeSummary57.GageHeightComments;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + measurementGradeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(dischargeChannelMeasurement17);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + baseFlowType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType36);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNotNull(crossSectionPoint45);
        org.junit.Assert.assertNotNull(crossSectionPoint47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test52929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52929");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList1 = ratingModelDescriptionListServiceResponse0.RatingModelDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest4 = fieldVisitDescriptionListServiceRequest2.setQueryTo(instant3);
        java.time.Instant instant5 = fieldVisitDescriptionListServiceRequest2.getQueryTo();
        ratingModelDescriptionListServiceResponse0.NextToken = instant5;
        java.time.Instant instant7 = ratingModelDescriptionListServiceResponse0.NextToken;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str9 = approval8.User;
        approval8.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str13 = approval12.User;
        approval12.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval17 = approval12.setApprovalLevel((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = locationRemark18.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        locationRemark20.FromTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark26 = locationRemark20.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj28 = timeAlignedDataServiceRequest27.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str30 = attachment29.getUrl();
        java.lang.String str31 = attachment29.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double33 = putBulkEditResultGradesV2_32.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        java.util.List<java.lang.String> strList49 = getObservationsV2_34.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList50 = getObservationsV2_34.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType51 = getObservationsV2_34.FieldResultType;
        java.time.Instant instant52 = getObservationsV2_34.getEndObservedTime();
        java.lang.String str53 = getObservationsV2_34.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        java.util.ArrayList<java.lang.String> strList62 = putLocationTags61.TagUniqueIds;
        getObservationsV2_34.ProjectIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_64 = putBulkEditResultGradesV2_32.setSearch((java.util.List<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_66 = putBulkEditResultGradesV2_64.setLabResultLaboratoryIds(strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType68 = calibrationCheck67.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay69 = calibrationCheck67.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary73 = dischargeSummary71.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant75 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = locationDescriptionListServiceResponse74.setNextToken(instant75);
        dischargeSummary71.MeasurementTime = instant75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse78 = locationDescriptionListServiceResponse70.setNextToken(instant75);
        java.time.Instant instant79 = locationDescriptionListServiceResponse70.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck80 = calibrationCheck67.setTime(instant79);
        putBulkEditResultGradesV2_66.StartResultTime = instant79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment82 = attachment29.setDateUploaded(instant79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest83 = timeAlignedDataServiceRequest27.setQueryFrom(instant79);
        locationRemark20.CreateTime = instant79;
        java.time.Instant instant85 = locationRemark20.getFromTime();
        approval17.DateAppliedUtc = instant85;
        approval8.DateAppliedUtc = instant85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse88 = ratingModelDescriptionListServiceResponse0.setNextToken(instant85);
        java.time.Instant instant89 = ratingModelDescriptionListServiceResponse0.NextToken;
        org.junit.Assert.assertNull(ratingModelDescriptionList1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(approval17);
        org.junit.Assert.assertNotNull(locationRemark20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(locationRemark26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(double33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(fieldResultType51);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_64);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_66);
        org.junit.Assert.assertNull(calibrationCheckType68);
        org.junit.Assert.assertNull(doubleWithDisplay69);
        org.junit.Assert.assertNotNull(dischargeSummary73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(calibrationCheck80);
        org.junit.Assert.assertNotNull(attachment82);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest83);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse88);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test52930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52930");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod2 = referencePointPeriod0.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection3 = referencePointPeriod2.MeasurementDirection;
        java.lang.String str4 = referencePointPeriod2.StandardIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod2.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Boolean boolean7 = referencePointPeriod2.getIsMeasuredAgainstLocalAssumedDatum();
        org.junit.Assert.assertNotNull(referencePointPeriod2);
        org.junit.Assert.assertNull(measurementDirection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str4, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test52931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52931");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.lang.String str4 = dischargeChannelMeasurement1.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType5 = dischargeChannelMeasurement1.VelocityVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity6 = otherMethodDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        otherMethodDischargeActivity6.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity10 = otherMethodDischargeActivity6.setDischargeChannelMeasurement(dischargeChannelMeasurement9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = otherMethodDischargeActivity6.getDischargeChannelMeasurement();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(velocityVariationType5);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivity6);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivity10);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
    }

    @Test
    public void test52932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52932");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary0.Reviewer = "";
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary0.MeasurementTime = instant3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary0.BaseFlow = baseFlowType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary0.DischargeUncertainty = dischargeUncertainty7;
        dischargeSummary0.Reviewer = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + baseFlowType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
    }

    @Test
    public void test52933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52933");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str14 = processor13.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange15 = processor13.ProcessorPeriod;
        processor13.InputRatingModelIdentifier = "'.'SSSSSSS";
        java.lang.String str18 = processor13.ProcessorType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList21 = getExportSpecimens20.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant23 = qualifier22.DateApplied;
        java.lang.String str24 = qualifier22.User;
        java.lang.String str25 = qualifier22.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = timeAlignedDataServiceRequest26.setQueryFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier32 = qualifier22.setDateApplied(instant29);
        getExportSpecimens20.Before = instant29;
        java.util.List<java.lang.String> strList34 = getExportSpecimens20.getLaboratoryIds();
        java.util.List<java.lang.String> strList35 = getExportSpecimens20.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType37 = samplingPlanPlannedActivityRecurrence36.RecurrenceFrequency;
        java.util.List<java.lang.String> strList38 = samplingPlanPlannedActivityRecurrence36.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier41 = putQualifier39.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest42.setTimeSeriesUniqueIds(strList54);
        putQualifier39.GroupIdentifiers = strList54;
        java.util.ArrayList<java.lang.String> strList60 = putQualifier39.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence36.MonthsOfYear = strList60;
        getExportSpecimens20.ActivityTypes = strList60;
        qualifierResponse19.GroupIdentifiers = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor64 = processor13.setInputTimeSeriesUniqueIds(strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor66 = processor64.setProcessorType("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str67 = processor66.InputRatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange68 = processor66.getProcessorPeriod();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2021.4.62.0" + "'", str14, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest31);
        org.junit.Assert.assertNotNull(qualifier32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(recurrenceFrequencyType37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(putQualifier41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(processor64);
        org.junit.Assert.assertNotNull(processor66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "'.'SSSSSSS" + "'", str67, "'.'SSSSSSS");
        org.junit.Assert.assertNull(timeRange68);
    }

    @Test
    public void test52934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52934");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime3 = null;
        postFieldTrip0.StartTime = offsetDateTime3;
        java.time.OffsetDateTime offsetDateTime5 = null;
        postFieldTrip0.EndTime = offsetDateTime5;
        java.time.OffsetDateTime offsetDateTime7 = null;
        postFieldTrip0.EndTime = offsetDateTime7;
        java.lang.Object obj9 = postFieldTrip0.getResponseType();
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
    }

    @Test
    public void test52935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52935");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        java.lang.String str3 = specimenWithObservations2.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str5 = shippingContainer4.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity6.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = postActivity6.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity10.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer13 = shippingContainer4.setAuditAttributes(auditAttributes11);
        java.lang.String str14 = shippingContainer13.getCustomId();
        java.lang.String str15 = shippingContainer13.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations16 = specimenWithObservations2.setShippingContainer(shippingContainer13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory17 = specimenWithObservations2.Laboratory;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postActivity10);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(shippingContainer13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(specimenWithObservations16);
        org.junit.Assert.assertNull(laboratory17);
    }

    @Test
    public void test52936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52936");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str1 = samplingContextTag0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag3 = samplingContextTag0.setAuditAttributes(auditAttributes2);
        java.lang.String str4 = samplingContextTag0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = putDetectioncondition6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition9 = putDetectioncondition6.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = samplingPlanPlannedActivity10.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = auditAttributes13.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity12.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = samplingPlanPlannedActivity12.AuditAttributes;
        putDetectioncondition6.AuditAttributes = auditAttributes17;
        analysisMethodSimple5.AuditAttributes = auditAttributes17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = samplingContextTag0.setAuditAttributes(auditAttributes17);
        java.lang.String str21 = samplingContextTag0.Id;
        java.lang.String str22 = samplingContextTag0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag0.setId("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(samplingContextTag3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(putDetectioncondition9);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity12);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNotNull(samplingContextTag20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
    }

    @Test
    public void test52937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52937");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary3.getSuccessCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary3.setNewCount((java.lang.Integer) 1);
        java.lang.Integer int7 = importSummary3.SuccessCount;
        java.lang.Integer int8 = importSummary3.getSkippedCount();
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test52938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52938");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        java.lang.Long long6 = roleApprovalTransition4.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long8 = roleApprovalTransition7.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long18 = roleApprovalTransition17.getToApprovalLevel();
        java.lang.Long long19 = roleApprovalTransition17.ToApprovalLevel;
        java.lang.Long long20 = roleApprovalTransition17.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long22 = roleApprovalTransition21.getToApprovalLevel();
        java.lang.Long long23 = roleApprovalTransition21.ToApprovalLevel;
        java.lang.Long long24 = roleApprovalTransition21.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition4, roleApprovalTransition7, roleApprovalTransition11, roleApprovalTransition12, roleApprovalTransition17, roleApprovalTransition21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList26, roleApprovalTransitionArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole3.setRoleApprovalTransitions(roleApprovalTransitionList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList29 = postRole3.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase30 = roleBase2.setRoleApprovalTransitions(roleApprovalTransitionList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase32 = roleBase2.setCanEditLocationDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean33 = roleBase32.isCanRemoveAppendConfigurations();
        roleBase32.CanReadData = true;
        java.lang.Boolean boolean36 = roleBase32.isCanAddAppendConfigurations();
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition14);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList29);
        org.junit.Assert.assertNotNull(roleBase30);
        org.junit.Assert.assertNotNull(roleBase32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNull(boolean36);
    }

    @Test
    public void test52939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52939");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem2 = configurableDropDownListItem0.setDropDownListId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem4 = configurableDropDownListItem0.setDropDownListDisplayName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem6 = configurableDropDownListItem0.setDropDownListDisplayName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem8 = fixedDropDownListItem6.setDropDownListId("multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
        org.junit.Assert.assertNotNull(fixedDropDownListItem2);
        org.junit.Assert.assertNotNull(fixedDropDownListItem4);
        org.junit.Assert.assertNotNull(fixedDropDownListItem6);
        org.junit.Assert.assertNotNull(fixedDropDownListItem8);
    }

    @Test
    public void test52940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52940");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade();
        grade0.Description = "ZZZZZ";
        java.lang.Integer int3 = grade0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade5 = grade0.setIsSystem((java.lang.Boolean) true);
        java.lang.String str6 = grade5.DisplayName;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(grade5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test52941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52941");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList3, plannedActivityArray2);
        putFieldVisit1.PlannedActivities = plannedActivityList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str7 = domainObjectAttachment6.getId();
        java.lang.String str8 = domainObjectAttachment6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = domainObjectAttachment6.setAttachment(attachment9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        domainObjectAttachment11.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = domainObjectAttachment11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str19 = domainObjectAttachment18.getId();
        java.lang.String str20 = domainObjectAttachment18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment18.setAttachment(attachment21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        java.lang.String str27 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = domainObjectAttachment25.setAttachment(attachment28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment6, domainObjectAttachment11, domainObjectAttachment18, domainObjectAttachment23, domainObjectAttachment25, domainObjectAttachment30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33, domainObjectAttachmentArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit35 = putFieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33);
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit1.setEndTime(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = schedule38.setCustomId("");
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule42 = schedule38.setStartDate(offsetDateTime41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule44 = schedule42.setRecurrenceType(recurrenceType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = putFieldVisit37.setSchedule(schedule42);
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule42.setStartDate(offsetDateTime46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit48 = postFieldVisit0.setSchedule(schedule42);
        java.time.OffsetDateTime offsetDateTime49 = null;
        schedule42.LastGenerationDate = offsetDateTime49;
        java.lang.String str51 = schedule42.CustomId;
        java.time.OffsetDateTime offsetDateTime52 = schedule42.StartDate;
        java.time.OffsetDateTime offsetDateTime53 = null;
        schedule42.StartDate = offsetDateTime53;
        org.junit.Assert.assertNotNull(plannedActivityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(domainObjectAttachment10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachment17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(domainObjectAttachment29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putFieldVisit35);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNotNull(schedule40);
        org.junit.Assert.assertNotNull(schedule42);
        org.junit.Assert.assertTrue("'" + recurrenceType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule44);
        org.junit.Assert.assertNotNull(putFieldVisit45);
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(postFieldVisit48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(offsetDateTime52);
    }

    @Test
    public void test52942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52942");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int1 = gradeOperation0.StackPosition;
        java.lang.String str2 = gradeOperation0.getComments();
        java.lang.String str3 = gradeOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant5 = interpolationTypeOperation4.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = interpolationTypeOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant8 = interpolationTypeOperation7.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation10 = interpolationTypeOperation7.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation11 = interpolationTypeOperation4.setOperationType(metadataChangeOperationType9);
        gradeOperation0.OperationType = metadataChangeOperationType9;
        java.lang.String str13 = gradeOperation0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType14 = null;
        gradeOperation0.OperationType = metadataChangeOperationType14;
        java.lang.String str16 = gradeOperation0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant18 = interpolationTypeOperation17.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = interpolationTypeOperation17.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant21 = interpolationTypeOperation20.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation23 = interpolationTypeOperation20.setOperationType(metadataChangeOperationType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation24 = interpolationTypeOperation17.setOperationType(metadataChangeOperationType22);
        gradeOperation0.OperationType = metadataChangeOperationType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.lang.String str27 = interpolationTypeOperation26.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType interpolationType29 = interpolationTypeOperation26.setType("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int31 = gradeOperation30.StackPosition;
        java.lang.String str32 = gradeOperation30.getComments();
        java.lang.String str33 = gradeOperation30.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant35 = interpolationTypeOperation34.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType36 = interpolationTypeOperation34.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant38 = interpolationTypeOperation37.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation40 = interpolationTypeOperation37.setOperationType(metadataChangeOperationType39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation41 = interpolationTypeOperation34.setOperationType(metadataChangeOperationType39);
        gradeOperation30.OperationType = metadataChangeOperationType39;
        java.lang.String str43 = gradeOperation30.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType44 = null;
        gradeOperation30.OperationType = metadataChangeOperationType44;
        java.lang.String str46 = gradeOperation30.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant48 = interpolationTypeOperation47.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType49 = interpolationTypeOperation47.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant51 = interpolationTypeOperation50.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType52 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation53 = interpolationTypeOperation50.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation54 = interpolationTypeOperation47.setOperationType(metadataChangeOperationType52);
        gradeOperation30.OperationType = metadataChangeOperationType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation56 = interpolationTypeOperation26.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation57 = gradeOperation0.setOperationType(metadataChangeOperationType52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType58 = gradeOperation57.getOperationType();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(metadataChangeOperationType6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation10);
        org.junit.Assert.assertNotNull(interpolationTypeOperation11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(metadataChangeOperationType19);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation23);
        org.junit.Assert.assertNotNull(interpolationTypeOperation24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(interpolationType29);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(metadataChangeOperationType36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation40);
        org.junit.Assert.assertNotNull(interpolationTypeOperation41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(metadataChangeOperationType49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation53);
        org.junit.Assert.assertNotNull(interpolationTypeOperation54);
        org.junit.Assert.assertNotNull(interpolationTypeOperation56);
        org.junit.Assert.assertNotNull(gradeOperation57);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
    }

    @Test
    public void test52943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52943");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation4 = putSamplingLocation2.setVerticalCollectionMethod("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation2.setVerticalDatum("MinInstant");
        putSamplingLocation2.CustomId = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNotNull(putSamplingLocation4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
    }

    @Test
    public void test52944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52944");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList5 = activityWithDetails0.getSpecimens();
        java.lang.String str6 = activityWithDetails0.Id;
        java.lang.String str7 = activityWithDetails0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device8 = activityWithDetails0.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails10 = activityWithDetails0.setCustomId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNull(specimenNestedInActivityList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(device8);
        org.junit.Assert.assertNotNull(activityWithDetails10);
    }

    @Test
    public void test52945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52945");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest4 = timeSeriesUniqueIdListServiceRequest0.setLocationIdentifier("/AQUARIUS");
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.Parameter;
        timeSeriesUniqueIdListServiceRequest0.ComputationPeriodIdentifier = "https";
        java.lang.String str8 = timeSeriesUniqueIdListServiceRequest0.ComputationPeriodIdentifier;
        timeSeriesUniqueIdListServiceRequest0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest12 = timeSeriesUniqueIdListServiceRequest0.setComputationIdentifier("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest14 = timeSeriesUniqueIdListServiceRequest0.setLocationIdentifier("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "https" + "'", str8, "https");
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest14);
    }

    @Test
    public void test52946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52946");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = extendedAttributeDefinition2.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = extendedAttributeDefinition2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition2.DataType = dataType5;
        putExtendedAttribute0.DataType = dataType5;
        java.lang.String str8 = putExtendedAttribute0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertTrue("'" + dataType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test52947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52947");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest3 = ratingModelEffectiveShiftsServiceRequest0.setRatingModelIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.String str5 = referencePointBase4.LocationUniqueId;
        java.lang.String str6 = referencePointBase4.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList8 = getExportSpecimens7.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant10 = qualifier9.DateApplied;
        java.lang.String str11 = qualifier9.User;
        java.lang.String str12 = qualifier9.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj14 = timeAlignedDataServiceRequest13.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest13.setQueryFrom(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = qualifier9.setDateApplied(instant16);
        getExportSpecimens7.Before = instant16;
        java.util.List<java.lang.String> strList21 = getExportSpecimens7.getLaboratoryIds();
        java.util.List<java.lang.String> strList22 = getExportSpecimens7.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType24 = samplingPlanPlannedActivityRecurrence23.RecurrenceFrequency;
        java.util.List<java.lang.String> strList25 = samplingPlanPlannedActivityRecurrence23.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier28 = putQualifier26.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray40 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags36.setTagUniqueIds(strList41);
        getObservationsV2_30.QualityControlTypes = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = timeAlignedDataServiceRequest29.setTimeSeriesUniqueIds(strList41);
        putQualifier26.GroupIdentifiers = strList41;
        java.util.ArrayList<java.lang.String> strList47 = putQualifier26.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence23.MonthsOfYear = strList47;
        getExportSpecimens7.ActivityTypes = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens51 = getExportSpecimens7.setCursor("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary53.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse56.setNextToken(instant57);
        dischargeSummary53.MeasurementTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse52.setNextToken(instant57);
        java.time.Instant instant61 = locationDescriptionListServiceResponse52.getNextToken();
        java.time.Instant instant62 = locationDescriptionListServiceResponse52.getNextToken();
        getExportSpecimens51.StartModificationTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase64 = referencePointBase4.setPrimarySinceDate(instant62);
        ratingModelEffectiveShiftsServiceRequest0.QueryTo = instant62;
        java.lang.String str66 = ratingModelEffectiveShiftsServiceRequest0.RatingModelIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNotNull(qualifier19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(recurrenceFrequencyType24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(putQualifier28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(getExportSpecimens51);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(referencePointBase64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test52948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52948");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationType postLocationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationType();
        java.lang.Object obj1 = postLocationType0.getResponseType();
        postLocationType0.Description = "MaxInstant";
        java.lang.Object obj4 = postLocationType0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
    }

    @Test
    public void test52949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52949");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList2 = getObservationsV2_1.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        getObservationsV2_1.ResultGrades = strList14;
        getExtendedAttributeDropdownlistitems0.Search = strList14;
        java.lang.Integer int20 = getExtendedAttributeDropdownlistitems0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems0.setId("https");
        java.lang.String str23 = getExtendedAttributeDropdownlistitems0.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_25.setDataClassifications((java.util.List<java.lang.String>) strList29);
        postTag24.PickListValues = strList29;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList33 = postTag24.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase35 = postTag24.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType36 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase37 = tagRequestBase35.setValueType(tagValueType36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList39 = getExportObservations38.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations41 = getExportObservations38.setNumericResultValue((java.lang.Double) (-1.0d));
        java.util.List<java.lang.String> strList42 = getExportObservations38.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList44 = getFieldVisits43.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        java.util.ArrayList<java.lang.String> strList53 = putLocationTags52.TagUniqueIds;
        getFieldVisits43.ScheduleIds = strList53;
        java.lang.Integer int55 = getFieldVisits43.Limit;
        java.util.List<java.lang.String> strList56 = getFieldVisits43.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        getFieldVisits43.Search = strList60;
        java.lang.String[] strArray75 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits78 = getFieldVisits43.setSamplingPlanIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations79 = getExportObservations38.setMedia((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase80 = tagRequestBase35.setPickListValues(strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems81 = getExtendedAttributeDropdownlistitems0.setSearch((java.util.List<java.lang.String>) strList76);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "https" + "'", str23, "https");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNull(tagApplicabilityList33);
        org.junit.Assert.assertNotNull(tagRequestBase35);
        org.junit.Assert.assertTrue("'" + tagValueType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType36.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(getExportObservations41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getFieldVisits78);
        org.junit.Assert.assertNotNull(getExportObservations79);
        org.junit.Assert.assertNotNull(tagRequestBase80);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems81);
    }

    @Test
    public void test52950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52950");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = putActivityTemplate0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType3 = putActivityTemplate0.getMedium();
        java.lang.String str4 = putActivityTemplate0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = putActivityTemplate0.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate7 = putActivityTemplate0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate7.setCustomId("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(mediumType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(putActivityTemplate7);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
    }

    @Test
    public void test52951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52951");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport();
        getLabReport0.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport4 = getLabReport0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport6 = getLabReport4.setId("");
        java.lang.String str7 = getLabReport4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport9 = getLabReport4.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport11 = getLabReport4.setId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport13 = getLabReport4.setId("POST");
        getLabReport4.Id = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        org.junit.Assert.assertNotNull(getLabReport4);
        org.junit.Assert.assertNotNull(getLabReport6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(getLabReport9);
        org.junit.Assert.assertNotNull(getLabReport11);
        org.junit.Assert.assertNotNull(getLabReport13);
    }

    @Test
    public void test52952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52952");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str3 = postReflectedTimeSeries0.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str5 = postBasicTimeSeries4.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries8 = postBasicTimeSeries6.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postBasicTimeSeries8.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries11 = postBasicTimeSeries8.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean12 = postBasicTimeSeries11.Publish;
        java.time.Duration duration13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries14 = postBasicTimeSeries11.setGapTolerance(duration13);
        java.lang.String str15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer.format(duration13);
        postBasicTimeSeries4.GapTolerance = duration13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries17 = postReflectedTimeSeries0.setGapTolerance(duration13);
        java.lang.String str18 = postReflectedTimeSeries0.getDescription();
        java.lang.String str19 = postReflectedTimeSeries0.Label;
        java.lang.String str20 = postReflectedTimeSeries0.getSubLocationIdentifier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str9, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries11);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(postBasicTimeSeries14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-PT87591240H" + "'", str15, "-PT87591240H");
        org.junit.Assert.assertNotNull(postReflectedTimeSeries17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test52953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52953");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        java.time.Instant instant1 = timeSeriesDataCorrectedServiceRequest0.QueryTo;
        timeSeriesDataCorrectedServiceRequest0.GetParts = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest5 = timeSeriesDataCorrectedServiceRequest0.setApplyRounding((java.lang.Boolean) true);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest5);
    }

    @Test
    public void test52954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52954");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX;
        getExportObservations0.Format = getExportObservationsFormatType5;
        java.lang.String str7 = getExportObservations0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        java.util.List<java.lang.String> strList23 = getObservationsV2_8.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList24 = getObservationsV2_8.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType25 = getObservationsV2_8.FieldResultType;
        java.time.Instant instant26 = getObservationsV2_8.getEndObservedTime();
        java.lang.String str27 = getObservationsV2_8.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        java.util.ArrayList<java.lang.String> strList36 = putLocationTags35.TagUniqueIds;
        getObservationsV2_8.ProjectIds = strList36;
        getExportObservations0.Media = strList36;
        java.time.Instant instant39 = getExportObservations0.getStartModificationTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertTrue("'" + getExportObservationsFormatType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX + "'", getExportObservationsFormatType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(fieldResultType25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(instant39);
    }

    @Test
    public void test52955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52955");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        putFilter0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str3 = putFilter0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter5 = putFilter0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime6 = null;
        putFilter5.EndTime = offsetDateTime6;
        java.lang.String str8 = putFilter5.Id;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList9 = putFilter5.getSamplingLocations();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putFilter5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str8, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(samplingLocationList9);
    }

    @Test
    public void test52956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52956");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str1 = gapToleranceOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion;
        gapToleranceOperation0.OperationType = metadataChangeOperationType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = gapToleranceOperation0.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance gapTolerance6 = gapToleranceOperation0.setToleranceInMinutes((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation8 = gapToleranceOperation0.setUser("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str10 = gapToleranceOperation9.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion;
        gapToleranceOperation9.OperationType = metadataChangeOperationType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation13 = gapToleranceOperation8.setOperationType(metadataChangeOperationType11);
        gapToleranceOperation8.Comments = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertNotNull(gapTolerance6);
        org.junit.Assert.assertNotNull(gapToleranceOperation8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertNotNull(gapToleranceOperation13);
    }

    @Test
    public void test52957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52957");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = null;
        postObservationV2_0.NumericResult = numericResult3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade7 = resultGrade5.setId("/AQUARIUS/Provisioning/v1");
        resultGrade5.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = resultGrade5.setSystemCode(resultGradeSystemCodeType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType12 = resultGrade5.SystemCode;
        postObservationV2_0.ResultGrade = resultGrade5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal16 = observationMinimal14.setSpecimen(specimenNestedInActivity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = observationMinimal16.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue19 = categoricalResult18.getFixedValue();
        observationMinimal16.CategoricalResult = categoricalResult18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult21.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue24 = categoricalResult21.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult21.NullMeasureQualifier = nullMeasureQualifier25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult27 = categoricalResult18.setNullMeasureQualifier(nullMeasureQualifier25);
        java.lang.String str28 = nullMeasureQualifier25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_29 = postObservationV2_0.setNullMeasureQualifier(nullMeasureQualifier25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon31 = taxonomicResult30.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        taxonomicResult30.Taxon = taxon32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        taxonomicResult30.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = taxonomicResult30.getAuditAttributes();
        java.lang.String str37 = taxonomicResult30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation40 = postSamplingLocation38.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject43 = putProject41.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject43.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = putUnit46.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = putDetectioncondition48.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition51 = putDetectioncondition48.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = samplingPlanPlannedActivity52.setAuditAttributes(auditAttributes53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = auditAttributes55.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity54.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = samplingPlanPlannedActivity54.AuditAttributes;
        putDetectioncondition48.AuditAttributes = auditAttributes59;
        putUnit46.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = auditAttributes59.setCreationUserProfileId("http");
        putProject43.AuditAttributes = auditAttributes63;
        postSamplingLocation38.AuditAttributes = auditAttributes63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult66 = taxonomicResult30.setAuditAttributes(auditAttributes63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_67 = postObservationV2_0.setTaxonomicResult(taxonomicResult66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen68.Activity = activity69;
        java.lang.String str71 = activity69.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType72 = activity69.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device75 = device73.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device77 = device75.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str78 = device75.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity79 = activity69.setDevice(device75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity81 = activity79.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device82 = activity81.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity83 = activity81.Depth;
        postObservationV2_67.Activity = activity81;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(resultGrade7);
        org.junit.Assert.assertNotNull(resultGrade11);
        org.junit.Assert.assertNull(resultGradeSystemCodeType12);
        org.junit.Assert.assertNotNull(observationMinimal16);
        org.junit.Assert.assertNull(observedProperty17);
        org.junit.Assert.assertNull(categoricalValue19);
        org.junit.Assert.assertNull(categoricalValue24);
        org.junit.Assert.assertNotNull(categoricalResult27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(postObservationV2_29);
        org.junit.Assert.assertNull(taxon31);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(postSamplingLocation40);
        org.junit.Assert.assertNotNull(putProject43);
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertNull(auditAttributes49);
        org.junit.Assert.assertNotNull(putDetectioncondition51);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity54);
        org.junit.Assert.assertNotNull(auditAttributes57);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(auditAttributes63);
        org.junit.Assert.assertNotNull(taxonomicResult66);
        org.junit.Assert.assertNotNull(postObservationV2_67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(activityType72);
        org.junit.Assert.assertNotNull(device75);
        org.junit.Assert.assertNotNull(device77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str78, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity79);
        org.junit.Assert.assertNotNull(activity81);
        org.junit.Assert.assertNotNull(device82);
        org.junit.Assert.assertNull(quantity83);
    }

    @Test
    public void test52958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52958");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        activeMeterDetails0.FirmwareVersion = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter4 = activeMeterDetails0.setSerialNumber("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str5 = activeMeterDetails0.getSoftwareVersion();
        org.junit.Assert.assertNotNull(currentMeter4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test52959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52959");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents2 = getLabReportImportHistoryEvents0.setLimit((java.lang.Integer) 100);
        java.lang.String str3 = getLabReportImportHistoryEvents2.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        java.lang.Integer int32 = getChartDataV2_4.Limit;
        java.util.List<java.lang.String> strList33 = getChartDataV2_4.AnalysisMethodSimpleIds;
        java.util.List<java.lang.String> strList34 = getChartDataV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_4.setNumericResultValue((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str38 = getExportObservations37.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = getExportObservations37.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations42 = getExportObservations37.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations44 = getExportObservations42.setSort("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_45.setDataClassifications((java.util.List<java.lang.String>) strList49);
        getObservationsV2_51.DepthUnitCustomId = "hi!";
        java.lang.String str54 = getObservationsV2_51.CustomId;
        java.util.List<java.lang.String> strList55 = getObservationsV2_51.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_51.setMedia((java.util.List<java.lang.String>) strList67);
        getExportObservations42.SamplingLocationGroupIds = strList67;
        getChartDataV2_4.ActivityIds = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents74 = getLabReportImportHistoryEvents2.setLabReportIds((java.util.List<java.lang.String>) strList67);
        java.lang.String str75 = getLabReportImportHistoryEvents74.Sort;
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(getExportObservations40);
        org.junit.Assert.assertNotNull(getExportObservations42);
        org.junit.Assert.assertNotNull(getExportObservations44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents74);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test52960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52960");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReports getRecurringReports0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReports();
        java.lang.Object obj1 = getRecurringReports0.getResponseType();
        java.lang.Object obj2 = getRecurringReports0.getResponseType();
        java.lang.Object obj3 = getRecurringReports0.getResponseType();
        java.lang.Object obj4 = getRecurringReports0.getResponseType();
        java.lang.Object obj5 = getRecurringReports0.getResponseType();
        java.lang.Object obj6 = getRecurringReports0.getResponseType();
        java.lang.Object obj7 = getRecurringReports0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReportResponse");
    }

    @Test
    public void test52961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52961");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        postUnitGroup0.BaseUnitSymbol = "hi!";
        java.lang.Integer int3 = postUnitGroup0.getCurrentDimension();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase5 = postUnitGroup0.setTemperatureDimension((java.lang.Integer) 7);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(unitGroupBase5);
    }

    @Test
    public void test52962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52962");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        java.lang.String str8 = engineeredStructureDischargeActivity7.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = null;
        engineeredStructureDischargeActivity7.MeanHead = quantityWithDisplay9;
        java.lang.Boolean boolean11 = engineeredStructureDischargeActivity7.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str13 = volumetricDischargeReading12.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading15 = volumetricDischargeReading12.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary16.BaseFlow = baseFlowType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary16.DischargeUncertainty = dischargeUncertainty23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = dischargeSummary25.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = dischargeSummary25.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = dischargeSummary25.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary25.setDurationInHours(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty33 = dischargeUncertainty23.setQuantitativeUncertainty(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading34 = volumetricDischargeReading12.setEndingVolume(doubleWithDisplay29);
        volumetricDischargeReading12.Name = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = dischargeSummary37.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary39.DifferenceDuringVisit = doubleWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = doubleWithDisplay40.setDisplay("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading44 = volumetricDischargeReading12.setDischarge(doubleWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading46 = volumetricDischargeReading12.setVolumeChange(doubleWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint47.Distance = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = crossSectionPoint47.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay52 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = crossSectionPoint51.setDistance(quantityWithDisplay52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = dischargeSummary54.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = dischargeSummary54.Discharge;
        java.lang.Integer int57 = dischargeSummary54.getGradeCode();
        java.lang.String str58 = dischargeSummary54.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary54.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint61 = crossSectionPoint51.setElevation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint62 = crossSectionPoint47.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading63 = volumetricDischargeReading12.setStartingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity64 = engineeredStructureDischargeActivity7.setMeanHead((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity66 = engineeredStructureDischargeActivity64.setIsValid((java.lang.Boolean) false);
        java.lang.String str67 = engineeredStructureDischargeActivity66.getEquationForSelectedStructure();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(volumetricDischargeReading15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + baseFlowType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNull(quantityWithDisplay27);
        org.junit.Assert.assertNull(doubleWithDisplay28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(dischargeUncertainty33);
        org.junit.Assert.assertNotNull(volumetricDischargeReading34);
        org.junit.Assert.assertNotNull(dischargeSummary39);
        org.junit.Assert.assertNotNull(doubleWithDisplay43);
        org.junit.Assert.assertNotNull(volumetricDischargeReading44);
        org.junit.Assert.assertNotNull(volumetricDischargeReading46);
        org.junit.Assert.assertNull(quantityWithDisplay50);
        org.junit.Assert.assertNotNull(crossSectionPoint53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertNull(quantityWithDisplay56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dischargeSummary60);
        org.junit.Assert.assertNotNull(crossSectionPoint61);
        org.junit.Assert.assertNotNull(crossSectionPoint62);
        org.junit.Assert.assertNotNull(volumetricDischargeReading63);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity64);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test52963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52963");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition();
        searchResultResultDetectionCondition0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str3 = searchResultResultDetectionCondition0.Cursor;
        java.lang.String str4 = searchResultResultDetectionCondition0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition7 = searchResultResultDetectionCondition5.setTotalCount((java.lang.Integer) 4);
        java.lang.String str8 = searchResultResultDetectionCondition5.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition[] resultDetectionConditionArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition> resultDetectionConditionList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition>) resultDetectionConditionList12, resultDetectionConditionArray11);
        searchResultResultDetectionCondition10.DomainObjects = resultDetectionConditionList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition15 = searchResultResultDetectionCondition9.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition>) resultDetectionConditionList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultDetectionCondition searchResultResultDetectionCondition16 = searchResultResultDetectionCondition5.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition>) resultDetectionConditionList12);
        searchResultResultDetectionCondition0.DomainObjects = resultDetectionConditionList12;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition> resultDetectionConditionList18 = searchResultResultDetectionCondition0.getDomainObjects();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(searchResultResultDetectionCondition7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(resultDetectionConditionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(searchResultResultDetectionCondition15);
        org.junit.Assert.assertNotNull(searchResultResultDetectionCondition16);
        org.junit.Assert.assertNotNull(resultDetectionConditionList18);
    }

    @Test
    public void test52964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52964");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        java.lang.String str5 = controlConditionActivity2.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = fieldVisitDataServiceResponse0.setControlConditionActivity(controlConditionActivity2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        controlConditionActivity7.ControlCleaned = controlCleanedType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        controlConditionActivity7.DistanceToGage = quantityWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity13 = controlConditionActivity7.setParty("POST");
        fieldVisitDataServiceResponse0.ControlConditionActivity = controlConditionActivity7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity15 = fieldVisitDataServiceResponse0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList17 = fieldVisitDataServiceResponse16.CrossSectionSurveyActivity;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList18 = fieldVisitDataServiceResponse16.getDischargeActivities();
        java.time.Instant instant19 = fieldVisitDataServiceResponse16.getResponseTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList22 = inspectionActivity21.getInspections();
        java.lang.String str23 = inspectionActivity21.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList24 = inspectionActivity21.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity26 = inspectionActivity21.setParty("https");
        fieldVisit20.InspectionActivity = inspectionActivity26;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList28 = fieldVisit20.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant31 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity32 = gageHeightAtZeroFlowActivity30.setApplicableSince(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity34 = gageHeightAtZeroFlowActivity32.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit35 = fieldVisit29.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity34);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList36 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit37 = fieldVisit29.setDischargeActivities(dischargeActivityList36);
        fieldVisit29.LocationIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList41 = fieldVisitDataServiceResponse40.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse43 = fieldVisitDataServiceResponse40.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList46, adcpDischargeActivityArray45);
        dischargeActivity44.AdcpDischargeActivities = adcpDischargeActivityList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] dischargeActivityArray50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] { dischargeActivity44, dischargeActivity49 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>) dischargeActivityList51, dischargeActivityArray50);
        fieldVisitDataServiceResponse43.DischargeActivities = dischargeActivityList51;
        fieldVisit29.DischargeActivities = dischargeActivityList51;
        fieldVisit20.DischargeActivities = dischargeActivityList51;
        fieldVisitDataServiceResponse16.DischargeActivities = dischargeActivityList51;
        fieldVisitDataServiceResponse0.DischargeActivities = dischargeActivityList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity58 = fieldVisitDataServiceResponse0.getLevelSurveyActivity();
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse6);
        org.junit.Assert.assertNotNull(controlConditionActivity13);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity15);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList17);
        org.junit.Assert.assertNull(dischargeActivityList18);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(inspectionList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(readingList24);
        org.junit.Assert.assertNotNull(inspectionActivity26);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList28);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity32);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity34);
        org.junit.Assert.assertNotNull(fieldVisit35);
        org.junit.Assert.assertNotNull(fieldVisit37);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList41);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse43);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dischargeActivityArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(levelSurveyActivity58);
    }

    @Test
    public void test52965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52965");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean1 = completedWork0.WaterQualitySampleTaken;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork3 = completedWork0.setWaterQualitySampleTaken((java.lang.Boolean) false);
        java.lang.String str4 = completedWork3.CollectionAgency;
        completedWork3.GroundWaterLevelPerformed = false;
        java.lang.Boolean boolean7 = completedWork3.GroundWaterLevelPerformed;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(completedWork3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
    }

    @Test
    public void test52966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52966");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        java.lang.Object obj1 = timeSeriesUniqueIdListServiceRequest0.getResponseType();
        java.lang.String str2 = timeSeriesUniqueIdListServiceRequest0.getChangeEventType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest4 = timeSeriesUniqueIdListServiceRequest0.setChangeEventType("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        timeSeriesUniqueIdListServiceRequest4.Publish = false;
        timeSeriesUniqueIdListServiceRequest4.ChangeEventType = "";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest4);
    }

    @Test
    public void test52967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52967");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod2 = postCollectionMethod0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod4 = postCollectionMethod0.setIdentifierOrganization("/AQUARIUS");
        java.lang.String str5 = postCollectionMethod0.IdentifierOrganization;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postCollectionMethod0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity7.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity11 = postActivity7.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity7.setRefreshed((java.lang.Boolean) true);
        java.lang.Object obj14 = postActivity13.getResponseType();
        java.lang.String str15 = postActivity13.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory16.Id = "MaxInstant";
        java.lang.String str19 = laboratory16.PhoneNumber;
        laboratory16.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime23 = putSchedule22.StartDate;
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = putSchedule22.setEndDate(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putSchedule25.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime27 = putSchedule25.getEndDate();
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule25.setStartDate(offsetDateTime28);
        java.lang.Integer int30 = putSchedule25.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule25.RecurrenceDayMonthly = recurrenceDayMonthlyType31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = unit33.AuditAttributes;
        unit33.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity40 = samplingPlanPlannedActivity38.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = auditAttributes41.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity40.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = samplingPlanPlannedActivity40.AuditAttributes;
        putAccessGroup37.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = unit33.setAuditAttributes(auditAttributes45);
        putSchedule25.AuditAttributes = auditAttributes45;
        laboratory16.AuditAttributes = auditAttributes45;
        java.time.OffsetDateTime offsetDateTime50 = auditAttributes45.ModificationTime;
        postActivity13.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod52 = postCollectionMethod0.setAuditAttributes(auditAttributes45);
        org.junit.Assert.assertNotNull(postCollectionMethod2);
        org.junit.Assert.assertNotNull(postCollectionMethod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(postActivity11);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(putSchedule25);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity40);
        org.junit.Assert.assertNotNull(auditAttributes43);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(unit47);
        org.junit.Assert.assertNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(postCollectionMethod52);
    }

    @Test
    public void test52968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52968");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        getGroupedObservationsV2_26.DepthValue = 0.0d;
        java.lang.Double double38 = getGroupedObservationsV2_26.MinNumericResultValue;
        java.util.List<java.lang.String> strList39 = getGroupedObservationsV2_26.getQualityControlTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList43 = getObservationsV2_42.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        getObservationsV2_42.ResultGrades = strList55;
        getExtendedAttributeDropdownlistitems41.Search = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult61 = metricResult40.setMatchedObservations((java.util.List<java.lang.String>) strList55);
        metricResult61.OverriddenByUser = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str65 = metricConfiguration64.getId();
        metricConfiguration64.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean68 = metricConfiguration64.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration70 = metricConfiguration64.setUnit(unit69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType71 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration72 = metricConfiguration64.setAggregationType(aggregationType71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult73 = metricResult61.setMetricConfiguration(metricConfiguration64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest();
        java.lang.Object obj75 = timeSeriesDescriptionListByUniqueIdServiceRequest74.getResponseType();
        java.util.ArrayList<java.lang.String> strList76 = timeSeriesDescriptionListByUniqueIdServiceRequest74.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        putLocationTags77.LocationUniqueId = "hi!";
        java.util.ArrayList<java.lang.String> strList87 = putLocationTags77.getTagUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest88 = timeSeriesDescriptionListByUniqueIdServiceRequest74.setTimeSeriesUniqueIds(strList87);
        java.util.ArrayList<java.lang.String> strList89 = timeSeriesDescriptionListByUniqueIdServiceRequest88.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult90 = metricResult73.setMatchedObservations((java.util.List<java.lang.String>) strList89);
        getGroupedObservationsV2_26.CollectionMethodIds = strList89;
        java.lang.String str92 = getGroupedObservationsV2_26.getSpecimenName();
        java.lang.Double double93 = getGroupedObservationsV2_26.MinNumericResultValue;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(double38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNotNull(metricResult61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(boolean68);
        org.junit.Assert.assertNotNull(metricConfiguration70);
        org.junit.Assert.assertTrue("'" + aggregationType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration72);
        org.junit.Assert.assertNotNull(metricResult73);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionListByUniqueIdServiceRequest88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(metricResult90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str92, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNull(double93);
    }

    @Test
    public void test52969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52969");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth putOpenIdConnectAuth1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth putOpenIdConnectAuth3 = putOpenIdConnectAuth1.setIdentifier("");
        putOpenIdConnectAuth3.SubjectIdentifier = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails6 = ruleValidationDetails0.setProperties((java.lang.Object) "http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails8 = ruleValidationDetails6.setType("MinInstant");
        java.lang.String str9 = ruleValidationDetails6.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType11 = dischargeChannelMeasurement10.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = dischargeChannelMeasurement10.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType13 = dischargeChannelMeasurement10.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement15 = dischargeChannelMeasurement10.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement17 = dischargeChannelMeasurement15.setVelocityVariation(velocityVariationType16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType18 = dischargeChannelMeasurement17.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount;
        dischargeChannelMeasurement17.MeterSuspension = meterSuspensionType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails21 = ruleValidationDetails6.setProperties((java.lang.Object) dischargeChannelMeasurement17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int23 = searchResultSpreadsheetTemplate22.TotalCount;
        java.lang.Integer int24 = searchResultSpreadsheetTemplate22.TotalCount;
        ruleValidationDetails6.Properties = int24;
        java.lang.String str26 = ruleValidationDetails6.Type;
        org.junit.Assert.assertNotNull(putOpenIdConnectAuth3);
        org.junit.Assert.assertNotNull(ruleValidationDetails6);
        org.junit.Assert.assertNotNull(ruleValidationDetails8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(channelMaterialType11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(horizontalFlowType13);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement15);
        org.junit.Assert.assertTrue("'" + velocityVariationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady + "'", velocityVariationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement17);
        org.junit.Assert.assertNull(channelEvennessType18);
        org.junit.Assert.assertTrue("'" + meterSuspensionType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount + "'", meterSuspensionType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount));
        org.junit.Assert.assertNotNull(ruleValidationDetails21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MinInstant" + "'", str26, "MinInstant");
    }

    @Test
    public void test52970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52970");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str19 = timeSeriesDescription18.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        timeSeriesDescription18.LastModified = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries35 = timeSeries0.setLastModifiedTime(instant30);
        java.lang.String str36 = timeSeries35.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str38 = timeSeries37.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary41.Reviewer = "";
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary41.MeasurementTime = instant44;
        postRecurringReport40.NextGenerationDate = instant44;
        java.time.Instant instant47 = postRecurringReport40.getNextGenerationDate();
        java.lang.String str48 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant47);
        metadataChangeTransactionListServiceRequest39.QueryFrom = instant47;
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest51 = metadataChangeTransactionListServiceRequest39.setQueryFrom(instant50);
        timeSeries37.LastModifiedTime = instant50;
        java.lang.String str53 = timeSeries37.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str55 = timeSeries54.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary58.Reviewer = "";
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary58.MeasurementTime = instant61;
        postRecurringReport57.NextGenerationDate = instant61;
        java.time.Instant instant64 = postRecurringReport57.getNextGenerationDate();
        java.lang.String str65 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant64);
        metadataChangeTransactionListServiceRequest56.QueryFrom = instant64;
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest68 = metadataChangeTransactionListServiceRequest56.setQueryFrom(instant67);
        timeSeries54.LastModifiedTime = instant67;
        timeSeries54.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries73 = timeSeries54.setUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries75 = timeSeries73.setLocationName("hi!");
        java.lang.String str76 = timeSeries75.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType timeSeriesType77 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived;
        timeSeries75.TimeSeriesType = timeSeriesType77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries79 = timeSeries37.setTimeSeriesType(timeSeriesType77);
        timeSeries35.TimeSeriesType = timeSeriesType77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant82 = qualifier81.DateApplied;
        java.lang.String str83 = qualifier81.User;
        java.lang.String str84 = qualifier81.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary86.Reviewer = "";
        java.time.Instant instant89 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary86.MeasurementTime = instant89;
        postRecurringReport85.NextGenerationDate = instant89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier92 = qualifier81.setDateApplied(instant89);
        java.time.Instant instant93 = qualifier81.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier95 = qualifier81.setUser("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.time.Instant instant96 = qualifier81.DateApplied;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries97 = timeSeries35.setLastModifiedTime(instant96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries99 = timeSeries97.setLocationIdentifier("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str48, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str65, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest68);
        org.junit.Assert.assertNotNull(timeSeries73);
        org.junit.Assert.assertNotNull(timeSeries75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2021.4.62.0" + "'", str76, "2021.4.62.0");
        org.junit.Assert.assertTrue("'" + timeSeriesType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived + "'", timeSeriesType77.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived));
        org.junit.Assert.assertNotNull(timeSeries79);
        org.junit.Assert.assertNull(instant82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(qualifier92);
        org.junit.Assert.assertNull(instant93);
        org.junit.Assert.assertNotNull(qualifier95);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(timeSeries97);
        org.junit.Assert.assertNotNull(timeSeries99);
    }

    @Test
    public void test52971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52971");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails2.setAuditAttributes(auditAttributes3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory5.Id = "MaxInstant";
        java.lang.String str8 = laboratory5.PhoneNumber;
        java.lang.String str9 = laboratory5.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails2.setLaboratory(laboratory5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = labResultDetails10.getAuditAttributes();
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(auditAttributes13);
    }

    @Test
    public void test52972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52972");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str1 = locationUserRole0.UserUniqueId;
        java.lang.String str2 = locationUserRole0.RoleName;
        java.lang.String str3 = locationUserRole0.getAppliedToLocationFolderName();
        locationUserRole0.AppliedToLocationFolderUniqueId = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole7 = locationUserRole0.setInheritedFromParentLocationFolder((java.lang.Boolean) false);
        locationUserRole0.RoleName = "9999-12-31T23:59:59.999Z";
        java.lang.String str10 = locationUserRole0.getRoleName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole12 = locationUserRole0.setAppliedToLocationFolderUniqueId("****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationFolderUserRole7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str10, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locationFolderUserRole12);
    }

    @Test
    public void test52973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52973");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        java.lang.String str1 = effectiveRatingCurveServiceRequest0.RatingModelIdentifier;
        java.lang.Double double2 = effectiveRatingCurveServiceRequest0.getEndValue();
        effectiveRatingCurveServiceRequest0.EndValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest6 = effectiveRatingCurveServiceRequest0.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest8 = effectiveRatingCurveServiceRequest6.setStepSize((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest10 = effectiveRatingCurveServiceRequest6.setUtcOffset((java.lang.Double) 0.0d);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest6);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest8);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest10);
    }

    @Test
    public void test52974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52974");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str1 = tagMetadata0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata3 = tagMetadata0.setUniqueId("'.'SSSSSSS");
        java.lang.String str4 = tagMetadata3.UniqueId;
        java.lang.String str5 = tagMetadata3.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(tagMetadata3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "'.'SSSSSSS" + "'", str5, "'.'SSSSSSS");
    }

    @Test
    public void test52975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52975");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject();
        java.lang.String str1 = searchResultProject0.Cursor;
        java.lang.String str2 = searchResultProject0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList3 = searchResultProject0.getDomainObjects();
        java.lang.String str4 = searchResultProject0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList5 = searchResultProject0.getDomainObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(projectList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(projectList5);
    }

    @Test
    public void test52976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52976");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries8 = postBasicTimeSeries6.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postBasicTimeSeries8.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries11 = postBasicTimeSeries8.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries13 = postBasicTimeSeries11.setUtcOffset("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation14.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase18 = postLocation14.setLocationType("/AQUARIUS/Acquisition/v2");
        java.lang.String str19 = postLocation14.getElevationUnits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList21 = postCalculatedDerivedTimeSeries20.TimeSeriesUniqueIds;
        java.lang.String str22 = postCalculatedDerivedTimeSeries20.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries24 = postCalculatedDerivedTimeSeries20.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str25 = postCalculatedDerivedTimeSeries24.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart28 = inputPart26.setHeaders((java.lang.Object) interpolationType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries29 = postCalculatedDerivedTimeSeries24.setInterpolationType(interpolationType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation30.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34, extendedAttributeValueArray33);
        postLocation30.ExtendedAttributeValues = extendedAttributeValueList34;
        postCalculatedDerivedTimeSeries24.ExtendedAttributeValues = extendedAttributeValueList34;
        postLocation14.ExtendedAttributeValues = extendedAttributeValueList34;
        postBasicTimeSeries13.ExtendedAttributeValues = extendedAttributeValueList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries40 = postBasicTimeSeries2.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34);
        postBasicTimeSeries40.Publish = false;
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str9, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries11);
        org.junit.Assert.assertNotNull(postBasicTimeSeries13);
        org.junit.Assert.assertNotNull(locationBase18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str25, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart28);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries29);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(postBasicTimeSeries40);
    }

    @Test
    public void test52977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52977");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUserV2 getUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUserV2();
        java.lang.String str1 = getUserV2_0.Id;
        java.lang.Object obj2 = getUserV2_0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUserV2 getUserV2_4 = getUserV2_0.setId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str5 = getUserV2_4.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNotNull(getUserV2_4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str5, "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test52978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52978");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList1 = reportPluginResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList3, reportPluginArray2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse5 = reportPluginResponse0.setResults(reportPluginList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList6 = reportPluginResponse5.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList8 = reportPluginResponse7.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList10, reportPluginArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse12 = reportPluginResponse7.setResults(reportPluginList10);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList13 = reportPluginResponse12.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse14 = reportPluginResponse5.setResults(reportPluginList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList16 = reportPluginResponse15.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList18, reportPluginArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse20 = reportPluginResponse15.setResults(reportPluginList18);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList21 = reportPluginResponse15.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList23 = reportPluginResponse22.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList25, reportPluginArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse27 = reportPluginResponse22.setResults(reportPluginList25);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList28 = reportPluginResponse27.Results;
        reportPluginResponse15.Results = reportPluginList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList31 = reportPluginResponse30.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList33, reportPluginArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse35 = reportPluginResponse30.setResults(reportPluginList33);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList36 = reportPluginResponse35.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse37 = reportPluginResponse15.setResults(reportPluginList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList39 = reportPluginResponse38.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList40 = reportPluginResponse38.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList41 = reportPluginResponse38.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList43 = reportPluginResponse42.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList45, reportPluginArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse47 = reportPluginResponse42.setResults(reportPluginList45);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList48 = reportPluginResponse47.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList50 = reportPluginResponse49.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList52, reportPluginArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse54 = reportPluginResponse49.setResults(reportPluginList52);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList55 = reportPluginResponse54.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse56 = reportPluginResponse47.setResults(reportPluginList55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse57 = reportPluginResponse38.setResults(reportPluginList55);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList58 = reportPluginResponse38.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList60 = reportPluginResponse59.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList62, reportPluginArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse64 = reportPluginResponse59.setResults(reportPluginList62);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList65 = reportPluginResponse59.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList67 = reportPluginResponse66.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList69, reportPluginArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse71 = reportPluginResponse66.setResults(reportPluginList69);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList72 = reportPluginResponse71.Results;
        reportPluginResponse59.Results = reportPluginList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList75 = reportPluginResponse74.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] reportPluginArray76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin>) reportPluginList77, reportPluginArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse79 = reportPluginResponse74.setResults(reportPluginList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse80 = reportPluginResponse59.setResults(reportPluginList77);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList81 = reportPluginResponse80.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList82 = reportPluginResponse80.getResults();
        reportPluginResponse38.Results = reportPluginList82;
        reportPluginResponse37.Results = reportPluginList82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPluginResponse reportPluginResponse85 = reportPluginResponse5.setResults(reportPluginList82);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin> reportPluginList86 = reportPluginResponse5.Results;
        org.junit.Assert.assertNull(reportPluginList1);
        org.junit.Assert.assertNotNull(reportPluginArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse5);
        org.junit.Assert.assertNotNull(reportPluginList6);
        org.junit.Assert.assertNull(reportPluginList8);
        org.junit.Assert.assertNotNull(reportPluginArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse12);
        org.junit.Assert.assertNotNull(reportPluginList13);
        org.junit.Assert.assertNotNull(reportPluginResponse14);
        org.junit.Assert.assertNull(reportPluginList16);
        org.junit.Assert.assertNotNull(reportPluginArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse20);
        org.junit.Assert.assertNotNull(reportPluginList21);
        org.junit.Assert.assertNull(reportPluginList23);
        org.junit.Assert.assertNotNull(reportPluginArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse27);
        org.junit.Assert.assertNotNull(reportPluginList28);
        org.junit.Assert.assertNull(reportPluginList31);
        org.junit.Assert.assertNotNull(reportPluginArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse35);
        org.junit.Assert.assertNotNull(reportPluginList36);
        org.junit.Assert.assertNotNull(reportPluginResponse37);
        org.junit.Assert.assertNull(reportPluginList39);
        org.junit.Assert.assertNull(reportPluginList40);
        org.junit.Assert.assertNull(reportPluginList41);
        org.junit.Assert.assertNull(reportPluginList43);
        org.junit.Assert.assertNotNull(reportPluginArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse47);
        org.junit.Assert.assertNotNull(reportPluginList48);
        org.junit.Assert.assertNull(reportPluginList50);
        org.junit.Assert.assertNotNull(reportPluginArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse54);
        org.junit.Assert.assertNotNull(reportPluginList55);
        org.junit.Assert.assertNotNull(reportPluginResponse56);
        org.junit.Assert.assertNotNull(reportPluginResponse57);
        org.junit.Assert.assertNotNull(reportPluginList58);
        org.junit.Assert.assertNull(reportPluginList60);
        org.junit.Assert.assertNotNull(reportPluginArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse64);
        org.junit.Assert.assertNotNull(reportPluginList65);
        org.junit.Assert.assertNull(reportPluginList67);
        org.junit.Assert.assertNotNull(reportPluginArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse71);
        org.junit.Assert.assertNotNull(reportPluginList72);
        org.junit.Assert.assertNull(reportPluginList75);
        org.junit.Assert.assertNotNull(reportPluginArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(reportPluginResponse79);
        org.junit.Assert.assertNotNull(reportPluginResponse80);
        org.junit.Assert.assertNotNull(reportPluginList81);
        org.junit.Assert.assertNotNull(reportPluginList82);
        org.junit.Assert.assertNotNull(reportPluginResponse85);
        org.junit.Assert.assertNotNull(reportPluginList86);
    }

    @Test
    public void test52979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52979");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod();
        java.lang.String str1 = deleteLabAnalysisMethod0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod3 = deleteLabAnalysisMethod0.setId("/AQUARIUS/Acquisition/v2");
        deleteLabAnalysisMethod0.Id = "9999-12-31T23:59:59.999Z";
        java.lang.String str6 = deleteLabAnalysisMethod0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod8 = deleteLabAnalysisMethod0.setId("https");
        deleteLabAnalysisMethod8.Id = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str6, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod8);
    }

    @Test
    public void test52980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52980");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str1 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        controlConditionActivity2.DateCleaned = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest9 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryTo(instant6);
        java.time.Instant instant10 = timeSeriesApprovalsTransactionListServiceRequest0.QueryTo;
        java.lang.String str11 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        java.time.Instant instant12 = timeSeriesApprovalsTransactionListServiceRequest0.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        java.lang.Double double14 = timeSeriesDataCorrectedServiceRequest13.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList16 = getExportObservations15.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj18 = putLocationType17.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest19.ReportTitle = "MinDuration";
        java.lang.String str22 = reportListServiceRequest19.getLocationUniqueId();
        java.time.Instant instant23 = null;
        reportListServiceRequest19.CreatedFrom = instant23;
        java.lang.String[] strArray37 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        reportListServiceRequest19.TagValues = strList38;
        putLocationType17.ExtendedAttributeDefinitionIds = strList38;
        getExportObservations15.SpecimenIds = strList38;
        java.lang.Double double43 = getExportObservations15.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse44.setNextToken(instant45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations47 = getExportObservations15.setStartModificationTime(instant45);
        timeSeriesDataCorrectedServiceRequest13.QueryFrom = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest50 = timeSeriesDataCorrectedServiceRequest13.setIncludeGapMarkers((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant52 = ratingCurveListServiceRequest51.QueryTo;
        java.lang.String str53 = ratingCurveListServiceRequest51.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest55 = ratingCurveListServiceRequest51.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_56.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase61 = locationDatumPeriod59.setComment("'.'SSSSSSS");
        java.lang.String str62 = locationDatumPeriodBase61.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse63.setNextToken(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase66 = locationDatumPeriodBase61.setValidFrom(instant64);
        getChartDataV2_56.StartModificationTime = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest68 = ratingCurveListServiceRequest55.setQueryTo(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest69 = timeSeriesDataCorrectedServiceRequest50.setQueryFrom(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest70 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryFrom(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str72 = referencePoint71.Name;
        java.time.Instant instant73 = referencePoint71.getPrimarySinceDate();
        java.lang.Double double74 = referencePoint71.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList75 = referencePoint71.ReferencePointPeriods;
        java.time.Instant instant76 = referencePoint71.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary80.Reviewer = "";
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary80.MeasurementTime = instant83;
        postRecurringReport79.NextGenerationDate = instant83;
        java.time.Instant instant86 = postRecurringReport79.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset87 = statisticalDateTimeOffset78.setDateTimeOffset(instant86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest88 = ratingModelEffectiveShiftsByStageValuesServiceRequest77.setMeasurementTime(instant86);
        referencePoint71.DecommissionedDate = instant86;
        timeSeriesApprovalsTransactionListServiceRequest70.QueryTo = instant86;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(double43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(getExportObservations47);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest50);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest55);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase66);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest68);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest69);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(instant73);
        org.junit.Assert.assertNull(double74);
        org.junit.Assert.assertNull(referencePointPeriodList75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset87);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest88);
    }

    @Test
    public void test52981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52981");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.time.Instant instant1 = locationNote0.CreateTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        java.time.Instant instant15 = null;
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest19 = trendLineAnalysisServiceRequest17.setType(trendLineAnalysisType18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType20 = trendLineAnalysisServiceRequest19.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary23.MeasurementTime = instant26;
        postRecurringReport22.NextGenerationDate = instant26;
        java.time.Instant instant29 = postRecurringReport22.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset30 = statisticalDateTimeOffset21.setDateTimeOffset(instant29);
        trendLineAnalysisServiceRequest19.QueryTo = instant29;
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote33 = locationNote0.setCreateTimeUtc(instant29);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList34 = locationNote0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote36 = locationNote0.setUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest19);
        org.junit.Assert.assertNull(trendLineAnalysisType20);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset30);
        org.junit.Assert.assertNotNull(locationNote33);
        org.junit.Assert.assertNull(tagMetadataList34);
        org.junit.Assert.assertNotNull(locationNote36);
    }

    @Test
    public void test52982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52982");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment37.setAttachment(attachment40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        java.lang.String str58 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = domainObjectAttachment56.setAttachment(attachment59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment42, domainObjectAttachment49, domainObjectAttachment54, domainObjectAttachment56, domainObjectAttachment61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan67 = putFieldVisit32.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple68 = putFieldVisit32.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule69 = putFieldVisit32.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList70 = putFieldVisit32.Attachments;
        postSamplingLocation0.Attachments = domainObjectAttachmentList70;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = postSamplingLocation0.getAttachments();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList73 = postSamplingLocation0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str75 = standardDefinition74.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime77 = putSchedule76.StartDate;
        java.time.OffsetDateTime offsetDateTime78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule79 = putSchedule76.setEndDate(offsetDateTime78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = putSchedule79.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime81 = null;
        putSchedule79.LastGenerationDate = offsetDateTime81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType83 = putSchedule79.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = plannedFieldResult84.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails88 = labResultDetails86.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails90 = labResultDetails88.setAuditAttributes(auditAttributes89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult91 = plannedFieldResult84.setAuditAttributes(auditAttributes89);
        putSchedule79.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition93 = standardDefinition74.setAuditAttributes(auditAttributes89);
        postSamplingLocation0.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation96 = postSamplingLocation0.setVerticalDatum("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postSamplingLocation96.HorizontalDatum = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachment60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNull(samplingPlan67);
        org.junit.Assert.assertNull(fieldTripSimple68);
        org.junit.Assert.assertNull(schedule69);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList72);
        org.junit.Assert.assertNull(extendedAttributeList73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(putSchedule79);
        org.junit.Assert.assertNull(auditAttributes80);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType83);
        org.junit.Assert.assertNull(auditAttributes85);
        org.junit.Assert.assertNotNull(labResultDetails88);
        org.junit.Assert.assertNotNull(labResultDetails90);
        org.junit.Assert.assertNotNull(plannedFieldResult91);
        org.junit.Assert.assertNotNull(standardDefinition93);
        org.junit.Assert.assertNotNull(postSamplingLocation96);
    }

    @Test
    public void test52983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52983");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation();
        java.lang.String str1 = postVisitFileToLocation0.getLocationUniqueId();
        postVisitFileToLocation0.LocationUniqueId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation5 = postVisitFileToLocation0.setLocationUniqueId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = postVisitFileToLocation0.LocationUniqueId;
        postVisitFileToLocation0.LocationUniqueId = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.String str9 = postVisitFileToLocation0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile10 = postVisitFileToLocation0.File;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postVisitFileToLocation5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****" + "'", str6, "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues" + "'", str9, "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNull(iHttpFile10);
    }

    @Test
    public void test52984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52984");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        getObservationsV2_6.ResultGrades = strList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems24 = getExtendedAttributeDropdownlistitems5.setSearch((java.util.List<java.lang.String>) strList19);
        getChartDataV2_0.ObservedPropertyIds = strList19;
        java.util.List<java.lang.String> strList26 = getChartDataV2_0.ResultGrades;
        getChartDataV2_0.FieldVisitId = "PT87591240H";
        java.time.Instant instant29 = getChartDataV2_0.getEndModificationTime();
        java.util.List<java.lang.String> strList30 = getChartDataV2_0.getQualityControlTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse32.setNextToken(instant37);
        java.time.Instant instant41 = locationDescriptionListServiceResponse32.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = getActivities31.setToStartTime(instant41);
        java.lang.String str43 = getActivities42.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities45 = getActivities42.setLimit((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj47 = timeAlignedDataServiceRequest46.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.CustomId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.QualityControlTypes = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = getObservationsV2_54.setMedia((java.util.List<java.lang.String>) strList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str76 = getObservationsV2_75.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        getObservationsV2_77.SpecimenIds = strList80;
        getObservationsV2_75.ProjectIds = strList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_84 = getObservationsV2_54.setObservedPropertyIds((java.util.List<java.lang.String>) strList80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest85 = timeAlignedDataServiceRequest46.setTimeSeriesOutputUnitIds(strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities86 = getActivities45.setActivityTypes((java.util.List<java.lang.String>) strList80);
        getActivities86.FieldVisitId = "/AQUARIUS/Acquisition/v2";
        java.time.Instant instant89 = null;
        getActivities86.FromStartTime = instant89;
        java.util.List<java.lang.String> strList91 = getActivities86.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_92 = getChartDataV2_0.setQualityControlTypes(strList91);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(getActivities42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(getActivities45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNotNull(getObservationsV2_74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_84);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest85);
        org.junit.Assert.assertNotNull(getActivities86);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(getChartDataV2_92);
    }

    @Test
    public void test52985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52985");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList4 = activityWithDetails0.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str6 = samplingLocation5.Description;
        java.lang.String str7 = samplingLocation5.VerticalCollectionMethod;
        java.lang.String str8 = samplingLocation5.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation9.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList12 = putSamplingLocation11.getSamplingLocationGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        java.lang.String str17 = standardSimple14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple18.setApplicabilityRange(interval19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = standardSimple18.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = standardSimple24.setApplicabilityRange(interval25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple24.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple31 = standardSimple29.setApplicabilityRange(interval30);
        java.lang.String str32 = standardSimple31.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple37 = standardSimple35.setApplicabilityRange(interval36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple40 = standardSimple38.setApplicabilityRange(interval39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple14, standardSimple18, standardSimple23, standardSimple24, standardSimple31, standardSimple33, standardSimple34, standardSimple37, standardSimple38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList42, standardSimpleArray41);
        postSamplingLocation13.Standards = standardSimpleList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation45 = putSamplingLocation11.setStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList42);
        samplingLocation5.Standards = standardSimpleList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails47 = activityWithDetails0.setSamplingLocation(samplingLocation5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium48 = activityWithDetails0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen49.Activity = activity50;
        java.lang.String str52 = activity50.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType53 = activity50.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device56 = device54.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device58 = device56.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str59 = device56.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity60 = activity50.setDevice(device56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity62 = activity60.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device63 = activity62.getDevice();
        java.lang.String str64 = device63.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device66 = device63.setCustomId("2021.8.9990");
        device66.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        activityWithDetails0.Device = device66;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList70 = activityWithDetails0.getSamplingContextTags();
        java.lang.Boolean boolean71 = activityWithDetails0.getRefreshed();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(specimenNestedInActivityList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNull(samplingLocationGroupList12);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(standardSimple20);
        org.junit.Assert.assertNotNull(standardSimple22);
        org.junit.Assert.assertNotNull(standardSimple26);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimple31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(standardSimple37);
        org.junit.Assert.assertNotNull(standardSimple40);
        org.junit.Assert.assertNotNull(standardSimpleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putSamplingLocation45);
        org.junit.Assert.assertNotNull(activityWithDetails47);
        org.junit.Assert.assertNull(medium48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(activityType53);
        org.junit.Assert.assertNotNull(device56);
        org.junit.Assert.assertNotNull(device58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str59, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity60);
        org.junit.Assert.assertNotNull(activity62);
        org.junit.Assert.assertNotNull(device63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str64, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(device66);
        org.junit.Assert.assertNull(samplingContextTagList70);
        org.junit.Assert.assertNull(boolean71);
    }

    @Test
    public void test52986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52986");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription0.UtcOffset = 100.0d;
        timeSeriesDescription0.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        dischargeSummary6.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse5.setNextToken(instant10);
        java.time.Instant instant14 = locationDescriptionListServiceResponse5.getNextToken();
        java.time.Instant instant15 = locationDescriptionListServiceResponse5.getNextToken();
        timeSeriesDescription0.RawEndTime = instant15;
        java.lang.String str17 = timeSeriesDescription0.LocationIdentifier;
        java.time.Instant instant18 = timeSeriesDescription0.LastModified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = timeSeriesDescription0.setSubLocationIdentifier("");
        java.lang.String str21 = timeSeriesDescription20.ParameterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription22.UtcOffset = 100.0d;
        timeSeriesDescription22.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        dischargeSummary28.MeasurementTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse27.setNextToken(instant32);
        java.time.Instant instant36 = locationDescriptionListServiceResponse27.getNextToken();
        java.time.Instant instant37 = locationDescriptionListServiceResponse27.getNextToken();
        timeSeriesDescription22.RawEndTime = instant37;
        java.lang.String str39 = timeSeriesDescription22.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList41, extendedAttributeArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription43 = timeSeriesDescription22.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription44 = timeSeriesDescription20.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList41);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(extendedAttributeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription43);
        org.junit.Assert.assertNotNull(timeSeriesDescription44);
    }

    @Test
    public void test52987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52987");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        chartDataPoint2.ObservationId = "2021.4.62.0";
        java.lang.String str5 = chartDataPoint2.MdlValueUnitCustomId;
        java.lang.String str6 = chartDataPoint2.ObservationId;
        java.lang.String str7 = chartDataPoint2.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = resultDetectionCondition8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition11 = resultDetectionCondition8.setName("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint12 = chartDataPoint2.setResultDetectionCondition(resultDetectionCondition8);
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021.4.62.0" + "'", str6, "2021.4.62.0");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNotNull(resultDetectionCondition11);
        org.junit.Assert.assertNotNull(chartDataPoint12);
    }

    @Test
    public void test52988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52988");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = putSamplingLocation0.Standards;
        java.lang.String str6 = putSamplingLocation0.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList7 = putSamplingLocation0.getExtendedAttributes();
        java.lang.String str8 = putSamplingLocation0.CustomId;
        java.lang.String str9 = putSamplingLocation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = postSamplingLocation10.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation13.setPlannedFieldResult(plannedFieldResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        observation15.LabInstruction = labInstruction16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setStatistics(observationStatistics18);
        java.time.OffsetDateTime offsetDateTime20 = observation19.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = observation19.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation19.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade24 = observation23.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails27.setAuditAttributes(auditAttributes28);
        observation23.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation31 = postSamplingLocation12.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation31.setTimeZone(timeZone32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone35 = timeZone32.setCustomId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        timeZone35.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation38 = putSamplingLocation0.setTimeZone(timeZone35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = putSamplingLocation0.setLatitude("'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(extendedAttributeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "https" + "'", str8, "https");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postSamplingLocation12);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNull(resultGrade24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(postSamplingLocation31);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertNotNull(putSamplingLocation38);
        org.junit.Assert.assertNotNull(putSamplingLocation40);
    }

    @Test
    public void test52989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52989");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        java.lang.Integer int5 = fieldVisitReading2.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading7 = fieldVisitReading2.setReferencePointUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading9 = fieldVisitReading7.setSerialNumber("2021.8.9990");
        fieldVisitReading9.Manufacturer = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading13 = fieldVisitReading9.setUseLocationDatumAsReference((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(fieldVisitReading7);
        org.junit.Assert.assertNotNull(fieldVisitReading9);
        org.junit.Assert.assertNotNull(fieldVisitReading13);
    }

    @Test
    public void test52990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        postSession0.EncryptedPassword = "9999-12-31T23:59:59.999Z";
        java.lang.String str3 = postSession0.getUsername();
        java.lang.String str4 = postSession0.Locale;
        java.lang.String str5 = postSession0.Username;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession7 = postSession0.setLocale("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession9 = postSession0.setEncryptedPassword("MaxDuration");
        java.lang.String str10 = postSession0.getLocale();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertNotNull(postSession9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
    }

    @Test
    public void test52991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52991");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report6.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.Boolean boolean9 = report8.getIsTransient();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test52992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52992");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        java.lang.Integer int8 = taxonImportSummary0.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary9.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary13 = observedPropertyImportSummary9.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        java.lang.String str15 = importError14.ErrorMessage;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] { importError14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList17, importErrorArray16);
        observedPropertyImportSummary9.ImportJobErrors = importErrorList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary20 = taxonImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple21 = taxonImportSummary0.getImportHistoryEventSimple();
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(importErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(taxonImportSummary20);
        org.junit.Assert.assertNull(importHistoryEventSimple21);
    }

    @Test
    public void test52993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52993");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = extendedAttributeDefinition0.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = extendedAttributeDefinition2.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition6 = extendedAttributeDefinition2.setId("2021.4.62.0");
        java.lang.String str7 = extendedAttributeDefinition2.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType8 = extendedAttributeDefinition2.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = extendedAttributeDefinition2.setDescription("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str11 = extendedAttributeDefinition10.getDefaultValue();
        java.lang.String str12 = extendedAttributeDefinition10.getDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList13 = extendedAttributeDefinition10.getDropDownListItems();
        org.junit.Assert.assertNotNull(extendedAttributeDefinition2);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition4);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(appliesToType8);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str12, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNull(extendedAttributeListItemList13);
    }

    @Test
    public void test52994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52994");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = vertical2.getSegmentWidth();
        vertical2.IsDischargeEstimated = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical6.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = vertical8.getSegmentWidth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical10.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical10.VerticalType = verticalType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        adcpDischargeActivity14.TransducerDepth = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary17.BaseFlow = baseFlowType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary17.DischargeUncertainty = dischargeUncertainty24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = dischargeSummary26.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = dischargeSummary26.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = dischargeSummary26.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = doubleWithDisplay30.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary26.setDurationInHours(doubleWithDisplay30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty34 = dischargeUncertainty24.setQuantitativeUncertainty(doubleWithDisplay30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity35 = adcpDischargeActivity14.setTopEstimateExponent(doubleWithDisplay30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity37 = adcpDischargeActivity14.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = adcpDischargeActivity14.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str40 = datumConvertedQuantityWithDisplay39.TargetDatum;
        adcpDischargeActivity14.Area = datumConvertedQuantityWithDisplay39;
        vertical10.SegmentDischarge = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType43 = vertical10.getVerticalType();
        vertical8.VerticalType = verticalType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical45 = vertical2.setVerticalType(verticalType43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        vertical45.MeanVelocity = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical49 = vertical45.setCosineOfUniqueFlow((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType50 = vertical49.getVerticalType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest51.ReportTitle = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest55 = reportListServiceRequest51.setUserUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary56.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay60 = dischargeSummary59.getMeanGageHeight();
        java.lang.String str61 = dischargeSummary59.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = dischargeSummary59.setDischarge(quantityWithDisplay62);
        java.time.Instant instant64 = dischargeSummary59.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay65 = null;
        dischargeSummary59.Discharge = quantityWithDisplay65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = dischargeSummary59.setBaseFlow(baseFlowType67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary56.setBaseFlow(baseFlowType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList71 = getChartDataV2_70.getProjectIds();
        java.util.List<java.lang.String> strList72 = getChartDataV2_70.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList75, nameTagDefinitionArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse77 = locationTagListServiceResponse73.setTags(nameTagDefinitionList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = dischargeSummary78.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = locationDescriptionListServiceResponse81.setNextToken(instant82);
        dischargeSummary78.MeasurementTime = instant82;
        locationTagListServiceResponse73.ResponseTime = instant82;
        getChartDataV2_70.StartResultTime = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary87 = dischargeSummary69.setMeasurementTime(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest88 = reportListServiceRequest51.setCreatedFrom(instant82);
        vertical49.MeasurementTime = instant82;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(vertical8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertTrue("'" + verticalType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + baseFlowType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay27);
        org.junit.Assert.assertNull(quantityWithDisplay28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(doubleWithDisplay32);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(dischargeUncertainty34);
        org.junit.Assert.assertNotNull(adcpDischargeActivity35);
        org.junit.Assert.assertNotNull(adcpDischargeActivity37);
        org.junit.Assert.assertNull(doubleWithDisplay38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + verticalType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(vertical45);
        org.junit.Assert.assertNotNull(vertical49);
        org.junit.Assert.assertTrue("'" + verticalType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(reportListServiceRequest55);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNull(quantityWithDisplay60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(dischargeSummary63);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertTrue("'" + baseFlowType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow + "'", baseFlowType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow));
        org.junit.Assert.assertNotNull(dischargeSummary68);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse77);
        org.junit.Assert.assertNotNull(dischargeSummary80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse83);
        org.junit.Assert.assertNotNull(dischargeSummary87);
        org.junit.Assert.assertNotNull(reportListServiceRequest88);
    }

    @Test
    public void test52995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52995");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        labInstructionTemplate0.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = plannedFieldResult4.AuditAttributes;
        plannedFieldResult4.Id = "'.'SSSSSSS";
        java.lang.String str8 = plannedFieldResult4.DeviceType;
        java.lang.String str9 = plannedFieldResult4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str11 = metricConfiguration10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty12.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration10.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType16 = observedProperty12.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup18 = postObservedProperty17.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = null;
        quantity19.Unit = unit20;
        postObservedProperty17.LowerLimit = quantity19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = postObservedProperty17.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = quantity23.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observedProperty12.setUpperLimit(quantity23);
        plannedFieldResult4.ObservedProperty = observedProperty25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate27 = labInstructionTemplate0.setObservedProperty(observedProperty25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate29 = labInstructionTemplate27.setHoldingTime("MaxInstant");
        java.lang.String str30 = labInstructionTemplate29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = labInstructionTemplate29.AuditAttributes;
        labInstructionTemplate29.PreparationMethod = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = labInstructionTemplate29.ObservedProperty;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "'.'SSSSSSS" + "'", str9, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNull(resultType16);
        org.junit.Assert.assertNull(unitGroup18);
        org.junit.Assert.assertNotNull(quantity23);
        org.junit.Assert.assertNull(unit24);
        org.junit.Assert.assertNotNull(observedProperty25);
        org.junit.Assert.assertNotNull(labInstructionTemplate27);
        org.junit.Assert.assertNotNull(labInstructionTemplate29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNotNull(observedProperty34);
    }

    @Test
    public void test52996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52996");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        postLaboratory0.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory5 = postLaboratory0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory7 = postLaboratory5.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str8 = postLaboratory5.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postLaboratory5);
        org.junit.Assert.assertNotNull(postLaboratory7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "https" + "'", str8, "https");
    }

    @Test
    public void test52997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52997");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup3 = postSamplingLocationGroup0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str4 = postSamplingLocationGroup3.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = samplingPlanPlannedActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = auditAttributes9.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlanPlannedActivity8.AuditAttributes;
        putAccessGroup5.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup16 = putAccessGroup5.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = putDetectioncondition18.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition21 = putDetectioncondition18.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = samplingPlanPlannedActivity22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = auditAttributes25.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity24.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = samplingPlanPlannedActivity24.AuditAttributes;
        putDetectioncondition18.AuditAttributes = auditAttributes29;
        analysisMethodSimple17.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup32 = putAccessGroup16.setAuditAttributes(auditAttributes29);
        java.time.OffsetDateTime offsetDateTime33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = auditAttributes29.setModificationTime(offsetDateTime33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup35 = postSamplingLocationGroup3.setAuditAttributes(auditAttributes34);
        java.lang.String str36 = postSamplingLocationGroup35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType37 = postSamplingLocationGroup35.LocationGroupType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup39 = postSamplingLocationGroup35.setDescription("****2c758a89-79ef-4b16-8ced-c7bb83cdba18****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity8);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(putAccessGroup16);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNotNull(putDetectioncondition21);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity24);
        org.junit.Assert.assertNotNull(auditAttributes27);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(putAccessGroup32);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(locationGroupType37);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup39);
    }

    @Test
    public void test52998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52998");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod2 = locationMonitoringMethod0.setSubLocationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod4 = locationMonitoringMethod0.setParameterUniqueId("'.'SSSSSSS");
        java.lang.String str5 = locationMonitoringMethod0.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod0.setLocationIdentifier("http://MaxDurationhttp/json/reply/Integer");
        locationMonitoringMethod0.Method = "MaxInstant";
        org.junit.Assert.assertNotNull(locationMonitoringMethod2);
        org.junit.Assert.assertNotNull(locationMonitoringMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
    }

    @Test
    public void test52999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test52999");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty2 = postObservedProperty0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.getAnalysisType();
        java.lang.String str4 = postObservedProperty0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = postObservedProperty0.setDescription("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = postObservedProperty6.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup10 = putSamplingLocationGroup8.setDescription("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard11.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = specimenTemplate15.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate17.Preservative = preservativeType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate17.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition26 = postDetectioncondition14.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard27 = putStandard11.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard29 = putStandard27.setName("-PT87591240H");
        putStandard29.IssuingOrganization = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = putStandard29.getAuditAttributes();
        putSamplingLocationGroup10.AuditAttributes = auditAttributes32;
        postObservedProperty6.AuditAttributes = auditAttributes32;
        org.junit.Assert.assertNotNull(postObservedProperty2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservedProperty6);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup10);
        org.junit.Assert.assertNotNull(specimenTemplate17);
        org.junit.Assert.assertTrue("'" + preservativeType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNotNull(postDetectioncondition26);
        org.junit.Assert.assertNotNull(putStandard27);
        org.junit.Assert.assertNotNull(putStandard29);
        org.junit.Assert.assertNotNull(auditAttributes32);
    }

    @Test
    public void test53000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest105.test53000");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple2 = importHistoryEventSimple0.setId("hi!");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = importHistoryEventSimple2.setImportTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent7 = importHistoryEvent5.setImportTime(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent9 = importHistoryEvent7.setImportType(importType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile10 = importHistoryEvent7.ImportedBy;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType11 = importHistoryEvent7.ImportType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple12 = importHistoryEventSimple4.setImportType(importType11);
        org.junit.Assert.assertNotNull(importHistoryEventSimple2);
        org.junit.Assert.assertNotNull(importHistoryEventSimple4);
        org.junit.Assert.assertNotNull(importHistoryEvent7);
        org.junit.Assert.assertTrue("'" + importType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent9);
        org.junit.Assert.assertNull(userProfile10);
        org.junit.Assert.assertTrue("'" + importType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEventSimple12);
    }
}

