import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest53 {

    public static boolean debug = false;

    @Test
    public void test26501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26501");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        java.lang.String str2 = timeSeries0.Comment;
        timeSeries0.Identifier = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test26502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26502");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit2 = fieldVisit0.setFieldTrip(fieldTripSimple1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str9 = domainObjectAttachment8.getId();
        java.lang.String str10 = domainObjectAttachment8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = domainObjectAttachment8.setAttachment(attachment11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str14 = domainObjectAttachment13.getId();
        java.lang.String str15 = domainObjectAttachment13.getId();
        domainObjectAttachment13.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = domainObjectAttachment13.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str21 = domainObjectAttachment20.getId();
        java.lang.String str22 = domainObjectAttachment20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = domainObjectAttachment20.setAttachment(attachment23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = domainObjectAttachment27.setAttachment(attachment30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment8, domainObjectAttachment13, domainObjectAttachment20, domainObjectAttachment25, domainObjectAttachment27, domainObjectAttachment32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35, domainObjectAttachmentArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit3.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan38 = putFieldVisit3.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple39 = putFieldVisit3.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = putFieldVisit3.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = samplingLocation41.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit46 = putFieldVisit3.setSamplingLocation(samplingLocation41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = samplingLocation41.setAddress(address47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit49 = fieldVisit2.setSamplingLocation(samplingLocation48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList52, plannedActivityArray51);
        putFieldVisit50.PlannedActivities = plannedActivityList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        java.lang.String str57 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = domainObjectAttachment55.setAttachment(attachment58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str61 = domainObjectAttachment60.getId();
        java.lang.String str62 = domainObjectAttachment60.getId();
        domainObjectAttachment60.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment66 = domainObjectAttachment60.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str68 = domainObjectAttachment67.getId();
        java.lang.String str69 = domainObjectAttachment67.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment71 = domainObjectAttachment67.setAttachment(attachment70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str73 = domainObjectAttachment72.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str75 = domainObjectAttachment74.getId();
        java.lang.String str76 = domainObjectAttachment74.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment78 = domainObjectAttachment74.setAttachment(attachment77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str80 = domainObjectAttachment79.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment55, domainObjectAttachment60, domainObjectAttachment67, domainObjectAttachment72, domainObjectAttachment74, domainObjectAttachment79 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList82, domainObjectAttachmentArray81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit84 = putFieldVisit50.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType85 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.IN_PROGRESS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit86 = putFieldVisit50.setPlanningStatus(planningStatusType85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int88 = samplingPlan87.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan90 = samplingPlan87.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        putFieldVisit50.SamplingPlan = samplingPlan90;
        fieldVisit49.SamplingPlan = samplingPlan90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType93 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.DONE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit94 = fieldVisit49.setPlanningStatus(planningStatusType93);
        java.lang.String str95 = fieldVisit94.getParticipants();
        org.junit.Assert.assertNotNull(fieldVisit2);
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(domainObjectAttachment12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(domainObjectAttachment19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(domainObjectAttachment24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNull(samplingPlan38);
        org.junit.Assert.assertNull(fieldTripSimple39);
        org.junit.Assert.assertNull(schedule40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingLocation45);
        org.junit.Assert.assertNotNull(putFieldVisit46);
        org.junit.Assert.assertNotNull(samplingLocation48);
        org.junit.Assert.assertNotNull(fieldVisit49);
        org.junit.Assert.assertNotNull(plannedActivityArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(domainObjectAttachment59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachment66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(domainObjectAttachment71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(domainObjectAttachment78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putFieldVisit84);
        org.junit.Assert.assertTrue("'" + planningStatusType85 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.IN_PROGRESS + "'", planningStatusType85.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.IN_PROGRESS));
        org.junit.Assert.assertNotNull(putFieldVisit86);
        org.junit.Assert.assertNull(int88);
        org.junit.Assert.assertNotNull(samplingPlan90);
        org.junit.Assert.assertTrue("'" + planningStatusType93 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.DONE + "'", planningStatusType93.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.DONE));
        org.junit.Assert.assertNotNull(fieldVisit94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test26503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26503");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen0.Name = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate3.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate3.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = specimenTemplate7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen9 = putSpecimen0.setTemplateCreatedFrom(specimenTemplate7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen11 = putSpecimen0.setFiltrationComment("hi!");
        putSpecimen11.Name = "/AQUARIUS";
        java.lang.Integer int14 = putSpecimen11.NumberOfReceivedObservations;
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putSpecimen9);
        org.junit.Assert.assertNotNull(putSpecimen11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test26504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26504");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int3 = adcpDischargeActivity0.NumberOfTransects;
        java.lang.String str4 = adcpDischargeActivity0.getTopEstimateMethod();
        java.lang.String str5 = adcpDischargeActivity0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType7 = dischargeChannelMeasurement6.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeChannelMeasurement6.Discharge;
        java.lang.String str9 = dischargeChannelMeasurement6.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement6.setDischarge(quantityWithDisplay10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType12 = dischargeChannelMeasurement6.getChannelEvenness();
        adcpDischargeActivity0.DischargeChannelMeasurement = dischargeChannelMeasurement6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity15 = adcpDischargeActivity0.setNumberOfTransects((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = adcpDischargeActivity15.Width;
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(channelMaterialType7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(channelEvennessType12);
        org.junit.Assert.assertNotNull(adcpDischargeActivity15);
        org.junit.Assert.assertNull(quantityWithDisplay16);
    }

    @Test
    public void test26505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26505");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest();
        java.util.ArrayList<java.lang.String> strList1 = timeSeriesDescriptionListByUniqueIdServiceRequest0.TimeSeriesUniqueIds;
        java.util.ArrayList<java.lang.String> strList2 = timeSeriesDescriptionListByUniqueIdServiceRequest0.TimeSeriesUniqueIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test26506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26506");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = importSummarySpecimen2.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary4.UpdateCount = (-1);
        java.lang.Integer int7 = observationImportSummary4.ExpectedCount;
        java.lang.String str8 = observationImportSummary4.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10, importErrorArray9);
        observationImportSummary4.ImportJobErrors = importErrorList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen13 = importSummarySpecimen2.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList14 = importSummarySpecimen2.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen17 = importSummarySpecimen15.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList18 = importSummarySpecimen17.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary19.UpdateCount = (-1);
        java.lang.Integer int22 = observationImportSummary19.ExpectedCount;
        java.lang.String str23 = observationImportSummary19.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList25, importErrorArray24);
        observationImportSummary19.ImportJobErrors = importErrorList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen28 = importSummarySpecimen17.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen29 = importSummarySpecimen2.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList25);
        importSummarySpecimen2.NewCount = (-1);
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(importErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen13);
        org.junit.Assert.assertNull(importItemSpecimenList14);
        org.junit.Assert.assertNotNull(importSummarySpecimen17);
        org.junit.Assert.assertNull(importErrorList18);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(importErrorArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen28);
        org.junit.Assert.assertNotNull(importSummarySpecimen29);
    }

    @Test
    public void test26507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26507");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList6 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setExpectedCount((java.lang.Integer) (-1));
        java.lang.Integer int9 = taxonImportSummary8.getSkippedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary10.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary14 = observedPropertyImportSummary10.setSummaryReportText("");
        java.lang.Integer int15 = observedPropertyImportSummary10.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary18 = observationImportSummary16.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary20 = observationImportSummary18.setExpectedCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary22 = observationImportSummary18.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int24 = samplingLocationImportSummary23.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList25 = samplingLocationImportSummary23.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList26 = samplingLocationImportSummary23.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary28 = samplingLocationImportSummary23.setExpectedCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary29.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList32 = taxonImportSummary29.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation35 = importSummaryObservation33.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation37 = importSummaryObservation35.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary38.UpdateCount = (-1);
        java.lang.Integer int41 = observationImportSummary38.ExpectedCount;
        java.lang.String str42 = observationImportSummary38.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList44, importErrorArray43);
        observationImportSummary38.ImportJobErrors = importErrorList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation47 = importSummaryObservation35.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList44);
        taxonImportSummary29.ImportJobErrors = importErrorList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary49 = samplingLocationImportSummary23.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary50 = observationImportSummary22.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList44);
        observedPropertyImportSummary10.ImportJobErrors = importErrorList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary52 = taxonImportSummary8.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList44);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList53 = taxonImportSummary8.NonErrorImportItems;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importItemTaxonList6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(observationImportSummary18);
        org.junit.Assert.assertNotNull(observationImportSummary20);
        org.junit.Assert.assertNotNull(observationImportSummary22);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(importItemSamplingLocationList25);
        org.junit.Assert.assertNull(importErrorList26);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary28);
        org.junit.Assert.assertNull(importItemTaxonList32);
        org.junit.Assert.assertNotNull(importSummaryObservation35);
        org.junit.Assert.assertNotNull(importSummaryObservation37);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(importErrorArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(importSummaryObservation47);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary49);
        org.junit.Assert.assertNotNull(observationImportSummary50);
        org.junit.Assert.assertNotNull(taxonImportSummary52);
        org.junit.Assert.assertNull(importItemTaxonList53);
    }

    @Test
    public void test26508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26508");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory4.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = laboratory4.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport3.setLaboratory(laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        java.lang.String str13 = laboratory10.PhoneNumber;
        laboratory10.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str16 = laboratory10.PointOfContact;
        labReport3.Laboratory = laboratory10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations18 = specimenWithObservations0.setLaboratory(laboratory10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.lang.String str20 = specimenTemplate19.CustomId;
        java.lang.String str21 = specimenTemplate19.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations22 = specimenWithObservations18.setTemplateCreatedFrom(specimenTemplate19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate19.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = specimenTemplate19.setFiltered((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType28 = analyticalGroup27.getType();
        analyticalGroup27.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup32 = analyticalGroup27.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.Integer int33 = analyticalGroup27.NumberOfObservedPropertiesInGroupItems;
        java.lang.Integer int34 = analyticalGroup27.getNumberOfObservedPropertiesInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate26.setAnalyticalGroup(analyticalGroup27);
        java.lang.Boolean boolean36 = specimenTemplate35.Filtered;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNotNull(laboratory8);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(specimenWithObservations18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(specimenWithObservations22);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNotNull(specimenTemplate26);
        org.junit.Assert.assertNull(analyticalGroupType28);
        org.junit.Assert.assertNotNull(analyticalGroup32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertEquals("'" + boolean36 + "' != '" + false + "'", boolean36, false);
    }

    @Test
    public void test26509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26509");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        ratingCurve0.Id = "https";
        java.lang.String str12 = ratingCurve0.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve14 = ratingCurve0.setEquation("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit15 = ratingCurve14.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType16 = ratingCurve14.getType();
        ratingCurve14.Equation = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve20 = ratingCurve14.setId("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str22 = ratingCurve21.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType24 = expandedRatingCurve23.Type;
        expandedRatingCurve23.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve28 = expandedRatingCurve23.setOutputParameter(parameterWithUnit27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve29 = ratingCurve21.setInputParameter(parameterWithUnit27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str31 = ratingCurve30.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType33 = expandedRatingCurve32.Type;
        expandedRatingCurve32.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve37 = expandedRatingCurve32.setOutputParameter(parameterWithUnit36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve38 = ratingCurve30.setInputParameter(parameterWithUnit36);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList39 = ratingCurve30.getOffsets();
        ratingCurve30.Id = "https";
        java.lang.String str42 = ratingCurve30.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve44 = ratingCurve30.setEquation("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType46 = expandedRatingCurve45.Type;
        expandedRatingCurve45.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve50 = expandedRatingCurve45.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList52, periodOfApplicabilityArray51);
        expandedRatingCurve45.PeriodsOfApplicability = periodOfApplicabilityList52;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList55 = expandedRatingCurve45.AdjustedRatingTable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList57 = ratingShift56.getShiftPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability59 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift60 = ratingShift58.setPeriodOfApplicability(periodOfApplicability59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability61 = ratingShift58.PeriodOfApplicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability62 = ratingShift58.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability65 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift66 = ratingShift64.setPeriodOfApplicability(periodOfApplicability65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability68 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift69 = ratingShift67.setPeriodOfApplicability(periodOfApplicability68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double71 = ratingShiftPoint70.getInputValue();
        java.lang.Double double72 = ratingShiftPoint70.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double74 = ratingShiftPoint73.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint77 = ratingShiftPoint75.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint75.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint82 = ratingShiftPoint80.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint80.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint70, ratingShiftPoint73, ratingShiftPoint75, ratingShiftPoint80, ratingShiftPoint85 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList87 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList87, ratingShiftPointArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift89 = ratingShift67.setShiftPoints(ratingShiftPointList87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] ratingShiftArray90 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] { ratingShift56, ratingShift58, ratingShift63, ratingShift64, ratingShift67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList91 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>) ratingShiftList91, ratingShiftArray90);
        expandedRatingCurve45.Shifts = ratingShiftList91;
        ratingCurve30.Shifts = ratingShiftList91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve95 = ratingCurve29.setShifts(ratingShiftList91);
        ratingCurve20.Shifts = ratingShiftList91;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(ratingCurve14);
        org.junit.Assert.assertNotNull(parameterWithUnit15);
        org.junit.Assert.assertNull(ratingCurveType16);
        org.junit.Assert.assertNotNull(ratingCurve20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(ratingCurveType24);
        org.junit.Assert.assertNotNull(expandedRatingCurve28);
        org.junit.Assert.assertNotNull(ratingCurve29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(ratingCurveType33);
        org.junit.Assert.assertNotNull(expandedRatingCurve37);
        org.junit.Assert.assertNotNull(ratingCurve38);
        org.junit.Assert.assertNull(offsetPointList39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(ratingCurve44);
        org.junit.Assert.assertNull(ratingCurveType46);
        org.junit.Assert.assertNotNull(expandedRatingCurve50);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(ratingPointList55);
        org.junit.Assert.assertNull(ratingShiftPointList57);
        org.junit.Assert.assertNotNull(ratingShift60);
        org.junit.Assert.assertNull(periodOfApplicability61);
        org.junit.Assert.assertNull(periodOfApplicability62);
        org.junit.Assert.assertNotNull(ratingShift66);
        org.junit.Assert.assertNotNull(ratingShift69);
        org.junit.Assert.assertNull(double71);
        org.junit.Assert.assertNull(double72);
        org.junit.Assert.assertNull(double74);
        org.junit.Assert.assertNotNull(ratingShiftPoint77);
        org.junit.Assert.assertNotNull(ratingShiftPoint82);
        org.junit.Assert.assertNotNull(ratingShiftPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(ratingShift89);
        org.junit.Assert.assertNotNull(ratingShiftArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(ratingCurve95);
    }

    @Test
    public void test26510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26510");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = locationDatumPeriod0.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod66 = locationDatumPeriod64.setComments("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod68 = locationDatumPeriod64.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod70 = locationDatumPeriod64.setComments("");
        java.lang.String str71 = locationDatumPeriod64.User;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(timeRange62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
        org.junit.Assert.assertNotNull(locationDatumPeriod66);
        org.junit.Assert.assertNotNull(locationDatumPeriod68);
        org.junit.Assert.assertNotNull(locationDatumPeriod70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test26511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26511");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj1 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod3 = importItemAnalysisMethod0.setRowId("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList4 = importItemAnalysisMethod3.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod6 = importItemAnalysisMethod3.setExistingItem(analysisMethod5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList26 = importItem8.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation29 = importItemSamplingLocation27.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        java.util.List<java.lang.String> strList46 = getObservationsV2_31.getLabReportIds();
        importItem30.Errors = getObservationsV2_31;
        java.lang.Object obj48 = importItem30.getExistingItem();
        importItem30.Input = "hi!";
        java.lang.Object obj51 = importItem30.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem30.setStatus(importItemStatusType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation54 = importItemSamplingLocation29.setStatus(importItemStatusType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList56 = importItemObject55.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList58, importChangeItemArray57);
        importItemObject55.ItemComparison = importChangeItemList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject69 = importItemObject55.setExistingItem((java.lang.Object) putLocationTags61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser72 = openIdConnectUser70.setIdentifier("");
        java.lang.Boolean boolean73 = openIdConnectUser72.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject74 = importItemObject55.setErrors((java.lang.Object) openIdConnectUser72);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList75 = importItemObject74.ItemComparison;
        importItemSamplingLocation54.ItemComparison = importChangeItemList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem77 = importItem8.setItemComparison(importChangeItemList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty78 = importItemObservedProperty7.setItemComparison(importChangeItemList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod79 = importItemAnalysisMethod3.setItemComparison(importChangeItemList75);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(importChangeItemList26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + importItemStatusType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(importItemSamplingLocation54);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(importChangeItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(importItemObject69);
        org.junit.Assert.assertNotNull(openIdConnectUser72);
        org.junit.Assert.assertNull(boolean73);
        org.junit.Assert.assertNotNull(importItemObject74);
        org.junit.Assert.assertNotNull(importChangeItemList75);
        org.junit.Assert.assertNotNull(importItem77);
        org.junit.Assert.assertNotNull(importItemObservedProperty78);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod79);
    }

    @Test
    public void test26512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26512");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod5 = observation2.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime7 = activity6.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = activity6.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str12 = metricConfiguration11.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty13.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration16 = metricConfiguration11.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType17 = observedProperty13.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity24 = postObservedProperty18.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit25 = quantity24.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = observedProperty13.setUpperLimit(quantity24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = samplingLocation10.setElevation(quantity24);
        activity6.SamplingLocation = samplingLocation27;
        activity6.LoggerFileName = "/AQUARIUS";
        observation2.Activity = activity6;
        java.time.OffsetDateTime offsetDateTime32 = null;
        observation2.ObservedTime = offsetDateTime32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_36 = putObservationV2_34.setObservedProperty(observedProperty35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus37.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_34.ResultStatus = resultStatus37;
        resultStatus37.CustomId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus43.Id = "0001-01-01T00:00:00.000Z";
        resultStatus43.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str49 = observationNestedInSpecimen48.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType50 = observationNestedInSpecimen48.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus51.SystemCode = resultStatusSystemCodeType52;
        resultStatus51.CustomId = "-PT87591240H";
        resultStatus51.CustomId = "https";
        observationNestedInSpecimen48.ResultStatus = resultStatus51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType59 = resultStatus51.SystemCode;
        resultStatus43.SystemCode = resultStatusSystemCodeType59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus61 = resultStatus37.setSystemCode(resultStatusSystemCodeType59);
        observation2.ResultStatus = resultStatus37;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(collectionMethod5);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(activity9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(metricConfiguration16);
        org.junit.Assert.assertNull(resultType17);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(quantity24);
        org.junit.Assert.assertNull(unit25);
        org.junit.Assert.assertNotNull(observedProperty26);
        org.junit.Assert.assertNotNull(samplingLocation27);
        org.junit.Assert.assertNotNull(putObservationV2_36);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(dataClassificationType50);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(resultStatus61);
    }

    @Test
    public void test26513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26513");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.lang.String str2 = getChartDataV2_0.DepthUnitId;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_0.setEndResultTime(instant43);
        java.util.List<java.lang.String> strList50 = getChartDataV2_0.getTaxonIds();
        java.util.List<java.lang.String> strList51 = getChartDataV2_0.AnalyticalGroupIds;
        getChartDataV2_0.CustomId = "MinDuration";
        java.util.List<java.lang.String> strList54 = getChartDataV2_0.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType55 = getChartDataV2_0.SampleFraction;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(sampleFractionType55);
    }

    @Test
    public void test26514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26514");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        analyticalGroup0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = analyticalGroupItem5.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem7.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = analyticalGroupItem7.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = null;
        analyticalGroupItem10.AnalysisMethod = analysisMethod13;
        java.lang.String str15 = analyticalGroupItem10.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = null;
        analyticalGroupItem21.AnalysisMethod = analysisMethod24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem5, analyticalGroupItem7, analyticalGroupItem10, analyticalGroupItem16, analyticalGroupItem19, analyticalGroupItem21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList27, analyticalGroupItemArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = analyticalGroup4.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList27);
        analyticalGroup0.AnalyticalGroupItems = analyticalGroupItemList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup0.AuditAttributes = auditAttributes31;
        java.lang.String str33 = analyticalGroup0.Id;
        java.lang.String str34 = analyticalGroup0.Id;
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNull(analysisMethod6);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(analyticalGroup29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test26515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26515");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule searchResultSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule();
        searchResultSchedule0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        searchResultSchedule0.Cursor = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.Integer int5 = searchResultSchedule0.getTotalCount();
        java.lang.String str6 = searchResultSchedule0.Cursor;
        java.lang.Integer int7 = searchResultSchedule0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule searchResultSchedule9 = searchResultSchedule0.setTotalCount((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str6, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(searchResultSchedule9);
    }

    @Test
    public void test26516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26516");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = observation10.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        observation10.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str19 = metricConfiguration18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty20.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration23 = metricConfiguration18.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType24 = observedProperty20.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup26 = postObservedProperty25.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = null;
        quantity27.Unit = unit28;
        postObservedProperty25.LowerLimit = quantity27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = postObservedProperty25.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = quantity31.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty33 = observedProperty20.setUpperLimit(quantity31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup34 = observedProperty33.UnitGroup;
        observation10.ObservedProperty = observedProperty33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit36 = observedProperty33.DefaultUnit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = observedProperty33.ImportHistoryEventSimples;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(resultGrade11);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(metricConfiguration23);
        org.junit.Assert.assertNull(resultType24);
        org.junit.Assert.assertNull(unitGroup26);
        org.junit.Assert.assertNotNull(quantity31);
        org.junit.Assert.assertNull(unit32);
        org.junit.Assert.assertNotNull(observedProperty33);
        org.junit.Assert.assertNull(unitGroup34);
        org.junit.Assert.assertNull(unit36);
        org.junit.Assert.assertNull(importHistoryEventSimpleList37);
    }

    @Test
    public void test26517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26517");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType3 = dischargeChannelMeasurement0.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement5 = dischargeChannelMeasurement0.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement7 = dischargeChannelMeasurement5.setHorizontalFlow(horizontalFlowType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType8 = dischargeChannelMeasurement7.getMeterSuspension();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        crossSectionPoint9.Distance = quantityWithDisplay10;
        crossSectionPoint9.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = crossSectionPoint9.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint9.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint16.setElevation(quantityWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        crossSectionPoint18.Depth = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint18.Depth = datumConvertedQuantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint18.Elevation = datumConvertedQuantityWithDisplay23;
        dischargeChannelMeasurement7.DistanceToGage = datumConvertedQuantityWithDisplay23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType27 = dischargeChannelMeasurement26.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType28 = dischargeChannelMeasurement26.getChannelEvenness();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement30 = dischargeChannelMeasurement26.setDistanceToGage(quantityWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft;
        dischargeChannelMeasurement30.CurrentMeter = currentMeterType31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType verticalVelocityDistributionType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.NonStandard;
        dischargeChannelMeasurement30.VerticalVelocityDistribution = verticalVelocityDistributionType33;
        dischargeChannelMeasurement7.VerticalVelocityDistribution = verticalVelocityDistributionType33;
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(horizontalFlowType3);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement5);
        org.junit.Assert.assertTrue("'" + horizontalFlowType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even + "'", horizontalFlowType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement7);
        org.junit.Assert.assertNull(meterSuspensionType8);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNull(channelMaterialType27);
        org.junit.Assert.assertNull(channelEvennessType28);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement30);
        org.junit.Assert.assertTrue("'" + currentMeterType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft + "'", currentMeterType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft));
        org.junit.Assert.assertTrue("'" + verticalVelocityDistributionType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.NonStandard + "'", verticalVelocityDistributionType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.NonStandard));
    }

    @Test
    public void test26518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26518");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        java.lang.String str1 = fieldTrip0.getNotes();
        java.time.OffsetDateTime offsetDateTime2 = null;
        fieldTrip0.EndTime = offsetDateTime2;
        java.lang.String str4 = fieldTrip0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26519");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        report2.Comments = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report2.setIsTransient((java.lang.Boolean) false);
        report6.IsTransient = false;
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report6);
    }

    @Test
    public void test26520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26520");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.Double double1 = attachment0.getGpsLongitude();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment3 = attachment0.setUniqueId("MinDuration");
        java.lang.String str4 = attachment0.getFileName();
        java.lang.String str5 = attachment0.getUrl();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(attachment3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26521");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        java.lang.Object obj8 = importItemTaxon3.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList10 = importItemTaxon9.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon12 = importItemTaxon9.setItem(taxon11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str14 = postCalculatedDerivedTimeSeries13.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = postCalculatedDerivedTimeSeries13.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon16 = importItemTaxon12.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList18 = importItemObject17.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList20, importChangeItemArray19);
        importItemObject17.ItemComparison = importChangeItemList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject31 = importItemObject17.setExistingItem((java.lang.Object) putLocationTags23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser34 = openIdConnectUser32.setIdentifier("");
        java.lang.Boolean boolean35 = openIdConnectUser34.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = importItemObject17.setErrors((java.lang.Object) openIdConnectUser34);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList37 = importItemObject36.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon38 = importItemTaxon16.setItemComparison(importChangeItemList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList40 = importItemTaxon39.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon42 = importItemTaxon39.setItem(taxon41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str44 = postCalculatedDerivedTimeSeries43.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList45 = postCalculatedDerivedTimeSeries43.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon42.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon48 = importItemTaxon42.setExistingItem(taxon47);
        importItemTaxon16.Item = taxon47;
        taxon47.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon47.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = putUnit54.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = putDetectioncondition56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition59 = putDetectioncondition56.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity62 = samplingPlanPlannedActivity60.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = auditAttributes63.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity62.AuditAttributes = auditAttributes63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = samplingPlanPlannedActivity62.AuditAttributes;
        putDetectioncondition56.AuditAttributes = auditAttributes67;
        putUnit54.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = auditAttributes67.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon72 = taxon47.setAuditAttributes(auditAttributes71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon74 = taxon72.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon76 = taxon74.setItisComment("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon78 = taxon74.setId("https");
        taxon74.ScientificName = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel81 = taxon74.TaxonomyLevel;
        importItemTaxon3.ExistingItem = taxon74;
        java.lang.String str83 = importItemTaxon3.Input;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(importItemTaxon12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(extendedAttributeValueList15);
        org.junit.Assert.assertNotNull(importItemTaxon16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(importChangeItemArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(importItemObject31);
        org.junit.Assert.assertNotNull(openIdConnectUser34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(importItemObject36);
        org.junit.Assert.assertNotNull(importChangeItemList37);
        org.junit.Assert.assertNotNull(importItemTaxon38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(importItemTaxon42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(extendedAttributeValueList45);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNotNull(importItemTaxon48);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNotNull(putDetectioncondition59);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity62);
        org.junit.Assert.assertNotNull(auditAttributes65);
        org.junit.Assert.assertNotNull(auditAttributes67);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNotNull(taxon72);
        org.junit.Assert.assertNotNull(taxon74);
        org.junit.Assert.assertNotNull(taxon76);
        org.junit.Assert.assertNotNull(taxon78);
        org.junit.Assert.assertNull(taxonomyLevel81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test26522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26522");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult23 = metricResult21.setOverriddenByUser((java.lang.Boolean) false);
        java.lang.Boolean boolean24 = metricResult21.getOverriddenByUser();
        metricResult21.AggregationResult = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = postFieldVisitActivityWithTemplate27.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType30 = null;
        postFieldVisitActivityWithTemplate29.Medium = mediumType30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity32.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity32.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity38 = postActivity36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate39 = postFieldVisitActivityWithTemplate29.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult40 = metricResult21.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult42 = metricResult21.setAggregationResult((java.lang.Double) 100.0d);
        java.lang.Boolean boolean43 = metricResult21.OverriddenByUser;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertNotNull(metricResult23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate29);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(postActivity38);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate39);
        org.junit.Assert.assertNotNull(metricResult40);
        org.junit.Assert.assertNotNull(metricResult42);
        org.junit.Assert.assertEquals("'" + boolean43 + "' != '" + false + "'", boolean43, false);
    }

    @Test
    public void test26523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26523");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList5 = getExportObservations0.getSpecimenIds();
        getExportObservations0.MinNumericResultValue = 100.0d;
        java.lang.Double double8 = getExportObservations0.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities9.Limit = 10;
        java.util.List<java.lang.String> strList12 = getActivities9.ActivityTemplateId;
        java.lang.String str13 = getActivities9.Sort;
        java.util.List<java.lang.String> strList14 = getActivities9.CollectionMethodIds;
        java.lang.String str15 = getActivities9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = getActivities19.setToStartTime(instant29);
        java.lang.String str31 = getActivities30.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        getActivities30.Media = strList45;
        putUserV2_17.AccessGroups = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = getSpecimens16.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        getActivities9.ActivityTemplateId = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations54 = getExportObservations0.setProjectIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations56 = getExportObservations54.setLimit((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations58 = getExportObservations56.setFieldResultType(fieldResultType57);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(getActivities30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getSpecimens52);
        org.junit.Assert.assertNotNull(getExportObservations54);
        org.junit.Assert.assertNotNull(getExportObservations56);
        org.junit.Assert.assertNotNull(getExportObservations58);
    }

    @Test
    public void test26524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26524");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag7 = postTag3.setDescription("");
        postTag3.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str10 = postTag3.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNotNull(postTag7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test26525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26525");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        java.lang.Long long1 = timeAlignedPoint0.getApprovalLevel6();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint3 = timeAlignedPoint0.setApprovalLevel2((java.lang.Long) 10L);
        java.lang.String str4 = timeAlignedPoint3.Method1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint6 = timeAlignedPoint3.setDisplayValue10("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(timeAlignedPoint3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(timeAlignedPoint6);
    }

    @Test
    public void test26526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26526");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role4 = role0.setCanEditLocationDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList5 = role0.getRoleApprovalTransitions();
        role0.CanEditData = false;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNotNull(role4);
        org.junit.Assert.assertNull(roleApprovalTransitionList5);
    }

    @Test
    public void test26527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26527");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = putActivity3.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity3.setEndTime(offsetDateTime5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = null;
        putActivity6.SamplingLocation = samplingLocation7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup10 = postObservedProperty9.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit12 = null;
        quantity11.Unit = unit12;
        postObservedProperty9.LowerLimit = quantity11;
        putActivity6.Depth = quantity11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity16 = putActivity0.setDepth(quantity11);
        java.lang.String str17 = putActivity16.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity18.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = postActivity18.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity24 = null;
        putActivity23.PlannedActivity = plannedActivity24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity26.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity26.setPlannedActivity(plannedActivity29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str32 = samplingContextTag31.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag34 = samplingContextTag31.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag34.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str38 = samplingContextTag37.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str40 = samplingContextTag39.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        samplingContextTag39.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str44 = samplingContextTag43.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag46 = samplingContextTag43.setAuditAttributes(auditAttributes45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag36, samplingContextTag37, samplingContextTag39, samplingContextTag46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList48, samplingContextTagArray47);
        postActivity26.SamplingContextTags = samplingContextTagList48;
        putActivity23.SamplingContextTags = samplingContextTagList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity52 = postActivity22.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity53 = putActivity16.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = putActivity16.getSamplingLocation();
        org.junit.Assert.assertNull(plannedActivity4);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNull(unitGroup10);
        org.junit.Assert.assertNotNull(putActivity16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(postActivity22);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(samplingContextTag34);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(samplingContextTag46);
        org.junit.Assert.assertNotNull(samplingContextTagArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(postActivity52);
        org.junit.Assert.assertNotNull(putActivity53);
        org.junit.Assert.assertNull(samplingLocation54);
    }

    @Test
    public void test26528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26528");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod();
        java.lang.String str1 = getMonitoringMethod0.getMethodCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod3 = getMonitoringMethod0.setMethodCode("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod5 = getMonitoringMethod3.setMethodCode("/AQUARIUS/Publish/v2");
        java.lang.Object obj6 = getMonitoringMethod5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod8 = getMonitoringMethod5.setMethodCode("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod10 = getMonitoringMethod8.setMethodCode("2021.4.62.0");
        java.lang.Object obj11 = getMonitoringMethod8.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getMonitoringMethod3);
        org.junit.Assert.assertNotNull(getMonitoringMethod5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
        org.junit.Assert.assertNotNull(getMonitoringMethod8);
        org.junit.Assert.assertNotNull(getMonitoringMethod10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$MonitoringMethod");
    }

    @Test
    public void test26529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26529");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        putActivity8.Type = activityWithDetailsType9;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList11 = putActivity8.getObservations();
        putActivity8.Detail = false;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList14 = putActivity8.Specimens;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList15 = putActivity8.getSamplingContextTags();
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNull(observationMinimalList11);
        org.junit.Assert.assertNull(specimenNestedInActivityList14);
        org.junit.Assert.assertNull(samplingContextTagList15);
    }

    @Test
    public void test26530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26530");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        timeSeriesUniqueIdListServiceRequest0.Publish = false;
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier;
        java.time.Instant instant6 = timeSeriesUniqueIdListServiceRequest0.ChangesSinceToken;
        java.lang.String str7 = timeSeriesUniqueIdListServiceRequest0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest9 = timeSeriesUniqueIdListServiceRequest0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant11 = ratingCurveListServiceRequest10.QueryTo;
        java.lang.String str12 = ratingCurveListServiceRequest10.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest14 = ratingCurveListServiceRequest10.setRatingModelIdentifier("http");
        java.time.Instant instant15 = ratingCurveListServiceRequest14.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList17 = getFieldVisits16.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        java.util.ArrayList<java.lang.String> strList26 = putLocationTags25.TagUniqueIds;
        getFieldVisits16.ScheduleIds = strList26;
        java.lang.Integer int28 = getFieldVisits16.Limit;
        java.util.List<java.lang.String> strList29 = getFieldVisits16.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        getFieldVisits16.Search = strList33;
        java.lang.String[] strArray48 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits51 = getFieldVisits16.setSamplingPlanIds((java.util.List<java.lang.String>) strList49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType53 = trendLineAnalysisServiceRequest52.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark56 = locationRemark54.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse57.setNextToken(instant58);
        locationRemark56.FromTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark62 = locationRemark56.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod65 = timeSeriesThresholdPeriod63.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription68 = locationDescription66.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType70 = null;
        controlConditionActivity69.ControlCleaned = controlCleanedType70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse72.setNextToken(instant73);
        controlConditionActivity69.DateCleaned = instant73;
        locationDescription68.LastModified = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod77 = timeSeriesThresholdPeriod65.setAppliedTime(instant73);
        locationRemark62.ToTime = instant73;
        trendLineAnalysisServiceRequest52.QueryFrom = instant73;
        getFieldVisits16.StartStartTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest81 = ratingCurveListServiceRequest14.setQueryTo(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest82 = timeSeriesUniqueIdListServiceRequest9.setChangesSinceToken(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest84 = timeSeriesUniqueIdListServiceRequest9.setParameter("");
        timeSeriesUniqueIdListServiceRequest9.ComputationIdentifier = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getFieldVisits51);
        org.junit.Assert.assertNull(trendLineAnalysisType53);
        org.junit.Assert.assertNotNull(locationRemark56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(locationRemark62);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod65);
        org.junit.Assert.assertNotNull(locationDescription68);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod77);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest81);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest82);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest84);
    }

    @Test
    public void test26531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26531");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        java.lang.String str2 = timeSeries0.getSubLocationIdentifier();
        java.lang.String str3 = timeSeries0.getComputationPeriodIdentifier();
        timeSeries0.LocationIdentifier = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.String str6 = timeSeries0.getLocationName();
        timeSeries0.Unit = "/AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26532");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.Unit = "/AQUARIUS/Acquisition/v2";
        referencePointPeriod0.Uncertainty = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection6 = referencePointPeriod0.MeasurementDirection;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(measurementDirection6);
    }

    @Test
    public void test26533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26533");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = methodOperation0.getOperationType();
        java.lang.Integer int2 = methodOperation0.StackPosition;
        java.lang.String str3 = methodOperation0.Comments;
        java.lang.String str4 = methodOperation0.getUser();
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26534");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.String str1 = codeTable0.DisplayName;
        codeTable0.SystemCode = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable5 = codeTable0.setSystemCode("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable7 = codeTable0.setIsSystem((java.lang.Boolean) false);
        java.lang.Boolean boolean8 = codeTable7.getIsSystem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableRequestBase codeTableRequestBase10 = codeTable7.setDisplayName("");
        java.lang.String str11 = codeTableRequestBase10.FormalName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(codeTable5);
        org.junit.Assert.assertNotNull(codeTable7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(codeTableRequestBase10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test26535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26535");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        java.lang.String str4 = postReflectedTimeSeries0.Parameter;
        postReflectedTimeSeries0.Comment = "/AQUARIUS/Provisioning/v1";
        java.lang.String str7 = postReflectedTimeSeries0.getComputationPeriodIdentifier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str4, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26536");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        java.lang.String str6 = metricConfiguration5.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str8 = metricConfiguration7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty9.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration7.setObservedProperty(observedProperty9);
        metricConfiguration7.IncludeChildren = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = metricConfiguration7.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str17 = metricConfiguration16.getId();
        metricConfiguration16.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration21 = metricConfiguration16.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration16.AggregationType = aggregationType22;
        metricConfiguration7.AggregationType = aggregationType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration5.setAggregationType(aggregationType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration5.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration29 = metricConfiguration5.setUseScoreRanges((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(metricConfiguration21);
        org.junit.Assert.assertTrue("'" + aggregationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertNotNull(metricConfiguration27);
        org.junit.Assert.assertNotNull(metricConfiguration29);
    }

    @Test
    public void test26537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26537");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        java.lang.String str2 = referencePoint0.getUniqueId();
        referencePoint0.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str5 = referencePoint0.getName();
        referencePoint0.DecommissionedReason = "";
        referencePoint0.Longitude = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest10.Publish = true;
        timeSeriesUniqueIdListServiceRequest10.Publish = false;
        java.lang.String str15 = timeSeriesUniqueIdListServiceRequest10.ComputationIdentifier;
        java.time.Instant instant16 = timeSeriesUniqueIdListServiceRequest10.ChangesSinceToken;
        java.lang.String str17 = timeSeriesUniqueIdListServiceRequest10.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest19 = timeSeriesUniqueIdListServiceRequest10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant21 = ratingCurveListServiceRequest20.QueryTo;
        java.lang.String str22 = ratingCurveListServiceRequest20.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest24 = ratingCurveListServiceRequest20.setRatingModelIdentifier("http");
        java.time.Instant instant25 = ratingCurveListServiceRequest24.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList27 = getFieldVisits26.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        java.util.ArrayList<java.lang.String> strList36 = putLocationTags35.TagUniqueIds;
        getFieldVisits26.ScheduleIds = strList36;
        java.lang.Integer int38 = getFieldVisits26.Limit;
        java.util.List<java.lang.String> strList39 = getFieldVisits26.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        getObservationsV2_40.SpecimenIds = strList43;
        getFieldVisits26.Search = strList43;
        java.lang.String[] strArray58 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits61 = getFieldVisits26.setSamplingPlanIds((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType63 = trendLineAnalysisServiceRequest62.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark66 = locationRemark64.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        locationRemark66.FromTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark72 = locationRemark66.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod75 = timeSeriesThresholdPeriod73.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription78 = locationDescription76.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType80 = null;
        controlConditionActivity79.ControlCleaned = controlCleanedType80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        controlConditionActivity79.DateCleaned = instant83;
        locationDescription78.LastModified = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod87 = timeSeriesThresholdPeriod75.setAppliedTime(instant83);
        locationRemark72.ToTime = instant83;
        trendLineAnalysisServiceRequest62.QueryFrom = instant83;
        getFieldVisits26.StartStartTime = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest91 = ratingCurveListServiceRequest24.setQueryTo(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest92 = timeSeriesUniqueIdListServiceRequest19.setChangesSinceToken(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint93 = referencePoint0.setPrimarySinceDate(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint95 = referencePoint93.setDecommissionedReason("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str5, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest19);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest24);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(getFieldVisits61);
        org.junit.Assert.assertNull(trendLineAnalysisType63);
        org.junit.Assert.assertNotNull(locationRemark66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationRemark72);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod75);
        org.junit.Assert.assertNotNull(locationDescription78);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod87);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest91);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest92);
        org.junit.Assert.assertNotNull(referencePoint93);
        org.junit.Assert.assertNotNull(referencePoint95);
    }

    @Test
    public void test26538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26538");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_6 = getObservationExportIIV2_0.setActivityCustomId("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_6);
    }

    @Test
    public void test26539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26539");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        java.lang.String str3 = categoricalResult2.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = categoricalResult2.setValue("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        observationMinimal1.CategoricalResult = categoricalResult5;
        categoricalResult5.Value = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_0.setCategoricalResult(categoricalResult5);
        java.time.OffsetDateTime offsetDateTime10 = putObservationV2_0.ObservedTime;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(offsetDateTime10);
    }

    @Test
    public void test26540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26540");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = putActivityTemplate6.setType(activityTemplateType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate13 = putActivityTemplate11.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate16 = postFieldVisitActivityWithTemplate14.setAuditAttributes(auditAttributes15);
        java.lang.String str17 = postFieldVisitActivityWithTemplate16.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate19 = postFieldVisitActivityWithTemplate16.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.AIR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate21 = postFieldVisitActivityWithTemplate19.setMedium(mediumType20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = postFieldVisitActivityWithTemplate22.setAuditAttributes(auditAttributes23);
        java.lang.String str25 = postFieldVisitActivityWithTemplate24.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate24.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = postFieldVisitActivityWithTemplate28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation33 = observation31.setPlannedFieldResult(plannedFieldResult32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction34 = null;
        observation33.LabInstruction = labInstruction34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation37 = observation33.setStatistics(observationStatistics36);
        java.time.OffsetDateTime offsetDateTime38 = observation37.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = null;
        quantity39.Unit = unit40;
        observation37.Depth = quantity39;
        postFieldVisitActivityWithTemplate30.Depth = quantity39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate44 = postFieldVisitActivityWithTemplate24.setDepth(quantity39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate46.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList51 = specimenTemplate50.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = specimenTemplate52.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList57 = specimenTemplate56.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate46, specimenTemplate49, specimenTemplate50, specimenTemplate54, specimenTemplate55, specimenTemplate56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59, specimenTemplateArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate61 = postFieldVisitActivityWithTemplate45.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate62 = postFieldVisitActivityWithTemplate44.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59);
        postFieldVisitActivityWithTemplate19.SpecimenTemplates = specimenTemplateList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate64 = putActivityTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_67 = postObservationV2_65.setLabInstruction(labInstruction66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails70 = labResultDetails68.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan71.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime74 = samplingPlan71.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit77 = putUnitGroupWithUnit75.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType78 = putUnitGroupWithUnit75.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity82 = samplingPlanPlannedActivity80.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = auditAttributes83.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity82.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = samplingPlanPlannedActivity82.AuditAttributes;
        putAccessGroup79.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit89 = putUnitGroupWithUnit75.setAuditAttributes(auditAttributes87);
        samplingPlan71.AuditAttributes = auditAttributes87;
        java.time.OffsetDateTime offsetDateTime91 = null;
        auditAttributes87.ModificationTime = offsetDateTime91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails93 = labResultDetails68.setAuditAttributes(auditAttributes87);
        postObservationV2_65.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate95 = putActivityTemplate11.setAuditAttributes(auditAttributes87);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList96 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate97 = putActivityTemplate11.setSpecimenTemplates(specimenTemplateList96);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putActivityTemplate11);
        org.junit.Assert.assertNotNull(putActivityTemplate13);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate19);
        org.junit.Assert.assertTrue("'" + mediumType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.AIR + "'", mediumType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.AIR));
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate21);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate30);
        org.junit.Assert.assertNotNull(observation33);
        org.junit.Assert.assertNotNull(observation37);
        org.junit.Assert.assertNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate44);
        org.junit.Assert.assertNull(labInstructionTemplateList51);
        org.junit.Assert.assertNotNull(specimenTemplate54);
        org.junit.Assert.assertNull(labInstructionTemplateList57);
        org.junit.Assert.assertNotNull(specimenTemplateArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate61);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate62);
        org.junit.Assert.assertNotNull(putActivityTemplate64);
        org.junit.Assert.assertNotNull(postObservationV2_67);
        org.junit.Assert.assertNotNull(labResultDetails70);
        org.junit.Assert.assertNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit77);
        org.junit.Assert.assertNull(unitGroupSystemCodeType78);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity82);
        org.junit.Assert.assertNotNull(auditAttributes85);
        org.junit.Assert.assertNotNull(auditAttributes87);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit89);
        org.junit.Assert.assertNotNull(labResultDetails93);
        org.junit.Assert.assertNotNull(putActivityTemplate95);
        org.junit.Assert.assertNotNull(putActivityTemplate97);
    }

    @Test
    public void test26541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26541");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = adcpDischargeActivity16.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = adcpDischargeActivity18.getDischargeCoefficientVariation();
        adcpDischargeActivity18.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = dischargeSummary22.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary22.Discharge;
        java.lang.Integer int25 = dischargeSummary22.getGradeCode();
        java.lang.String str26 = dischargeSummary22.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary22.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        adcpDischargeActivity18.Area = datumConvertedQuantityWithDisplay27;
        reading15.Uncertainty = datumConvertedQuantityWithDisplay27;
        java.lang.Integer int31 = reading15.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading33 = reading15.setUnit("2021.8.9990");
        java.lang.Boolean boolean34 = reading15.IsValid;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNotNull(adcpDischargeActivity18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(reading33);
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test26542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26542");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition();
        java.lang.Boolean boolean1 = nameTagDefinition0.isAppliesToLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition3 = nameTagDefinition0.setName("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition5 = nameTagDefinition3.setName("9999-12-31T23:59:59.9999999Z");
        java.lang.String str6 = nameTagDefinition5.getName();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(nameTagDefinition3);
        org.junit.Assert.assertNotNull(nameTagDefinition5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str6, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test26543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26543");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        java.lang.Object obj1 = timeSeriesUniqueIdListServiceRequest0.getResponseType();
        timeSeriesUniqueIdListServiceRequest0.LocationIdentifier = "MinDuration";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList4 = timeSeriesUniqueIdListServiceRequest0.getExtendedFilters();
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest7 = timeSeriesUniqueIdListServiceRequest0.setComputationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest9 = timeSeriesUniqueIdListServiceRequest0.setChangeEventType("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertNull(extendedAttributeFilterList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest7);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest9);
    }

    @Test
    public void test26544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26544");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        inputPart0.ContentTypeFromMessage = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart5 = inputPart3.setHeaders((java.lang.Object) interpolationType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType6 = inputPart3.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart8 = inputPart3.setMediaType(mediaType7);
        java.lang.String str9 = mediaType7.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart10 = inputPart0.setMediaType(mediaType7);
        mediaType7.Type = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        java.lang.Boolean boolean13 = mediaType7.getWildcardSubtype();
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart5);
        org.junit.Assert.assertNull(mediaType6);
        org.junit.Assert.assertNotNull(inputPart8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(inputPart10);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test26545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26545");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup();
        java.lang.String str1 = unitGroup0.getGroupIdentifier();
        java.lang.Integer int2 = unitGroup0.TimeDimension;
        java.lang.String str3 = unitGroup0.getDisplayName();
        unitGroup0.CurrentDimension = 4;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26546");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = null;
        analyticalGroupItem0.AnalysisMethod = analysisMethod3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty5.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = observedProperty5.getUpperLimit();
        java.lang.String str9 = observedProperty5.Id;
        java.lang.String str10 = observedProperty5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = analyticalGroupItem0.setObservedProperty(observedProperty5);
        analyticalGroupItem0.HoldingTime = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = analyticalGroupItem0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty15 = analyticalGroupItem0.ObservedProperty;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(analyticalGroupItem11);
        org.junit.Assert.assertNotNull(observedProperty14);
        org.junit.Assert.assertNotNull(observedProperty15);
    }

    @Test
    public void test26547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26547");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.getCrossSectionSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult2 = null;
        fieldVisitDataServiceResponse0.DatumConversionResult = datumConversionResult2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult4 = fieldVisitDataServiceResponse0.getDatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.lang.Integer int6 = inspectionActivity5.NumberOfReadingsNotDatumConverted;
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity5;
        java.lang.String str8 = inspectionActivity5.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck> calibrationCheckList9 = inspectionActivity5.CalibrationChecks;
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNull(datumConversionResult4);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(calibrationCheckList9);
    }

    @Test
    public void test26548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26548");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase2 = locationDatumPeriod0.setComment("'.'SSSSSSS");
        java.lang.String str3 = locationDatumPeriod0.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase5 = locationDatumPeriod0.setComment("MaxInstant");
        locationDatumPeriod0.Uncertainty = 0.0d;
        java.lang.String str8 = locationDatumPeriod0.Comment;
        locationDatumPeriod0.AppliedByUser = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum11 = locationDatumPeriod0.getReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum12 = locationDatumPeriod0.getReferenceStandard();
        org.junit.Assert.assertNotNull(locationDatumPeriodBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MaxInstant" + "'", str8, "MaxInstant");
        org.junit.Assert.assertNull(standardReferenceDatum11);
        org.junit.Assert.assertNull(standardReferenceDatum12);
    }

    @Test
    public void test26549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26549");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = gradeOperation0.getOperationType();
        java.lang.String str2 = gradeOperation0.User;
        java.lang.String str3 = gradeOperation0.User;
        java.lang.String str4 = gradeOperation0.getUser();
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26550");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = labReport0.Laboratory;
        java.lang.String str2 = labReport0.CaseNarrative;
        org.junit.Assert.assertNull(laboratory1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test26551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26551");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = null;
        postExtendedAttribute0.DataType = dataType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType4 = postExtendedAttribute3.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType5 = postExtendedAttribute3.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str7 = postExtendedAttribute6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType8 = postExtendedAttribute6.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity11 = samplingPlanPlannedActivity9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = auditAttributes12.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity11.AuditAttributes = auditAttributes12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = samplingPlanPlannedActivity11.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute17 = postExtendedAttribute6.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str19 = extendedAttributeListItem18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem21 = extendedAttributeListItem18.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str24 = extendedAttributeListItem23.getId();
        java.lang.String str25 = extendedAttributeListItem23.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str27 = extendedAttributeListItem26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str29 = extendedAttributeListItem28.CustomId;
        extendedAttributeListItem28.Id = "POST";
        java.lang.String str32 = extendedAttributeListItem28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str34 = extendedAttributeListItem33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str36 = extendedAttributeListItem35.CustomId;
        extendedAttributeListItem35.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str40 = extendedAttributeListItem39.getId();
        java.lang.String str41 = extendedAttributeListItem39.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem18, extendedAttributeListItem22, extendedAttributeListItem23, extendedAttributeListItem26, extendedAttributeListItem28, extendedAttributeListItem33, extendedAttributeListItem35, extendedAttributeListItem39 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList43, extendedAttributeListItemArray42);
        postExtendedAttribute17.DropDownListItems = extendedAttributeListItemList43;
        postExtendedAttribute3.DropDownListItems = extendedAttributeListItemList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute47 = postExtendedAttribute0.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType48 = postExtendedAttribute0.AppliesToType;
        org.junit.Assert.assertNull(dataType4);
        org.junit.Assert.assertNull(appliesToType5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(dataType8);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity11);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(auditAttributes16);
        org.junit.Assert.assertNotNull(postExtendedAttribute17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(extendedAttributeListItem21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "POST" + "'", str32, "POST");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(postExtendedAttribute47);
        org.junit.Assert.assertNull(appliesToType48);
    }

    @Test
    public void test26552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26552");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType1 = schedule0.getSamplingLocationGroupSelectionType();
        schedule0.CustomId = "";
        org.junit.Assert.assertNull(samplingLocationGroupSelectionType1);
    }

    @Test
    public void test26553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26553");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = putActivity0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity5 = null;
        putActivity4.PlannedActivity = plannedActivity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = null;
        putActivity7.PlannedActivity = plannedActivity8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity10.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity10.setPlannedActivity(plannedActivity13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str16 = samplingContextTag15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag15.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = samplingContextTag18.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str24 = samplingContextTag23.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        samplingContextTag23.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = samplingContextTag27.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag20, samplingContextTag21, samplingContextTag23, samplingContextTag30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32, samplingContextTagArray31);
        postActivity10.SamplingContextTags = samplingContextTagList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity35 = putActivity7.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32);
        putActivity4.SamplingContextTags = samplingContextTagList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity37 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList32);
        java.time.OffsetDateTime offsetDateTime38 = putActivity0.getEndTime();
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNotNull(samplingContextTag20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(samplingContextTag30);
        org.junit.Assert.assertNotNull(samplingContextTagArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putActivity35);
        org.junit.Assert.assertNotNull(putActivity37);
        org.junit.Assert.assertNull(offsetDateTime38);
    }

    @Test
    public void test26554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26554");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen2 = searchResultSpecimen0.setTotalCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList3 = searchResultSpecimen0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen5 = searchResultSpecimen0.setTotalCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList6 = searchResultSpecimen5.getDomainObjects();
        org.junit.Assert.assertNotNull(searchResultSpecimen2);
        org.junit.Assert.assertNull(specimenList3);
        org.junit.Assert.assertNotNull(searchResultSpecimen5);
        org.junit.Assert.assertNull(specimenList6);
    }

    @Test
    public void test26555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26555");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        locationDescriptionListServiceRequest0.Publish = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList5 = getExportSpecimens4.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant7 = qualifier6.DateApplied;
        java.lang.String str8 = qualifier6.User;
        java.lang.String str9 = qualifier6.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = qualifier6.setDateApplied(instant13);
        getExportSpecimens4.Before = instant13;
        java.util.List<java.lang.String> strList18 = getExportSpecimens4.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getLabReportIds();
        importItem19.Errors = getObservationsV2_20;
        java.lang.Object obj37 = importItem19.getExistingItem();
        java.util.List<java.lang.String> strList38 = importItem19.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        getObservationsV2_40.SpecimenIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray50 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags46.setTagUniqueIds(strList51);
        getObservationsV2_40.QualityControlTypes = strList51;
        java.util.List<java.lang.String> strList55 = getObservationsV2_40.getLabReportIds();
        importItem39.Errors = getObservationsV2_40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList58 = getObservationsV2_57.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.QualityControlTypes = strList70;
        getObservationsV2_57.ResultGrades = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem75 = importItem39.setFields((java.util.List<java.lang.String>) strList70);
        importItem19.Fields = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens77 = getExportSpecimens4.setSamplingLocationIds((java.util.List<java.lang.String>) strList70);
        locationDescriptionListServiceRequest0.TagKeys = strList70;
        java.util.ArrayList<java.lang.String> strList79 = locationDescriptionListServiceRequest0.TagKeys;
        java.util.ArrayList<java.lang.String> strList80 = locationDescriptionListServiceRequest0.TagNames;
        java.time.Instant instant81 = locationDescriptionListServiceRequest0.ChangesSinceToken;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(qualifier16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNotNull(importItem75);
        org.junit.Assert.assertNotNull(getExportSpecimens77);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNull(instant81);
    }

    @Test
    public void test26556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26556");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setId("/AQUARIUS/Acquisition/v2");
        java.lang.String str3 = postSpreadsheetTemplate2.Description;
        java.lang.String str4 = postSpreadsheetTemplate2.getDescription();
        java.lang.String str5 = postSpreadsheetTemplate2.getId();
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test26557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26557");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem();
        putFixedDropDownListItem0.DropDownListId = "/AQUARIUS/Provisioning/v1";
        java.lang.String str3 = putFixedDropDownListItem0.DisplayName;
        java.lang.String str4 = putFixedDropDownListItem0.getDropDownListId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str4, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test26558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26558");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon18.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = putTaxon18.getComment();
        putTaxon18.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType25 = postObservedProperty24.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setCategoricalResult(categoricalResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33, importHistoryEventSimpleArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        observedProperty26.ImportHistoryEventSimples = importHistoryEventSimpleList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        java.lang.String str40 = putTaxon17.ParentId;
        java.lang.String str41 = putTaxon17.ItisTsn;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisType25);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNotNull(putTaxon38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str40, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test26559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26559");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList5 = standardDefinition4.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList8, observationStandardArray7);
        standardDefinition4.ObservationStandards = observationStandardList8;
        java.lang.String str11 = standardDefinition4.getId();
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(samplingLocationSimpleList5);
        org.junit.Assert.assertNull(interval6);
        org.junit.Assert.assertNotNull(observationStandardArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test26560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26560");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        java.lang.String str30 = getGroupedObservationsV2_26.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_26.setCustomId("MinDuration");
        java.time.Instant instant33 = getGroupedObservationsV2_26.StartObservedTime;
        java.util.List<java.lang.String> strList34 = getGroupedObservationsV2_26.getLabResultLabAnalysisMethodIds();
        java.time.Instant instant35 = null;
        getGroupedObservationsV2_26.StartObservedTime = instant35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_38 = getGroupedObservationsV2_26.setImportHistoryEventId("");
        java.util.List<java.lang.String> strList39 = getGroupedObservationsV2_38.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList40 = getGroupedObservationsV2_38.getResultGrades();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
    }

    @Test
    public void test26561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26561");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan4.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan4.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup9 = samplingPlan4.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan11 = samplingPlan4.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag12 = putTag3.setAuditAttributes(auditAttributes10);
        putUnitGroupWithUnit0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType14 = putUnitGroupWithUnit0.SystemCode;
        java.lang.Boolean boolean15 = putUnitGroupWithUnit0.getSupportsConversion();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = null;
        postUnitGroup16.AuditAttributes = auditAttributes17;
        postUnitGroup16.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = postUnitGroup16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType22 = postUnitGroup16.getSystemCode();
        java.lang.Boolean boolean23 = postUnitGroup16.getSupportsConversion();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup25 = postUnitGroup16.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str27 = putUnitGroup26.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType28 = putUnitGroup26.getSystemCode();
        java.lang.String str29 = putUnitGroup26.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str31 = putUnitGroup30.getCustomId();
        putUnitGroup30.SupportsConversion = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit36 = putUnitGroupWithUnit34.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType37 = putUnitGroupWithUnit34.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit39 = putUnitGroupWithUnit34.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType40 = putUnitGroupWithUnit34.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType41 = null;
        putUnitGroupWithUnit34.SystemCode = unitGroupSystemCodeType41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit44 = putUnitGroupWithUnit34.setSystemCode(unitGroupSystemCodeType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup45 = putUnitGroup30.setSystemCode(unitGroupSystemCodeType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup46 = putUnitGroup26.setSystemCode(unitGroupSystemCodeType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup47 = postUnitGroup25.setSystemCode(unitGroupSystemCodeType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit48 = putUnitGroupWithUnit0.setSystemCode(unitGroupSystemCodeType43);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup9);
        org.junit.Assert.assertNotNull(samplingPlan11);
        org.junit.Assert.assertNotNull(putTag12);
        org.junit.Assert.assertNull(unitGroupSystemCodeType14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(unitGroupSystemCodeType22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(postUnitGroup25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(unitGroupSystemCodeType28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit36);
        org.junit.Assert.assertNull(unitGroupSystemCodeType37);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit39);
        org.junit.Assert.assertNull(unitGroupSystemCodeType40);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit44);
        org.junit.Assert.assertNotNull(putUnitGroup45);
        org.junit.Assert.assertNotNull(putUnitGroup46);
        org.junit.Assert.assertNotNull(postUnitGroup47);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit48);
    }

    @Test
    public void test26562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26562");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip4 = postFieldTrip2.setParticipants("9999-12-31T23:59:59.999Z");
        java.time.OffsetDateTime offsetDateTime5 = null;
        postFieldTrip2.EndTime = offsetDateTime5;
        postFieldTrip2.Participants = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        java.lang.String str9 = postFieldTrip2.Notes;
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNotNull(postFieldTrip4);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test26563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26563");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        volumetricDischargeActivity0.IsObserved = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity4 = volumetricDischargeActivity0.setIsObserved((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity4);
    }

    @Test
    public void test26564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26564");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = putObservationV2_2.LabResultDetails;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier7 = putObservationV2_2.getNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity14 = null;
        putActivity13.PlannedActivity = plannedActivity14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity16.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = postActivity16.setPlannedActivity(plannedActivity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag21.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag26 = samplingContextTag24.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str30 = samplingContextTag29.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        samplingContextTag29.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag33.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag26, samplingContextTag27, samplingContextTag29, samplingContextTag36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38, samplingContextTagArray37);
        postActivity16.SamplingContextTags = samplingContextTagList38;
        putActivity13.SamplingContextTags = samplingContextTagList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity12.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str44 = collectionMethod43.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod46 = collectionMethod43.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity47 = postActivity12.setCollectionMethod(collectionMethod46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan48.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType51 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan48.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup53 = samplingPlan48.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan55 = samplingPlan48.setAuditAttributes(auditAttributes54);
        collectionMethod46.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_57 = putObservationV2_2.setCollectionMethod(collectionMethod46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier58 = putObservationV2_2.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList60 = fieldVisit59.Attachments;
        java.time.OffsetDateTime offsetDateTime61 = null;
        fieldVisit59.EndTime = offsetDateTime61;
        java.lang.String str63 = fieldVisit59.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit65 = fieldVisit59.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple66 = fieldVisit59.Project;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_67 = putObservationV2_2.setFieldVisit(fieldVisit59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod68 = putObservationV2_67.CollectionMethod;
        collectionMethod68.IdentifierOrganization = "-PT87591240H";
        collectionMethod68.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNull(labResultDetails6);
        org.junit.Assert.assertNull(nullMeasureQualifier7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNotNull(samplingContextTag26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNotNull(samplingContextTagArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(collectionMethod46);
        org.junit.Assert.assertNotNull(postActivity47);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup53);
        org.junit.Assert.assertNotNull(samplingPlan55);
        org.junit.Assert.assertNotNull(putObservationV2_57);
        org.junit.Assert.assertNull(nullMeasureQualifier58);
        org.junit.Assert.assertNull(domainObjectAttachmentList60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(fieldVisit65);
        org.junit.Assert.assertNull(projectSimple66);
        org.junit.Assert.assertNotNull(putObservationV2_67);
        org.junit.Assert.assertNotNull(collectionMethod68);
    }

    @Test
    public void test26565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26565");
        com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder multipartBuilder0 = new com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder();
        byte[] byteArray1 = multipartBuilder0.toByteArray();
        java.lang.String str2 = multipartBuilder0.getContentType();
        byte[] byteArray3 = multipartBuilder0.toByteArray();
        java.lang.String str4 = multipartBuilder0.getContentType();
        multipartBuilder0.finish();
        multipartBuilder0.finish();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****" + "'", str2, "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****" + "'", str4, "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
    }

    @Test
    public void test26566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26566");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setFolderName("2021.4.62.0");
        java.lang.String str7 = reportPlugin6.FolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin9 = reportPlugin6.setIsEnabled((java.lang.Boolean) false);
        reportPlugin9.UniqueId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin13 = reportPlugin9.setFolderName("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        reportPlugin13.UniqueId = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2021.4.62.0" + "'", str7, "2021.4.62.0");
        org.junit.Assert.assertNotNull(reportPlugin9);
        org.junit.Assert.assertNotNull(reportPlugin13);
    }

    @Test
    public void test26567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26567");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        java.lang.String str2 = reading0.Manufacturer;
        java.lang.String str3 = reading0.getSerialNumber();
        reading0.Parameter = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str8 = reading0.getMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = groundWaterMeasurement9.WaterLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = groundWaterMeasurement9.getWaterLevel();
        reading0.GroundWaterMeasurement = groundWaterMeasurement9;
        reading0.SensorUniqueId = "PT87591240H";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNull(doubleWithDisplay11);
    }

    @Test
    public void test26568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26568");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.Boolean boolean3 = postDatumConvertedTimeSeries0.isSourceIsLocalAssumedDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries5 = postDatumConvertedTimeSeries0.setTimeSeriesUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str7 = timeSeries6.ComputationIdentifier;
        java.lang.String str8 = timeSeries6.getSubLocationIdentifier();
        java.lang.String str9 = timeSeries6.UniqueId;
        java.lang.String str10 = timeSeries6.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation11.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15, extendedAttributeValueArray14);
        postLocation11.ExtendedAttributeValues = extendedAttributeValueList15;
        timeSeries6.ExtendedAttributeValues = extendedAttributeValueList15;
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList15;
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + false + "'", boolean3, false);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test26569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26569");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str2 = getObservationsV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        getObservationsV2_1.ProjectIds = strList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = putBulkEditResultGradesV2_0.setTaxonIds((java.util.List<java.lang.String>) strList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str12 = deleteFieldVisits11.getSort();
        java.util.List<java.lang.String> strList13 = deleteFieldVisits11.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        java.util.List<java.lang.String> strList21 = getObservationsV2_14.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        getObservationsV2_14.StartResultTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType30 = null;
        controlConditionActivity29.ControlCleaned = controlCleanedType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse32.setNextToken(instant33);
        controlConditionActivity29.DateCleaned = instant33;
        timeAlignedDataServiceRequest28.QueryFrom = instant33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.ActivityIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest52 = timeAlignedDataServiceRequest28.setTimeSeriesOutputUnitIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_14.setCollectionMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits54 = deleteFieldVisits11.setSamplingPlanIds((java.util.List<java.lang.String>) strList48);
        putBulkEditResultGradesV2_0.ProjectIds = strList48;
        java.lang.String str56 = putBulkEditResultGradesV2_0.ImportHistoryEventId;
        java.lang.String str57 = putBulkEditResultGradesV2_0.CustomId;
        java.lang.String str58 = putBulkEditResultGradesV2_0.getCursor();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest52);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(deleteFieldVisits54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test26570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26570");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.IdentifierOrganization;
        putCollectionMethod0.Id = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.lang.String str4 = putCollectionMethod0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26571");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem0.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem4 = searchResultExtendedAttributeListItem0.setCursor("9999-12-31T23:59:59.999Z");
        java.lang.String str5 = searchResultExtendedAttributeListItem0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList6 = searchResultExtendedAttributeListItem0.getDomainObjects();
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeListItem4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(extendedAttributeListItemList6);
    }

    @Test
    public void test26572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26572");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        specimenWithObservations0.NumberOfRequestedObservations = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup6 = specimenWithObservations0.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setStatistics(observationStatistics12);
        java.time.OffsetDateTime offsetDateTime14 = observation13.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList15 = observation13.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList19, ruleValidationDetailsArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation13.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList24, extendedAttributeArray23);
        postActivity22.ExtendedAttributes = extendedAttributeList24;
        observation21.ExtendedAttributes = extendedAttributeList24;
        specimenWithObservations0.ExtendedAttributes = extendedAttributeList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject31 = putProject29.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject31.Approved = true;
        java.lang.String str34 = putProject31.getCustomId();
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject36 = putProject31.setStartTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty37.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        analyticalGroup40.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup44 = analyticalGroup40.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str46 = samplingContextTag45.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag48 = samplingContextTag45.setAuditAttributes(auditAttributes47);
        java.lang.String str49 = samplingContextTag45.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putDetectioncondition51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition54 = putDetectioncondition51.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = samplingPlanPlannedActivity57.AuditAttributes;
        putDetectioncondition51.AuditAttributes = auditAttributes62;
        analysisMethodSimple50.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag65 = samplingContextTag45.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup66 = analyticalGroup40.setAuditAttributes(auditAttributes62);
        java.lang.String str67 = auditAttributes62.CreationUserProfileId;
        observedProperty37.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject69 = putProject31.setAuditAttributes(auditAttributes62);
        specimenWithObservations0.AuditAttributes = auditAttributes62;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList71 = specimenWithObservations0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen74 = putSpecimen72.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str75 = putSpecimen74.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer76 = putSpecimen74.getShippingContainer();
        java.lang.String str77 = putSpecimen74.getFiltrationComment();
        java.lang.String str78 = putSpecimen74.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList80 = specimenWithObservations79.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType81 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations82 = specimenWithObservations79.setStatus(specimenViewStatusType81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType83 = specimenWithObservations82.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen84 = putSpecimen74.setStatus(specimenViewStatusType83);
        specimenWithObservations0.Status = specimenViewStatusType83;
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNull(analyticalGroup6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNull(importHistoryEventSimpleList15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(extendedAttributeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(putProject31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(putProject36);
        org.junit.Assert.assertNotNull(analyticalGroup44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(samplingContextTag48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNotNull(putDetectioncondition54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(samplingContextTag65);
        org.junit.Assert.assertNotNull(analyticalGroup66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "'.'SSSSSSS" + "'", str67, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putProject69);
        org.junit.Assert.assertNotNull(extendedAttributeList71);
        org.junit.Assert.assertNotNull(putSpecimen74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(shippingContainer76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(extendedAttributeList80);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType81 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType81.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations82);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType83 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType83.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(putSpecimen84);
    }

    @Test
    public void test26573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26573");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag();
        java.lang.Integer int1 = searchResultSamplingContextTag0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag3 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag5 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = null;
        putActivity6.Depth = quantity7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList10, metricResultArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity6.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity14 = putActivity12.setSamplingLocation(samplingLocation13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = indexConfiguration15.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = indexConfiguration15.AuditAttributes;
        indexConfiguration15.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = putActivity14.setIndexConfiguration(indexConfiguration15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity22 = null;
        putActivity21.PlannedActivity = plannedActivity22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        putActivity24.PlannedActivity = plannedActivity25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity27.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = postActivity27.setPlannedActivity(plannedActivity30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = samplingContextTag35.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str39 = samplingContextTag38.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        samplingContextTag40.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str45 = samplingContextTag44.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag47 = samplingContextTag44.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag37, samplingContextTag38, samplingContextTag40, samplingContextTag47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49, samplingContextTagArray48);
        postActivity27.SamplingContextTags = samplingContextTagList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity52 = putActivity24.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49);
        putActivity21.SamplingContextTags = samplingContextTagList49;
        putActivity20.SamplingContextTags = samplingContextTagList49;
        searchResultSamplingContextTag0.DomainObjects = samplingContextTagList49;
        java.lang.String str56 = searchResultSamplingContextTag0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag58 = searchResultSamplingContextTag0.setCursor("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str59 = searchResultSamplingContextTag58.getCursor();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag3);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag5);
        org.junit.Assert.assertNotNull(metricResultArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNotNull(putActivity14);
        org.junit.Assert.assertNull(unit16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putActivity20);
        org.junit.Assert.assertNotNull(postActivity31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNotNull(samplingContextTag37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(samplingContextTag47);
        org.junit.Assert.assertNotNull(samplingContextTagArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putActivity52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str59, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
    }

    @Test
    public void test26574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26574");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon4 = putTaxon0.setItisTsn("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str5 = putTaxon4.ItisComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon7 = putTaxon4.setScientificName("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str8 = putTaxon7.ItisUrl;
        java.lang.Object obj9 = putTaxon7.getResponseType();
        java.lang.String str10 = putTaxon7.getItisUrl();
        org.junit.Assert.assertNotNull(putTaxon4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putTaxon7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test26575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26575");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str1 = postExtendedAttribute0.getKey();
        postExtendedAttribute0.DefaultValue = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute5 = postExtendedAttribute0.setRequired((java.lang.Boolean) true);
        java.lang.String str6 = editableExtendedAttribute5.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList8 = getExportSpecimens7.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant10 = qualifier9.DateApplied;
        java.lang.String str11 = qualifier9.User;
        java.lang.String str12 = qualifier9.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj14 = timeAlignedDataServiceRequest13.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest13.setQueryFrom(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = qualifier9.setDateApplied(instant16);
        getExportSpecimens7.Before = instant16;
        java.util.List<java.lang.String> strList21 = getExportSpecimens7.getLaboratoryIds();
        java.util.List<java.lang.String> strList22 = getExportSpecimens7.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType24 = samplingPlanPlannedActivityRecurrence23.RecurrenceFrequency;
        java.util.List<java.lang.String> strList25 = samplingPlanPlannedActivityRecurrence23.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier28 = putQualifier26.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray40 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags36.setTagUniqueIds(strList41);
        getObservationsV2_30.QualityControlTypes = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = timeAlignedDataServiceRequest29.setTimeSeriesUniqueIds(strList41);
        putQualifier26.GroupIdentifiers = strList41;
        java.util.ArrayList<java.lang.String> strList47 = putQualifier26.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence23.MonthsOfYear = strList47;
        getExportSpecimens7.ActivityTypes = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute50 = editableExtendedAttribute5.setPickListValues(strList47);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(editableExtendedAttribute5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNotNull(qualifier19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(recurrenceFrequencyType24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(putQualifier28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(editableExtendedAttribute50);
    }

    @Test
    public void test26576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26576");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        roleFlattened0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean3 = roleFlattened0.CanEditAppendConfigurations;
        java.lang.String str4 = roleFlattened0.getName();
        java.lang.Boolean boolean5 = roleFlattened0.isCanEditData();
        roleFlattened0.CanAddData = true;
        java.util.ArrayList<java.lang.String> strList8 = roleFlattened0.RoleApprovalTransitions;
        roleFlattened0.CanRemoveFieldVisits = true;
        java.lang.Boolean boolean11 = roleFlattened0.CanEditLocationDetails;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test26577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26577");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList39 = getSpecimens38.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList41 = getExportSpecimens40.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant43 = qualifier42.DateApplied;
        java.lang.String str44 = qualifier42.User;
        java.lang.String str45 = qualifier42.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj47 = timeAlignedDataServiceRequest46.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse48.setNextToken(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = timeAlignedDataServiceRequest46.setQueryFrom(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier52 = qualifier42.setDateApplied(instant49);
        getExportSpecimens40.Before = instant49;
        java.util.List<java.lang.String> strList54 = getExportSpecimens40.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_57.setDataClassifications((java.util.List<java.lang.String>) strList61);
        postTag56.PickListValues = strList61;
        java.util.ArrayList<java.lang.String> strList65 = postTag56.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor66 = processor55.setInputTimeSeriesUniqueIds(strList65);
        getExportSpecimens40.SamplingLocationGroupIds = strList65;
        getSpecimens38.SpecimenStatuses = strList65;
        deleteActivities37.SamplingLocationIds = strList65;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest51);
        org.junit.Assert.assertNotNull(qualifier52);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(processor66);
    }

    @Test
    public void test26578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26578");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        java.lang.String str1 = searchResultExtendedAttributeListItem0.getCursor();
        searchResultExtendedAttributeListItem0.TotalCount = (-1);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test26579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26579");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier2 = postNullMeasureQualifier0.setName("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier4 = postNullMeasureQualifier0.setName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier6 = postNullMeasureQualifier4.setName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier8 = postNullMeasureQualifier6.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier10 = postNullMeasureQualifier6.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str11 = postNullMeasureQualifier10.Description;
        org.junit.Assert.assertNotNull(postNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier4);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier6);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier8);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test26580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26580");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity4 = fieldVisitDataServiceResponse3.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity8 = gageHeightAtZeroFlowActivity6.setApplicableSince(instant7);
        java.lang.Boolean boolean9 = gageHeightAtZeroFlowActivity6.IsValid;
        fieldVisitDataServiceResponse3.GageHeightAtZeroFlowActivity = gageHeightAtZeroFlowActivity6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails();
        gageHeightAtZeroFlowActivity6.CalculatedDetails = gageHeightAtZeroFlowCalculatedDetails11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = gageHeightAtZeroFlowCalculatedDetails11.DepthCertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = gageHeightAtZeroFlowCalculatedDetails11.getDepthCertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = vertical15.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical15.VerticalType = verticalType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation21 = velocityObservation19.setDeploymentMethod(deploymentMethodType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation24 = velocityObservation22.setDeploymentMethod(deploymentMethodType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList26, velocityDepthObservationArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation28 = velocityObservation24.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation29 = velocityObservation19.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical30 = vertical15.setVelocityObservation(velocityObservation19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical32 = vertical30.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails33 = gageHeightAtZeroFlowCalculatedDetails11.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = gageHeightAtZeroFlowCalculatedDetails33.getStage();
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(levelSurveyActivity4);
        org.junit.Assert.assertNull(controlConditionActivity5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNull(doubleWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertTrue("'" + verticalType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation21);
        org.junit.Assert.assertTrue("'" + deploymentMethodType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation24);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(velocityObservation28);
        org.junit.Assert.assertNotNull(velocityObservation29);
        org.junit.Assert.assertNotNull(vertical30);
        org.junit.Assert.assertNotNull(vertical32);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowCalculatedDetails33);
        org.junit.Assert.assertNull(doubleWithDisplay34);
    }

    @Test
    public void test26581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26581");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.Boolean boolean2 = postSpecimen0.Filtered;
        java.lang.Integer int3 = postSpecimen0.getNumberOfReceivedObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen6 = putSpecimen4.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str7 = putSpecimen4.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen9 = putSpecimen4.setTemplateCreatedFrom(specimenTemplate8);
        putSpecimen4.NumberOfReceivedObservations = 0;
        java.lang.String str12 = putSpecimen4.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList14 = specimenTemplate13.LabInstructionTemplates;
        java.lang.String str15 = specimenTemplate13.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen4.setTemplateCreatedFrom(specimenTemplate13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen17 = postSpecimen0.setTemplateCreatedFrom(specimenTemplate13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity18 = postSpecimen0.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str20 = shippingContainer19.getTrackingId();
        java.lang.String str21 = shippingContainer19.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = shippingContainer19.getAuditAttributes();
        java.lang.String str23 = shippingContainer19.Id;
        postSpecimen0.ShippingContainer = shippingContainer19;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(putSpecimen6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(putSpecimen9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(labInstructionTemplateList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNotNull(postSpecimen17);
        org.junit.Assert.assertNull(activity18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test26582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26582");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport2 = putLabReport0.setDateReceived(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory3.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str6 = laboratory3.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = laboratory3.getAuditAttributes();
        java.lang.String str8 = laboratory3.getPointOfContact();
        laboratory3.PointOfContact = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport11 = putLabReport0.setLaboratory(laboratory3);
        java.lang.String str12 = laboratory3.getId();
        org.junit.Assert.assertNotNull(putLabReport2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putLabReport11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test26583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26583");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        postActivity0.ExtendedAttributes = extendedAttributeList5;
        java.time.OffsetDateTime offsetDateTime7 = postActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList9 = fieldVisit8.Attachments;
        java.time.OffsetDateTime offsetDateTime10 = null;
        fieldVisit8.EndTime = offsetDateTime10;
        java.lang.String str12 = fieldVisit8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit14 = fieldVisit8.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple15 = fieldVisit8.Project;
        postActivity0.FieldVisit = fieldVisit8;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList17 = fieldVisit8.PlannedFieldResults;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(domainObjectAttachmentList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(fieldVisit14);
        org.junit.Assert.assertNull(projectSimple15);
        org.junit.Assert.assertNull(plannedFieldResultList17);
    }

    @Test
    public void test26584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26584");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        approval0.ApprovalLevel = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval7 = approval0.setLevelDescription("multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(approval7);
    }

    @Test
    public void test26585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26585");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition();
        java.lang.String str1 = nameTagDefinition0.Name;
        nameTagDefinition0.AppliesToReports = false;
        java.lang.Boolean boolean4 = nameTagDefinition0.AppliesToLocations;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test26586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26586");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.lang.Object obj2 = putFieldTrip0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip4 = putFieldTrip0.setCustomId("MaxInstant");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertNotNull(putFieldTrip4);
    }

    @Test
    public void test26587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26587");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory2 = postLaboratory0.setId("https");
        postLaboratory2.Name = "MinDuration";
        java.lang.String str5 = postLaboratory2.getPhoneNumber();
        java.lang.String str6 = postLaboratory2.getName();
        org.junit.Assert.assertNotNull(postLaboratory2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinDuration" + "'", str6, "MinDuration");
    }

    @Test
    public void test26588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26588");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType1 = getExtendedAttributes0.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str3 = deleteFieldVisits2.getSort();
        java.util.List<java.lang.String> strList4 = deleteFieldVisits2.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        java.util.List<java.lang.String> strList12 = getObservationsV2_5.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary13.Reviewer = "";
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary13.MeasurementTime = instant16;
        getObservationsV2_5.StartResultTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType21 = null;
        controlConditionActivity20.ControlCleaned = controlCleanedType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        controlConditionActivity20.DateCleaned = instant24;
        timeAlignedDataServiceRequest19.QueryFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.ActivityIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_5.setCollectionMethodIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits45 = deleteFieldVisits2.setSamplingPlanIds((java.util.List<java.lang.String>) strList39);
        getExtendedAttributes0.Ids = strList39;
        java.lang.Object obj47 = getExtendedAttributes0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes49 = getExtendedAttributes0.setLimit((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(appliesToType1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNotNull(deleteFieldVisits45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertNotNull(getExtendedAttributes49);
    }

    @Test
    public void test26589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26589");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        java.lang.Object obj8 = importItemTaxon3.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon10 = importItemTaxon3.setStatus(importItemStatusType9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription14 = locationDescription12.setIdentifier("");
        locationDescription14.UtcOffset = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription18 = locationDescription14.setUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        java.time.Instant instant27 = getObservationsV2_20.getStartObservedTime();
        getObservationsV2_20.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList30 = null;
        getObservationsV2_20.SamplingContextTagIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription34 = locationDescription32.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType36 = null;
        controlConditionActivity35.ControlCleaned = controlCleanedType36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        controlConditionActivity35.DateCleaned = instant39;
        locationDescription34.LastModified = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_20.setStartResultTime(instant39);
        getExportObservations19.StartObservedTime = instant39;
        locationDescription14.LastModified = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType47 = getExtendedAttributes46.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str49 = deleteFieldVisits48.getSort();
        java.util.List<java.lang.String> strList50 = deleteFieldVisits48.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList58 = getObservationsV2_51.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary59.Reviewer = "";
        java.time.Instant instant62 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary59.MeasurementTime = instant62;
        getObservationsV2_51.StartResultTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType67 = null;
        controlConditionActivity66.ControlCleaned = controlCleanedType67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        controlConditionActivity66.DateCleaned = instant70;
        timeAlignedDataServiceRequest65.QueryFrom = instant70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        getObservationsV2_74.SpecimenIds = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray84 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = putLocationTags80.setTagUniqueIds(strList85);
        getObservationsV2_74.ActivityIds = strList85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest89 = timeAlignedDataServiceRequest65.setTimeSeriesOutputUnitIds(strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_90 = getObservationsV2_51.setCollectionMethodIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits91 = deleteFieldVisits48.setSamplingPlanIds((java.util.List<java.lang.String>) strList85);
        getExtendedAttributes46.Ids = strList85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription93 = locationDescription14.setSecondaryFolders(strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_94 = deleteObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList95 = deleteObservationsV2_11.getDataClassifications();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon96 = importItemTaxon3.setFields(strList95);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList97 = importItemTaxon96.ItemComparison;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + importItemStatusType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemTaxon10);
        org.junit.Assert.assertNotNull(locationDescription14);
        org.junit.Assert.assertNotNull(locationDescription18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNotNull(locationDescription34);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(appliesToType47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putLocationTags87);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest89);
        org.junit.Assert.assertNotNull(getObservationsV2_90);
        org.junit.Assert.assertNotNull(deleteFieldVisits91);
        org.junit.Assert.assertNotNull(locationDescription93);
        org.junit.Assert.assertNotNull(deleteObservationsV2_94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(importItemTaxon96);
        org.junit.Assert.assertNull(importChangeItemList97);
    }

    @Test
    public void test26590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26590");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments getFieldVisitAttachments0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments();
        java.lang.Object obj1 = getFieldVisitAttachments0.getResponseType();
        java.lang.Object obj2 = getFieldVisitAttachments0.getResponseType();
        java.lang.String str3 = getFieldVisitAttachments0.getId();
        getFieldVisitAttachments0.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments getFieldVisitAttachments7 = getFieldVisitAttachments0.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str8 = getFieldVisitAttachments7.getId();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getFieldVisitAttachments7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str8, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test26591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26591");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList18 = getSpecimens17.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens20 = getSpecimens17.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_21.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        java.lang.String str28 = controlConditionActivity25.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        controlConditionActivity25.DateCleaned = instant32;
        gageHeightReading24.ReadingTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = doubleWithDisplay36.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str39 = doubleWithDisplay38.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading40 = gageHeightReading24.setGageHeight(doubleWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setMeanGageHeightMethod("hi!");
        java.lang.String str45 = dischargeSummary44.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = dischargeSummary44.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType49 = calibrationCheck48.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay50 = calibrationCheck48.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck61 = calibrationCheck48.setTime(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary44.setMeasurementTime(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_63 = getChartDataV2_41.setStartResultTime(instant60);
        gageHeightReading24.ReadingTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_21.setStartObservedTime(instant60);
        getSpecimens17.EndModificationTime = instant60;
        getExportObservations16.StartModificationTime = instant60;
        java.lang.String str68 = getExportObservations16.getFieldVisitId();
        java.lang.String str69 = getExportObservations16.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay71 = reading70.getValue();
        reading70.ReferencePointUniqueId = "hi!";
        java.lang.String str74 = reading70.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary77 = dischargeSummary75.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary77.DifferenceDuringVisit = doubleWithDisplay78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay81 = doubleWithDisplay78.setNumeric((java.lang.Double) 100.0d);
        reading70.Value = doubleWithDisplay81;
        java.lang.Boolean boolean83 = reading70.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading85 = reading70.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary89 = dischargeSummary87.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse90 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant91 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse92 = locationDescriptionListServiceResponse90.setNextToken(instant91);
        dischargeSummary87.MeasurementTime = instant91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse94 = locationDescriptionListServiceResponse86.setNextToken(instant91);
        java.time.Instant instant95 = locationDescriptionListServiceResponse86.getNextToken();
        java.time.Instant instant96 = locationDescriptionListServiceResponse86.NextToken;
        reading70.Time = instant96;
        getExportObservations16.EndResultTime = instant96;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(getSpecimens20);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(doubleWithDisplay38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(gageHeightReading40);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dischargeSummary47);
        org.junit.Assert.assertNull(calibrationCheckType49);
        org.junit.Assert.assertNull(doubleWithDisplay50);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(calibrationCheck61);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNotNull(getChartDataV2_63);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(doubleWithDisplay71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(dischargeSummary77);
        org.junit.Assert.assertNotNull(doubleWithDisplay81);
        org.junit.Assert.assertNull(boolean83);
        org.junit.Assert.assertNotNull(reading85);
        org.junit.Assert.assertNotNull(dischargeSummary89);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse92);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse94);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertNotNull(instant96);
    }

    @Test
    public void test26592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26592");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup();
        java.lang.String str1 = getAnalyticalGroup0.getId();
        java.lang.Object obj2 = getAnalyticalGroup0.getResponseType();
        java.lang.Object obj3 = getAnalyticalGroup0.getResponseType();
        getAnalyticalGroup0.Id = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup7 = getAnalyticalGroup0.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup9 = getAnalyticalGroup0.setId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str10 = getAnalyticalGroup0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(getAnalyticalGroup7);
        org.junit.Assert.assertNotNull(getAnalyticalGroup9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****" + "'", str10, "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
    }

    @Test
    public void test26593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26593");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.String str1 = codeTable0.DisplayName;
        codeTable0.SystemCode = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableRequestBase codeTableRequestBase5 = codeTable0.setPublicIdentifier("ZZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(codeTableRequestBase5);
    }

    @Test
    public void test26594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26594");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType1 = importProcessorTransactionStatusResponse0.getImportProcessorTransactionStatus();
        importProcessorTransactionStatusResponse0.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse4.ImportProcessorTransactionStatus = importProcessorTransactionStatusType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse7 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType8 = importProcessorTransactionStatusResponse7.ImportProcessorTransactionStatus;
        importProcessorTransactionStatusResponse7.Id = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(importProcessorTransactionStatusType1);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse7);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
    }

    @Test
    public void test26595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26595");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.String str1 = putTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries3 = putTimeSeries0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        putTimeSeries3.TimeSeriesUniqueId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.Boolean boolean6 = putTimeSeries3.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries8 = putTimeSeries3.setSubLocationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries10 = putTimeSeries8.setDescription("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries12 = putTimeSeries8.setDescription("");
        java.lang.String str13 = putTimeSeries12.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putTimeSeries3);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(putTimeSeries8);
        org.junit.Assert.assertNotNull(putTimeSeries10);
        org.junit.Assert.assertNotNull(putTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test26596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26596");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition17.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition21 = standardDefinition17.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList22 = standardDefinition21.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = standardDefinition21.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList25, observationStandardArray24);
        standardDefinition21.ObservationStandards = observationStandardList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str29 = samplingLocationSimple28.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str31 = samplingLocationSimple30.Name;
        java.lang.String str32 = samplingLocationSimple30.Name;
        java.lang.String str33 = samplingLocationSimple30.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str35 = samplingLocationSimple34.Name;
        java.lang.String str36 = samplingLocationSimple34.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str38 = samplingLocationSimple37.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str40 = samplingLocationSimple39.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] samplingLocationSimpleArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] { samplingLocationSimple28, samplingLocationSimple30, samplingLocationSimple34, samplingLocationSimple37, samplingLocationSimple39 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList42, samplingLocationSimpleArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition44 = standardDefinition21.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard45 = putStandard0.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putStandard45.AuditAttributes;
        java.lang.String str47 = putStandard45.getName();
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(standardDefinition21);
        org.junit.Assert.assertNull(samplingLocationSimpleList22);
        org.junit.Assert.assertNull(interval23);
        org.junit.Assert.assertNotNull(observationStandardArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(samplingLocationSimpleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(standardDefinition44);
        org.junit.Assert.assertNotNull(putStandard45);
        org.junit.Assert.assertNotNull(auditAttributes46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test26597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26597");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setParticipants("/AQUARIUS");
        java.time.OffsetDateTime offsetDateTime4 = null;
        putFieldTrip0.StartTime = offsetDateTime4;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
    }

    @Test
    public void test26598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26598");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory getSamplinglocationgrouptypeHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory();
        java.lang.Object obj1 = getSamplinglocationgrouptypeHistory0.getResponseType();
        java.lang.Object obj2 = getSamplinglocationgrouptypeHistory0.getResponseType();
        java.lang.Object obj3 = getSamplinglocationgrouptypeHistory0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test26599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26599");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = postSamplingLocation4.getElevation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = samplingPlanPlannedActivity7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity9.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = samplingPlanPlannedActivity9.AuditAttributes;
        putAccessGroup6.AuditAttributes = auditAttributes14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup17 = putAccessGroup6.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putAccessGroup6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup20 = putAccessGroup6.setCanEditAllData((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList23, samplingLocationGroupArray22);
        postAccessGroup21.SamplingLocationGroups = samplingLocationGroupList23;
        putAccessGroup6.SamplingLocationGroups = samplingLocationGroupList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation27 = postSamplingLocation4.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList23);
        postSamplingLocation27.Id = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putAccessGroup17);
        org.junit.Assert.assertNotNull(auditAttributes18);
        org.junit.Assert.assertNotNull(putAccessGroup20);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(postSamplingLocation27);
    }

    @Test
    public void test26600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26600");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putFieldTrip0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setParticipants("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip5 = putFieldTrip0.setNotes("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip7 = putFieldTrip0.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip9 = putFieldTrip0.setNotes("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip11 = putFieldTrip0.setId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNotNull(putFieldTrip5);
        org.junit.Assert.assertNotNull(putFieldTrip7);
        org.junit.Assert.assertNotNull(putFieldTrip9);
        org.junit.Assert.assertNotNull(putFieldTrip11);
    }

    @Test
    public void test26601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26601");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod2 = timeSeriesThresholdPeriod0.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod0.AppliedTime = instant3;
        java.lang.Double double5 = timeSeriesThresholdPeriod0.SecondaryReferenceValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant7 = ratingCurveListServiceRequest6.QueryTo;
        java.lang.String str8 = ratingCurveListServiceRequest6.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest10 = ratingCurveListServiceRequest6.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_11.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase16 = locationDatumPeriod14.setComment("'.'SSSSSSS");
        java.lang.String str17 = locationDatumPeriodBase16.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase21 = locationDatumPeriodBase16.setValidFrom(instant19);
        getChartDataV2_11.StartModificationTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest23 = ratingCurveListServiceRequest10.setQueryTo(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod24 = timeSeriesThresholdPeriod0.setAppliedTime(instant19);
        java.lang.String str25 = timeSeriesThresholdPeriod0.Comments;
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest10);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase21);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest23);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test26602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26602");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod2 = postCollectionMethod0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod4 = postCollectionMethod2.setName("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        labReport5.CaseNarrative = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade10 = resultGrade8.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = resultGrade10.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon12.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str15 = putTaxon12.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = specimenTemplate17.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate19.Preservative = preservativeType20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = specimenTemplate19.setAuditAttributes(auditAttributes25);
        extendedAttributeDefinition16.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon29 = putTaxon12.setAuditAttributes(auditAttributes25);
        resultGrade10.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport31 = labReport5.setAuditAttributes(auditAttributes25);
        postCollectionMethod4.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = unit33.AuditAttributes;
        unit33.Name = "2021.4.62.0";
        java.lang.String str37 = unit33.getId();
        java.lang.String str38 = unit33.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation41 = putSamplingLocation39.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList42 = putSamplingLocation39.ExtendedAttributes;
        java.lang.String str43 = putSamplingLocation39.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation45 = putSamplingLocation39.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation47 = putSamplingLocation45.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = unit33.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod49 = postCollectionMethod4.setAuditAttributes(auditAttributes46);
        java.lang.String str50 = postCollectionMethod4.getCustomId();
        org.junit.Assert.assertNotNull(postCollectionMethod2);
        org.junit.Assert.assertNotNull(postCollectionMethod4);
        org.junit.Assert.assertNotNull(resultGrade10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(specimenTemplate19);
        org.junit.Assert.assertTrue("'" + preservativeType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(specimenTemplate27);
        org.junit.Assert.assertNotNull(putTaxon29);
        org.junit.Assert.assertNotNull(labReport31);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(putSamplingLocation41);
        org.junit.Assert.assertNull(extendedAttributeList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(putSamplingLocation45);
        org.junit.Assert.assertNotNull(putSamplingLocation47);
        org.junit.Assert.assertNotNull(unit48);
        org.junit.Assert.assertNotNull(postCollectionMethod49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test26603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26603");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setOutputTimeSeriesUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor15 = processor13.setOutputTimeSeriesUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str17 = gapToleranceOperation16.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation19 = gapToleranceOperation16.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase22 = locationDatumPeriod20.setComment("'.'SSSSSSS");
        java.lang.String str23 = locationDatumPeriodBase22.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase27 = locationDatumPeriodBase22.setValidFrom(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange28 = gapToleranceOperation16.setStartTime(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor29 = processor15.setProcessorPeriod(timeRange28);
        processor15.Description = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str32 = processor15.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation35 = methodOperation33.setOperationType(metadataChangeOperationType34);
        java.time.Instant instant36 = methodOperation35.getEndTime();
        processor15.ProcessorPeriod = methodOperation35;
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertNotNull(processor15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(gapToleranceOperation19);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase27);
        org.junit.Assert.assertNotNull(timeRange28);
        org.junit.Assert.assertNotNull(processor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str32, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation35);
        org.junit.Assert.assertNull(instant36);
    }

    @Test
    public void test26604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26604");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = putActivity0.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity3 = putActivity0.setEndTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = putActivity3.setLoggerFileName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity7 = putActivity3.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = null;
        putActivity8.Depth = quantity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList12, metricResultArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity14 = putActivity8.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity16 = putActivity8.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] specimenNestedInActivityArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList19, specimenNestedInActivityArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity21 = putActivity17.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = putActivity8.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity23 = putActivity7.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putActivity23.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen25.Activity = activity26;
        java.lang.String str28 = activity26.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType29 = activity26.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device32 = device30.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device34 = device32.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str35 = device32.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity36 = activity26.setDevice(device32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity38 = activity36.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device39 = activity38.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity40 = putActivity23.setDevice(device39);
        putActivity40.Id = "****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium43 = putActivity40.Medium;
        org.junit.Assert.assertNull(plannedActivity1);
        org.junit.Assert.assertNotNull(putActivity3);
        org.junit.Assert.assertNotNull(putActivity5);
        org.junit.Assert.assertNotNull(putActivity7);
        org.junit.Assert.assertNotNull(metricResultArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(putActivity14);
        org.junit.Assert.assertNotNull(putActivity16);
        org.junit.Assert.assertNotNull(specimenNestedInActivityArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(putActivity21);
        org.junit.Assert.assertNotNull(putActivity22);
        org.junit.Assert.assertNotNull(putActivity23);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(activityType29);
        org.junit.Assert.assertNotNull(device32);
        org.junit.Assert.assertNotNull(device34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str35, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity36);
        org.junit.Assert.assertNotNull(activity38);
        org.junit.Assert.assertNotNull(device39);
        org.junit.Assert.assertNotNull(putActivity40);
        org.junit.Assert.assertNull(medium43);
    }

    @Test
    public void test26605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26605");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str2 = getChartDataV2_1.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_1.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_4.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList7 = getChartDataV2_6.getSpecimenIds();
        java.time.Instant instant8 = getChartDataV2_6.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = putUserV2_10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities12.setToStartTime(instant22);
        java.lang.String str24 = getActivities23.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        getActivities23.Media = strList38;
        putUserV2_10.AccessGroups = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens45 = getSpecimens9.setSamplingLocationIds((java.util.List<java.lang.String>) strList38);
        getChartDataV2_6.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.DepthUnitId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.LabResultLaboratoryIds;
        getObservationsV2_54.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int61 = getObservationsV2_54.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest62.setTimeSeriesUniqueIds(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_54.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        putUser47.Roles = strList74;
        getChartDataV2_6.AnalysisMethodSimpleIds = strList74;
        deleteObservationsV2_0.AnalyticalGroupIds = strList74;
        java.lang.String str83 = deleteObservationsV2_0.getDepthUnitId();
        java.lang.String str84 = deleteObservationsV2_0.getFieldVisitId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_86 = deleteObservationsV2_0.setCursor("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_88 = deleteObservationsV2_0.setCursor("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        deleteObservationsV2_0.DetectionCondition = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getSpecimens45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(deleteObservationsV2_86);
        org.junit.Assert.assertNotNull(deleteObservationsV2_88);
    }

    @Test
    public void test26606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26606");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        java.lang.String str1 = fieldTrip0.getNotes();
        java.time.OffsetDateTime offsetDateTime2 = fieldTrip0.getStartTime();
        fieldTrip0.Id = "2021.8.9990";
        java.lang.String str5 = fieldTrip0.Notes;
        java.lang.String str6 = fieldTrip0.getParticipants();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26607");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        java.lang.String str3 = postLocation0.Description;
        java.lang.String str4 = postLocation0.LocationName;
        java.lang.Double double5 = postLocation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase7 = postLocation0.setElevation((java.lang.Double) 1.0d);
        java.lang.String str8 = postLocation0.getLocationName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(locationBase7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26608");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str3 = postAccessGroup2.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = postAccessGroup2.AuditAttributes;
        java.lang.String str5 = postAccessGroup2.getDescription();
        java.lang.Boolean boolean6 = postAccessGroup2.CanEditAllData;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList10, samplingLocationGroupArray9);
        postAccessGroup8.SamplingLocationGroups = samplingLocationGroupList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup13 = postAccessGroup7.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList17, samplingLocationGroupArray16);
        postAccessGroup15.SamplingLocationGroups = samplingLocationGroupList17;
        putAccessGroup14.SamplingLocationGroups = samplingLocationGroupList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup21 = postAccessGroup7.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup23 = postAccessGroup21.setId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList24 = postAccessGroup23.getSamplingLocationGroups();
        postAccessGroup2.SamplingLocationGroups = samplingLocationGroupList24;
        postAccessGroup0.SamplingLocationGroups = samplingLocationGroupList24;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(postAccessGroup13);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(postAccessGroup21);
        org.junit.Assert.assertNotNull(postAccessGroup23);
        org.junit.Assert.assertNotNull(samplingLocationGroupList24);
    }

    @Test
    public void test26609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26609");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str1 = postBasicTimeSeries0.UtcOffset;
        java.lang.String str2 = postBasicTimeSeries0.getDescription();
        java.time.Duration duration3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MaxConcreteValue;
        postBasicTimeSeries0.GapTolerance = duration3;
        java.lang.String str5 = postBasicTimeSeries0.UtcOffset;
        java.lang.String str6 = postBasicTimeSeries0.getComputationPeriodIdentifier();
        postBasicTimeSeries0.UtcOffset = "/AQUARIUS/Publish/v2";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26610");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        java.lang.Integer int5 = importSummary0.getExpectedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime8 = importHistoryEventSimple7.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple10 = importHistoryEventSimple7.setId("http");
        java.lang.String str11 = importHistoryEventSimple7.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary12 = observationImportSummary6.setImportHistoryEventSimple(importHistoryEventSimple7);
        java.lang.String str13 = importHistoryEventSimple7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary14 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple7);
        java.lang.Integer int15 = importSummary14.getSuccessCount();
        importSummary14.SummaryReportText = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(importHistoryEventSimple10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(observationImportSummary12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http" + "'", str13, "http");
        org.junit.Assert.assertNotNull(importSummary14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test26611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26611");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit searchResultUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit searchResultUnit2 = searchResultUnit0.setTotalCount((java.lang.Integer) 1);
        java.lang.String str3 = searchResultUnit2.getCursor();
        org.junit.Assert.assertNotNull(searchResultUnit2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26612");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        java.lang.String str4 = extendedAttributeField2.getColumnIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField6 = extendedAttributeField2.setColumnIdentifier("MinInstant");
        extendedAttributeField6.CanBeEmpty = true;
        java.lang.String str9 = extendedAttributeField6.getColumnIdentifier();
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(extendedAttributeField6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
    }

    @Test
    public void test26613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26613");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList9 = postTag0.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase11 = postTag0.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase13 = tagRequestBase11.setValueType(tagValueType12);
        java.lang.String str14 = tagRequestBase13.getKey();
        java.util.ArrayList<java.lang.String> strList15 = tagRequestBase13.PickListValues;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(tagApplicabilityList9);
        org.junit.Assert.assertNotNull(tagRequestBase11);
        org.junit.Assert.assertTrue("'" + tagValueType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test26614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26614");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation();
        putLocation0.LocationUniqueId = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.Object obj3 = putLocation0.getResponseType();
        java.lang.String str4 = putLocation0.getLocationUniqueId();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str4, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
    }

    @Test
    public void test26615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26615");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        labResultDetails6.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails6.setDilutionFactor("http");
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails6.setDateReceived(offsetDateTime14);
        java.lang.String str16 = labResultDetails15.AnalysisComment;
        java.lang.String str17 = labResultDetails15.AnalysisComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = postSamplingLocationGroup18.getAuditAttributes();
        postSamplingLocationGroup18.Id = "POST";
        postSamplingLocationGroup18.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup25 = postSamplingLocationGroup18.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = auditAttributes26.setCreationUserProfileId("'.'SSSSSSS");
        postSamplingLocationGroup18.AuditAttributes = auditAttributes28;
        labResultDetails15.AuditAttributes = auditAttributes28;
        java.lang.String str31 = labResultDetails15.getDilutionFactor();
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str16, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str17, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup25);
        org.junit.Assert.assertNotNull(auditAttributes28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http" + "'", str31, "http");
    }

    @Test
    public void test26616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26616");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSetting postSetting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSetting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSetting postSetting2 = postSetting0.setValue("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSetting postSetting4 = postSetting2.setValue("hi!");
        java.lang.String str5 = postSetting4.getGroup();
        org.junit.Assert.assertNotNull(postSetting2);
        org.junit.Assert.assertNotNull(postSetting4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26617");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest2 = fieldVisitDescriptionListServiceRequest0.setQueryTo(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest4 = fieldVisitDescriptionListServiceRequest0.setIncludeInvalidFieldVisits((java.lang.Boolean) true);
        java.lang.String str5 = fieldVisitDescriptionListServiceRequest4.getLocationIdentifier();
        java.lang.Boolean boolean6 = fieldVisitDescriptionListServiceRequest4.isIncludeInvalidFieldVisits();
        java.time.Instant instant7 = fieldVisitDescriptionListServiceRequest4.getChangesSinceToken();
        java.lang.String str8 = fieldVisitDescriptionListServiceRequest4.LocationIdentifier;
        java.lang.String str9 = fieldVisitDescriptionListServiceRequest4.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        getObservationsV2_13.SpecimenIds = strList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        getObservationsV2_13.QualityControlTypes = strList24;
        java.util.List<java.lang.String> strList28 = getObservationsV2_13.getLabReportIds();
        importItem12.Errors = getObservationsV2_13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList31 = getObservationsV2_30.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.QualityControlTypes = strList43;
        getObservationsV2_30.ResultGrades = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem48 = importItem12.setFields((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setAnalysisMethodIds((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        java.util.List<java.lang.String> strList57 = getObservationsV2_50.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary58.Reviewer = "";
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary58.MeasurementTime = instant61;
        getObservationsV2_50.StartResultTime = instant61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType66 = null;
        controlConditionActivity65.ControlCleaned = controlCleanedType66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse68.setNextToken(instant69);
        controlConditionActivity65.DateCleaned = instant69;
        timeAlignedDataServiceRequest64.QueryFrom = instant69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray83 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = putLocationTags79.setTagUniqueIds(strList84);
        getObservationsV2_73.ActivityIds = strList84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest88 = timeAlignedDataServiceRequest64.setTimeSeriesOutputUnitIds(strList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_50.setCollectionMethodIds((java.util.List<java.lang.String>) strList84);
        java.time.Instant instant90 = getObservationsV2_89.getStartResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_49.setStartResultTime(instant90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest92 = fieldVisitDescriptionListServiceRequest4.setQueryFrom(instant90);
        java.time.Instant instant93 = fieldVisitDescriptionListServiceRequest92.ChangesSinceToken;
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest2);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(importItem48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(putLocationTags86);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest88);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest92);
        org.junit.Assert.assertNull(instant93);
    }

    @Test
    public void test26618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26618");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        java.lang.String str1 = analysisMethodMinimal0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal3 = analysisMethodMinimal0.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal5 = analysisMethodMinimal3.setId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(analysisMethodMinimal3);
        org.junit.Assert.assertNotNull(analysisMethodMinimal5);
    }

    @Test
    public void test26619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26619");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.AuditAttributes;
        putSpreadsheetTemplate0.CustomId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate5 = putSpreadsheetTemplate0.setType(spreadsheetTemplateType4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList6 = putSpreadsheetTemplate5.Attachments;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate5);
        org.junit.Assert.assertNull(domainObjectAttachmentList6);
    }

    @Test
    public void test26620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26620");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setFlowDirection(flowDirectionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical0.VelocityObservation = velocityObservation3;
        java.lang.Double double5 = vertical0.getVerticalNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = calibrationCheck6.Value;
        java.lang.String str9 = calibrationCheck6.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = calibrationCheck6.Standard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = calibrationCheck6.getDifference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        java.lang.String str13 = standardDetails12.StandardCode;
        java.time.Instant instant14 = standardDetails12.ExpirationDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck15 = calibrationCheck6.setStandardDetails(standardDetails12);
        java.lang.String str16 = standardDetails12.LotNumber;
        standardDetails12.StandardCode = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = reading19.getValue();
        reading19.ReferencePointUniqueId = "hi!";
        java.lang.String str23 = reading19.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary26.DifferenceDuringVisit = doubleWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = doubleWithDisplay27.setNumeric((java.lang.Double) 100.0d);
        reading19.Value = doubleWithDisplay30;
        standardDetails12.Temperature = doubleWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical35 = vertical33.setSegmentVelocity(quantityWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType36 = vertical33.VelocityObservationMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = gageHeightAtZeroFlowCalculatedDetails37.Stage;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity41 = adcpDischargeActivity39.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay42 = adcpDischargeActivity41.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = null;
        vertical43.EffectiveDepth = quantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical47 = vertical43.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = dischargeSummary48.setPublish((java.lang.Boolean) false);
        java.lang.String str51 = dischargeSummary50.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary52.Reviewer = "";
        dischargeSummary52.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType57 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary52.MeasurementGrade = measurementGradeType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary50.setMeasurementGrade(measurementGradeType57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity62 = pointVelocityDischargeActivity60.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity60.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity66 = pointVelocityDischargeActivity60.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList67 = pointVelocityDischargeActivity66.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity66.DistanceToMeter = datumConvertedQuantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary50.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical71 = vertical47.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity72 = adcpDischargeActivity41.setTopEstimateExponent((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay68);
        gageHeightAtZeroFlowCalculatedDetails37.DepthCertainty = datumConvertedQuantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical74 = vertical33.setSegmentDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails75 = standardDetails12.setTemperature((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay68);
        vertical0.SegmentArea = datumConvertedQuantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation77 = vertical0.getVelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData78 = vertical0.OpenWaterData;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList79 = vertical0.getCalibrations();
        org.junit.Assert.assertTrue("'" + flowDirectionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(calibrationCheck15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(vertical35);
        org.junit.Assert.assertNull(pointVelocityObservationType36);
        org.junit.Assert.assertNull(doubleWithDisplay38);
        org.junit.Assert.assertNotNull(adcpDischargeActivity41);
        org.junit.Assert.assertNull(doubleWithDisplay42);
        org.junit.Assert.assertNotNull(vertical47);
        org.junit.Assert.assertNotNull(dischargeSummary50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + measurementGradeType57 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType57.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity62);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity66);
        org.junit.Assert.assertNull(verticalList67);
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(vertical71);
        org.junit.Assert.assertNotNull(adcpDischargeActivity72);
        org.junit.Assert.assertNotNull(vertical74);
        org.junit.Assert.assertNotNull(standardDetails75);
        org.junit.Assert.assertNotNull(velocityObservation77);
        org.junit.Assert.assertNull(openWaterData78);
        org.junit.Assert.assertNull(calibrationList79);
    }

    @Test
    public void test26621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26621");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory2 = getMediumHistory0.setId("MaxInstant");
        java.lang.String str3 = getMediumHistory2.Id;
        getMediumHistory2.Id = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str6 = getMediumHistory2.getId();
        getMediumHistory2.Id = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        java.lang.String str9 = getMediumHistory2.getId();
        org.junit.Assert.assertNotNull(getMediumHistory2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MaxInstant" + "'", str3, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str6, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****" + "'", str9, "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
    }

    @Test
    public void test26622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26622");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails2 = activityWithDetails0.setSourceActivityId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium3 = activityWithDetails0.Medium;
        org.junit.Assert.assertNotNull(activityWithDetails2);
        org.junit.Assert.assertNull(medium3);
    }

    @Test
    public void test26623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26623");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_2 = postUserV2_0.setUserProfile(userProfile1);
        java.lang.Object obj3 = postUserV2_2.getResponseType();
        java.util.List<java.lang.String> strList4 = postUserV2_2.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_6 = postUserV2_2.setEmail("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile7 = null;
        postUserV2_6.UserProfile = userProfile7;
        java.util.List<java.lang.String> strList9 = postUserV2_6.AccessGroups;
        org.junit.Assert.assertNotNull(postUserV2_2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(postUserV2_6);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test26624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26624");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan2 = fieldVisit0.SamplingPlan;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = standardSimple4.setApplicabilityRange(interval5);
        java.lang.String str7 = standardSimple4.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple8.setApplicabilityRange(interval9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = standardSimple8.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple14.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = standardSimple19.setApplicabilityRange(interval20);
        java.lang.String str22 = standardSimple21.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple30 = standardSimple28.setApplicabilityRange(interval29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple4, standardSimple8, standardSimple13, standardSimple14, standardSimple21, standardSimple23, standardSimple24, standardSimple27, standardSimple28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList32, standardSimpleArray31);
        postSamplingLocation3.Standards = standardSimpleList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList37, plannedActivityArray36);
        putFieldVisit35.PlannedActivities = plannedActivityList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str41 = domainObjectAttachment40.getId();
        java.lang.String str42 = domainObjectAttachment40.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = domainObjectAttachment40.setAttachment(attachment43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str46 = domainObjectAttachment45.getId();
        java.lang.String str47 = domainObjectAttachment45.getId();
        domainObjectAttachment45.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = domainObjectAttachment45.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str53 = domainObjectAttachment52.getId();
        java.lang.String str54 = domainObjectAttachment52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = domainObjectAttachment52.setAttachment(attachment55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str60 = domainObjectAttachment59.getId();
        java.lang.String str61 = domainObjectAttachment59.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = domainObjectAttachment59.setAttachment(attachment62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str65 = domainObjectAttachment64.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment40, domainObjectAttachment45, domainObjectAttachment52, domainObjectAttachment57, domainObjectAttachment59, domainObjectAttachment64 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList67, domainObjectAttachmentArray66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit69 = putFieldVisit35.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan70 = putFieldVisit35.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple71 = putFieldVisit35.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule72 = putFieldVisit35.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList73 = putFieldVisit35.Attachments;
        postSamplingLocation3.Attachments = domainObjectAttachmentList73;
        fieldVisit0.Attachments = domainObjectAttachmentList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation76 = fieldVisit0.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime77 = fieldVisit0.getStartTime();
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(samplingPlan2);
        org.junit.Assert.assertNotNull(standardSimple6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple12);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNotNull(standardSimple21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimple30);
        org.junit.Assert.assertNotNull(standardSimpleArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(domainObjectAttachment44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(domainObjectAttachment51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(domainObjectAttachment56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(domainObjectAttachment63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putFieldVisit69);
        org.junit.Assert.assertNull(samplingPlan70);
        org.junit.Assert.assertNull(fieldTripSimple71);
        org.junit.Assert.assertNull(schedule72);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList73);
        org.junit.Assert.assertNull(samplingLocation76);
        org.junit.Assert.assertNull(offsetDateTime77);
    }

    @Test
    public void test26625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26625");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationNote0.Tags;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = locationNote0.getTags();
        locationNote0.UniqueId = "MaxDuration";
        java.time.Instant instant5 = locationNote0.ToTimeUtc;
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNull(tagMetadataList2);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test26626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26626");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        java.lang.String str1 = qualifierResponse0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse3 = qualifierResponse0.setIsSystem((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj5 = getActivityTemplates4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getActivityTemplates4.Type = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierBase qualifierBase22 = qualifierResponse0.setGroupIdentifiers(strList17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse24 = qualifierResponse0.setUniqueId("MaxInstant");
        qualifierResponse0.IsSystem = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(qualifierResponse3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(qualifierBase22);
        org.junit.Assert.assertNotNull(qualifierResponse24);
    }

    @Test
    public void test26627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26627");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList4 = importItemTaxon3.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon6 = importItemTaxon3.setItem(taxon5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str8 = postCalculatedDerivedTimeSeries7.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList9 = postCalculatedDerivedTimeSeries7.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon10 = importItemTaxon6.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList12 = importItemObject11.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList14, importChangeItemArray13);
        importItemObject11.ItemComparison = importChangeItemList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject25 = importItemObject11.setExistingItem((java.lang.Object) putLocationTags17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser28 = openIdConnectUser26.setIdentifier("");
        java.lang.Boolean boolean29 = openIdConnectUser28.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject30 = importItemObject11.setErrors((java.lang.Object) openIdConnectUser28);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList31 = importItemObject30.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon32 = importItemTaxon10.setItemComparison(importChangeItemList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList34 = importItemTaxon33.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon36 = importItemTaxon33.setItem(taxon35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str38 = postCalculatedDerivedTimeSeries37.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList39 = postCalculatedDerivedTimeSeries37.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon40 = importItemTaxon36.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon42 = importItemTaxon36.setExistingItem(taxon41);
        importItemTaxon10.Item = taxon41;
        taxon41.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str46 = taxon41.ItisTsn;
        taxon41.ItisComment = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon49 = importItemTaxon2.setExistingItem(taxon41);
        java.lang.String str50 = importItemTaxon49.getRowId();
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(importItemTaxon6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(extendedAttributeValueList9);
        org.junit.Assert.assertNotNull(importItemTaxon10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(importChangeItemArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(importItemObject25);
        org.junit.Assert.assertNotNull(openIdConnectUser28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(importItemObject30);
        org.junit.Assert.assertNotNull(importChangeItemList31);
        org.junit.Assert.assertNotNull(importItemTaxon32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(importItemTaxon36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(extendedAttributeValueList39);
        org.junit.Assert.assertNotNull(importItemTaxon40);
        org.junit.Assert.assertNotNull(importItemTaxon42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str46, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(importItemTaxon49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str50, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test26628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26628");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse7.TimeRange = statisticalTimeRange8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset10 = statisticalTimeRange8.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset12 = timeSeriesPoint11.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant14 = statisticalDateTimeOffset13.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint15 = timeSeriesPoint11.setTimestamp(statisticalDateTimeOffset13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset17 = statisticalDateTimeOffset13.setRepresentsEndOfTimePeriod((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange18 = statisticalTimeRange8.setEndTime(statisticalDateTimeOffset13);
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(statisticalDateTimeOffset10);
        org.junit.Assert.assertNull(statisticalDateTimeOffset12);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(timeSeriesPoint15);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset17);
        org.junit.Assert.assertNotNull(statisticalTimeRange18);
    }

    @Test
    public void test26629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26629");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setLocationName("");
        locationDataServiceResponse0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str7 = referencePoint6.Name;
        java.time.Instant instant8 = referencePoint6.getPrimarySinceDate();
        java.lang.Double double9 = referencePoint6.Longitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str11 = referencePoint10.Name;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList12 = referencePoint10.ReferencePointPeriods;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str14 = referencePoint13.Name;
        java.time.Instant instant15 = referencePoint13.getPrimarySinceDate();
        java.lang.Double double16 = referencePoint13.Longitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint[] referencePointArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint[] { referencePoint6, referencePoint10, referencePoint13 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint> referencePointList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint>) referencePointList18, referencePointArray17);
        locationDataServiceResponse0.ReferencePoints = referencePointList18;
        java.lang.String str21 = locationDataServiceResponse0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse23 = locationDataServiceResponse0.setIsExternalLocation((java.lang.Boolean) true);
        java.lang.String str24 = locationDataServiceResponse23.getUniqueId();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList25 = locationDataServiceResponse23.Attachments;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(referencePointPeriodList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNotNull(referencePointArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str21, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(locationDataServiceResponse23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str24, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(attachmentList25);
    }

    @Test
    public void test26630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26630");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter0.setParameterId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter7 = putParameter0.setUniqueId("-PT87591240H");
        java.lang.String str8 = putParameter0.getParameterId();
        java.lang.Double double9 = putParameter0.MaxValue;
        java.lang.Double double10 = putParameter0.getMaxValue();
        java.lang.Double double11 = putParameter0.getMaxValue();
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNotNull(putParameter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str8, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNull(double11);
    }

    @Test
    public void test26631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26631");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2 getObservationImportResultV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2 getObservationImportResultV2_2 = getObservationImportResultV2_0.setId("https");
        org.junit.Assert.assertNotNull(getObservationImportResultV2_2);
    }

    @Test
    public void test26632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26632");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setApproval(fieldVisitApproval3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading2.setUseLocationDatumAsReference((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = fieldVisitReading2.setReadingType(fieldVisitReadingType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading8.setModel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval11 = fieldVisitReading8.Approval;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine + "'", fieldVisitReadingType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.Routine));
        org.junit.Assert.assertNotNull(fieldVisitReading8);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNotNull(fieldVisitApproval11);
    }

    @Test
    public void test26633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26633");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest2 = roundServiceRequest0.setUnitId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest4 = roundServiceRequest0.setMethodCode("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str5 = roundServiceRequest4.getParameterDisplayId();
        org.junit.Assert.assertNotNull(roundServiceRequest2);
        org.junit.Assert.assertNotNull(roundServiceRequest4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26634");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteTimeSeries deleteTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteTimeSeries();
        java.lang.String str1 = deleteTimeSeries0.TimeSeriesUniqueId;
        java.lang.String str2 = deleteTimeSeries0.getTimeSeriesUniqueId();
        java.lang.String str3 = deleteTimeSeries0.getTimeSeriesUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26635");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str1 = domainObjectAttachment0.getId();
        java.lang.String str2 = domainObjectAttachment0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment4 = domainObjectAttachment0.setAttachment(attachment3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = domainObjectAttachment0.Attachment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment6 = domainObjectAttachment0.Attachment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment7.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime10 = attachment7.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment12 = attachment7.setComment("");
        attachment12.Id = "MinDuration";
        attachment12.Resolution = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str17 = attachment12.getLatitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment19 = attachment12.setResolution("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        domainObjectAttachment0.Attachment = attachment19;
        domainObjectAttachment0.Id = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(domainObjectAttachment4);
        org.junit.Assert.assertNull(attachment5);
        org.junit.Assert.assertNull(attachment6);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(attachment12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(attachment19);
    }

    @Test
    public void test26636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26636");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation2 = getSamplingLocation0.setId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation4 = getSamplingLocation0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str5 = getSamplingLocation0.Id;
        java.lang.Object obj6 = getSamplingLocation0.getResponseType();
        org.junit.Assert.assertNotNull(getSamplingLocation2);
        org.junit.Assert.assertNotNull(getSamplingLocation4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
    }

    @Test
    public void test26637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26637");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        importItemTaxon0.Input = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon5 = importItemTaxon0.setItem(taxon4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList7 = importItemTaxon6.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon9 = importItemTaxon6.setItem(taxon8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str11 = postCalculatedDerivedTimeSeries10.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList12 = postCalculatedDerivedTimeSeries10.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon13 = importItemTaxon9.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList15 = importItemObject14.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList17, importChangeItemArray16);
        importItemObject14.ItemComparison = importChangeItemList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject28 = importItemObject14.setExistingItem((java.lang.Object) putLocationTags20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser31 = openIdConnectUser29.setIdentifier("");
        java.lang.Boolean boolean32 = openIdConnectUser31.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject33 = importItemObject14.setErrors((java.lang.Object) openIdConnectUser31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList34 = importItemObject33.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon35 = importItemTaxon13.setItemComparison(importChangeItemList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList37 = importItemTaxon36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon36.setItem(taxon38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str41 = postCalculatedDerivedTimeSeries40.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList42 = postCalculatedDerivedTimeSeries40.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon39.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon45 = importItemTaxon39.setExistingItem(taxon44);
        importItemTaxon13.Item = taxon44;
        taxon44.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon44.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putUnit51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = putDetectioncondition53.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition56 = putDetectioncondition53.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity59 = samplingPlanPlannedActivity57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = auditAttributes60.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity59.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = samplingPlanPlannedActivity59.AuditAttributes;
        putDetectioncondition53.AuditAttributes = auditAttributes64;
        putUnit51.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = auditAttributes64.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon69 = taxon44.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon71 = taxon69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon73 = taxon71.setItisComment("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon74 = importItemTaxon0.setExistingItem(taxon73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon76 = importItemTaxon74.setInput("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(importItemTaxon9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(extendedAttributeValueList12);
        org.junit.Assert.assertNotNull(importItemTaxon13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(importChangeItemArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(importItemObject28);
        org.junit.Assert.assertNotNull(openIdConnectUser31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(importItemObject33);
        org.junit.Assert.assertNotNull(importChangeItemList34);
        org.junit.Assert.assertNotNull(importItemTaxon35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(extendedAttributeValueList42);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNotNull(importItemTaxon45);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNull(auditAttributes54);
        org.junit.Assert.assertNotNull(putDetectioncondition56);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity59);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNotNull(auditAttributes68);
        org.junit.Assert.assertNotNull(taxon69);
        org.junit.Assert.assertNotNull(taxon71);
        org.junit.Assert.assertNotNull(taxon73);
        org.junit.Assert.assertNotNull(importItemTaxon74);
        org.junit.Assert.assertNotNull(importItemTaxon76);
    }

    @Test
    public void test26638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26638");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList5, nameTagDefinitionArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse7 = locationTagListServiceResponse3.setTags(nameTagDefinitionList5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        locationTagListServiceResponse3.ResponseTime = instant12;
        getChartDataV2_0.StartResultTime = instant12;
        java.util.List<java.lang.String> strList17 = getChartDataV2_0.QualityControlTypes;
        java.util.List<java.lang.String> strList18 = getChartDataV2_0.getSamplingContextTagIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse7);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
    }

    @Test
    public void test26639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26639");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant1 = qualifier0.DateApplied;
        java.lang.String str2 = qualifier0.User;
        java.lang.String str3 = qualifier0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = timeAlignedDataServiceRequest4.setQueryFrom(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = qualifier0.setDateApplied(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier10.setIdentifier("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest9);
        org.junit.Assert.assertNotNull(qualifier10);
        org.junit.Assert.assertNotNull(qualifier12);
    }

    @Test
    public void test26640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26640");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        java.lang.String str3 = putObservationV2_2.getId();
        putObservationV2_2.MediumSubdivision = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.time.OffsetDateTime offsetDateTime6 = null;
        putObservationV2_2.ObservedTime = offsetDateTime6;
        java.lang.String str8 = putObservationV2_2.getComment();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26641");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun();
        java.lang.String str1 = postImportFieldSheetDryRun0.TimeZoneOffset;
        postImportFieldSheetDryRun0.TimeZoneOffset = "hi!";
        java.lang.String str4 = postImportFieldSheetDryRun0.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun6 = postImportFieldSheetDryRun0.setTimeZoneOffset("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun8 = postImportFieldSheetDryRun6.setTimeZoneOffset("MinInstant");
        java.lang.String str9 = postImportFieldSheetDryRun6.TimeZoneOffset;
        java.lang.String str10 = postImportFieldSheetDryRun6.TimeZoneOffset;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(postImportFieldSheetDryRun6);
        org.junit.Assert.assertNotNull(postImportFieldSheetDryRun8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MinInstant" + "'", str10, "MinInstant");
    }

    @Test
    public void test26642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26642");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        applyTagRequest0.UniqueId = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest4 = applyTagRequest0.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str5 = applyTagRequest4.Value;
        java.lang.String str6 = applyTagRequest4.Value;
        java.lang.String str7 = applyTagRequest4.getUniqueId();
        java.lang.String str8 = applyTagRequest4.UniqueId;
        org.junit.Assert.assertNotNull(applyTagRequest4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str6, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "POST" + "'", str7, "POST");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
    }

    @Test
    public void test26643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26643");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary0.Reviewer = "";
        java.time.Instant instant3 = dischargeSummary0.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = dischargeSummary0.getGageHeightAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
    }

    @Test
    public void test26644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26644");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str1 = extendedAttributeListItem0.Id;
        extendedAttributeListItem0.Id = "2021.8.9990";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test26645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26645");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.time.Instant instant3 = fieldVisit0.EndTime;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test26646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26646");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType3 = inputPart0.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart5 = inputPart0.setMediaType(mediaType4);
        inputPart0.BodyAsString = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType8 = inputPart0.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType10 = mediaType8.setSubtype("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        java.lang.String str11 = mediaType10.Subtype;
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNull(mediaType3);
        org.junit.Assert.assertNotNull(inputPart5);
        org.junit.Assert.assertNotNull(mediaType8);
        org.junit.Assert.assertNotNull(mediaType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****" + "'", str11, "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
    }

    @Test
    public void test26647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26647");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList36 = getGroupedObservationsV2_26.LabResultLabAnalysisMethodIds;
        getGroupedObservationsV2_26.SpecimenName = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_40 = getGroupedObservationsV2_26.setDepthUnitId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<java.lang.String> strList41 = getGroupedObservationsV2_26.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent44 = importHistoryEvent42.setImportTime(offsetDateTime43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent46 = importHistoryEvent44.setImportType(importType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean49 = roleFlattened48.CanRemoveFieldVisits;
        roleFlattened48.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str53 = putLocationType52.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        getObservationsV2_60.DepthUnitCustomId = "hi!";
        java.lang.String str63 = getObservationsV2_60.CustomId;
        java.util.List<java.lang.String> strList64 = getObservationsV2_60.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_60.setMedia((java.util.List<java.lang.String>) strList76);
        putLocationType52.ExtendedAttributeDefinitionIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase82 = roleFlattened48.setRoleApprovalTransitions(strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits83 = deleteFieldVisits47.setIds((java.util.List<java.lang.String>) strList76);
        importHistoryEvent44.DomainObjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_85 = getGroupedObservationsV2_26.setMedia((java.util.List<java.lang.String>) strList76);
        java.util.List<java.lang.String> strList86 = getGroupedObservationsV2_26.getMedia();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(importHistoryEvent44);
        org.junit.Assert.assertTrue("'" + importType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent46);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(roleFlattenedBase82);
        org.junit.Assert.assertNotNull(deleteFieldVisits83);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_85);
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test26648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26648");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments getSamplingLocationAttachments0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments();
        java.lang.String str1 = getSamplingLocationAttachments0.getId();
        java.lang.String str2 = getSamplingLocationAttachments0.getId();
        java.lang.String str3 = getSamplingLocationAttachments0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26649");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplate getActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplate();
        java.lang.Object obj1 = getActivityTemplate0.getResponseType();
        java.lang.String str2 = getActivityTemplate0.Id;
        java.lang.String str3 = getActivityTemplate0.getId();
        java.lang.String str4 = getActivityTemplate0.Id;
        java.lang.String str5 = getActivityTemplate0.Id;
        java.lang.String str6 = getActivityTemplate0.Id;
        java.lang.String str7 = getActivityTemplate0.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26650");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList2 = inspectionActivity1.getInspections();
        java.lang.String str3 = inspectionActivity1.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList4 = inspectionActivity1.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity6 = inspectionActivity1.setParty("https");
        fieldVisit0.InspectionActivity = inspectionActivity6;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList8 = fieldVisit0.CrossSectionSurveyActivity;
        java.lang.String str9 = fieldVisit0.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = gageHeightAtZeroFlowActivity10.setApplicableSince(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setComments("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        fieldVisit0.GageHeightAtZeroFlowActivity = gageHeightAtZeroFlowActivity14;
        java.time.Instant instant16 = gageHeightAtZeroFlowActivity14.getApplicableSince();
        java.lang.String str17 = gageHeightAtZeroFlowActivity14.Unit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails();
        gageHeightAtZeroFlowActivity14.CalculatedDetails = gageHeightAtZeroFlowCalculatedDetails18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity21 = gageHeightAtZeroFlowActivity14.setIsObserved((java.lang.Boolean) true);
        org.junit.Assert.assertNull(inspectionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(readingList4);
        org.junit.Assert.assertNotNull(inspectionActivity6);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity12);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity21);
    }

    @Test
    public void test26651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26651");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon8.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str11 = putTaxon8.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        extendedAttributeDefinition12.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon25 = putTaxon8.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon26.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str29 = putTaxon26.getComment();
        putTaxon26.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = postObservedProperty32.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41, importHistoryEventSimpleArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        observedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = postObservedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon46 = putTaxon26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon47 = putTaxon25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon48 = postTaxon5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        postTaxon5.ScientificName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel51 = postTaxon5.getTaxonomyLevel();
        java.lang.String str52 = postTaxon5.getItisUrl();
        postTaxon5.ItisUrl = "ZZZZZ";
        java.lang.String str55 = postTaxon5.ScientificName;
        java.lang.String str56 = postTaxon5.getId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(putTaxon25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(postObservedProperty45);
        org.junit.Assert.assertNotNull(putTaxon46);
        org.junit.Assert.assertNotNull(putTaxon47);
        org.junit.Assert.assertNotNull(postTaxon48);
        org.junit.Assert.assertNull(taxonomyLevel51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "MinInstant" + "'", str52, "MinInstant");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test26652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26652");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str1 = getExportObservations0.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        getExportObservations3.ImportHistoryEventId = "9999-12-31T23:59:59.999Z";
        java.lang.Integer int6 = getExportObservations3.Limit;
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations3.setEndModificationTime(instant7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations10 = getExportObservations3.setMaxNumericResultValue((java.lang.Double) 1.0d);
        java.lang.Double double11 = getExportObservations3.getDepthValue();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNotNull(getExportObservations10);
        org.junit.Assert.assertNull(double11);
    }

    @Test
    public void test26653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26653");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.Object obj1 = postVisitFileToVisit0.getResponseType();
        java.lang.String str2 = postVisitFileToVisit0.getVisitIdentifier();
        java.lang.String str3 = postVisitFileToVisit0.VisitIdentifier;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26654");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        importItemSamplingLocation2.RowId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.lang.String str31 = fieldTripBasic30.getId();
        importItemSamplingLocation2.Errors = fieldTripBasic30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList34 = getSpecimens33.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType36 = putUserV2_35.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse38.setNextToken(instant43);
        java.time.Instant instant47 = locationDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities48 = getActivities37.setToStartTime(instant47);
        java.lang.String str49 = getActivities48.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList51 = getObservationsV2_50.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        getObservationsV2_50.ResultGrades = strList63;
        getActivities48.Media = strList63;
        putUserV2_35.AccessGroups = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens70 = getSpecimens33.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList63);
        java.util.List<java.lang.String> strList71 = null;
        getSpecimens33.AnalyticalGroupIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj75 = timeAlignedDataServiceRequest74.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant77 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse78 = locationDescriptionListServiceResponse76.setNextToken(instant77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest79 = timeAlignedDataServiceRequest74.setQueryFrom(instant77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray84 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = putLocationTags80.setTagUniqueIds(strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest88 = timeAlignedDataServiceRequest74.setTimeSeriesOutputUnitIds(strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation89 = importItemObservation73.setFields((java.util.List<java.lang.String>) strList85);
        getSpecimens33.Search = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation91 = importItemSamplingLocation2.setFields((java.util.List<java.lang.String>) strList85);
        java.lang.String str92 = importItemSamplingLocation2.Input;
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(userType36);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(getActivities48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(getSpecimens70);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse78);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest79);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putLocationTags87);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest88);
        org.junit.Assert.assertNotNull(importItemObservation89);
        org.junit.Assert.assertNotNull(importItemSamplingLocation91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str92, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test26655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26655");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen1 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = fieldSheetImportSummary0.getFieldResultSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen3 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen4 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen7 = importSummarySpecimen5.setUpdateCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen9 = importSummarySpecimen5.setSummaryReportText("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary10 = fieldSheetImportSummary0.setSpecimenSummary(importSummarySpecimen9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen11 = fieldSheetImportSummary0.getSpecimenSummary();
        org.junit.Assert.assertNull(importSummarySpecimen1);
        org.junit.Assert.assertNull(importSummaryObservation2);
        org.junit.Assert.assertNull(importSummarySpecimen3);
        org.junit.Assert.assertNull(importSummarySpecimen4);
        org.junit.Assert.assertNotNull(importSummarySpecimen7);
        org.junit.Assert.assertNotNull(importSummarySpecimen9);
        org.junit.Assert.assertNotNull(fieldSheetImportSummary10);
        org.junit.Assert.assertNotNull(importSummarySpecimen11);
    }

    @Test
    public void test26656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26656");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        java.time.Instant instant1 = gageHeightReading0.getReadingTime();
        java.lang.Boolean boolean2 = gageHeightReading0.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading4 = gageHeightReading0.setIsUsed((java.lang.Boolean) false);
        java.lang.Boolean boolean5 = gageHeightReading0.IsUsed;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(gageHeightReading4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
    }

    @Test
    public void test26657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26657");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = locationGroupType0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType3 = locationGroupType0.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        locationGroupType3.AuditAttributes = auditAttributes35;
        locationGroupType3.Id = "";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(locationGroupType3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
    }

    @Test
    public void test26658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26658");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel2 = approvalLevel0.setDescription("MinInstant");
        approvalLevel0.Description = "multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****";
        org.junit.Assert.assertNotNull(approvalLevel2);
    }

    @Test
    public void test26659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26659");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.util.List<java.lang.String> strList1 = locationType0.ExtendedAttributeDefinitionIds;
        java.lang.String str2 = locationType0.getTypeName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType4 = locationType0.setAttributeTableName("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType6 = locationType4.setAttributeTableName("9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locationType4);
        org.junit.Assert.assertNotNull(locationType6);
    }

    @Test
    public void test26660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26660");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon18.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = putTaxon18.getComment();
        putTaxon18.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType25 = postObservedProperty24.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setCategoricalResult(categoricalResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33, importHistoryEventSimpleArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        observedProperty26.ImportHistoryEventSimples = importHistoryEventSimpleList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        java.lang.String str40 = putTaxon39.ItisUrl;
        java.lang.String str41 = putTaxon39.Source;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel42 = putTaxon39.TaxonomyLevel;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str44 = postTag43.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag46 = postTag43.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag48 = postTag46.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = specimenTemplate50.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType53 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate52.Preservative = preservativeType53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate60 = specimenTemplate52.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition61 = postDetectioncondition49.setAuditAttributes(auditAttributes58);
        postTag46.AuditAttributes = auditAttributes58;
        putTaxon39.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel64 = putTaxon39.getTaxonomyLevel();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisType25);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNotNull(putTaxon38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(taxonomyLevel42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(postTag46);
        org.junit.Assert.assertNotNull(postTag48);
        org.junit.Assert.assertNotNull(specimenTemplate52);
        org.junit.Assert.assertTrue("'" + preservativeType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType53.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(specimenTemplate60);
        org.junit.Assert.assertNotNull(postDetectioncondition61);
        org.junit.Assert.assertNull(taxonomyLevel64);
    }

    @Test
    public void test26661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26661");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon5 = putTaxon0.setItisUrl("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon7 = putTaxon0.setItisComment("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str8 = putTaxon7.Id;
        putTaxon7.Id = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        java.lang.String str11 = putTaxon7.getItisTsn();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putTaxon5);
        org.junit.Assert.assertNotNull(putTaxon7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test26662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26662");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        getObservationsV2_0.QualityControlTypes = strList11;
        java.util.List<java.lang.String> strList15 = getObservationsV2_0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj17 = putLocationType16.getResponseType();
        java.lang.String str18 = putLocationType16.AttributeTableName;
        java.lang.String str19 = putLocationType16.AttributeTableName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = reading20.getValue();
        reading20.ReferencePointUniqueId = "hi!";
        java.lang.String str24 = reading20.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary27.DifferenceDuringVisit = doubleWithDisplay28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay28.setNumeric((java.lang.Double) 100.0d);
        reading20.Value = doubleWithDisplay31;
        java.lang.Boolean boolean33 = reading20.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading35 = reading20.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_36.setDataClassifications((java.util.List<java.lang.String>) strList40);
        getObservationsV2_42.DepthUnitCustomId = "hi!";
        java.lang.String str45 = getObservationsV2_42.CustomId;
        java.util.List<java.lang.String> strList46 = getObservationsV2_42.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_42.setMedia((java.util.List<java.lang.String>) strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str64 = getObservationsV2_63.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        getObservationsV2_63.ProjectIds = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = getObservationsV2_42.setObservedPropertyIds((java.util.List<java.lang.String>) strList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading73 = reading20.setReadingQualifiers(strList68);
        putLocationType16.ExtendedAttributeDefinitionIds = strList68;
        getObservationsV2_0.AnalysisMethodSimpleIds = strList68;
        java.lang.String str76 = getObservationsV2_0.getDepthUnitId();
        java.lang.Double double77 = getObservationsV2_0.MinNumericResultValue;
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(reading35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_72);
        org.junit.Assert.assertNotNull(reading73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(double77);
    }

    @Test
    public void test26663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26663");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int1 = indexRange0.getUpperLimitValue();
        java.lang.Integer int2 = indexRange0.LowerLimitValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange4 = indexRange0.setDescription("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(indexRange4);
    }

    @Test
    public void test26664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26664");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest locationDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest();
        java.lang.Object obj1 = locationDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest locationDataServiceRequest3 = locationDataServiceRequest0.setIncludeLocationAttachments((java.lang.Boolean) false);
        java.lang.Boolean boolean4 = locationDataServiceRequest0.isIncludeLocationAttachments();
        java.lang.String str5 = locationDataServiceRequest0.getLocationIdentifier();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertNotNull(locationDataServiceRequest3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + false + "'", boolean4, false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26665");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade();
        searchResultResultGrade0.TotalCount = 4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade4 = searchResultResultGrade0.setCursor("ZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade> resultGradeList5 = searchResultResultGrade0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade> resultGradeList6 = searchResultResultGrade0.getDomainObjects();
        org.junit.Assert.assertNotNull(searchResultResultGrade4);
        org.junit.Assert.assertNull(resultGradeList5);
        org.junit.Assert.assertNull(resultGradeList6);
    }

    @Test
    public void test26666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26666");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.Name = "";
        postDetectioncondition0.Description = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition11 = postDetectioncondition0.setCustomId("/AQUARIUS/Provisioning/v1");
        java.lang.String str12 = postDetectioncondition0.CustomId;
        java.lang.String str13 = postDetectioncondition0.Name;
        postDetectioncondition0.Name = "MinInstant";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNotNull(postDetectioncondition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str12, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test26667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26667");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        java.lang.String str8 = getObservationsV2_0.getCustomId();
        getObservationsV2_0.DetectionCondition = "ZZZZZ";
        java.lang.Double double11 = getObservationsV2_0.getMinNumericResultValue();
        java.lang.String str12 = getObservationsV2_0.getSpecimenName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test26668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26668");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit2 = fieldVisit0.setFieldTrip(fieldTripSimple1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = fieldVisit2.getProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple6 = fieldTripSimple4.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str7 = fieldTripSimple6.getCustomId();
        fieldVisit2.FieldTrip = fieldTripSimple6;
        java.time.OffsetDateTime offsetDateTime9 = null;
        fieldVisit2.EndTime = offsetDateTime9;
        org.junit.Assert.assertNotNull(fieldVisit2);
        org.junit.Assert.assertNull(projectSimple3);
        org.junit.Assert.assertNotNull(fieldTripSimple6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str7, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test26669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26669");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate1 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        postFieldVisitActivityFromPlannedActivity0.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        getObservationsV2_6.ResultGrades = strList19;
        getExtendedAttributeDropdownlistitems5.Search = strList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult25 = metricResult4.setMatchedObservations((java.util.List<java.lang.String>) strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult27 = metricResult25.setOverriddenByUser((java.lang.Boolean) false);
        java.lang.Boolean boolean28 = metricResult25.getOverriddenByUser();
        metricResult25.AggregationResult = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate33 = postFieldVisitActivityWithTemplate31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType34 = null;
        postFieldVisitActivityWithTemplate33.Medium = mediumType34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity36.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity40 = postActivity36.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity40.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate43 = postFieldVisitActivityWithTemplate33.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult44 = metricResult25.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity45 = postFieldVisitActivityFromPlannedActivity0.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_48 = postObservationV2_46.setLabInstruction(labInstruction47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = plannedFieldResult49.AuditAttributes;
        plannedFieldResult49.Id = "'.'SSSSSSS";
        java.lang.String str53 = plannedFieldResult49.DeviceType;
        java.lang.String str54 = plannedFieldResult49.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str56 = metricConfiguration55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty57.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration60 = metricConfiguration55.setObservedProperty(observedProperty57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType61 = observedProperty57.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup63 = postObservedProperty62.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit65 = null;
        quantity64.Unit = unit65;
        postObservedProperty62.LowerLimit = quantity64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity68 = postObservedProperty62.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit69 = quantity68.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty70 = observedProperty57.setUpperLimit(quantity68);
        plannedFieldResult49.ObservedProperty = observedProperty70;
        plannedFieldResult49.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_74 = postObservationV2_46.setPlannedFieldResult(plannedFieldResult49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty75 = plannedFieldResult49.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty76 = plannedFieldResult49.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = null;
        activityTemplate77.AuditAttributes = auditAttributes78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str81 = putActivityTemplate80.getId();
        java.lang.String str82 = putActivityTemplate80.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = auditAttributes83.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate86 = putActivityTemplate80.setAuditAttributes(auditAttributes85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType87 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate86.Medium = mediumType87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate89 = activityTemplate77.setMedium(mediumType87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType90 = activityTemplate77.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType91 = activityTemplate77.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult92 = plannedFieldResult49.setMedium(mediumType91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity93 = postFieldVisitActivityFromPlannedActivity0.setMedium(mediumType91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes94 = postFieldVisitActivityFromPlannedActivity93.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType95 = postFieldVisitActivityFromPlannedActivity93.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod96 = postFieldVisitActivityFromPlannedActivity93.getCollectionMethod();
        org.junit.Assert.assertNull(activityTemplate1);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(metricResult25);
        org.junit.Assert.assertNotNull(metricResult27);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate33);
        org.junit.Assert.assertNotNull(postActivity40);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate43);
        org.junit.Assert.assertNotNull(metricResult44);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity45);
        org.junit.Assert.assertNotNull(postObservationV2_48);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'.'SSSSSSS" + "'", str54, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(metricConfiguration60);
        org.junit.Assert.assertNull(resultType61);
        org.junit.Assert.assertNull(unitGroup63);
        org.junit.Assert.assertNotNull(quantity68);
        org.junit.Assert.assertNull(unit69);
        org.junit.Assert.assertNotNull(observedProperty70);
        org.junit.Assert.assertNotNull(postObservationV2_74);
        org.junit.Assert.assertNotNull(observedProperty75);
        org.junit.Assert.assertNotNull(observedProperty76);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(auditAttributes85);
        org.junit.Assert.assertNotNull(putActivityTemplate86);
        org.junit.Assert.assertTrue("'" + mediumType87 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType87.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate89);
        org.junit.Assert.assertNull(activityTemplateType90);
        org.junit.Assert.assertTrue("'" + mediumType91 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType91.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(plannedFieldResult92);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity93);
        org.junit.Assert.assertNotNull(auditAttributes94);
        org.junit.Assert.assertNull(plannedActivityActivityType95);
        org.junit.Assert.assertNull(collectionMethod96);
    }

    @Test
    public void test26670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26670");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits2 = getUnits0.setCustomId("");
        getUnits2.CustomId = "/AQUARIUS";
        java.lang.String str5 = getUnits2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits7 = getUnits2.setUnitgroup("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits9 = getUnits7.setUnitgroup("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str10 = getUnits9.CustomId;
        org.junit.Assert.assertNotNull(getUnits2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNotNull(getUnits7);
        org.junit.Assert.assertNotNull(getUnits9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS" + "'", str10, "/AQUARIUS");
    }

    @Test
    public void test26671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26671");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = getChartDataV2_0.setDepthValue((java.lang.Double) 10.0d);
        java.util.List<java.lang.String> strList3 = getChartDataV2_2.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription5.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = locationDescription7.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = reading10.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading13 = reading10.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading13.setModel("MaxInstant");
        java.lang.Integer int16 = reading15.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField20 = extendedAttributeField18.setDisplayName("");
        java.lang.Boolean boolean21 = extendedAttributeField20.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj23 = timeAlignedDataServiceRequest22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_24.setDataClassifications((java.util.List<java.lang.String>) strList28);
        getObservationsV2_30.DepthUnitCustomId = "hi!";
        java.lang.String str33 = getObservationsV2_30.CustomId;
        java.util.List<java.lang.String> strList34 = getObservationsV2_30.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_30.setMedia((java.util.List<java.lang.String>) strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str52 = getObservationsV2_51.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        getObservationsV2_51.ProjectIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_30.setObservedPropertyIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest22.setTimeSeriesOutputUnitIds(strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField62 = extendedAttributeField20.setValueOptions((java.util.List<java.lang.String>) strList56);
        putBulkEditResultGradesV2_17.AnalysisMethodSimpleIds = strList56;
        reading15.ReadingQualifiers = strList56;
        locationDescription9.SecondaryFolders = strList56;
        sensorsAndGaugesServiceRequest4.TagKeys = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest68 = sensorsAndGaugesServiceRequest4.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest71 = fieldVisitDataByLocationServiceRequest69.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest80 = fieldVisitDataByLocationServiceRequest71.setParameters(strList77);
        java.util.ArrayList<java.lang.String> strList81 = fieldVisitDataByLocationServiceRequest80.getParameters();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest82 = sensorsAndGaugesServiceRequest68.setTagKeys(strList81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_83 = getChartDataV2_2.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList81);
        java.util.List<java.lang.String> strList84 = getChartDataV2_2.getAnalysisMethodSimpleIds();
        org.junit.Assert.assertNotNull(getChartDataV2_2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertNotNull(locationDescription9);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNotNull(reading13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(extendedAttributeField20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(extendedAttributeField62);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest68);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest82);
        org.junit.Assert.assertNotNull(getChartDataV2_83);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test26672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26672");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean1 = roleFlattened0.CanEditAppendConfigurations;
        roleFlattened0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean4 = roleFlattened0.isCanAddAppendConfigurations();
        roleFlattened0.CanReadData = false;
        java.lang.Boolean boolean7 = roleFlattened0.isCanRemoveAppendConfigurations();
        java.lang.Boolean boolean8 = roleFlattened0.isCanEditLocationDetails();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test26673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26673");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck4 = calibrationCheck0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck4.setModel("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.Boolean boolean7 = calibrationCheck4.Publish;
        java.lang.String str8 = calibrationCheck4.getSubLocationIdentifier();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(calibrationCheck4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26674");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str1 = crossSectionSurveyActivity0.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity3 = crossSectionSurveyActivity0.setComments("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        crossSectionPoint4.Distance = quantityWithDisplay5;
        crossSectionPoint4.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = crossSectionPoint4.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint11 = crossSectionPoint4.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint13 = crossSectionPoint11.setElevation(quantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = null;
        crossSectionPoint13.Depth = quantityWithDisplay14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint13.Depth = datumConvertedQuantityWithDisplay16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity18.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity18.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = pointVelocityDischargeActivity18.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList25 = pointVelocityDischargeActivity24.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity24.DistanceToMeter = datumConvertedQuantityWithDisplay26;
        crossSectionPoint13.Elevation = datumConvertedQuantityWithDisplay26;
        crossSectionSurveyActivity0.Stage = datumConvertedQuantityWithDisplay26;
        crossSectionSurveyActivity0.Comments = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType32 = crossSectionSurveyActivity0.StartingPoint;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity3);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNotNull(crossSectionPoint11);
        org.junit.Assert.assertNotNull(crossSectionPoint13);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity24);
        org.junit.Assert.assertNull(verticalList25);
        org.junit.Assert.assertNull(startPointType32);
    }

    @Test
    public void test26675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26675");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange();
        java.lang.String str1 = metricRange0.Comment;
        java.lang.Integer int2 = metricRange0.getLowerLimitValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange4 = metricRange0.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(metricRange4);
    }

    @Test
    public void test26676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26676");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod2 = locationMonitoringMethod0.setSubLocationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod4 = locationMonitoringMethod0.setParameterUniqueId("'.'SSSSSSS");
        java.lang.String str5 = locationMonitoringMethod0.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod0.setLocationIdentifier("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str8 = locationMonitoringMethod7.getName();
        locationMonitoringMethod7.UnitId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(locationMonitoringMethod2);
        org.junit.Assert.assertNotNull(locationMonitoringMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26677");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList1 = settingsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList3 = settingsResponse2.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList4 = settingsResponse2.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList5 = settingsResponse2.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList7 = settingsResponse6.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList8 = settingsResponse6.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting9.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting12.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting16 = setting12.setValue("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] settingArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] { setting9, setting12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>) settingList18, settingArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse20 = settingsResponse6.setResults(settingList18);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList21 = settingsResponse6.getResults();
        settingsResponse2.Results = settingList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList24 = settingsResponse23.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList25 = settingsResponse23.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList26 = settingsResponse23.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList28 = settingsResponse27.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList29 = settingsResponse27.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting30.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting33.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting37 = setting33.setValue("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] settingArray38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] { setting30, setting33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>) settingList39, settingArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse41 = settingsResponse27.setResults(settingList39);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList42 = settingsResponse27.getResults();
        settingsResponse23.Results = settingList42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse44 = settingsResponse2.setResults(settingList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList46 = settingsResponse45.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList47 = settingsResponse45.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList48 = settingsResponse45.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList50 = settingsResponse49.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList51 = settingsResponse49.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting52.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting55.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting59 = setting55.setValue("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] settingArray60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] { setting52, setting55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>) settingList61, settingArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse63 = settingsResponse49.setResults(settingList61);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList64 = settingsResponse49.getResults();
        settingsResponse45.Results = settingList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse66 = settingsResponse2.setResults(settingList64);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList67 = settingsResponse66.getResults();
        settingsResponse0.Results = settingList67;
        org.junit.Assert.assertNull(settingList1);
        org.junit.Assert.assertNull(settingList3);
        org.junit.Assert.assertNull(settingList4);
        org.junit.Assert.assertNull(settingList5);
        org.junit.Assert.assertNull(settingList7);
        org.junit.Assert.assertNull(settingList8);
        org.junit.Assert.assertNotNull(setting16);
        org.junit.Assert.assertNotNull(settingArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(settingsResponse20);
        org.junit.Assert.assertNotNull(settingList21);
        org.junit.Assert.assertNull(settingList24);
        org.junit.Assert.assertNull(settingList25);
        org.junit.Assert.assertNull(settingList26);
        org.junit.Assert.assertNull(settingList28);
        org.junit.Assert.assertNull(settingList29);
        org.junit.Assert.assertNotNull(setting37);
        org.junit.Assert.assertNotNull(settingArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(settingsResponse41);
        org.junit.Assert.assertNotNull(settingList42);
        org.junit.Assert.assertNotNull(settingsResponse44);
        org.junit.Assert.assertNull(settingList46);
        org.junit.Assert.assertNull(settingList47);
        org.junit.Assert.assertNull(settingList48);
        org.junit.Assert.assertNull(settingList50);
        org.junit.Assert.assertNull(settingList51);
        org.junit.Assert.assertNotNull(setting59);
        org.junit.Assert.assertNotNull(settingArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(settingsResponse63);
        org.junit.Assert.assertNotNull(settingList64);
        org.junit.Assert.assertNotNull(settingsResponse66);
        org.junit.Assert.assertNotNull(settingList67);
    }

    @Test
    public void test26678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26678");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule2.setCustomId("/AQUARIUS");
        java.lang.String str5 = schedule4.getCustomId();
        schedule4.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule4.setLastGenerationDate(offsetDateTime8);
        java.time.OffsetDateTime offsetDateTime10 = schedule4.getLastGenerationDate();
        java.time.OffsetDateTime offsetDateTime11 = schedule4.LastGenerationDate;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(offsetDateTime11);
    }

    @Test
    public void test26679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26679");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGradeHistory getResultGradeHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGradeHistory();
        getResultGradeHistory0.Id = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str3 = getResultGradeHistory0.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test26680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26680");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getLabReportIds();
        importItem9.Errors = getObservationsV2_10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        getObservationsV2_29.QualityControlTypes = strList40;
        getObservationsV2_27.ResultGrades = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem45 = importItem9.setFields((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_1.setSearch((java.util.List<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList47 = getObservationsV2_46.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports48 = getLabReports0.setSearch(strList47);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(importItem45);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(getLabReports48);
    }

    @Test
    public void test26681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26681");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple2 = analyticalGroupSimple0.setDescription("MinInstant");
        java.lang.Integer int3 = analyticalGroupSimple2.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple5 = analyticalGroupSimple2.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 4);
        analyticalGroupSimple2.Description = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNotNull(analyticalGroupSimple2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(analyticalGroupSimple5);
    }

    @Test
    public void test26682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26682");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType1 = fieldVisitReading0.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType3 = null;
        uncertainty2.UncertaintyType = uncertaintyType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = uncertainty2.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty6.QualitativeUncertainty = qualitativeUncertaintyType7;
        uncertainty2.QualitativeUncertainty = qualitativeUncertaintyType7;
        fieldVisitReading0.Uncertainty = uncertainty2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        java.util.List<java.lang.String> strList27 = getObservationsV2_12.getLabReportIds();
        importItem11.Errors = getObservationsV2_12;
        java.lang.Object obj29 = importItem11.getExistingItem();
        java.util.List<java.lang.String> strList30 = importItem11.getFields();
        importItem11.Errors = '4';
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType34 = null;
        uncertainty33.UncertaintyType = uncertaintyType34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = uncertainty33.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType38 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty37.QualitativeUncertainty = qualitativeUncertaintyType38;
        uncertainty33.QualitativeUncertainty = qualitativeUncertaintyType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType41 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty42 = uncertainty33.setQualitativeUncertainty(qualitativeUncertaintyType41);
        importItem11.Item = qualitativeUncertaintyType41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty44 = uncertainty2.setQualitativeUncertainty(qualitativeUncertaintyType41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType45 = uncertainty2.QualitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType46 = uncertainty2.UncertaintyType;
        org.junit.Assert.assertNull(fieldVisitReadingType1);
        org.junit.Assert.assertNull(doubleWithDisplay5);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(doubleWithDisplay36);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType38.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType41.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty42);
        org.junit.Assert.assertNotNull(uncertainty44);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType45.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNull(uncertaintyType46);
    }

    @Test
    public void test26683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26683");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon1.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str4 = putTaxon1.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = specimenTemplate6.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate8.Preservative = preservativeType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate8.setAuditAttributes(auditAttributes14);
        extendedAttributeDefinition5.AuditAttributes = auditAttributes14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = putTaxon1.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon19.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str22 = putTaxon19.getComment();
        putTaxon19.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType26 = postObservedProperty25.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation28.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation28.setCategoricalResult(categoricalResult31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList34, importHistoryEventSimpleArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = observation28.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList34);
        observedProperty27.ImportHistoryEventSimples = importHistoryEventSimpleList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty38 = postObservedProperty25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon40 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList34);
        putLabAnalysisMethod0.ImportHistoryEventSimples = importHistoryEventSimpleList34;
        java.lang.String str42 = putLabAnalysisMethod0.getId();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(specimenTemplate8);
        org.junit.Assert.assertTrue("'" + preservativeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNotNull(putTaxon18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(analysisType26);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(observation36);
        org.junit.Assert.assertNotNull(postObservedProperty38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertNotNull(putTaxon40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test26684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26684");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("https");
        openIdConnectRelyingPartyConfigurationBase4.ClientSecret = "POST";
        java.lang.String str7 = openIdConnectRelyingPartyConfigurationBase4.getOptionalIssuerDiscoveryUri();
        java.lang.String str8 = openIdConnectRelyingPartyConfigurationBase4.getIdentifierClaim();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase10 = openIdConnectRelyingPartyConfigurationBase4.setDisplayName("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase12 = openIdConnectRelyingPartyConfigurationBase4.setDisplayName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str13 = openIdConnectRelyingPartyConfigurationBase4.getIdentifierClaim();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase10);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test26685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26685");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList3 = fieldVisit0.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList4 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        java.lang.String str8 = datumConversionResult5.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = fieldVisit0.setDatumConversionResult(datumConversionResult10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = fieldVisit0.setLevelSurveyActivity(levelSurveyActivity12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        levelSurveyActivity14.Party = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str18 = levelSurveyActivity17.getParty();
        java.lang.String str19 = levelSurveyActivity17.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList20 = levelSurveyActivity17.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity22 = levelSurveyActivity17.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList24, levelSurveyMeasurementArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity26 = levelSurveyActivity22.setLevelMeasurements(levelSurveyMeasurementList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity27 = levelSurveyActivity14.setLevelMeasurements(levelSurveyMeasurementList24);
        levelSurveyActivity14.Party = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit30 = fieldVisit13.setLevelSurveyActivity(levelSurveyActivity14);
        java.lang.String str31 = fieldVisit13.getLocationIdentifier();
        java.lang.String str32 = fieldVisit13.getLocationIdentifier();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentList3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNotNull(fieldVisit13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(levelSurveyMeasurementList20);
        org.junit.Assert.assertNotNull(levelSurveyActivity22);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity26);
        org.junit.Assert.assertNotNull(levelSurveyActivity27);
        org.junit.Assert.assertNotNull(fieldVisit30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test26686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26686");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation();
        putLocation0.Elevation = 1.0d;
    }

    @Test
    public void test26687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26687");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str1 = tagMetadata0.getValue();
        java.lang.String str2 = tagMetadata0.UniqueId;
        tagMetadata0.Value = "https";
        tagMetadata0.Name = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata8 = tagMetadata0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata10 = tagMetadata8.setName("http://MaxDurationhttp/json/reply/Integer");
        tagMetadata10.Name = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(tagMetadata8);
        org.junit.Assert.assertNotNull(tagMetadata10);
    }

    @Test
    public void test26688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26688");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.lang.String str3 = putSamplingLocation2.VerticalDatum;
        java.lang.String str4 = putSamplingLocation2.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation2.setVerticalDatum("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = putSamplingLocation6.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation10 = putSamplingLocation6.setHorizontalCollectionMethod("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str12 = samplingLocation11.Description;
        java.lang.String str13 = samplingLocation11.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType14 = samplingLocation11.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList16 = postAnalysisMethod15.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod18 = postAnalysisMethod15.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod20 = postAnalysisMethod15.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup22 = postObservedProperty21.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList24, importHistoryEventSimpleArray23);
        postObservedProperty21.ImportHistoryEventSimples = importHistoryEventSimpleList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod27 = postAnalysisMethod15.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation11.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList24);
        putSamplingLocation6.ImportHistoryEventSimples = importHistoryEventSimpleList24;
        java.lang.String str30 = putSamplingLocation6.Latitude;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(putSamplingLocation8);
        org.junit.Assert.assertNotNull(putSamplingLocation10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(locationType14);
        org.junit.Assert.assertNull(importHistoryEventSimpleList16);
        org.junit.Assert.assertNotNull(postAnalysisMethod18);
        org.junit.Assert.assertNotNull(postAnalysisMethod20);
        org.junit.Assert.assertNull(unitGroup22);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test26689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26689");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        java.lang.String str4 = location0.getLocationPath();
        java.lang.String str5 = location0.ElevationUnits;
        java.time.Instant instant6 = location0.LastModified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location8 = location0.setElevationUnits("http");
        java.lang.Boolean boolean9 = location8.getIsExternalLocation();
        java.lang.String str10 = location8.Description;
        location8.UtcOffset = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(location8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test26690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26690");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSummaryReportText("9999-12-31T23:59:59.9999999Z");
        java.lang.Integer int9 = taxonImportSummary0.SkippedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary11 = taxonImportSummary0.setInvalidRowsCsvUrl("POST");
        java.lang.Integer int12 = taxonImportSummary0.UpdateCount;
        taxonImportSummary0.SuccessCount = 4;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList15 = taxonImportSummary0.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple16 = taxonImportSummary0.ImportHistoryEventSimple;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(taxonImportSummary11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(importItemTaxonList15);
        org.junit.Assert.assertNull(importHistoryEventSimple16);
    }

    @Test
    public void test26691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26691");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity8 = gageHeightAtZeroFlowActivity6.setApplicableSince(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit9 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity10 = fieldVisit0.getGageHeightAtZeroFlowActivity();
        java.time.Instant instant11 = fieldVisit0.getLastModified();
        java.lang.String str12 = fieldVisit0.Weather;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType14 = null;
        controlConditionActivity13.ControlCleaned = controlCleanedType14;
        fieldVisit0.ControlConditionActivity = controlConditionActivity13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription18 = fieldVisit0.setIdentifier("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity19 = fieldVisit0.LevelSurveyActivity;
        java.lang.String str20 = fieldVisit0.Weather;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList22 = fieldVisitDataServiceResponse21.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult25 = datumConversionResult23.setTargetDatum("http");
        java.lang.String str26 = datumConversionResult25.FailureReason;
        fieldVisitDataServiceResponse21.DatumConversionResult = datumConversionResult25;
        datumConversionResult25.TargetDatum = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        fieldVisit0.DatumConversionResult = datumConversionResult25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult32 = datumConversionResult25.setFailureReason("");
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity8);
        org.junit.Assert.assertNotNull(fieldVisit9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(fieldVisitDescription18);
        org.junit.Assert.assertNull(levelSurveyActivity19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(dischargeActivityList22);
        org.junit.Assert.assertNotNull(datumConversionResult25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(datumConversionResult32);
    }

    @Test
    public void test26692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26692");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        activeMeterDetails0.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Adv;
        activeMeterDetails0.MeterType = meterType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter6 = activeMeterDetails0.setManufacturer("https");
        java.lang.String str7 = activeMeterDetails0.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType8 = activeMeterDetails0.MeterType;
        org.junit.Assert.assertTrue("'" + meterType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Adv + "'", meterType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Adv));
        org.junit.Assert.assertNotNull(currentMeter6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + meterType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Adv + "'", meterType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType.Adv));
    }

    @Test
    public void test26693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26693");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setVelocityObservationMethod(pointVelocityObservationType3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = calibrationCheck6.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = calibrationCheck6.setTime(instant18);
        monitoringMethodListServiceResponse5.ResponseTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse22 = monitoringMethodListServiceResponse5.setSummary("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse24 = monitoringMethodListServiceResponse5.setResponseVersion((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = timeAlignedDataServiceRequest26.setQueryFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription32 = timeSeriesDescription25.setRawStartTime(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription34 = timeSeriesDescription32.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription36 = timeSeriesDescription34.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str37 = timeSeriesDescription36.getDescription();
        java.time.Instant instant38 = timeSeriesDescription36.RawStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse39 = monitoringMethodListServiceResponse24.setResponseTime(instant38);
        vertical0.MeasurementTime = instant38;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertTrue("'" + pointVelocityObservationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix + "'", pointVelocityObservationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix));
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(calibrationCheck19);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse22);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest31);
        org.junit.Assert.assertNotNull(timeSeriesDescription32);
        org.junit.Assert.assertNotNull(timeSeriesDescription34);
        org.junit.Assert.assertNotNull(timeSeriesDescription36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse39);
    }

    @Test
    public void test26694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26694");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = putSpecimen2.getShippingContainer();
        java.lang.String str5 = putSpecimen2.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str7 = putLabReport6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = putLabReport6.Laboratory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory9.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str12 = laboratory9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = laboratory9.getAuditAttributes();
        java.lang.String str14 = laboratory9.getPointOfContact();
        putLabReport6.Laboratory = laboratory9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen2.setLaboratory(laboratory9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory17.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory21 = laboratory17.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory23 = laboratory17.setPhoneNumber("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen24 = putSpecimen16.setLaboratory(laboratory23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory25 = putSpecimen16.getLaboratory();
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(laboratory8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNotNull(laboratory21);
        org.junit.Assert.assertNotNull(laboratory23);
        org.junit.Assert.assertNotNull(putSpecimen24);
        org.junit.Assert.assertNotNull(laboratory25);
    }

    @Test
    public void test26695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26695");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField5 = extendedAttributeField2.setDisplayName("'.'SSSSSSS");
        java.lang.String str6 = extendedAttributeField2.UniqueId;
        java.lang.Boolean boolean7 = extendedAttributeField2.isCanBeEmpty();
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttributeField5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test26696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26696");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen1 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = fieldSheetImportSummary0.getFieldResultSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen3 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen4 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation7 = importSummaryObservation5.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation9 = importSummaryObservation7.setSuccessCount((java.lang.Integer) 2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList10 = importSummaryObservation7.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation12 = importSummaryObservation7.setUpdateCount((java.lang.Integer) (-1));
        fieldSheetImportSummary0.FieldResultSummary = importSummaryObservation7;
        org.junit.Assert.assertNull(importSummarySpecimen1);
        org.junit.Assert.assertNull(importSummaryObservation2);
        org.junit.Assert.assertNull(importSummarySpecimen3);
        org.junit.Assert.assertNull(importSummarySpecimen4);
        org.junit.Assert.assertNotNull(importSummaryObservation7);
        org.junit.Assert.assertNotNull(importSummaryObservation9);
        org.junit.Assert.assertNull(importErrorList10);
        org.junit.Assert.assertNotNull(importSummaryObservation12);
    }

    @Test
    public void test26697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26697");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition2 = putDetectioncondition0.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str3 = putDetectioncondition2.Description;
        putDetectioncondition2.Name = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertNotNull(putDetectioncondition2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26698");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.getDescription();
        java.lang.String str2 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag4 = postTag0.setId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postTag4);
    }

    @Test
    public void test26699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26699");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon4 = putTaxon0.setItisTsn("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon6 = putTaxon4.setItisComment("2021.8.9990");
        putTaxon6.ItisUrl = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        java.lang.String str9 = putTaxon6.Comment;
        org.junit.Assert.assertNotNull(putTaxon4);
        org.junit.Assert.assertNotNull(putTaxon6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test26700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26700");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter();
        java.lang.String str1 = searchResultFilter0.getCursor();
        java.lang.Integer int2 = searchResultFilter0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList3 = searchResultFilter0.DomainObjects;
        searchResultFilter0.Cursor = "2021.8.9990";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList6 = searchResultFilter0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter8 = searchResultFilter0.setTotalCount((java.lang.Integer) 5);
        java.lang.String str9 = searchResultFilter8.getCursor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(filterList3);
        org.junit.Assert.assertNull(filterList6);
        org.junit.Assert.assertNotNull(searchResultFilter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.8.9990" + "'", str9, "2021.8.9990");
    }

    @Test
    public void test26701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26701");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole();
        java.lang.String str1 = getRole0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole3 = getRole0.setUniqueId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getRole3);
    }

    @Test
    public void test26702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26702");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setMeanVelocity(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = vertical3.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical3.getSegmentVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary6.BaseFlow = baseFlowType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType13 = dischargeSummary6.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList15 = ratingModelDescriptionListServiceResponse14.RatingModelDescriptions;
        java.time.Instant instant16 = ratingModelDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType18 = calibrationCheck17.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = calibrationCheck17.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck30 = calibrationCheck17.setTime(instant29);
        java.time.Instant instant31 = calibrationCheck30.Time;
        ratingModelDescriptionListServiceResponse14.NextToken = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary6.setMeasurementEndTime(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = dischargeSummary33.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = dischargeSummary33.setGageHeightComments("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str38 = crossSectionSurveyActivity37.Channel;
        java.lang.String str39 = crossSectionSurveyActivity37.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity42 = adcpDischargeActivity40.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = adcpDischargeActivity42.getDischargeCoefficientVariation();
        adcpDischargeActivity42.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = dischargeSummary46.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = dischargeSummary46.Discharge;
        java.lang.Integer int49 = dischargeSummary46.getGradeCode();
        java.lang.String str50 = dischargeSummary46.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = dischargeSummary46.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        adcpDischargeActivity42.Area = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity54 = crossSectionSurveyActivity37.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary36.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        vertical3.SegmentDischarge = datumConvertedQuantityWithDisplay51;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(calibrationCheckType18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(calibrationCheck30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(dischargeSummary36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(adcpDischargeActivity42);
        org.junit.Assert.assertNull(doubleWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay47);
        org.junit.Assert.assertNull(quantityWithDisplay48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dischargeSummary52);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
    }

    @Test
    public void test26703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26703");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject6 = postProject4.setAuditAttributes(auditAttributes5);
        java.time.OffsetDateTime offsetDateTime7 = null;
        postProject4.StartTime = offsetDateTime7;
        java.time.OffsetDateTime offsetDateTime9 = postProject4.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject11 = postProject4.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan12.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan12.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup17 = samplingPlan12.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = samplingPlan12.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject20 = postProject11.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition21 = postDetectioncondition3.setAuditAttributes(auditAttributes18);
        postDetectioncondition21.Name = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime25 = putSchedule24.StartDate;
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = putSchedule24.setEndDate(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = putSchedule27.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime29 = null;
        putSchedule27.LastGenerationDate = offsetDateTime29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType31 = putSchedule27.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = plannedFieldResult32.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails36 = labResultDetails34.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails38 = labResultDetails36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult39 = plannedFieldResult32.setAuditAttributes(auditAttributes37);
        putSchedule27.AuditAttributes = auditAttributes37;
        postDetectioncondition21.AuditAttributes = auditAttributes37;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNotNull(postProject6);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(postProject11);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup17);
        org.junit.Assert.assertNotNull(samplingPlan19);
        org.junit.Assert.assertNotNull(postProject20);
        org.junit.Assert.assertNotNull(postDetectioncondition21);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(putSchedule27);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(labResultDetails36);
        org.junit.Assert.assertNotNull(labResultDetails38);
        org.junit.Assert.assertNotNull(plannedFieldResult39);
    }

    @Test
    public void test26704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26704");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str1 = setting0.getKey();
        java.lang.String str2 = setting0.getGroup();
        setting0.Group = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting6 = setting0.setIsSystem((java.lang.Boolean) false);
        java.lang.String str7 = setting6.Description;
        setting6.Group = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(setting6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26705");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        observation2.CustomId = "";
        observation2.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        java.lang.String str26 = samplingLocation24.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation2.setSamplingLocation(samplingLocation24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = samplingLocation24.Elevation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation30 = samplingLocation24.setCustomId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNotNull(quantity28);
        org.junit.Assert.assertNotNull(samplingLocation30);
    }

    @Test
    public void test26706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26706");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        java.time.OffsetDateTime offsetDateTime1 = putFieldVisit0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple2 = putFieldVisit0.getFieldTrip();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = putFieldVisit0.getPlannedActivities();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList4 = putFieldVisit0.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        putFieldVisit0.ExtendedAttributes = extendedAttributeList5;
        java.time.OffsetDateTime offsetDateTime7 = putFieldVisit0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime9 = fieldTripBasic8.getEndTime();
        java.lang.String str10 = fieldTripBasic8.Participants;
        fieldTripBasic8.Notes = "'.'SSSSSSS";
        java.lang.String str13 = fieldTripBasic8.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment17 = null;
        domainObjectAttachment14.Attachment = attachment17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str20 = domainObjectAttachment19.getId();
        domainObjectAttachment19.Id = "2021.4.62.0";
        java.lang.String str23 = domainObjectAttachment19.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        domainObjectAttachment24.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment24.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = domainObjectAttachment30.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        java.lang.String str35 = domainObjectAttachment33.getId();
        domainObjectAttachment33.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = domainObjectAttachment33.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment39.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        domainObjectAttachment43.Attachment = attachment46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        java.lang.String str50 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment14, domainObjectAttachment19, domainObjectAttachment30, domainObjectAttachment39, domainObjectAttachment42, domainObjectAttachment43, domainObjectAttachment48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList52, domainObjectAttachmentArray51);
        fieldTripBasic8.Attachments = domainObjectAttachmentList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = null;
        putActivity56.Depth = quantity57;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList59 = putActivity56.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        java.lang.String str63 = domainObjectAttachment61.getId();
        domainObjectAttachment61.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment67 = domainObjectAttachment61.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = domainObjectAttachment67.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str71 = domainObjectAttachment70.getId();
        java.lang.String str72 = domainObjectAttachment70.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment67, domainObjectAttachment70 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList74 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList74, domainObjectAttachmentArray73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit76 = fieldVisit60.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList74);
        putActivity56.FieldVisit = fieldVisit76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit78.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList83 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList83, plannedActivityArray82);
        putFieldVisit81.PlannedActivities = plannedActivityList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit86 = putFieldVisit78.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit87 = fieldVisit76.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList83);
        putFieldVisit55.PlannedActivities = plannedActivityList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple89 = putFieldVisit55.getProject();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(fieldTripSimple2);
        org.junit.Assert.assertNull(plannedActivityList3);
        org.junit.Assert.assertNull(plannedFieldResultList4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2021.4.62.0" + "'", str23, "2021.4.62.0");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNotNull(domainObjectAttachment32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(domainObjectAttachment39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(specimenNestedInActivityList59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachment67);
        org.junit.Assert.assertNotNull(domainObjectAttachment69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(fieldVisit76);
        org.junit.Assert.assertNotNull(plannedActivityArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(putFieldVisit86);
        org.junit.Assert.assertNotNull(fieldVisit87);
        org.junit.Assert.assertNull(projectSimple89);
    }

    @Test
    public void test26707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26707");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity2 = null;
        putActivity1.PlannedActivity = plannedActivity2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity4.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity4.setPlannedActivity(plannedActivity7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str10 = samplingContextTag9.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag12 = samplingContextTag9.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = samplingContextTag12.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str16 = samplingContextTag15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str18 = samplingContextTag17.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        samplingContextTag17.AuditAttributes = auditAttributes19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag21.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag14, samplingContextTag15, samplingContextTag17, samplingContextTag24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList26, samplingContextTagArray25);
        postActivity4.SamplingContextTags = samplingContextTagList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity29 = putActivity1.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity31 = putActivity29.setCollectionMethod(collectionMethod30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = putDetectioncondition32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition35 = putDetectioncondition32.setCustomId("http");
        java.lang.String str36 = putDetectioncondition32.getName();
        java.lang.String str37 = putDetectioncondition32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation40 = postSamplingLocation38.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation41.setPlannedFieldResult(plannedFieldResult42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction44 = null;
        observation43.LabInstruction = labInstruction44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = observation43.setStatistics(observationStatistics46);
        java.time.OffsetDateTime offsetDateTime48 = observation47.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = observation47.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation47.setObservedProperty(observedProperty50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade52 = observation51.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails53.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAuditAttributes(auditAttributes56);
        observation51.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation59 = postSamplingLocation40.setAuditAttributes(auditAttributes56);
        putDetectioncondition32.AuditAttributes = auditAttributes56;
        putActivity31.AuditAttributes = auditAttributes56;
        activityWithDetails0.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device63 = activityWithDetails0.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device64 = activityWithDetails0.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str66 = postTag65.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag68 = postTag65.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag70 = postTag68.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = specimenTemplate72.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType75 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate74.Preservative = preservativeType75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails79 = labResultDetails77.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails81 = labResultDetails79.setAuditAttributes(auditAttributes80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate82 = specimenTemplate74.setAuditAttributes(auditAttributes80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition83 = postDetectioncondition71.setAuditAttributes(auditAttributes80);
        postTag68.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails85 = activityWithDetails0.setAuditAttributes(auditAttributes80);
        java.lang.String str86 = activityWithDetails0.SourceActivityId;
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(samplingContextTag12);
        org.junit.Assert.assertNotNull(samplingContextTag14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNotNull(samplingContextTagArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putActivity29);
        org.junit.Assert.assertNotNull(putActivity31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(putDetectioncondition35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(postSamplingLocation40);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(observation47);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNull(importHistoryEventSimpleList49);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNull(resultGrade52);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(postSamplingLocation59);
        org.junit.Assert.assertNull(device63);
        org.junit.Assert.assertNull(device64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(postTag68);
        org.junit.Assert.assertNotNull(postTag70);
        org.junit.Assert.assertNotNull(specimenTemplate74);
        org.junit.Assert.assertTrue("'" + preservativeType75 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType75.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails79);
        org.junit.Assert.assertNotNull(labResultDetails81);
        org.junit.Assert.assertNotNull(specimenTemplate82);
        org.junit.Assert.assertNotNull(postDetectioncondition83);
        org.junit.Assert.assertNotNull(activityWithDetails85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test26708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26708");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.EncryptedPassword = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str4 = getAuthTokenServiceRequest0.getLocale();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest6 = getAuthTokenServiceRequest0.setUsername("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str7 = getAuthTokenServiceRequest6.getLocale();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26709");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratoryHistory getLaboratoryHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratoryHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratoryHistory getLaboratoryHistory2 = getLaboratoryHistory0.setId("/AQUARIUS/Acquisition/v2");
        java.lang.Object obj3 = getLaboratoryHistory0.getResponseType();
        java.lang.String str4 = getLaboratoryHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratoryHistory getLaboratoryHistory6 = getLaboratoryHistory0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(getLaboratoryHistory2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str4, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(getLaboratoryHistory6);
    }

    @Test
    public void test26710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26710");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        java.lang.Object obj2 = putExtendedAttribute0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition5 = extendedAttributeDefinition3.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition7 = extendedAttributeDefinition5.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition9 = extendedAttributeDefinition5.setId("2021.4.62.0");
        java.lang.String str10 = extendedAttributeDefinition5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = extendedAttributeDefinition5.setId("ZZZZZ");
        java.lang.String str13 = extendedAttributeDefinition5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem14.TotalCount = 10;
        searchResultExtendedAttributeListItem14.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        java.lang.String str20 = searchResultExtendedAttributeListItem19.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem21.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str25 = extendedAttributeListItem24.getId();
        java.lang.String str26 = extendedAttributeListItem24.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str28 = extendedAttributeListItem27.CustomId;
        extendedAttributeListItem27.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str32 = extendedAttributeListItem31.getId();
        java.lang.String str33 = extendedAttributeListItem31.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        extendedAttributeListItem34.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str38 = extendedAttributeListItem37.getId();
        java.lang.String str39 = extendedAttributeListItem37.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str41 = extendedAttributeListItem40.getId();
        java.lang.String str42 = extendedAttributeListItem40.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem24, extendedAttributeListItem27, extendedAttributeListItem31, extendedAttributeListItem34, extendedAttributeListItem37, extendedAttributeListItem40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList44, extendedAttributeListItemArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem46 = searchResultExtendedAttributeListItem21.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList44);
        searchResultExtendedAttributeListItem19.DomainObjects = extendedAttributeListItemList44;
        searchResultExtendedAttributeListItem14.DomainObjects = extendedAttributeListItemList44;
        extendedAttributeDefinition5.DropDownListItems = extendedAttributeListItemList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute50 = putExtendedAttribute0.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType51 = putExtendedAttribute50.AppliesToType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNotNull(extendedAttributeDefinition5);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition7);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeListItem46);
        org.junit.Assert.assertNotNull(putExtendedAttribute50);
        org.junit.Assert.assertNull(appliesToType51);
    }

    @Test
    public void test26711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26711");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = schedule4.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule4.setEndDate(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType8 = schedule7.getRecurrenceType();
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(recurrenceType8);
    }

    @Test
    public void test26712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26712");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = specimen2.Laboratory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen5 = specimen2.setPreservative(preservativeType4);
        specimen5.Description = "'.'SSSSSSS";
        specimen5.Id = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = specimen5.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = specimen5.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList12 = specimen5.getExtendedAttributes();
        java.lang.String str13 = specimen5.FiltrationComment;
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(laboratory3);
        org.junit.Assert.assertNotNull(specimen5);
        org.junit.Assert.assertNull(extendedAttributeList10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(extendedAttributeList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str13, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
    }

    @Test
    public void test26713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26713");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant2 = interval1.Start;
        java.time.Instant instant3 = interval1.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard4 = putStandard0.setApplicabilityRange(interval1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard6 = putStandard4.setCustomId("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(putStandard4);
        org.junit.Assert.assertNotNull(putStandard6);
    }

    @Test
    public void test26714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26714");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.Boolean boolean1 = locationUserRole0.isInheritedFromParentLocationFolder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole3 = locationUserRole0.setRoleName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        locationUserRole0.AppliedToLocationUniqueId = "MaxDuration";
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(locationFolderUserRole3);
    }

    @Test
    public void test26715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26715");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType3 = putUserV2_2.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        dischargeSummary6.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse5.setNextToken(instant10);
        java.time.Instant instant14 = locationDescriptionListServiceResponse5.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities4.setToStartTime(instant14);
        java.lang.String str16 = getActivities15.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList18 = getObservationsV2_17.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        getObservationsV2_17.ResultGrades = strList30;
        getActivities15.Media = strList30;
        putUserV2_2.AccessGroups = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens37 = getSpecimens0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList38 = null;
        getSpecimens0.AnalyticalGroupIds = strList38;
        java.util.List<java.lang.String> strList40 = getSpecimens0.SamplingLocationGroupIds;
        java.util.List<java.lang.String> strList41 = getSpecimens0.getLaboratoryIds();
        java.time.Instant instant42 = getSpecimens0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark45 = locationRemark43.setDescription("MaxInstant");
        java.lang.String str46 = locationRemark45.getTypeName();
        java.time.Instant instant47 = locationRemark45.CreateTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark49 = locationRemark45.setTypeName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str51 = referencePointPeriod50.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase53 = referencePointPeriod50.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod50.Uncertainty = 10.0d;
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase57 = referencePointPeriod50.setValidFrom(instant56);
        locationRemark45.ToTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant60 = qualifier59.DateApplied;
        java.lang.String str61 = qualifier59.User;
        java.lang.String str62 = qualifier59.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary64.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        dischargeSummary64.MeasurementTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse63.setNextToken(instant68);
        java.time.Instant instant72 = locationDescriptionListServiceResponse63.getNextToken();
        java.time.Instant instant73 = locationDescriptionListServiceResponse63.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange74 = qualifier59.setStartTime(instant73);
        locationRemark45.ToTime = instant73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens76 = getSpecimens0.setStartModificationTime(instant73);
        java.util.List<java.lang.String> strList77 = getSpecimens0.getSamplingLocationIds();
        java.lang.String str78 = getSpecimens0.Cursor;
        java.util.List<java.lang.String> strList79 = getSpecimens0.SamplingLocationGroupIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(userType3);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getSpecimens37);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNotNull(locationRemark45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNotNull(locationRemark49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(referencePointPeriodBase53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(referencePointPeriodBase57);
        org.junit.Assert.assertNull(instant60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(timeRange74);
        org.junit.Assert.assertNotNull(getSpecimens76);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test26716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26716");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem();
        java.lang.String str1 = fixedDropDownListItem0.getDropDownListDisplayName();
        java.lang.String str2 = fixedDropDownListItem0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem4 = fixedDropDownListItem0.setDropDownListDisplayName("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem6 = fixedDropDownListItem0.setDisplayName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fixedDropDownListItem4);
        org.junit.Assert.assertNotNull(fixedDropDownListItem6);
    }

    @Test
    public void test26717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26717");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        java.lang.String str5 = controlConditionActivity2.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = fieldVisitDataServiceResponse0.setControlConditionActivity(controlConditionActivity2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        controlConditionActivity7.ControlCleaned = controlCleanedType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        controlConditionActivity7.DistanceToGage = quantityWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity13 = controlConditionActivity7.setParty("POST");
        fieldVisitDataServiceResponse0.ControlConditionActivity = controlConditionActivity7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult17 = datumConversionResult15.setTargetDatum("http");
        java.lang.String str18 = datumConversionResult15.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult20 = datumConversionResult15.setTargetDatum("https");
        datumConversionResult20.TargetDatum = "/AQUARIUS";
        java.lang.String str23 = datumConversionResult20.getTargetDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse24 = fieldVisitDataServiceResponse0.setDatumConversionResult(datumConversionResult20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList26 = fieldVisitDataServiceResponse25.DischargeActivities;
        fieldVisitDataServiceResponse25.Identifier = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList30 = inspectionActivity29.getInspections();
        java.lang.String str31 = inspectionActivity29.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList32 = inspectionActivity29.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity34 = inspectionActivity29.setParty("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList35 = inspectionActivity34.Inspections;
        fieldVisitDataServiceResponse25.InspectionActivity = inspectionActivity34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList38 = inspectionActivity37.getInspections();
        java.lang.String str39 = inspectionActivity37.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList40 = inspectionActivity37.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity42 = inspectionActivity37.setParty("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = reading43.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading46 = reading43.setParameterId("hi!");
        java.lang.String str47 = reading43.MonitoringMethod;
        reading43.SubLocationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = reading50.getValue();
        reading50.ReferencePointUniqueId = "hi!";
        java.lang.String str54 = reading50.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary57.DifferenceDuringVisit = doubleWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay61 = doubleWithDisplay58.setNumeric((java.lang.Double) 100.0d);
        reading50.Value = doubleWithDisplay61;
        java.lang.String str63 = reading50.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading[] readingArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading[] { reading43, reading50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading>) readingList65, readingArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity67 = inspectionActivity42.setReadings(readingList65);
        inspectionActivity34.Readings = readingList65;
        java.lang.Boolean boolean69 = inspectionActivity34.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity71 = inspectionActivity34.setNumberOfReadingsNotDatumConverted((java.lang.Integer) 2);
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity74 = inspectionActivity71.setIsValid((java.lang.Boolean) false);
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse6);
        org.junit.Assert.assertNotNull(controlConditionActivity13);
        org.junit.Assert.assertNotNull(datumConversionResult17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http" + "'", str18, "http");
        org.junit.Assert.assertNotNull(datumConversionResult20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/AQUARIUS" + "'", str23, "/AQUARIUS");
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse24);
        org.junit.Assert.assertNull(dischargeActivityList26);
        org.junit.Assert.assertNull(inspectionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(readingList32);
        org.junit.Assert.assertNotNull(inspectionActivity34);
        org.junit.Assert.assertNull(inspectionList35);
        org.junit.Assert.assertNull(inspectionList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(readingList40);
        org.junit.Assert.assertNotNull(inspectionActivity42);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNotNull(reading46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(doubleWithDisplay51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(doubleWithDisplay61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(readingArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(inspectionActivity67);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(inspectionActivity71);
        org.junit.Assert.assertNotNull(inspectionActivity74);
    }

    @Test
    public void test26718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26718");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        extendedAttribute0.UniqueId = "https";
        extendedAttribute0.UniqueId = "https";
        java.lang.Object obj5 = extendedAttribute0.getValue();
        java.lang.String str6 = extendedAttribute0.UniqueId;
        java.lang.String str7 = extendedAttribute0.getType();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "https" + "'", str6, "https");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26719");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint8.setGradeName10("MaxInstant");
        java.lang.String str11 = timeAlignedPoint8.GradeName1;
        java.lang.Long long12 = timeAlignedPoint8.ApprovalLevel1;
        java.lang.String str13 = timeAlignedPoint8.ApprovalName6;
        java.lang.Long long14 = timeAlignedPoint8.GradeCode9;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(long14);
    }

    @Test
    public void test26720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26720");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.Difference;
        java.lang.String str5 = calibrationCheck0.getParameter();
        java.lang.String str6 = calibrationCheck0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck10 = calibrationCheck8.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck12 = calibrationCheck10.setIsValid((java.lang.Boolean) false);
        java.lang.Boolean boolean13 = calibrationCheck10.isPublish();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNotNull(calibrationCheck10);
        org.junit.Assert.assertNotNull(calibrationCheck12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
    }

    @Test
    public void test26721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26721");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        ratingModelDescription0.TemplateName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str3 = ratingModelDescription0.getOutputParameter();
        java.lang.String str4 = ratingModelDescription0.OutputUnit;
        java.lang.String str5 = ratingModelDescription0.getOutputUnit();
        java.lang.String str6 = ratingModelDescription0.OutputUnit;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26722");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        postBaseStandardReferenceDatumOffset0.LocationUniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset4 = postBaseStandardReferenceDatumOffset0.setMethod("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        postBaseStandardReferenceDatumOffset4.Method = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.String str7 = postBaseStandardReferenceDatumOffset4.LocationUniqueId;
        java.lang.String str8 = postBaseStandardReferenceDatumOffset4.getLocationUniqueId();
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http" + "'", str7, "http");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
    }

    @Test
    public void test26723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26723");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        ratingModelDescription0.TemplateName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str3 = ratingModelDescription0.Identifier;
        ratingModelDescription0.InputParameter = "MinInstant";
        java.lang.String str6 = ratingModelDescription0.getOutputParameter();
        java.lang.Boolean boolean7 = ratingModelDescription0.Publish;
        ratingModelDescription0.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test26724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26724");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorMessage = "";
        importError0.ErrorFieldValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError6 = importError0.setErrorMessage("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        importError0.ErrorMessage = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNotNull(importError6);
    }

    @Test
    public void test26725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26725");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setIdentifier("");
        java.lang.String str3 = openIdConnectUser2.FirstName;
        java.lang.String str4 = openIdConnectUser2.getLastName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user6 = openIdConnectUser2.setSystem((java.lang.Boolean) false);
        java.lang.String str7 = openIdConnectUser2.getUniqueId();
        openIdConnectUser2.Active = true;
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26726");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        gapToleranceOperation0.User = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        gapToleranceOperation0.ToleranceInMinutes = 100.0d;
        gapToleranceOperation0.Comments = "'.'SSSSSSS";
    }

    @Test
    public void test26727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26727");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList3 = postSpecimen0.getObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen5 = postSpecimen0.setId("MinInstant");
        postSpecimen0.NumberOfRequestedObservations = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen9 = postSpecimen0.setFiltered((java.lang.Boolean) false);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(observationList3);
        org.junit.Assert.assertNotNull(postSpecimen5);
        org.junit.Assert.assertNotNull(postSpecimen9);
    }

    @Test
    public void test26728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26728");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary0.setParty("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType6 = dischargeSummary5.GageHeightCalculation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary5.setQualityAssuranceComments("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = pointVelocityDischargeActivity9.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str15 = pointVelocityDischargeActivity14.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str17 = pointVelocityDischargeActivity16.getModel();
        pointVelocityDischargeActivity16.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity16.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity23 = pointVelocityDischargeActivity16.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int24 = pointVelocityDischargeActivity16.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str26 = pointVelocityDischargeActivity25.getModel();
        java.lang.String str27 = pointVelocityDischargeActivity25.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = null;
        pointVelocityDischargeActivity25.Width = quantityWithDisplay28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType30 = null;
        pointVelocityDischargeActivity25.StartPoint = startPointType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList33, verticalArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity25.setVerticals(verticalList33);
        pointVelocityDischargeActivity16.Verticals = verticalList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity14.setVerticals(verticalList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = null;
        crossSectionPoint38.Distance = quantityWithDisplay39;
        crossSectionPoint38.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = crossSectionPoint38.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = crossSectionPoint38.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = crossSectionPoint45.setElevation(quantityWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint47.Depth = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint47.Depth = datumConvertedQuantityWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint47.Elevation = datumConvertedQuantityWithDisplay52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity54 = pointVelocityDischargeActivity37.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary5.setMeanIndexVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay52);
        java.lang.Boolean boolean56 = dischargeSummary55.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment57 = dischargeSummary55.Adjustment;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNull(gageHeightCalculationType6);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(verticalArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNotNull(crossSectionPoint45);
        org.junit.Assert.assertNotNull(crossSectionPoint47);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNull(adjustment57);
    }

    @Test
    public void test26729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26729");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold0.DisplayColor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold4 = timeSeriesThreshold0.setDisplayColor("/AQUARIUS/Provisioning/v1");
        java.lang.String str5 = timeSeriesThreshold4.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold6.DisplayColor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal;
        timeSeriesThreshold6.ProcessingOrder = correctionProcessingOrder9;
        java.lang.String str11 = timeSeriesThreshold6.getReferenceCode();
        java.lang.String str12 = timeSeriesThreshold6.getReferenceCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder13 = timeSeriesThreshold6.ProcessingOrder;
        timeSeriesThreshold4.ProcessingOrder = correctionProcessingOrder13;
        java.lang.String str15 = timeSeriesThreshold4.getDescription();
        org.junit.Assert.assertNotNull(timeSeriesThreshold4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal + "'", correctionProcessingOrder9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal + "'", correctionProcessingOrder13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal));
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test26730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26730");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        java.lang.String str8 = postDatumConvertedTimeSeries0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries0.setSubLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
    }

    @Test
    public void test26731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26731");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean1 = completedWork0.isSafetyInspectionPerformed();
        java.lang.Boolean boolean2 = completedWork0.SafetyInspectionPerformed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork4 = completedWork0.setOtherSampleTaken((java.lang.Boolean) true);
        completedWork0.BiologicalSampleTaken = false;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(completedWork4);
    }

    @Test
    public void test26732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26732");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int1 = searchResultSpreadsheetTemplate0.TotalCount;
        java.lang.String str2 = searchResultSpreadsheetTemplate0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList3 = searchResultSpreadsheetTemplate0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int5 = searchResultSpreadsheetTemplate4.TotalCount;
        searchResultSpreadsheetTemplate4.Cursor = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int9 = searchResultSpreadsheetTemplate8.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate11 = searchResultSpreadsheetTemplate8.setCursor("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate14 = spreadsheetTemplate12.setType(spreadsheetTemplateType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType16 = spreadsheetTemplate15.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType17 = spreadsheetTemplate15.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType18 = null;
        spreadsheetTemplate15.Type = spreadsheetTemplateType18;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList20 = spreadsheetTemplate15.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType22 = spreadsheetTemplate21.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType23 = spreadsheetTemplate21.getType();
        spreadsheetTemplate21.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate27 = spreadsheetTemplate21.setType(spreadsheetTemplateType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate30 = spreadsheetTemplate28.setType(spreadsheetTemplateType29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType32 = spreadsheetTemplate31.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType33 = spreadsheetTemplate31.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType36 = spreadsheetTemplate35.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType37 = spreadsheetTemplate35.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType38 = null;
        spreadsheetTemplate35.Type = spreadsheetTemplateType38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType41 = spreadsheetTemplate40.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType42 = spreadsheetTemplate40.getType();
        spreadsheetTemplate40.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate46 = spreadsheetTemplate40.setType(spreadsheetTemplateType45);
        java.lang.String str47 = spreadsheetTemplate46.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate50 = spreadsheetTemplate48.setType(spreadsheetTemplateType49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate53 = spreadsheetTemplate51.setType(spreadsheetTemplateType52);
        spreadsheetTemplate51.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType57 = spreadsheetTemplate56.getType();
        spreadsheetTemplate56.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] spreadsheetTemplateArray60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] { spreadsheetTemplate14, spreadsheetTemplate15, spreadsheetTemplate21, spreadsheetTemplate28, spreadsheetTemplate31, spreadsheetTemplate34, spreadsheetTemplate35, spreadsheetTemplate46, spreadsheetTemplate50, spreadsheetTemplate51, spreadsheetTemplate56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList61, spreadsheetTemplateArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate63 = searchResultSpreadsheetTemplate8.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate64 = searchResultSpreadsheetTemplate4.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate66 = searchResultSpreadsheetTemplate64.setTotalCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList67 = searchResultSpreadsheetTemplate66.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate68 = searchResultSpreadsheetTemplate0.setDomainObjects(spreadsheetTemplateList67);
        java.lang.Integer int69 = searchResultSpreadsheetTemplate68.TotalCount;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(spreadsheetTemplateList3);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate11);
        org.junit.Assert.assertNotNull(spreadsheetTemplate14);
        org.junit.Assert.assertNull(spreadsheetTemplateType16);
        org.junit.Assert.assertNull(spreadsheetTemplateType17);
        org.junit.Assert.assertNull(domainObjectAttachmentList20);
        org.junit.Assert.assertNull(spreadsheetTemplateType22);
        org.junit.Assert.assertNull(spreadsheetTemplateType23);
        org.junit.Assert.assertNotNull(spreadsheetTemplate27);
        org.junit.Assert.assertNotNull(spreadsheetTemplate30);
        org.junit.Assert.assertNull(spreadsheetTemplateType32);
        org.junit.Assert.assertNull(spreadsheetTemplateType33);
        org.junit.Assert.assertNull(spreadsheetTemplateType36);
        org.junit.Assert.assertNull(spreadsheetTemplateType37);
        org.junit.Assert.assertNull(spreadsheetTemplateType41);
        org.junit.Assert.assertNull(spreadsheetTemplateType42);
        org.junit.Assert.assertNotNull(spreadsheetTemplate46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "https" + "'", str47, "https");
        org.junit.Assert.assertNotNull(spreadsheetTemplate50);
        org.junit.Assert.assertNotNull(spreadsheetTemplate53);
        org.junit.Assert.assertNull(spreadsheetTemplateType57);
        org.junit.Assert.assertNotNull(spreadsheetTemplateArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate63);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate64);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate66);
        org.junit.Assert.assertNotNull(spreadsheetTemplateList67);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate68);
        org.junit.Assert.assertNull(int69);
    }

    @Test
    public void test26733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26733");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = openWaterData0.getDistanceToMeter();
        openWaterData0.WetLineCorrection = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData6 = openWaterData0.setWetLineCorrection((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = openWaterData0.DistanceToWaterSurface;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNotNull(openWaterData6);
        org.junit.Assert.assertNull(quantityWithDisplay7);
    }

    @Test
    public void test26734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26734");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str4 = referencePointPeriod0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod0.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod8 = referencePointPeriod0.setElevation((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod10 = referencePointPeriod0.setUnit("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod12 = referencePointPeriod0.setComment("9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNotNull(referencePointPeriod8);
        org.junit.Assert.assertNotNull(referencePointPeriod10);
        org.junit.Assert.assertNotNull(referencePointPeriod12);
    }

    @Test
    public void test26735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26735");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        java.lang.String str2 = referencePointPeriod0.getAppliedByUser();
        java.lang.Boolean boolean3 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test26736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26736");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList2 = getObservationsV2_1.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        getObservationsV2_1.ResultGrades = strList14;
        getExtendedAttributeDropdownlistitems0.Search = strList14;
        getExtendedAttributeDropdownlistitems0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.util.List<java.lang.String> strList22 = getExtendedAttributeDropdownlistitems0.getSearch();
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test26737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26737");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = unitBase0.setSymbol("zZZZZ");
        java.lang.String str3 = unitBase0.getSingularName();
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26738");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList1 = searchResultUser0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser3 = searchResultUser0.setTotalCount((java.lang.Integer) 1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList4 = searchResultUser0.DomainObjects;
        searchResultUser0.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList8 = searchResultUser7.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser10 = searchResultUser7.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList12 = searchResultUser11.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser14 = searchResultUser11.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] userArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>) userList16, userArray15);
        searchResultUser14.DomainObjects = userList16;
        searchResultUser7.DomainObjects = userList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser20 = searchResultUser0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>) userList16);
        java.lang.String str21 = searchResultUser20.getCursor();
        org.junit.Assert.assertNull(userList1);
        org.junit.Assert.assertNotNull(searchResultUser3);
        org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNull(userList8);
        org.junit.Assert.assertNotNull(searchResultUser10);
        org.junit.Assert.assertNull(userList12);
        org.junit.Assert.assertNotNull(searchResultUser14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(searchResultUser20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test26739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26739");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = locationDatumPeriod0.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown;
        locationDatumPeriod0.MeasurementDirection = measurementDirection65;
        locationDatumPeriod0.OffsetToStandard = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod70 = locationDatumPeriod0.setComments("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(timeRange62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
        org.junit.Assert.assertTrue("'" + measurementDirection65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown + "'", measurementDirection65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown));
        org.junit.Assert.assertNotNull(locationDatumPeriod70);
    }

    @Test
    public void test26740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26740");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit2.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit4.setBaseMultiplier((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit8 = unit6.setGroupIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str9 = unit8.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit11 = unit8.setGroupIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertNotNull(unit8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(unit11);
    }

    @Test
    public void test26741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26741");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint9 = timeAlignedPoint0.setGradeCode10((java.lang.Long) (-1L));
        timeAlignedPoint0.NumericValue5 = 10.0d;
        java.lang.Long long12 = timeAlignedPoint0.getGradeCode9();
        java.lang.Double double13 = timeAlignedPoint0.NumericValue2;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeAlignedPoint9);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(double13);
    }

    @Test
    public void test26742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26742");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        observation0.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation0.setNumericResult(numericResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType8 = observation7.getQualityControlType();
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation7.setObservedTime(offsetDateTime9);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(qualityControlType8);
        org.junit.Assert.assertNotNull(observation10);
    }

    @Test
    public void test26743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26743");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        java.lang.Object obj1 = downchainProcessorListByRatingModelServiceRequest0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
    }

    @Test
    public void test26744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26744");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str1 = inspection0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection3 = inspection0.setModel("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection5 = inspection0.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str6 = inspection5.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection8 = inspection5.setManufacturer("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str9 = inspection8.getModel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(inspection3);
        org.junit.Assert.assertNotNull(inspection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(inspection8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http" + "'", str9, "http");
    }

    @Test
    public void test26745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26745");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        fieldVisitDataServiceRequest0.ConvertToStandardReferenceDatum = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setFieldVisitIdentifier("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest7 = fieldVisitDataServiceRequest5.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest9 = fieldVisitDataServiceRequest7.setDiscreteMeasurementActivity("/AQUARIUS/Publish/v2");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest7);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest9);
    }

    @Test
    public void test26746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26746");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.time.Instant instant1 = getObservationExportIIV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList3 = getObservationExportIIV2_2.getCollectionMethodIds();
        java.util.List<java.lang.String> strList4 = getObservationExportIIV2_2.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations5.setLimit((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str9 = deleteFieldVisits8.Sort;
        deleteFieldVisits8.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList12 = deleteFieldVisits8.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList14 = getShippingContainers13.Search;
        java.util.List<java.lang.String> strList15 = getShippingContainers13.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        java.util.List<java.lang.String> strList33 = getObservationsV2_18.getLabReportIds();
        importItem17.Errors = getObservationsV2_18;
        java.lang.Object obj35 = importItem17.getExistingItem();
        importItem17.Input = "hi!";
        java.lang.Object obj38 = importItem17.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem40 = importItem17.setStatus(importItemStatusType39);
        importItem40.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate43.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = specimenTemplate43.setId("hi!");
        java.lang.Boolean boolean48 = specimenTemplate47.getFiltered();
        importItem40.Item = specimenTemplate47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_52.setDataClassifications((java.util.List<java.lang.String>) strList56);
        postTag51.PickListValues = strList56;
        java.util.ArrayList<java.lang.String> strList60 = postTag51.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor61 = processor50.setInputTimeSeriesUniqueIds(strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem62 = importItem40.setWarningMessages((java.util.List<java.lang.String>) strList60);
        java.util.List<java.lang.String> strList63 = importItem40.getWarningMessages();
        getAnalysisMethods16.ObservedPropertyIds = strList63;
        getShippingContainers13.Search = strList63;
        deleteFieldVisits8.SamplingLocationIds = strList63;
        getExportObservations5.SpecimenIds = strList63;
        getObservationExportIIV2_2.SamplingLocationGroupIds = strList63;
        java.util.List<java.lang.String> strList69 = getObservationExportIIV2_2.AnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList71 = getObservationExportIIV2_70.getCollectionMethodIds();
        java.lang.String str72 = getObservationExportIIV2_70.getDepthUnitCustomId();
        java.time.Instant instant73 = getObservationExportIIV2_70.getStartResultTime();
        getObservationExportIIV2_70.DetectionCondition = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV;
        getObservationExportIIV2_70.Format = getObservationExportIIFormatType76;
        getObservationExportIIV2_2.Format = getObservationExportIIFormatType76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_79 = getObservationExportIIV2_0.setFormat(getObservationExportIIFormatType76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray84 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = putLocationTags80.setTagUniqueIds(strList85);
        putLocationTags80.LocationUniqueId = "hi!";
        java.util.ArrayList<java.lang.String> strList90 = putLocationTags80.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_91 = getObservationExportIIV2_0.setResultStatuses((java.util.List<java.lang.String>) strList90);
        java.lang.String str92 = getObservationExportIIV2_0.getFieldVisitId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + importItemStatusType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem40);
        org.junit.Assert.assertNotNull(specimenTemplate47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(processor61);
        org.junit.Assert.assertNotNull(importItem62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(instant73);
        org.junit.Assert.assertTrue("'" + getObservationExportIIFormatType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV + "'", getObservationExportIIFormatType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV));
        org.junit.Assert.assertNotNull(getObservationExportIIV2_79);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putLocationTags87);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test26747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26747");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation3 = postSamplingLocation1.setCustomId("hi!");
        java.lang.String str4 = postSamplingLocation3.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = postSamplingLocation5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation9 = postSamplingLocation5.setAddress(address8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = postSamplingLocation9.getElevation();
        postSamplingLocation9.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postSamplingLocation9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList16, samplingLocationGroupArray15);
        postAccessGroup14.SamplingLocationGroups = samplingLocationGroupList16;
        postSamplingLocation9.SamplingLocationGroups = samplingLocationGroupList16;
        postSamplingLocation3.SamplingLocationGroups = samplingLocationGroupList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup21 = putAccessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList16);
        java.lang.String str22 = putAccessGroup21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup24 = putAccessGroup21.setDescription("http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(postSamplingLocation3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSamplingLocation7);
        org.junit.Assert.assertNotNull(postSamplingLocation9);
        org.junit.Assert.assertNull(quantity10);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(putAccessGroup21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(putAccessGroup24);
    }

    @Test
    public void test26748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26748");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = getObservationsV2_4.setDataClassifications((java.util.List<java.lang.String>) strList8);
        getObservationsV2_10.DepthUnitCustomId = "hi!";
        java.lang.String str13 = getObservationsV2_10.CustomId;
        java.util.List<java.lang.String> strList14 = getObservationsV2_10.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        getObservationsV2_15.SpecimenIds = strList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        getObservationsV2_15.QualityControlTypes = strList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_10.setMedia((java.util.List<java.lang.String>) strList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits31 = deleteFieldVisits0.setSearch((java.util.List<java.lang.String>) strList26);
        java.time.Instant instant32 = deleteFieldVisits0.getStartStartTime();
        java.util.List<java.lang.String> strList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits34 = deleteFieldVisits0.setSamplingPlanIds(strList33);
        java.util.List<java.lang.String> strList35 = deleteFieldVisits0.getFieldTripIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNotNull(deleteFieldVisits31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNotNull(deleteFieldVisits34);
        org.junit.Assert.assertNull(strList35);
    }

    @Test
    public void test26749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26749");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits();
        getUnits0.CustomId = "";
        java.lang.String str3 = getUnits0.getUnitgroup();
        getUnits0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits7 = getUnits0.setUnitgroup("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str8 = getUnits7.getCustomId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getUnits7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str8, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test26750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26750");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest locationDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest();
        java.lang.Object obj1 = locationDataServiceRequest0.getResponseType();
        java.lang.Boolean boolean2 = locationDataServiceRequest0.isIncludeLocationAttachments();
        java.lang.Boolean boolean3 = locationDataServiceRequest0.IncludeLocationAttachments;
        locationDataServiceRequest0.LocationIdentifier = "****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test26751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26751");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode();
        java.lang.String str1 = postQualityCode0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode3 = postQualityCode0.setColor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode5 = postQualityCode0.setColor("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode7 = postQualityCode5.setDescription("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode9 = postQualityCode7.setColor("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postQualityCode7.Description = "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postQualityCode3);
        org.junit.Assert.assertNotNull(postQualityCode5);
        org.junit.Assert.assertNotNull(postQualityCode7);
        org.junit.Assert.assertNotNull(postQualityCode9);
    }

    @Test
    public void test26752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26752");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        java.util.List<java.lang.String> strList2 = getFieldVisits0.Ids;
        java.util.List<java.lang.String> strList3 = getFieldVisits0.getPlanningStatuses();
        java.util.List<java.lang.String> strList4 = getFieldVisits0.getFieldTripIds();
        java.lang.String str5 = getFieldVisits0.Cursor;
        getFieldVisits0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.Object obj8 = getFieldVisits0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
    }

    @Test
    public void test26753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26753");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod4 = postObservationV2_2.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation5.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setCategoricalResult(categoricalResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation5.DataClassification = dataClassificationType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_12 = postObservationV2_2.setDataClassification(dataClassificationType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple13 = postObservationV2_12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity14.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity17.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity17.setPlannedActivity(plannedActivity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType22 = postActivity17.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate24.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList29 = specimenTemplate28.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = specimenTemplate30.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList35 = specimenTemplate34.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate24, specimenTemplate27, specimenTemplate28, specimenTemplate32, specimenTemplate33, specimenTemplate34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList37, specimenTemplateArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate39 = postFieldVisitActivityWithTemplate23.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate41 = postFieldVisitActivityWithTemplate39.setCollectionMethod(collectionMethod40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity17.setCollectionMethod(collectionMethod40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity17.Medium = medium43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity45 = activity14.setMedium(medium43);
        postObservationV2_12.Medium = medium43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult47 = postObservationV2_12.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier48 = postObservationV2_12.getNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade49 = postObservationV2_12.getResultGrade();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(collectionMethod4);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertTrue("'" + dataClassificationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_12);
        org.junit.Assert.assertNull(analysisMethodSimple13);
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNull(activityType22);
        org.junit.Assert.assertNull(labInstructionTemplateList29);
        org.junit.Assert.assertNotNull(specimenTemplate32);
        org.junit.Assert.assertNull(labInstructionTemplateList35);
        org.junit.Assert.assertNotNull(specimenTemplateArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate39);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate41);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNotNull(activity45);
        org.junit.Assert.assertNull(categoricalResult47);
        org.junit.Assert.assertNull(nullMeasureQualifier48);
        org.junit.Assert.assertNull(resultGrade49);
    }

    @Test
    public void test26754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26754");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        java.lang.Object obj1 = correctionListServiceRequest0.getResponseType();
        java.time.Instant instant2 = correctionListServiceRequest0.getQueryFrom();
        java.lang.Object obj3 = correctionListServiceRequest0.getResponseType();
        java.lang.String str4 = correctionListServiceRequest0.TimeSeriesUniqueId;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$CorrectionListServiceResponse");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26755");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = observedPropertyImportSummary0.getImportHistoryEventSimple();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList6 = observedPropertyImportSummary0.NonErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary8 = observedPropertyImportSummary0.setNewCount((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(importHistoryEventSimple5);
        org.junit.Assert.assertNull(importItemObservedPropertyList6);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary8);
    }

    @Test
    public void test26756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26756");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType15 = importItemObject14.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean18 = roleFlattened17.CanRemoveFieldVisits;
        roleFlattened17.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str22 = putLocationType21.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_23.setDataClassifications((java.util.List<java.lang.String>) strList27);
        getObservationsV2_29.DepthUnitCustomId = "hi!";
        java.lang.String str32 = getObservationsV2_29.CustomId;
        java.util.List<java.lang.String> strList33 = getObservationsV2_29.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_29.setMedia((java.util.List<java.lang.String>) strList45);
        putLocationType21.ExtendedAttributeDefinitionIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase51 = roleFlattened17.setRoleApprovalTransitions(strList45);
        putBulkEditResultGradesV2_16.ResultGrades = strList45;
        importItemObject14.WarningMessages = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType54 = importItemObject14.Status;
        java.lang.Object obj55 = importItemObject14.getErrors();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNull(importItemStatusType15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(roleFlattenedBase51);
        org.junit.Assert.assertNull(importItemStatusType54);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test26757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26757");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_8 = putBulkEditResultGradesV2_0.setStartModificationTime(instant6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities9.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities9.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        java.time.Instant instant21 = getObservationsV2_14.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        java.util.List<java.lang.String> strList38 = getObservationsV2_23.getLabReportIds();
        importItem22.Errors = getObservationsV2_23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList41 = getObservationsV2_40.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        getObservationsV2_40.ResultGrades = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem58 = importItem22.setFields((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_14.setSearch((java.util.List<java.lang.String>) strList53);
        getActivities13.ActivityTemplateId = strList53;
        putBulkEditResultGradesV2_0.TaxonIds = strList53;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_8);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(importItem58);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
    }

    @Test
    public void test26758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26758");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList1 = getAnalyticalGroups0.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList3 = getSpecimens2.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens5 = getSpecimens2.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase8 = locationDatumPeriod6.setComment("'.'SSSSSSS");
        java.lang.Double double9 = locationDatumPeriodBase8.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant11 = qualifier10.DateApplied;
        java.lang.String str12 = qualifier10.User;
        java.lang.String str13 = qualifier10.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier20 = qualifier10.setDateApplied(instant17);
        java.time.Instant instant21 = qualifier20.getDateApplied();
        locationDatumPeriodBase8.ValidFrom = instant21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens23 = getSpecimens2.setEndModificationTime(instant21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        java.lang.String str25 = getAnalysisMethods24.Context;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean27 = roleFlattened26.CanRemoveFieldVisits;
        roleFlattened26.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str31 = putLocationType30.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        getObservationsV2_38.DepthUnitCustomId = "hi!";
        java.lang.String str41 = getObservationsV2_38.CustomId;
        java.util.List<java.lang.String> strList42 = getObservationsV2_38.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_38.setMedia((java.util.List<java.lang.String>) strList54);
        putLocationType30.ExtendedAttributeDefinitionIds = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase60 = roleFlattened26.setRoleApprovalTransitions(strList54);
        java.util.ArrayList<java.lang.String> strList61 = roleFlattened26.RoleApprovalTransitions;
        getAnalysisMethods24.ObservedPropertyIds = strList61;
        java.util.List<java.lang.String> strList63 = getAnalysisMethods24.getObservedPropertyIds();
        java.util.List<java.lang.String> strList64 = getAnalysisMethods24.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens65 = getSpecimens23.setProjectIds(strList64);
        getAnalyticalGroups0.AnalyticalGroupTypes = strList64;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getSpecimens5);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(qualifier20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(getSpecimens23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNotNull(roleFlattenedBase60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(getSpecimens65);
    }

    @Test
    public void test26759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26759");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        postSession0.EncryptedPassword = "9999-12-31T23:59:59.999Z";
        java.lang.String str3 = postSession0.getUsername();
        java.lang.String str4 = postSession0.Locale;
        java.lang.String str5 = postSession0.Username;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession7 = postSession0.setLocale("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession9 = postSession7.setUsername("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        postSession7.Username = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertNotNull(postSession9);
    }

    @Test
    public void test26760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26760");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor9 = sensor7.setComments("9999-12-31T23:59:59.999Z");
        sensor7.MethodCode = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str12 = sensor7.getMethodCode();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNotNull(sensor9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str12, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test26761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26761");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen();
        java.lang.String str1 = getSpecimen0.getId();
        java.lang.String str2 = getSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen4 = getSpecimen0.setId("http://MaxDurationhttp");
        java.lang.Boolean boolean5 = getSpecimen4.Detail;
        java.lang.Boolean boolean6 = getSpecimen4.Detail;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getSpecimen4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test26762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26762");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setApprovalAgency("/AQUARIUS");
        java.lang.String str5 = postProject4.getApprovalAgency();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject7 = postProject4.setApprovalAgency("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str8 = postProject7.getId();
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNotNull(postProject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test26763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26763");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent2.setImportType(importType3);
        java.time.OffsetDateTime offsetDateTime5 = importHistoryEvent4.getImportTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent7 = importHistoryEvent4.setImportedBy(userProfile6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent9 = importHistoryEvent7.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str10 = importHistoryEvent9.FileName;
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertTrue("'" + importType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(importHistoryEvent7);
        org.junit.Assert.assertNotNull(importHistoryEvent9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test26764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26764");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str1 = getExportObservations0.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations0.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport6.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant9 = recurringReport6.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit10.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant14 = locationDatumPeriod13.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = locationDatumPeriod13.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = timeAlignedDataServiceRequest18.setQueryFrom(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription24 = timeSeriesDescription17.setRawStartTime(instant21);
        locationDatumPeriod13.ValidFrom = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription26 = fieldVisit10.setLastMatchedTime(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport27 = recurringReport6.setNextGenerationDate(instant21);
        getExportObservations0.StartModificationTime = instant21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations30 = getExportObservations0.setNumericResultValue((java.lang.Double) 0.0d);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(locationDatumPeriod16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest23);
        org.junit.Assert.assertNotNull(timeSeriesDescription24);
        org.junit.Assert.assertNotNull(fieldVisitDescription26);
        org.junit.Assert.assertNotNull(recurringReport27);
        org.junit.Assert.assertNotNull(getExportObservations30);
    }

    @Test
    public void test26765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26765");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList6 = locationDescriptionListServiceResponse5.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant8 = ratingCurveListServiceRequest7.QueryTo;
        java.lang.String str9 = ratingCurveListServiceRequest7.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType22 = null;
        controlConditionActivity21.ControlCleaned = controlCleanedType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        controlConditionActivity21.DateCleaned = instant25;
        timeAlignedDataServiceRequest20.QueryFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse10.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest30 = ratingCurveListServiceRequest7.setQueryTo(instant25);
        java.time.Instant instant31 = ratingCurveListServiceRequest30.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse5.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens33 = getExportSpecimens0.setStartModificationTime(instant31);
        java.util.List<java.lang.String> strList34 = getExportSpecimens33.SamplingLocationIds;
        java.time.Instant instant35 = getExportSpecimens33.getBefore();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(locationDescriptionList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(getExportSpecimens33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(instant35);
    }

    @Test
    public void test26766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26766");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities0.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities4 = getActivities0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant6 = qualifier5.DateApplied;
        java.lang.String str7 = qualifier5.User;
        java.lang.String str8 = qualifier5.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj10 = timeAlignedDataServiceRequest9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = timeAlignedDataServiceRequest9.setQueryFrom(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = qualifier5.setDateApplied(instant12);
        java.time.Instant instant16 = qualifier15.getDateApplied();
        getActivities0.ToStartTime = instant16;
        getActivities0.Sort = "'.'SSSSSSS";
        java.util.List<java.lang.String> strList20 = getActivities0.ActivityTypes;
        java.lang.Object obj21 = getActivities0.getResponseType();
        java.util.List<java.lang.String> strList22 = getActivities0.SamplingLocationIds;
        org.junit.Assert.assertNotNull(getActivities4);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest14);
        org.junit.Assert.assertNotNull(qualifier15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivity");
        org.junit.Assert.assertNull(strList22);
    }

    @Test
    public void test26767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26767");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities2.setToStartTime(instant12);
        java.lang.String str14 = getActivities13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities13.setLimit((java.lang.Integer) 1);
        getActivities16.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = timeAlignedDataServiceRequest19.setTimeSeriesUniqueIds(strList31);
        getActivities16.CollectionMethodIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_37 = postUserV2_0.setRoles((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = postUserV2_37.getAccessGroups();
        java.lang.String str39 = postUserV2_37.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int42 = getFieldVisits41.Limit;
        java.util.List<java.lang.String> strList43 = getFieldVisits41.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType46 = putUserV2_45.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary49.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        dischargeSummary49.MeasurementTime = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse48.setNextToken(instant53);
        java.time.Instant instant57 = locationDescriptionListServiceResponse48.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities58 = getActivities47.setToStartTime(instant57);
        java.lang.String str59 = getActivities58.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList61 = getObservationsV2_60.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray72 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = putLocationTags68.setTagUniqueIds(strList73);
        getObservationsV2_62.QualityControlTypes = strList73;
        getObservationsV2_60.ResultGrades = strList73;
        getActivities58.Media = strList73;
        putUserV2_45.AccessGroups = strList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens80 = getSpecimens44.setSamplingLocationIds((java.util.List<java.lang.String>) strList73);
        getFieldVisits41.PlanningStatuses = strList73;
        getExportSpecimens40.FieldTripIds = strList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_83 = postUserV2_37.setAccessGroups((java.util.List<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList84 = postUserV2_83.Roles;
        java.lang.String str85 = postUserV2_83.getCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest35);
        org.junit.Assert.assertNotNull(postUserV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(userType46);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(getActivities58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putLocationTags75);
        org.junit.Assert.assertNotNull(getSpecimens80);
        org.junit.Assert.assertNotNull(postUserV2_83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test26768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26768");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag2 = appliedTag0.setValue("'.'SSSSSSS");
        java.lang.String str3 = appliedTag0.UniqueId;
        appliedTag0.UniqueId = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNotNull(appliedTag2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test26769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26769");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold> timeSeriesThresholdList1 = timeSeriesDescription0.Thresholds;
        java.lang.String str2 = timeSeriesDescription0.UtcOffsetIsoDuration;
        java.lang.String str3 = timeSeriesDescription0.Unit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription5 = timeSeriesDescription0.setComment("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Double double6 = timeSeriesDescription5.UtcOffset;
        org.junit.Assert.assertNull(timeSeriesThresholdList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(timeSeriesDescription5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test26770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26770");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType3 = vertical0.VelocityObservationMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = vertical0.setFlowDirection(flowDirectionType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        vertical5.FlowDirection = flowDirectionType6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = vertical5.setIceCoveredData(iceCoveredData8);
        java.lang.Double double10 = vertical9.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        crossSectionPoint11.Distance = quantityWithDisplay12;
        crossSectionPoint11.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = crossSectionPoint11.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint11.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint20 = crossSectionPoint18.setElevation(quantityWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        crossSectionPoint20.Depth = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint20.Depth = datumConvertedQuantityWithDisplay23;
        java.lang.String str25 = datumConvertedQuantityWithDisplay23.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical26 = vertical9.setSoundedDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double28 = openWaterData27.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = openWaterData27.getDistanceToMeter();
        openWaterData27.WetLineCorrection = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData33 = openWaterData27.setWetLineCorrection((java.lang.Double) 0.0d);
        vertical26.OpenWaterData = openWaterData33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData36 = openWaterData33.setDryLineAngle((java.lang.Double) (-1.0d));
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(pointVelocityObservationType3);
        org.junit.Assert.assertTrue("'" + flowDirectionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal + "'", flowDirectionType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal));
        org.junit.Assert.assertNotNull(vertical5);
        org.junit.Assert.assertTrue("'" + flowDirectionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical9);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNotNull(crossSectionPoint20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(vertical26);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(quantityWithDisplay29);
        org.junit.Assert.assertNotNull(openWaterData33);
        org.junit.Assert.assertNotNull(openWaterData36);
    }

    @Test
    public void test26771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26771");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase6.setSerialNumber("'.'SSSSSSS");
        sensorBase8.Manufacturer = "MaxInstant";
        java.lang.String str11 = sensorBase8.getUnitId();
        java.lang.String str12 = sensorBase8.getName();
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNotNull(sensorBase8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test26772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26772");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest2 = timeSeriesDataRawServiceRequest0.setUnit("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest4 = timeSeriesDataRawServiceRequest2.setGetParts("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition8 = tagDefinition6.setValueType(tagValueType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition10 = tagDefinition6.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition12 = tagDefinition10.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition14 = tagDefinition10.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj16 = timeAlignedDataServiceRequest15.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = timeAlignedDataServiceRequest15.setQueryFrom(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = timeAlignedDataServiceRequest15.setTimeSeriesOutputUnitIds(strList26);
        tagDefinition14.PickListValues = strList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_5.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList33 = putOpenIdConnectRelyingPartyConfiguration32.getScopes();
        java.lang.String str34 = putOpenIdConnectRelyingPartyConfiguration32.getOptionalIssuerDiscoveryUri();
        java.lang.String str35 = putOpenIdConnectRelyingPartyConfiguration32.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        postTag36.PickListValues = strList41;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList45 = postTag36.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase47 = postTag36.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase49 = tagRequestBase47.setValueType(tagValueType48);
        java.lang.String str50 = tagRequestBase49.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        getObservationsV2_51.ActivityIds = strList62;
        tagRequestBase49.PickListValues = strList62;
        putOpenIdConnectRelyingPartyConfiguration32.HostedDomains = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_68 = getGroupedObservationsV2_31.setSearch((java.util.List<java.lang.String>) strList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType69 = getGroupedObservationsV2_31.FieldResultType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark72 = locationRemark70.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse73.setNextToken(instant74);
        locationRemark72.FromTime = instant74;
        getGroupedObservationsV2_31.EndObservedTime = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest78 = timeSeriesDataRawServiceRequest2.setQueryTo(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest80 = timeSeriesDataRawServiceRequest78.setUtcOffset((java.lang.Double) 10.0d);
        java.lang.Object obj81 = timeSeriesDataRawServiceRequest80.getResponseType();
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest2);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest4);
        org.junit.Assert.assertNotNull(tagDefinition8);
        org.junit.Assert.assertNotNull(tagDefinition10);
        org.junit.Assert.assertNotNull(tagDefinition12);
        org.junit.Assert.assertNotNull(tagDefinition14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest29);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(tagApplicabilityList45);
        org.junit.Assert.assertNotNull(tagRequestBase47);
        org.junit.Assert.assertTrue("'" + tagValueType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_68);
        org.junit.Assert.assertNull(fieldResultType69);
        org.junit.Assert.assertNotNull(locationRemark72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest78);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDataServiceResponse");
    }

    @Test
    public void test26773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26773");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = pointVelocityDischargeActivity3.SuspensionWeight;
        java.lang.String str7 = pointVelocityDischargeActivity3.getMeterEquation();
        pointVelocityDischargeActivity3.VelocityObservationMethod = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = pointVelocityDischargeActivity3.getArea();
        java.lang.Boolean boolean11 = pointVelocityDischargeActivity3.HorizontalCoefficientUsed;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test26774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26774");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics11 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14, extendedAttributeArray13);
        postActivity12.ExtendedAttributes = extendedAttributeList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation6.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType18 = observation6.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = resultDetectionCondition20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition23 = resultDetectionCondition20.setId("/AQUARIUS");
        java.lang.String str24 = resultDetectionCondition20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition26 = resultDetectionCondition20.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult27 = numericResult19.setDetectionCondition(resultDetectionCondition26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult29 = numericResult27.setNullMeasureQualifier(nullMeasureQualifier28);
        observation6.NumericResult = numericResult29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus32 = observationNestedInSpecimen31.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus33 = observationNestedInSpecimen31.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen35 = observationNestedInSpecimen31.setLabInstruction(labInstruction34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen37 = observationNestedInSpecimen31.setId("http");
        observationNestedInSpecimen31.Id = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal42 = observationMinimal40.setObservedProperty(observedProperty41);
        java.time.OffsetDateTime offsetDateTime43 = observationMinimal42.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue45 = categoricalResult44.getFixedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult47 = categoricalResult44.setType("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal48 = observationMinimal42.setCategoricalResult(categoricalResult44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal49 = observationMinimal48.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_52 = postObservationV2_50.setLabInstruction(labInstruction51);
        java.lang.String str53 = postObservationV2_52.MediumSubdivision;
        java.lang.String str54 = postObservationV2_52.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_56 = postObservationV2_52.setLabResultDetails(labResultDetails55);
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_58 = postObservationV2_52.setObservedTime(offsetDateTime57);
        java.time.OffsetDateTime offsetDateTime59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_60 = postObservationV2_58.setResultTime(offsetDateTime59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str62 = observationNestedInSpecimen61.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType63 = observationNestedInSpecimen61.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType65 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus64.SystemCode = resultStatusSystemCodeType65;
        resultStatus64.CustomId = "-PT87591240H";
        resultStatus64.CustomId = "https";
        observationNestedInSpecimen61.ResultStatus = resultStatus64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_72 = postObservationV2_60.setResultStatus(resultStatus64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal73 = observationMinimal48.setResultStatus(resultStatus64);
        observationNestedInSpecimen31.ResultStatus = resultStatus64;
        observation6.ResultStatus = resultStatus64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType76 = observation6.QualityControlType;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(observationStatistics11);
        org.junit.Assert.assertNotNull(extendedAttributeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(qualityControlType18);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(resultDetectionCondition23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(resultDetectionCondition26);
        org.junit.Assert.assertNotNull(numericResult27);
        org.junit.Assert.assertNotNull(numericResult29);
        org.junit.Assert.assertNull(resultStatus32);
        org.junit.Assert.assertNull(resultStatus33);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen35);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen37);
        org.junit.Assert.assertNotNull(observationMinimal42);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNull(categoricalValue45);
        org.junit.Assert.assertNotNull(categoricalResult47);
        org.junit.Assert.assertNotNull(observationMinimal48);
        org.junit.Assert.assertNull(labInstructionMinimal49);
        org.junit.Assert.assertNotNull(postObservationV2_52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(postObservationV2_56);
        org.junit.Assert.assertNotNull(postObservationV2_58);
        org.junit.Assert.assertNotNull(postObservationV2_60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(dataClassificationType63);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(postObservationV2_72);
        org.junit.Assert.assertNotNull(observationMinimal73);
        org.junit.Assert.assertNull(qualityControlType76);
    }

    @Test
    public void test26775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26775");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.String str1 = indexRange0.Id;
        indexRange0.ResultingScore = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange5 = indexRange0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange7 = indexRange0.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str8 = indexRange7.Description;
        java.lang.String str9 = indexRange7.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(indexRange5);
        org.junit.Assert.assertNotNull(indexRange7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str8, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str9, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test26776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26776");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult11 = observation6.getPlannedFieldResult();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList12 = observation6.getValidationWarnings();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(plannedFieldResult11);
        org.junit.Assert.assertNull(ruleValidationDetailsList12);
    }

    @Test
    public void test26777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26777");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = putActivity9.setCollectionMethod(collectionMethod12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal16 = observationMinimal14.setSpecimen(specimenNestedInActivity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = observationMinimal14.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult18 = observationMinimal14.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal21 = observationMinimal19.setSpecimen(specimenNestedInActivity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = observationMinimal21.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue24 = categoricalResult23.getFixedValue();
        observationMinimal21.CategoricalResult = categoricalResult23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal28 = observationMinimal26.setObservedProperty(observedProperty27);
        java.lang.String str29 = observationMinimal26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal32 = observationMinimal30.setObservedProperty(observedProperty31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus33 = observationMinimal32.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal35 = observationMinimal32.setSpecimen(specimenNestedInActivity34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType36 = observationMinimal35.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal39 = observationMinimal37.setObservedProperty(observedProperty38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal41 = observationMinimal39.setSpecimen(specimenNestedInActivity40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal44 = observationMinimal42.setSpecimen(specimenNestedInActivity43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty45 = observationMinimal44.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal47 = observationMinimal44.setResultStatus(resultStatus46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal50 = observationMinimal48.setSpecimen(specimenNestedInActivity49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty51 = observationMinimal50.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal53 = observationMinimal50.setResultStatus(resultStatus52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal56 = observationMinimal54.setObservedProperty(observedProperty55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal58 = observationMinimal56.setSpecimen(specimenNestedInActivity57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal61 = observationMinimal59.setObservedProperty(observedProperty60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal63 = observationMinimal59.setSpecimen(specimenNestedInActivity62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal66 = observationMinimal64.setObservedProperty(observedProperty65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult67.Value = "'.'SSSSSSS";
        observationMinimal66.CategoricalResult = categoricalResult67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal73 = observationMinimal71.setSpecimen(specimenNestedInActivity72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty74 = observationMinimal73.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal76 = observationMinimal73.setResultStatus(resultStatus75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal[] observationMinimalArray77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal[] { observationMinimal14, observationMinimal21, observationMinimal26, observationMinimal35, observationMinimal39, observationMinimal44, observationMinimal53, observationMinimal58, observationMinimal63, observationMinimal66, observationMinimal73 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal>) observationMinimalList78, observationMinimalArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity80 = putActivity9.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal>) observationMinimalList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity81 = putActivity0.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal>) observationMinimalList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity83 = putActivity0.setId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str84 = putActivity83.getComment();
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(putActivity13);
        org.junit.Assert.assertNotNull(observationMinimal16);
        org.junit.Assert.assertNull(observedProperty17);
        org.junit.Assert.assertNull(taxonomicResult18);
        org.junit.Assert.assertNotNull(observationMinimal21);
        org.junit.Assert.assertNull(observedProperty22);
        org.junit.Assert.assertNull(categoricalValue24);
        org.junit.Assert.assertNotNull(observationMinimal28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(observationMinimal32);
        org.junit.Assert.assertNull(resultStatus33);
        org.junit.Assert.assertNotNull(observationMinimal35);
        org.junit.Assert.assertNull(dataClassificationType36);
        org.junit.Assert.assertNotNull(observationMinimal39);
        org.junit.Assert.assertNotNull(observationMinimal41);
        org.junit.Assert.assertNotNull(observationMinimal44);
        org.junit.Assert.assertNull(observedProperty45);
        org.junit.Assert.assertNotNull(observationMinimal47);
        org.junit.Assert.assertNotNull(observationMinimal50);
        org.junit.Assert.assertNull(observedProperty51);
        org.junit.Assert.assertNotNull(observationMinimal53);
        org.junit.Assert.assertNotNull(observationMinimal56);
        org.junit.Assert.assertNotNull(observationMinimal58);
        org.junit.Assert.assertNotNull(observationMinimal61);
        org.junit.Assert.assertNotNull(observationMinimal63);
        org.junit.Assert.assertNotNull(observationMinimal66);
        org.junit.Assert.assertNotNull(observationMinimal73);
        org.junit.Assert.assertNull(observedProperty74);
        org.junit.Assert.assertNotNull(observationMinimal76);
        org.junit.Assert.assertNotNull(observationMinimalArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putActivity80);
        org.junit.Assert.assertNotNull(putActivity81);
        org.junit.Assert.assertNotNull(putActivity83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test26778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26778");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        java.lang.String str1 = ruleValidationDetails0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity3 = null;
        putActivity2.Depth = quantity3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList6, metricResultArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity2.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity10 = putActivity2.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = putActivity10.getDevice();
        ruleValidationDetails0.Properties = putActivity10;
        java.lang.Object obj13 = ruleValidationDetails0.Properties;
        java.lang.String str14 = ruleValidationDetails0.getDescription();
        java.lang.String str15 = ruleValidationDetails0.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricResultArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(putActivity10);
        org.junit.Assert.assertNull(device11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test26779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26779");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting2 = deleteSetting0.setGroup("/AQUARIUS/Provisioning/v1");
        deleteSetting0.Group = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        org.junit.Assert.assertNotNull(deleteSetting2);
    }

    @Test
    public void test26780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26780");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList8, verticalArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = pointVelocityDischargeActivity0.setVerticals(verticalList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity0.setSuspensionWeight("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str14 = levelSurveyMeasurement13.ReferencePointUniqueId;
        java.lang.String str15 = levelSurveyMeasurement13.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement17 = levelSurveyMeasurement13.setComments("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType19 = calibrationCheck18.getCalibrationCheckType();
        calibrationCheck18.SensorUniqueId = "MinDuration";
        java.lang.String str22 = calibrationCheck18.getParameterId();
        java.lang.String str23 = calibrationCheck18.getComments();
        java.lang.Boolean boolean24 = calibrationCheck18.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData();
        java.lang.String str26 = iceCoveredData25.IceAssemblyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = iceCoveredData25.getAboveFooting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        dischargeSummary28.MeasurementTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = dischargeSummary28.getGageHeightAdjustmentAmount();
        java.time.Instant instant36 = dischargeSummary28.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading39 = fieldVisitReading37.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading39.Manufacturer = "https";
        java.lang.String str42 = fieldVisitReading39.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck45 = calibrationCheck43.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay48 = doubleWithDisplay46.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str49 = doubleWithDisplay48.getDisplay();
        calibrationCheck45.Difference = doubleWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity51.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity51.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity57 = pointVelocityDischargeActivity51.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList58 = pointVelocityDischargeActivity57.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity57.DistanceToMeter = datumConvertedQuantityWithDisplay59;
        calibrationCheck45.Standard = datumConvertedQuantityWithDisplay59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading62 = fieldVisitReading39.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = dischargeSummary28.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData64 = iceCoveredData25.setBelowFooting((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str66 = crossSectionSurveyActivity65.Channel;
        java.lang.String str67 = crossSectionSurveyActivity65.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity70 = adcpDischargeActivity68.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay71 = adcpDischargeActivity70.getDischargeCoefficientVariation();
        adcpDischargeActivity70.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = dischargeSummary74.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay76 = dischargeSummary74.Discharge;
        java.lang.Integer int77 = dischargeSummary74.getGradeCode();
        java.lang.String str78 = dischargeSummary74.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = dischargeSummary74.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        adcpDischargeActivity70.Area = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity82 = crossSectionSurveyActivity65.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        iceCoveredData64.AboveFooting = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        iceCoveredData64.AboveFooting = datumConvertedQuantityWithDisplay84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay86 = iceCoveredData64.BelowFooting;
        calibrationCheck18.Standard = quantityWithDisplay86;
        levelSurveyMeasurement17.MeasuredElevation = quantityWithDisplay86;
        pointVelocityDischargeActivity12.Width = quantityWithDisplay86;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(verticalArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement17);
        org.junit.Assert.assertNull(calibrationCheckType19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(quantityWithDisplay27);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNull(quantityWithDisplay35);
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNotNull(fieldVisitReading39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(calibrationCheck45);
        org.junit.Assert.assertNotNull(doubleWithDisplay48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity57);
        org.junit.Assert.assertNull(verticalList58);
        org.junit.Assert.assertNotNull(fieldVisitReading62);
        org.junit.Assert.assertNotNull(dischargeSummary63);
        org.junit.Assert.assertNotNull(iceCoveredData64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(adcpDischargeActivity70);
        org.junit.Assert.assertNull(doubleWithDisplay71);
        org.junit.Assert.assertNull(quantityWithDisplay75);
        org.junit.Assert.assertNull(quantityWithDisplay76);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(dischargeSummary80);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity82);
        org.junit.Assert.assertNotNull(quantityWithDisplay86);
    }

    @Test
    public void test26781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26781");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary6 = observedPropertyImportSummary0.setSuccessCount((java.lang.Integer) 0);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList7 = observedPropertyImportSummary0.getNonErrorImportItems();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList8 = observedPropertyImportSummary0.getImportItems();
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary6);
        org.junit.Assert.assertNull(importItemObservedPropertyList7);
        org.junit.Assert.assertNull(importItemObservedPropertyList8);
    }

    @Test
    public void test26782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26782");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical0.VerticalType = verticalType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        adcpDischargeActivity4.TransducerDepth = quantityWithDisplay5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary7.BaseFlow = baseFlowType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary7.DischargeUncertainty = dischargeUncertainty14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = dischargeSummary16.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeSummary16.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = dischargeSummary16.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = doubleWithDisplay20.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary16.setDurationInHours(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty24 = dischargeUncertainty14.setQuantitativeUncertainty(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity25 = adcpDischargeActivity4.setTopEstimateExponent(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity27 = adcpDischargeActivity4.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = adcpDischargeActivity4.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str30 = datumConvertedQuantityWithDisplay29.TargetDatum;
        adcpDischargeActivity4.Area = datumConvertedQuantityWithDisplay29;
        vertical0.SegmentDischarge = datumConvertedQuantityWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str34 = pointVelocityDischargeActivity33.getModel();
        java.lang.String str35 = pointVelocityDischargeActivity33.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList36 = pointVelocityDischargeActivity33.Verticals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay37 = null;
        pointVelocityDischargeActivity33.DistanceToMeter = quantityWithDisplay37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = vertical39.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType41 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical39.VerticalType = verticalType41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation45 = velocityObservation43.setDeploymentMethod(deploymentMethodType44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation48 = velocityObservation46.setDeploymentMethod(deploymentMethodType47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList50, velocityDepthObservationArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation52 = velocityObservation48.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation53 = velocityObservation43.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = vertical39.setVelocityObservation(velocityObservation43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical56 = vertical54.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity57 = pointVelocityDischargeActivity33.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay55);
        vertical0.SegmentVelocity = datumConvertedQuantityWithDisplay55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter59 = vertical0.CurrentMeter;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertTrue("'" + verticalType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + baseFlowType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(doubleWithDisplay22);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(dischargeUncertainty24);
        org.junit.Assert.assertNotNull(adcpDischargeActivity25);
        org.junit.Assert.assertNotNull(adcpDischargeActivity27);
        org.junit.Assert.assertNull(doubleWithDisplay28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(verticalList36);
        org.junit.Assert.assertNull(quantityWithDisplay40);
        org.junit.Assert.assertTrue("'" + verticalType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType41.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation45);
        org.junit.Assert.assertTrue("'" + deploymentMethodType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation48);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(velocityObservation52);
        org.junit.Assert.assertNotNull(velocityObservation53);
        org.junit.Assert.assertNotNull(vertical54);
        org.junit.Assert.assertNotNull(vertical56);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity57);
        org.junit.Assert.assertNull(currentMeter59);
    }

    @Test
    public void test26783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26783");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend2 = postTimeSeriesOverwriteAppend0.setTimeRange(interval1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend4 = postTimeSeriesOverwriteAppend0.setUniqueId("");
        java.lang.Object obj5 = postTimeSeriesOverwriteAppend0.getResponseType();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList6 = postTimeSeriesOverwriteAppend0.Points;
        java.lang.Object obj7 = postTimeSeriesOverwriteAppend0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend8.setTimeRange(interval9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval11 = postTimeSeriesOverwriteAppend10.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList12 = postTimeSeriesOverwriteAppend10.Points;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities14.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = getActivities14.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant20 = qualifier19.DateApplied;
        java.lang.String str21 = qualifier19.User;
        java.lang.String str22 = qualifier19.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj24 = timeAlignedDataServiceRequest23.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = timeAlignedDataServiceRequest23.setQueryFrom(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier29 = qualifier19.setDateApplied(instant26);
        java.time.Instant instant30 = qualifier29.getDateApplied();
        getActivities14.ToStartTime = instant30;
        interval13.End = instant30;
        postTimeSeriesOverwriteAppend10.TimeRange = interval13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str35 = ratingModelEffectiveShiftsServiceRequest34.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str37 = referencePointPeriod36.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase39 = referencePointPeriod36.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod36.Uncertainty = 10.0d;
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase43 = referencePointPeriod36.setValidFrom(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest44 = ratingModelEffectiveShiftsServiceRequest34.setQueryFrom(instant42);
        java.lang.String str45 = ratingModelEffectiveShiftsServiceRequest34.getTimeSeriesUniqueId();
        java.time.Instant instant46 = ratingModelEffectiveShiftsServiceRequest34.getQueryFrom();
        interval13.End = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend48 = postTimeSeriesOverwriteAppend0.setTimeRange(interval13);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend2);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertNull(timeSeriesPointList6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertNull(timeSeriesPointList12);
        org.junit.Assert.assertNotNull(getActivities18);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest28);
        org.junit.Assert.assertNotNull(qualifier29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(referencePointPeriodBase39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(referencePointPeriodBase43);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend48);
    }

    @Test
    public void test26784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26784");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType36 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation37 = methodOperation35.setOperationType(metadataChangeOperationType36);
        java.lang.String str38 = methodOperation37.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = methodOperation37.getOperationType();
        methodOperation37.MethodCode = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation43 = methodOperation37.setUser("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant45 = timeSeriesDescription44.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription47 = timeSeriesDescription44.setLabel("hi!");
        java.lang.String str48 = timeSeriesDescription47.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj50 = timeAlignedDataServiceRequest49.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant52 = sensor51.getLastModifiedUtc();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor54 = sensor51.setLastModifiedUtc(instant53);
        java.time.Instant instant55 = sensor51.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest49.setQueryTo(instant55);
        timeSeriesDescription47.CorrectedEndTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation58 = methodOperation43.setDateAppliedUtc(instant55);
        getGroupedObservationsV2_26.EndModificationTime = instant55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_61 = getGroupedObservationsV2_26.setDepthValue((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str63 = timeSeriesApprovalsTransactionListServiceRequest62.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType65 = null;
        controlConditionActivity64.ControlCleaned = controlCleanedType65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        controlConditionActivity64.DateCleaned = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest71 = timeSeriesApprovalsTransactionListServiceRequest62.setQueryTo(instant68);
        java.time.Instant instant72 = timeSeriesApprovalsTransactionListServiceRequest62.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_73 = getGroupedObservationsV2_61.setEndResultTime(instant72);
        java.util.List<java.lang.String> strList74 = getGroupedObservationsV2_61.QualityControlTypes;
        java.util.List<java.lang.String> strList75 = getGroupedObservationsV2_61.getTaxonIds();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType36.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation43);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNotNull(timeSeriesDescription47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(sensor54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(methodOperation58);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_73);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNull(strList75);
    }

    @Test
    public void test26785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26785");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation4 = correctionOperation2.setType(correctionType3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation2.OperationType = metadataChangeOperationType5;
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = correctionOperation2.setDateAppliedUtc(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType10 = methodOperation9.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation12 = methodOperation9.setOperationType(metadataChangeOperationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = correctionOperation8.setOperationType(metadataChangeOperationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation16 = correctionOperation14.setType(correctionType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation14.OperationType = metadataChangeOperationType17;
        java.time.Instant instant19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation20 = correctionOperation14.setDateAppliedUtc(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = methodOperation21.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation24 = methodOperation21.setOperationType(metadataChangeOperationType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation25 = correctionOperation20.setOperationType(metadataChangeOperationType23);
        correctionOperation8.OperationType = metadataChangeOperationType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType28 = trendLineAnalysisServiceRequest27.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark31 = locationRemark29.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse32.setNextToken(instant33);
        locationRemark31.FromTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark31.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod40 = timeSeriesThresholdPeriod38.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription43 = locationDescription41.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType45 = null;
        controlConditionActivity44.ControlCleaned = controlCleanedType45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        controlConditionActivity44.DateCleaned = instant48;
        locationDescription43.LastModified = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod52 = timeSeriesThresholdPeriod40.setAppliedTime(instant48);
        locationRemark37.ToTime = instant48;
        trendLineAnalysisServiceRequest27.QueryFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation55 = correctionOperation8.setDateAppliedUtc(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57, correctionOperationArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction59 = metadataChangeTransaction1.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction60 = metadataChangeTransaction0.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList61 = metadataChangeTransaction60.NoteOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList62 = metadataChangeTransaction60.NoteOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation> interpolationTypeOperationList63 = metadataChangeTransaction60.InterpolationTypeOperations;
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation4);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation8);
        org.junit.Assert.assertNull(metadataChangeOperationType10);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation12);
        org.junit.Assert.assertNotNull(correctionOperation13);
        org.junit.Assert.assertTrue("'" + correctionType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation20);
        org.junit.Assert.assertNull(metadataChangeOperationType22);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation24);
        org.junit.Assert.assertNotNull(correctionOperation25);
        org.junit.Assert.assertNull(trendLineAnalysisType28);
        org.junit.Assert.assertNotNull(locationRemark31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod40);
        org.junit.Assert.assertNotNull(locationDescription43);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod52);
        org.junit.Assert.assertNotNull(correctionOperation55);
        org.junit.Assert.assertNotNull(correctionOperationArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction59);
        org.junit.Assert.assertNotNull(metadataChangeTransaction60);
        org.junit.Assert.assertNull(noteOperationList61);
        org.junit.Assert.assertNull(noteOperationList62);
        org.junit.Assert.assertNull(interpolationTypeOperationList63);
    }

    @Test
    public void test26786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26786");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer();
        java.lang.String str1 = putShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer3 = putShippingContainer0.setCustomId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = putShippingContainer0.getAuditAttributes();
        java.lang.String str5 = putShippingContainer0.TrackingId;
        putShippingContainer0.Comment = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putShippingContainer3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26787");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType1 = getExtendedAttributes0.AppliesToType;
        java.lang.Object obj2 = getExtendedAttributes0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes4 = getExtendedAttributes0.setAppliesToType(appliesToType3);
        java.lang.String str5 = getExtendedAttributes4.getCustomId();
        java.lang.String str6 = getExtendedAttributes4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType7 = getExtendedAttributes4.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        java.lang.Integer int9 = getExtendedAttributes8.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType10 = getExtendedAttributes8.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getDataClassifications();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList28 = getSpecimens27.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType30 = putUserV2_29.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse32.setNextToken(instant37);
        java.time.Instant instant41 = locationDescriptionListServiceResponse32.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = getActivities31.setToStartTime(instant41);
        java.lang.String str43 = getActivities42.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        getObservationsV2_44.ResultGrades = strList57;
        getActivities42.Media = strList57;
        putUserV2_29.AccessGroups = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens64 = getSpecimens27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList57);
        getObservationsV2_11.ProjectIds = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes66 = getExtendedAttributes8.setSearch((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes68 = getExtendedAttributes8.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType69 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SPECIMEN;
        getExtendedAttributes68.AppliesToType = appliesToType69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes71 = getExtendedAttributes4.setAppliesToType(appliesToType69);
        org.junit.Assert.assertNull(appliesToType1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertTrue("'" + appliesToType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION + "'", appliesToType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + appliesToType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION + "'", appliesToType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION));
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(appliesToType10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(userType30);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(getActivities42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(getSpecimens64);
        org.junit.Assert.assertNotNull(getExtendedAttributes66);
        org.junit.Assert.assertNotNull(getExtendedAttributes68);
        org.junit.Assert.assertTrue("'" + appliesToType69 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SPECIMEN + "'", appliesToType69.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SPECIMEN));
        org.junit.Assert.assertNotNull(getExtendedAttributes71);
    }

    @Test
    public void test26788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26788");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits();
        getUnitGroupWithUnits0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits4 = getUnitGroupWithUnits0.setSystemCode(getUnitGroupWithUnitsSystemCodeType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits();
        getUnitGroupWithUnits5.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str8 = getUnitGroupWithUnits5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits10 = getUnitGroupWithUnits5.setSystemCode(getUnitGroupWithUnitsSystemCodeType9);
        getUnitGroupWithUnits4.SystemCode = getUnitGroupWithUnitsSystemCodeType9;
        java.lang.String str12 = getUnitGroupWithUnits4.CustomId;
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str8, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str12, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test26789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26789");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation3.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList7, extendedAttributeValueArray6);
        postLocation3.ExtendedAttributeValues = extendedAttributeValueList7;
        postCalculatedDerivedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList7;
        java.lang.String str11 = postCalculatedDerivedTimeSeries0.getSubLocationIdentifier();
        java.lang.String str12 = postCalculatedDerivedTimeSeries0.getComputationPeriodIdentifier();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries0.setExtendedAttributeValues(extendedAttributeValueList13);
        postCalculatedDerivedTimeSeries14.Label = "http://MaxDurationhttp/json/reply/ArrayList";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
    }

    @Test
    public void test26790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26790");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles2 = locationUserRoles0.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str4 = locationUserRoles3.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList5 = locationUserRoles3.getRoles();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList6 = locationUserRoles3.Roles;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList7 = locationUserRoles3.getRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str9 = locationUserRoles8.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList10 = locationUserRoles8.getRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str12 = locationUserRole11.AppliedToLocationFolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str14 = locationUserRole13.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole16 = locationUserRole13.setUserLoginName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str18 = locationUserRole17.UserUniqueId;
        java.lang.String str19 = locationUserRole17.getAppliedToLocationFolderName();
        java.lang.String str20 = locationUserRole17.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str22 = locationUserRole21.UserUniqueId;
        java.lang.String str23 = locationUserRole21.RoleName;
        java.lang.String str24 = locationUserRole21.getAppliedToLocationFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] locationUserRoleArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] { locationUserRole11, locationUserRole13, locationUserRole17, locationUserRole21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>) locationUserRoleList26, locationUserRoleArray25);
        locationUserRoles8.Roles = locationUserRoleList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles29 = locationUserRoles3.setRoles(locationUserRoleList26);
        locationUserRoles2.Roles = locationUserRoleList26;
        org.junit.Assert.assertNotNull(locationUserRoles2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(locationUserRoleList5);
        org.junit.Assert.assertNull(locationUserRoleList6);
        org.junit.Assert.assertNull(locationUserRoleList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(locationUserRoleList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locationFolderUserRole16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locationUserRoleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locationUserRoles29);
    }

    @Test
    public void test26791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26791");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen1 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = fieldSheetImportSummary0.getFieldResultSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen3 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation6 = importSummaryObservation4.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Integer int7 = importSummaryObservation6.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str9 = importHistoryEventSimple8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple8.ImportType = importType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation12 = importSummaryObservation6.setImportHistoryEventSimple(importHistoryEventSimple8);
        fieldSheetImportSummary0.FieldResultSummary = importSummaryObservation6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation16 = importSummaryObservation14.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation18 = importSummaryObservation16.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation20 = importSummaryObservation16.setExpectedCount((java.lang.Integer) 2);
        java.lang.Integer int21 = importSummaryObservation20.NewCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation23 = importSummaryObservation20.setSummaryReportText("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        fieldSheetImportSummary0.FieldResultSummary = importSummaryObservation23;
        org.junit.Assert.assertNull(importSummarySpecimen1);
        org.junit.Assert.assertNull(importSummaryObservation2);
        org.junit.Assert.assertNull(importSummarySpecimen3);
        org.junit.Assert.assertNotNull(importSummaryObservation6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + importType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNotNull(importSummaryObservation12);
        org.junit.Assert.assertNotNull(importSummaryObservation16);
        org.junit.Assert.assertNotNull(importSummaryObservation18);
        org.junit.Assert.assertNotNull(importSummaryObservation20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(importSummaryObservation23);
    }

    @Test
    public void test26792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26792");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod> referencePointPeriodList1 = referencePoint0.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase3 = referencePoint0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.Instant instant4 = referencePointBase3.getPrimarySinceDate();
        java.time.Instant instant5 = referencePointBase3.DecommissionedDate;
        org.junit.Assert.assertNull(referencePointPeriodList1);
        org.junit.Assert.assertNotNull(referencePointBase3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test26793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26793");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj1 = postSession0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession3 = postSession0.setUsername("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str4 = postSession0.getLocale();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession6 = postSession0.setLocale("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.Object obj7 = postSession6.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSession6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.String");
    }

    @Test
    public void test26794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26794");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical4.getSegmentVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData6 = vertical4.getIceCoveredData();
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(iceCoveredData6);
    }

    @Test
    public void test26795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26795");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str3 = postReflectedTimeSeries0.getLabel();
        java.lang.String str4 = postReflectedTimeSeries0.getLocationUniqueId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test26796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26796");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        getObservationsV2_0.ResultGrades = strList13;
        java.lang.Double double18 = getObservationsV2_0.getMinNumericResultValue();
        java.util.List<java.lang.String> strList19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_0.setActivityTypes(strList19);
        java.util.List<java.lang.String> strList21 = getObservationsV2_20.SamplingLocationGroupIds;
        java.lang.String str22 = getObservationsV2_20.getFieldVisitId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        postRecurringReport25.NextGenerationDate = instant29;
        java.time.Instant instant32 = postRecurringReport25.getNextGenerationDate();
        java.lang.String str33 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant32);
        metadataChangeTransactionListServiceRequest24.QueryFrom = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest35 = downchainProcessorListByRatingModelServiceRequest23.setQueryTo(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest37 = downchainProcessorListByRatingModelServiceRequest23.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant39 = qualifier38.DateApplied;
        java.lang.String str40 = qualifier38.User;
        java.lang.String str41 = qualifier38.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj43 = timeAlignedDataServiceRequest42.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse44.setNextToken(instant45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = timeAlignedDataServiceRequest42.setQueryFrom(instant45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier48 = qualifier38.setDateApplied(instant45);
        java.time.Instant instant49 = qualifier48.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest50 = downchainProcessorListByRatingModelServiceRequest23.setQueryFrom(instant49);
        java.lang.String str51 = downchainProcessorListByRatingModelServiceRequest23.getRatingModelIdentifier();
        java.time.Instant instant52 = downchainProcessorListByRatingModelServiceRequest23.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_20.setStartObservedTime(instant52);
        java.time.Instant instant54 = getObservationsV2_53.StartModificationTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str33, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest35);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest37);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest47);
        org.junit.Assert.assertNotNull(qualifier48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(instant54);
    }

    @Test
    public void test26797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26797");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary1.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = observedPropertyImportSummary1.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = reading7.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading7.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading10.setModel("MaxInstant");
        java.lang.Integer int13 = reading12.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField17 = extendedAttributeField15.setDisplayName("");
        java.lang.Boolean boolean18 = extendedAttributeField17.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_21.setDataClassifications((java.util.List<java.lang.String>) strList25);
        getObservationsV2_27.DepthUnitCustomId = "hi!";
        java.lang.String str30 = getObservationsV2_27.CustomId;
        java.util.List<java.lang.String> strList31 = getObservationsV2_27.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.QualityControlTypes = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_27.setMedia((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str49 = getObservationsV2_48.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        getObservationsV2_48.ProjectIds = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_27.setObservedPropertyIds((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField59 = extendedAttributeField17.setValueOptions((java.util.List<java.lang.String>) strList53);
        putBulkEditResultGradesV2_14.AnalysisMethodSimpleIds = strList53;
        reading12.ReadingQualifiers = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty62 = importItemObservedProperty6.setFields((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList64, importItemObservedPropertyArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary66 = observedPropertyImportSummary1.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary68 = observedPropertyImportSummary66.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary69.UpdateCount = (-1);
        java.lang.Integer int72 = observationImportSummary69.ExpectedCount;
        java.lang.String str73 = observationImportSummary69.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList75, importErrorArray74);
        observationImportSummary69.ImportJobErrors = importErrorList75;
        observedPropertyImportSummary66.ImportJobErrors = importErrorList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary79 = samplingLocationImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList75);
        samplingLocationImportSummary0.UpdateCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple82 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        samplingLocationImportSummary0.ErrorCount = (-1);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary5);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNotNull(reading12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(extendedAttributeField17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(extendedAttributeField59);
        org.junit.Assert.assertNotNull(importItemObservedProperty62);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary66);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary68);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(importErrorArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary79);
        org.junit.Assert.assertNull(importHistoryEventSimple82);
    }

    @Test
    public void test26798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26798");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory0.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str3 = laboratory0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = laboratory0.setId("MaxDuration");
        java.lang.String str6 = laboratory0.getAddress();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(laboratory5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26799");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postSchedule0.getAuditAttributes();
        postSchedule0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType17 = postSchedule0.SamplingLocationGroupSelectionType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup22 = putSchedule21.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.EndDate = offsetDateTime23;
        java.time.OffsetDateTime offsetDateTime25 = putSchedule21.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime27 = putSchedule26.StartDate;
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule26.setEndDate(offsetDateTime28);
        java.lang.Integer int30 = putSchedule26.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule32 = putSchedule26.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule21.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType34 = putSchedule21.RecurrenceDayMonthly;
        java.time.OffsetDateTime offsetDateTime35 = putSchedule21.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan36.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan36.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup41 = samplingPlan36.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = samplingPlan36.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime43 = samplingPlan36.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType44 = samplingPlan36.getSamplingLocationGroupSelectionType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule45 = putSchedule21.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType44);
        postSchedule0.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType44;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList47 = postSchedule0.getSchedulePlannedActivities();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNull(samplingLocationGroupSelectionType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(samplingLocationGroup22);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM + "'", samplingLocationGroupSelectionType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM));
        org.junit.Assert.assertNotNull(putSchedule32);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup41);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(putSchedule45);
        org.junit.Assert.assertNull(schedulePlannedActivityList47);
    }

    @Test
    public void test26800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26800");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str1 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration0.IdentifierClaim = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.lang.Object obj5 = getLabReports4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports7 = getLabReports4.setLimit((java.lang.Integer) 0);
        java.util.List<java.lang.String> strList8 = getLabReports7.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList28 = fieldVisitDataServiceResponse27.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse30 = fieldVisitDataServiceResponse27.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        fieldVisitDataServiceResponse27.ResponseTime = instant34;
        getObservationsV2_9.StartObservedTime = instant34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList39 = getSpecimens38.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType41 = putUserV2_40.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = dischargeSummary44.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        dischargeSummary44.MeasurementTime = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse43.setNextToken(instant48);
        java.time.Instant instant52 = locationDescriptionListServiceResponse43.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities53 = getActivities42.setToStartTime(instant52);
        java.lang.String str54 = getActivities53.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList56 = getObservationsV2_55.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        getObservationsV2_57.QualityControlTypes = strList68;
        getObservationsV2_55.ResultGrades = strList68;
        getActivities53.Media = strList68;
        putUserV2_40.AccessGroups = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens75 = getSpecimens38.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList68);
        getObservationsV2_9.LabReportIds = strList68;
        getLabReports7.Search = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration78 = openIdConnectRelyingPartyConfiguration0.setHostedDomains((java.util.List<java.lang.String>) strList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration80 = openIdConnectRelyingPartyConfiguration78.setOptionalIssuerDiscoveryUri("");
        openIdConnectRelyingPartyConfiguration78.RedirectUri = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertNotNull(getLabReports7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList28);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(userType41);
        org.junit.Assert.assertNotNull(dischargeSummary46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(getActivities53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(getSpecimens75);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration78);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration80);
    }

    @Test
    public void test26801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26801");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj3 = timeAlignedDataServiceRequest2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = timeAlignedDataServiceRequest2.setQueryFrom(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription8 = timeSeriesDescription1.setRawStartTime(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription10 = timeSeriesDescription8.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription12 = timeSeriesDescription10.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str13 = timeSeriesDescription12.getDescription();
        java.time.Instant instant14 = timeSeriesDescription12.RawStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest15 = upchainProcessorListByTimeSeriesServiceRequest0.setQueryTo(instant14);
        upchainProcessorListByTimeSeriesServiceRequest15.TimeSeriesUniqueId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary21.Reviewer = "";
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary21.MeasurementTime = instant24;
        postRecurringReport20.NextGenerationDate = instant24;
        java.time.Instant instant27 = postRecurringReport20.getNextGenerationDate();
        java.lang.String str28 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant27);
        metadataChangeTransactionListServiceRequest19.QueryFrom = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest30 = downchainProcessorListByRatingModelServiceRequest18.setQueryTo(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest32 = downchainProcessorListByRatingModelServiceRequest18.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant34 = qualifier33.DateApplied;
        java.lang.String str35 = qualifier33.User;
        java.lang.String str36 = qualifier33.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        postRecurringReport37.NextGenerationDate = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier44 = qualifier33.setDateApplied(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest45 = downchainProcessorListByRatingModelServiceRequest18.setQueryTo(instant41);
        java.lang.String str46 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest47 = upchainProcessorListByTimeSeriesServiceRequest15.setQueryFrom(instant41);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest7);
        org.junit.Assert.assertNotNull(timeSeriesDescription8);
        org.junit.Assert.assertNotNull(timeSeriesDescription10);
        org.junit.Assert.assertNotNull(timeSeriesDescription12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest15);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str28, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest30);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest32);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(qualifier44);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str46, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest47);
    }

    @Test
    public void test26802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26802");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role4 = role0.setCanAssignUserRoles((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role6 = role4.setCanEditLocationDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean7 = role4.CanRemoveAppendConfigurations;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNotNull(role4);
        org.junit.Assert.assertNotNull(role6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
    }

    @Test
    public void test26803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26803");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str4 = volumetricDischargeReading3.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading6 = volumetricDischargeReading3.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary7.BaseFlow = baseFlowType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary7.DischargeUncertainty = dischargeUncertainty14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = dischargeSummary16.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeSummary16.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = dischargeSummary16.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = doubleWithDisplay20.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary16.setDurationInHours(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty24 = dischargeUncertainty14.setQuantitativeUncertainty(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading25 = volumetricDischargeReading3.setEndingVolume(doubleWithDisplay20);
        volumetricDischargeReading3.Name = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary30.DifferenceDuringVisit = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = doubleWithDisplay31.setDisplay("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading35 = volumetricDischargeReading3.setDischarge(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading37 = volumetricDischargeReading3.setVolumeChange(doubleWithDisplay36);
        java.lang.String str38 = volumetricDischargeReading3.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading40 = volumetricDischargeReading3.setName("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        importItemAnalysisMethod2.Errors = volumetricDischargeReading3;
        volumetricDischargeReading3.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = volumetricDischargeReading3.EndingVolume;
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(volumetricDischargeReading6);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + baseFlowType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(doubleWithDisplay22);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(dischargeUncertainty24);
        org.junit.Assert.assertNotNull(volumetricDischargeReading25);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(doubleWithDisplay34);
        org.junit.Assert.assertNotNull(volumetricDischargeReading35);
        org.junit.Assert.assertNotNull(volumetricDischargeReading37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(volumetricDischargeReading40);
        org.junit.Assert.assertNotNull(doubleWithDisplay44);
    }

    @Test
    public void test26804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26804");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation2 = methodOperation0.setOperationType(metadataChangeOperationType1);
        java.lang.String str3 = methodOperation2.getUser();
        java.lang.Integer int4 = methodOperation2.getStackPosition();
        java.lang.String str5 = methodOperation2.MethodCode;
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26805");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon7 = null;
        observation2.RelatedTaxon = taxon7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setResultStatus(resultStatus9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation2.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device15 = device13.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device17 = device15.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device19 = device15.setType("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation2.setDevice(device15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        java.lang.String str22 = medium21.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation20.setMedium(medium21);
        java.time.OffsetDateTime offsetDateTime24 = observation20.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType25 = observation20.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier26 = observation20.getNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str29 = metricConfiguration28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty30.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration33 = metricConfiguration28.setObservedProperty(observedProperty30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType34 = observedProperty30.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup36 = postObservedProperty35.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit38 = null;
        quantity37.Unit = unit38;
        postObservedProperty35.LowerLimit = quantity37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = postObservedProperty35.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit42 = quantity41.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty43 = observedProperty30.setUpperLimit(quantity41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation44 = samplingLocation27.setElevation(quantity41);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList45 = samplingLocation44.getAttachments();
        java.lang.String str46 = samplingLocation44.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList47 = samplingLocation44.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit49 = null;
        quantity48.Unit = unit49;
        samplingLocation44.Elevation = quantity48;
        observation20.Depth = quantity48;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNotNull(device15);
        org.junit.Assert.assertNotNull(device17);
        org.junit.Assert.assertNotNull(device19);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNull(offsetDateTime24);
        org.junit.Assert.assertNull(dataClassificationType25);
        org.junit.Assert.assertNull(nullMeasureQualifier26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(metricConfiguration33);
        org.junit.Assert.assertNull(resultType34);
        org.junit.Assert.assertNull(unitGroup36);
        org.junit.Assert.assertNotNull(quantity41);
        org.junit.Assert.assertNull(unit42);
        org.junit.Assert.assertNotNull(observedProperty43);
        org.junit.Assert.assertNotNull(samplingLocation44);
        org.junit.Assert.assertNull(domainObjectAttachmentList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(importHistoryEventSimpleList47);
    }

    @Test
    public void test26806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26806");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject();
        java.lang.String str1 = searchResultProject0.getCursor();
        java.lang.String str2 = searchResultProject0.getCursor();
        java.lang.String str3 = searchResultProject0.Cursor;
        java.lang.String str4 = searchResultProject0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList5 = searchResultProject0.getDomainObjects();
        java.lang.String str6 = searchResultProject0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject8 = searchResultProject0.setCursor("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(projectList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(searchResultProject8);
    }

    @Test
    public void test26807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26807");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        analyticalGroup0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup5 = analyticalGroup0.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        analyticalGroup0.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        analyticalGroup0.Description = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNotNull(analyticalGroup5);
    }

    @Test
    public void test26808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26808");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole();
        java.lang.String str1 = deleteLocationUserRole0.getLocationUniqueId();
        java.lang.String str2 = deleteLocationUserRole0.getUserUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole4 = deleteLocationUserRole0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole6 = deleteLocationUserRole0.setLocationUniqueId("MaxDuration");
        java.lang.String str7 = deleteLocationUserRole6.LocationUniqueId;
        java.lang.String str8 = deleteLocationUserRole6.UserUniqueId;
        java.lang.String str9 = deleteLocationUserRole6.UserUniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteLocationUserRole4);
        org.junit.Assert.assertNotNull(deleteLocationUserRole6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxDuration" + "'", str7, "MaxDuration");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test26809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26809");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation2 = methodOperation0.setStackPosition((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = methodOperation2.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation5 = methodOperation2.setComments("");
        org.junit.Assert.assertNotNull(methodOperation2);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNotNull(methodOperation5);
    }

    @Test
    public void test26810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26810");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = postFilter0.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = postFilter2.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime4 = postFilter2.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter6 = postFilter2.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        postFilter6.CustomId = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList10 = importItemTaxon9.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon12 = importItemTaxon9.setItem(taxon11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str14 = postCalculatedDerivedTimeSeries13.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = postCalculatedDerivedTimeSeries13.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon16 = importItemTaxon12.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList18 = importItemObject17.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList20, importChangeItemArray19);
        importItemObject17.ItemComparison = importChangeItemList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject31 = importItemObject17.setExistingItem((java.lang.Object) putLocationTags23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser34 = openIdConnectUser32.setIdentifier("");
        java.lang.Boolean boolean35 = openIdConnectUser34.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = importItemObject17.setErrors((java.lang.Object) openIdConnectUser34);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList37 = importItemObject36.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon38 = importItemTaxon16.setItemComparison(importChangeItemList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList40 = importItemTaxon39.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon42 = importItemTaxon39.setItem(taxon41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str44 = postCalculatedDerivedTimeSeries43.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList45 = postCalculatedDerivedTimeSeries43.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon42.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon48 = importItemTaxon42.setExistingItem(taxon47);
        importItemTaxon16.Item = taxon47;
        taxon47.Source = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime53 = putSchedule52.StartDate;
        java.time.OffsetDateTime offsetDateTime54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule55 = putSchedule52.setEndDate(offsetDateTime54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = putSchedule55.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime57 = putSchedule55.getEndDate();
        java.time.OffsetDateTime offsetDateTime58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule59 = putSchedule55.setStartDate(offsetDateTime58);
        java.lang.Integer int60 = putSchedule55.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType61 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule55.RecurrenceDayMonthly = recurrenceDayMonthlyType61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = unit63.AuditAttributes;
        unit63.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity70 = samplingPlanPlannedActivity68.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = auditAttributes71.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity70.AuditAttributes = auditAttributes71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = samplingPlanPlannedActivity70.AuditAttributes;
        putAccessGroup67.AuditAttributes = auditAttributes75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit77 = unit63.setAuditAttributes(auditAttributes75);
        putSchedule55.AuditAttributes = auditAttributes75;
        java.lang.String str79 = auditAttributes75.getCreationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon80 = taxon47.setAuditAttributes(auditAttributes75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter81 = postFilter6.setAuditAttributes(auditAttributes75);
        java.time.OffsetDateTime offsetDateTime82 = postFilter81.EndTime;
        org.junit.Assert.assertNotNull(postFilter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(postFilter6);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(importItemTaxon12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(extendedAttributeValueList15);
        org.junit.Assert.assertNotNull(importItemTaxon16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(importChangeItemArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(importItemObject31);
        org.junit.Assert.assertNotNull(openIdConnectUser34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(importItemObject36);
        org.junit.Assert.assertNotNull(importChangeItemList37);
        org.junit.Assert.assertNotNull(importItemTaxon38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(importItemTaxon42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(extendedAttributeValueList45);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNotNull(importItemTaxon48);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(putSchedule55);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(putSchedule59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType61 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType61.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes64);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity70);
        org.junit.Assert.assertNotNull(auditAttributes73);
        org.junit.Assert.assertNotNull(auditAttributes75);
        org.junit.Assert.assertNotNull(unit77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "'.'SSSSSSS" + "'", str79, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(taxon80);
        org.junit.Assert.assertNotNull(postFilter81);
        org.junit.Assert.assertNull(offsetDateTime82);
    }

    @Test
    public void test26811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26811");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule3 = schedule1.setId("hi!");
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = schedule3.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule3.setId("http");
        postFieldVisit0.Schedule = schedule7;
        java.time.OffsetDateTime offsetDateTime9 = postFieldVisit0.EndTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList10 = postFieldVisit0.getAttachments();
        org.junit.Assert.assertNotNull(schedule3);
        org.junit.Assert.assertNotNull(schedule5);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(domainObjectAttachmentList10);
    }

    @Test
    public void test26812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26812");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = postSamplingLocation0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation76 = postSamplingLocation0.setLatitude("/AQUARIUS/Acquisition/v2");
        java.lang.String str77 = postSamplingLocation76.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList78 = postSamplingLocation76.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation80 = postSamplingLocation76.setType(locationType79);
        java.lang.String str81 = locationType79.CustomId;
        java.lang.String str82 = locationType79.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType84 = locationType79.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType86 = locationType84.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType88 = locationType84.setAuditAttributes(auditAttributes87);
        java.lang.String str89 = locationType88.CustomId;
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(importHistoryEventSimpleList74);
        org.junit.Assert.assertNotNull(postSamplingLocation76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(standardSimpleList78);
        org.junit.Assert.assertNotNull(postSamplingLocation80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(locationType84);
        org.junit.Assert.assertNotNull(locationType86);
        org.junit.Assert.assertNotNull(locationType88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test26813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26813");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase4 = roleFlattenedBase2.setName("");
        roleFlattenedBase2.CanAddOrRemoveLocations = true;
        roleFlattenedBase2.CanEditAppendConfigurations = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase10 = roleFlattenedBase2.setCanAddData((java.lang.Boolean) true);
        java.util.ArrayList<java.lang.String> strList11 = roleFlattenedBase2.getRoleApprovalTransitions();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase13 = roleFlattenedBase2.setCanRemoveAppendConfigurations((java.lang.Boolean) false);
        java.lang.String str14 = roleFlattenedBase13.Name;
        roleFlattenedBase13.CanRemoveAppendConfigurations = false;
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNotNull(roleFlattenedBase4);
        org.junit.Assert.assertNotNull(roleFlattenedBase10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(roleFlattenedBase13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test26814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26814");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag2 = appliedTag0.setValue("'.'SSSSSSS");
        appliedTag0.Value = "0001-01-01T00:00:00.000Z";
        java.lang.String str5 = appliedTag0.Key;
        java.lang.String str6 = appliedTag0.Value;
        org.junit.Assert.assertNotNull(appliedTag2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str6, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test26815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26815");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationFolder postLocationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationFolder();
        postLocationFolder0.LocationFolderDescription = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str3 = postLocationFolder0.LocationFolderName;
        postLocationFolder0.ParentLocationFolderPath = "/AQUARIUS/Acquisition/v2";
        java.lang.String str6 = postLocationFolder0.getParentLocationFolderPath();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationFolder postLocationFolder8 = postLocationFolder0.setParentLocationFolderPath("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderWriteBase locationFolderWriteBase10 = postLocationFolder0.setLocationFolderDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str11 = locationFolderWriteBase10.getLocationFolderName();
        java.lang.String str12 = locationFolderWriteBase10.getLocationFolderName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str6, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postLocationFolder8);
        org.junit.Assert.assertNotNull(locationFolderWriteBase10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test26816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26816");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest2 = timeSeriesDataRawServiceRequest0.setUnit("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest4 = timeSeriesDataRawServiceRequest2.setGetParts("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.time.Instant instant5 = timeSeriesDataRawServiceRequest2.QueryFrom;
        java.lang.String str6 = timeSeriesDataRawServiceRequest2.getGetParts();
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest2);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str6, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test26817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26817");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        samplingLocationImportSummary0.ErrorCount = 10;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList6 = samplingLocationImportSummary0.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary8 = samplingLocationImportSummary0.setSuccessCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary10 = samplingLocationImportSummary0.setNewCount((java.lang.Integer) 0);
        samplingLocationImportSummary10.NewCount = 1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList13 = samplingLocationImportSummary10.getImportItems();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(importItemSamplingLocationList6);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary8);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary10);
        org.junit.Assert.assertNull(importItemSamplingLocationList13);
    }

    @Test
    public void test26818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26818");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        java.util.List<java.lang.String> strList4 = user0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user6 = user0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier9 = putQualifier7.setUniqueId("");
        java.lang.String str10 = putQualifier9.getPublicIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier12 = putQualifier9.setPublicIdentifier("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier14 = putQualifier9.setUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList16 = importItemObject15.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList18, importChangeItemArray17);
        importItemObject15.ItemComparison = importChangeItemList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject29 = importItemObject15.setExistingItem((java.lang.Object) putLocationTags21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        importItemObject29.WarningMessages = strList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier37 = putQualifier14.setGroupIdentifiers(strList33);
        user0.Roles = strList33;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertNotNull(putQualifier9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putQualifier12);
        org.junit.Assert.assertNotNull(putQualifier14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(importChangeItemArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNotNull(importItemObject29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putQualifier37);
    }

    @Test
    public void test26819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26819");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = expandedRatingCurve0.setBaseRatingTable(ratingPointList1);
        java.lang.String str3 = expandedRatingCurve2.getRemarks();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList4 = expandedRatingCurve2.getBaseRatingTable();
        org.junit.Assert.assertNotNull(expandedRatingCurve2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(ratingPointList4);
    }

    @Test
    public void test26820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26820");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        java.lang.String str28 = getGroupedObservationsV2_26.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_30 = getGroupedObservationsV2_26.setMinNumericResultValue((java.lang.Double) 10.0d);
        java.lang.String str31 = getGroupedObservationsV2_30.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_33 = getGroupedObservationsV2_30.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_33);
    }

    @Test
    public void test26821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26821");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        java.lang.String str2 = getFieldVisitReadingsByLocationServiceRequest0.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest4 = getFieldVisitReadingsByLocationServiceRequest0.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        java.util.List<java.lang.String> strList21 = getObservationsV2_6.getLabReportIds();
        importItem5.Errors = getObservationsV2_6;
        java.lang.Object obj23 = importItem5.getExistingItem();
        importItem5.Input = "hi!";
        java.lang.Object obj26 = importItem5.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem28 = importItem5.setStatus(importItemStatusType27);
        importItem28.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate31.setId("hi!");
        java.lang.Boolean boolean36 = specimenTemplate35.getFiltered();
        importItem28.Item = specimenTemplate35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_40.setDataClassifications((java.util.List<java.lang.String>) strList44);
        postTag39.PickListValues = strList44;
        java.util.ArrayList<java.lang.String> strList48 = postTag39.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor49 = processor38.setInputTimeSeriesUniqueIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem50 = importItem28.setWarningMessages((java.util.List<java.lang.String>) strList48);
        getFieldVisitReadingsByLocationServiceRequest0.Parameters = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest53 = getFieldVisitReadingsByLocationServiceRequest0.setApplyDatumConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest55 = getFieldVisitReadingsByLocationServiceRequest53.setPublish((java.lang.Boolean) true);
        getFieldVisitReadingsByLocationServiceRequest55.Publish = false;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + importItemStatusType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem28);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(processor49);
        org.junit.Assert.assertNotNull(importItem50);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest53);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest55);
    }

    @Test
    public void test26822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26822");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        engineeredStructureDischargeActivity0.StructureType = "/AQUARIUS/Acquisition/v2";
        java.lang.String str3 = engineeredStructureDischargeActivity0.StructureType;
        java.lang.String str4 = engineeredStructureDischargeActivity0.getStructureType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        adcpDischargeActivity5.TransducerDepth = quantityWithDisplay6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary8.BaseFlow = baseFlowType13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary8.DischargeUncertainty = dischargeUncertainty15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeSummary17.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary17.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = dischargeSummary17.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = doubleWithDisplay21.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary17.setDurationInHours(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty25 = dischargeUncertainty15.setQuantitativeUncertainty(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity26 = adcpDischargeActivity5.setTopEstimateExponent(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity28 = adcpDischargeActivity5.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType31 = dischargeChannelMeasurement30.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = dischargeChannelMeasurement30.Discharge;
        java.time.Instant instant33 = dischargeChannelMeasurement30.EndTime;
        dischargeChannelMeasurement30.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity36 = engineeredStructureDischargeActivity29.setDischargeChannelMeasurement(dischargeChannelMeasurement30);
        java.lang.String str37 = engineeredStructureDischargeActivity36.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = engineeredStructureDischargeActivity36.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint39.Distance = quantityWithDisplay40;
        crossSectionPoint39.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = crossSectionPoint39.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint46 = crossSectionPoint39.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint48 = crossSectionPoint46.setElevation(quantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = null;
        crossSectionPoint48.Depth = quantityWithDisplay49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint48.Depth = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity53.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity53.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity59 = pointVelocityDischargeActivity53.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList60 = pointVelocityDischargeActivity59.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity59.DistanceToMeter = datumConvertedQuantityWithDisplay61;
        crossSectionPoint48.Elevation = datumConvertedQuantityWithDisplay61;
        engineeredStructureDischargeActivity36.MeanHead = datumConvertedQuantityWithDisplay61;
        adcpDischargeActivity5.VelocityAverage = datumConvertedQuantityWithDisplay61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity66 = engineeredStructureDischargeActivity0.setMeanHead((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay61);
        java.lang.String str67 = engineeredStructureDischargeActivity0.StructureType;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str3, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str4, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + baseFlowType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNotNull(doubleWithDisplay23);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNotNull(dischargeUncertainty25);
        org.junit.Assert.assertNotNull(adcpDischargeActivity26);
        org.junit.Assert.assertNotNull(adcpDischargeActivity28);
        org.junit.Assert.assertNull(channelMaterialType31);
        org.junit.Assert.assertNull(quantityWithDisplay32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(quantityWithDisplay38);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNotNull(crossSectionPoint46);
        org.junit.Assert.assertNotNull(crossSectionPoint48);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity59);
        org.junit.Assert.assertNull(verticalList60);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str67, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test26823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26823");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport2 = recurringReport0.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str3 = recurringReport2.getJsonTemplate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport5 = recurringReport2.setRecurrencePeriod("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport7 = recurringReport2.setTitle("hi!:///AQUARIUS/Provisioning/v1");
        recurringReport7.JsonTemplate = "http";
        org.junit.Assert.assertNotNull(recurringReport2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(recurringReport5);
        org.junit.Assert.assertNotNull(recurringReport7);
    }

    @Test
    public void test26824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26824");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.NumericValue8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setGradeCode4((java.lang.Long) 1L);
        java.lang.Double double12 = timeAlignedPoint11.getNumericValue8();
        timeAlignedPoint11.GradeName7 = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        timeAlignedPoint11.ApprovalLevel10 = (-1L);
        java.lang.String str17 = timeAlignedPoint11.getQualifiers7();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test26825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26825");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup2 = postAnalyticalGroup0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup5 = putAnalyticalGroup3.setAnalyticalGroupItems(analyticalGroupItemList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup8 = putAnalyticalGroup6.setAnalyticalGroupItems(analyticalGroupItemList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup10 = putAnalyticalGroup8.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup12 = putAnalyticalGroup10.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup12.Type = analyticalGroupType13;
        putAnalyticalGroup3.Type = analyticalGroupType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup16 = postAnalyticalGroup0.setType(analyticalGroupType13);
        java.lang.String str17 = postAnalyticalGroup0.getDescription();
        postAnalyticalGroup0.Description = "2021.8.9990";
        java.lang.String str20 = postAnalyticalGroup0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup22 = postAnalyticalGroup0.setName("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType24 = analyticalGroup23.getType();
        java.lang.String str25 = analyticalGroup23.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = analyticalGroup23.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = analyticalGroup27.setType(analyticalGroupType28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup30 = postAnalyticalGroup0.setType(analyticalGroupType28);
        postAnalyticalGroup30.Id = "http://MaxDurationhttp/json/reply/Float";
        org.junit.Assert.assertNotNull(postAnalyticalGroup2);
        org.junit.Assert.assertNotNull(putAnalyticalGroup5);
        org.junit.Assert.assertNotNull(putAnalyticalGroup8);
        org.junit.Assert.assertNotNull(putAnalyticalGroup10);
        org.junit.Assert.assertNotNull(putAnalyticalGroup12);
        org.junit.Assert.assertTrue("'" + analyticalGroupType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2021.8.9990" + "'", str20, "2021.8.9990");
        org.junit.Assert.assertNotNull(postAnalyticalGroup22);
        org.junit.Assert.assertNull(analyticalGroupType24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(analyticalGroup27);
        org.junit.Assert.assertTrue("'" + analyticalGroupType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup29);
        org.junit.Assert.assertNotNull(postAnalyticalGroup30);
    }

    @Test
    public void test26826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26826");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = postFieldTrip0.getEndTime();
        org.junit.Assert.assertNull(offsetDateTime1);
    }

    @Test
    public void test26827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26827");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        specimenNestedInActivity0.Id = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
    }

    @Test
    public void test26828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26828");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getPluginFolderName();
        fieldDataPlugin0.UniqueId = "/AQUARIUS/Provisioning/v1";
        java.lang.String str4 = fieldDataPlugin0.getUniqueId();
        java.lang.String str5 = fieldDataPlugin0.getDescription();
        java.lang.Integer int6 = fieldDataPlugin0.getPluginPriority();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin8 = fieldDataPlugin0.setIsEnabled((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin10 = fieldDataPlugin0.setUniqueId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str4, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(fieldDataPlugin8);
        org.junit.Assert.assertNotNull(fieldDataPlugin10);
    }

    @Test
    public void test26829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26829");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.String str1 = codeTable0.DisplayName;
        codeTable0.SystemCode = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable5 = codeTable0.setSystemCode("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable7 = codeTable0.setIsSystem((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable9 = codeTable7.setSystemCode("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable11 = codeTable9.setIsSystem((java.lang.Boolean) true);
        codeTable11.IsSystem = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(codeTable5);
        org.junit.Assert.assertNotNull(codeTable7);
        org.junit.Assert.assertNotNull(codeTable9);
        org.junit.Assert.assertNotNull(codeTable11);
    }

    @Test
    public void test26830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26830");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant1 = qualifier0.DateApplied;
        java.lang.String str2 = qualifier0.User;
        java.lang.String str3 = qualifier0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier11 = qualifier0.setDateApplied(instant8);
        java.time.Instant instant12 = qualifier11.DateApplied;
        java.time.Instant instant13 = qualifier11.getDateApplied();
        java.lang.String str14 = qualifier11.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = qualifier11.setUser("PT87591240H");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(qualifier11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(qualifier16);
    }

    @Test
    public void test26831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26831");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType5 = postActivity0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setStatistics(observationStatistics12);
        java.time.OffsetDateTime offsetDateTime14 = observation13.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList15 = observation13.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics18 = observation13.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21, extendedAttributeArray20);
        postActivity19.ExtendedAttributes = extendedAttributeList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation13.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = postActivity0.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = postActivity0.Depth;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(activityType5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNull(importHistoryEventSimpleList15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(observationStatistics18);
        org.junit.Assert.assertNotNull(extendedAttributeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNotNull(postActivity25);
        org.junit.Assert.assertNull(quantity26);
    }

    @Test
    public void test26832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26832");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        timeAlignedTimeSeriesInfo0.Parameter = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str5 = timeAlignedTimeSeriesInfo0.Label;
        java.lang.String str6 = timeAlignedTimeSeriesInfo0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo8 = timeAlignedTimeSeriesInfo0.setIdentifier("/AQUARIUS");
        timeAlignedTimeSeriesInfo8.Identifier = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****" + "'", str5, "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo8);
    }

    @Test
    public void test26833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26833");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription3 = timeSeriesDescription0.setLabel("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant5 = timeSeriesDescription4.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        controlConditionActivity7.ControlCleaned = controlCleanedType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        controlConditionActivity7.DateCleaned = instant11;
        timeAlignedDataServiceRequest6.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription15 = timeSeriesDescription4.setCorrectedEndTime(instant11);
        timeSeriesDescription0.RawEndTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = timeSeriesDescription0.setComputationIdentifier("9999-12-31T23:59:59.9999999Z");
        java.lang.String str19 = timeSeriesDescription0.getLocationIdentifier();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold> timeSeriesThresholdList20 = timeSeriesDescription0.Thresholds;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(timeSeriesDescription3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeSeriesDescription15);
        org.junit.Assert.assertNotNull(timeSeriesDescription18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(timeSeriesThresholdList20);
    }

    @Test
    public void test26834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26834");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setLabResultLaboratoryIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType36 = calibrationCheck35.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = calibrationCheck35.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse38.setNextToken(instant43);
        java.time.Instant instant47 = locationDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck48 = calibrationCheck35.setTime(instant47);
        putBulkEditResultGradesV2_34.StartResultTime = instant47;
        java.lang.Double double50 = putBulkEditResultGradesV2_34.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList52 = getObservationsV2_51.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        getObservationsV2_51.ResultGrades = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_69 = putBulkEditResultGradesV2_34.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList70 = putBulkEditResultGradesV2_69.getQualityControlTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier73 = putQualifier71.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.QualityControlTypes = strList86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest74.setTimeSeriesUniqueIds(strList86);
        putQualifier71.GroupIdentifiers = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_92 = putBulkEditResultGradesV2_69.setActivityTypes((java.util.List<java.lang.String>) strList86);
        java.lang.String str93 = putBulkEditResultGradesV2_92.FieldVisitId;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNull(calibrationCheckType36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(calibrationCheck48);
        org.junit.Assert.assertNull(double50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_69);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(putQualifier73);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test26835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26835");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.String str1 = postVisitFileToVisit0.VisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit3 = postVisitFileToVisit0.setVisitIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit5 = postVisitFileToVisit3.setVisitIdentifier("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileBase postVisitFileBase7 = postVisitFileToVisit3.setFile(iHttpFile6);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postVisitFileToVisit3);
        org.junit.Assert.assertNotNull(postVisitFileToVisit5);
        org.junit.Assert.assertNotNull(postVisitFileBase7);
    }

    @Test
    public void test26836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26836");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap1 = correction0.Parameters;
        java.time.Instant instant2 = correction0.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = correction0.Type;
        java.util.HashMap<java.lang.String, java.lang.Object> strMap4 = correction0.getParameters();
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(correctionType3);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test26837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26837");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType4 = null;
        controlConditionActivity3.ControlCleaned = controlCleanedType4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        controlConditionActivity3.DateCleaned = instant7;
        locationDescription2.LastModified = instant7;
        locationDescription2.UtcOffset = 0.0d;
        java.lang.Boolean boolean13 = locationDescription2.Publish;
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test26838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26838");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPointOfContact("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setDescription("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory6 = putLaboratory2.setAddress("hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNotNull(putLaboratory6);
    }

    @Test
    public void test26839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26839");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading2.Manufacturer = "https";
        java.lang.String str5 = fieldVisitReading2.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck6.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay9.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str12 = doubleWithDisplay11.getDisplay();
        calibrationCheck8.Difference = doubleWithDisplay11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = pointVelocityDischargeActivity14.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity14.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity14.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList21 = pointVelocityDischargeActivity20.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity20.DistanceToMeter = datumConvertedQuantityWithDisplay22;
        calibrationCheck8.Standard = datumConvertedQuantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading25 = fieldVisitReading2.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = fieldVisitReading25.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading28 = fieldVisitReading25.setFieldVisitIdentifier("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList30 = fieldVisitDataServiceResponse29.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse32 = fieldVisitDataServiceResponse29.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary33.Reviewer = "";
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary33.MeasurementTime = instant36;
        fieldVisitDataServiceResponse29.ResponseTime = instant36;
        fieldVisitDataServiceResponse29.Identifier = "hi!";
        java.lang.String str41 = fieldVisitDataServiceResponse29.getSummary();
        java.lang.Integer int42 = fieldVisitDataServiceResponse29.getResponseVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval45 = fieldVisitApproval43.setLevelDescription("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse46 = fieldVisitDataServiceResponse29.setApproval(fieldVisitApproval43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval47 = fieldVisitDataServiceResponse29.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading48 = fieldVisitReading25.setApproval(fieldVisitApproval47);
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity16);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNull(verticalList21);
        org.junit.Assert.assertNotNull(fieldVisitReading25);
        org.junit.Assert.assertNotNull(quantityWithDisplay26);
        org.junit.Assert.assertNotNull(fieldVisitReading28);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList30);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse32);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(fieldVisitApproval45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse46);
        org.junit.Assert.assertNotNull(fieldVisitApproval47);
        org.junit.Assert.assertNotNull(fieldVisitReading48);
    }

    @Test
    public void test26840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26840");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentWidth(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical4.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical4.setSegmentDischarge(quantityWithDisplay6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical4.MeasurementCondition = measurementCondition8;
        vertical0.MeasurementCondition = measurementCondition8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        adcpDischargeActivity12.TransducerDepth = quantityWithDisplay13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        adcpDischargeActivity12.TransducerDepth = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = adcpDischargeActivity12.setNumberOfTransects((java.lang.Integer) 4);
        adcpDischargeActivity18.SerialNumber = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        adcpDischargeActivity18.NumberOfTransects = 2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = vertical23.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical26 = vertical23.setSegmentDischarge(quantityWithDisplay25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical28 = vertical26.setVerticalNumber((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        crossSectionPoint29.Distance = quantityWithDisplay30;
        crossSectionPoint29.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = crossSectionPoint29.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint36 = crossSectionPoint29.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay37 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = crossSectionPoint36.setElevation(quantityWithDisplay37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = null;
        crossSectionPoint38.Depth = quantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint38.Depth = datumConvertedQuantityWithDisplay41;
        vertical26.SegmentWidth = datumConvertedQuantityWithDisplay41;
        adcpDischargeActivity18.VelocityAverage = datumConvertedQuantityWithDisplay41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical45 = vertical0.setSegmentArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = vertical46.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical46.VerticalType = verticalType48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        adcpDischargeActivity50.TransducerDepth = quantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType58 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary53.BaseFlow = baseFlowType58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary53.DischargeUncertainty = dischargeUncertainty60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = dischargeSummary62.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = dischargeSummary62.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay65 = dischargeSummary62.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = doubleWithDisplay66.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary62.setDurationInHours(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty70 = dischargeUncertainty60.setQuantitativeUncertainty(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity71 = adcpDischargeActivity50.setTopEstimateExponent(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity73 = adcpDischargeActivity50.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay74 = adcpDischargeActivity50.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str76 = datumConvertedQuantityWithDisplay75.TargetDatum;
        adcpDischargeActivity50.Area = datumConvertedQuantityWithDisplay75;
        vertical46.SegmentDischarge = datumConvertedQuantityWithDisplay75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType79 = vertical46.getVerticalType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical80 = vertical0.setVerticalType(verticalType79);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertTrue("'" + measurementCondition8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNotNull(adcpDischargeActivity18);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNotNull(vertical26);
        org.junit.Assert.assertNotNull(vertical28);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(crossSectionPoint36);
        org.junit.Assert.assertNotNull(crossSectionPoint38);
        org.junit.Assert.assertNotNull(vertical45);
        org.junit.Assert.assertNull(quantityWithDisplay47);
        org.junit.Assert.assertTrue("'" + verticalType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + baseFlowType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay63);
        org.junit.Assert.assertNull(quantityWithDisplay64);
        org.junit.Assert.assertNull(doubleWithDisplay65);
        org.junit.Assert.assertNotNull(doubleWithDisplay68);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(dischargeUncertainty70);
        org.junit.Assert.assertNotNull(adcpDischargeActivity71);
        org.junit.Assert.assertNotNull(adcpDischargeActivity73);
        org.junit.Assert.assertNull(doubleWithDisplay74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + verticalType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType79.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(vertical80);
    }

    @Test
    public void test26841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26841");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        java.lang.String str3 = activity1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType4 = activity1.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = device5.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = device7.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str10 = device7.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity11 = activity1.setDevice(device7);
        java.lang.String str12 = activity1.getCustomId();
        java.lang.Boolean boolean13 = activity1.getRefreshed();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity15 = activity1.setId("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity17 = activity15.setSourceActivityId("http");
        java.time.OffsetDateTime offsetDateTime18 = activity17.getStartTime();
        java.lang.String str19 = activity17.CustomId;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityType4);
        org.junit.Assert.assertNotNull(device7);
        org.junit.Assert.assertNotNull(device9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str10, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(activity15);
        org.junit.Assert.assertNotNull(activity17);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test26842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26842");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        java.lang.String str2 = attachment0.Comment;
        java.time.OffsetDateTime offsetDateTime3 = null;
        attachment0.DateTaken = offsetDateTime3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str6 = auditAttributesFull5.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile7 = auditAttributesFull5.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull9 = auditAttributesFull5.setModificationUserProfile(userProfile8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull11 = auditAttributesFull9.setModificationUserProfile(userProfile10);
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull13 = auditAttributesFull11.setModificationTime(offsetDateTime12);
        java.time.OffsetDateTime offsetDateTime14 = null;
        auditAttributesFull13.ModificationTime = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull17 = auditAttributesFull13.setCreationTime(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment18 = attachment0.setAuditAttributes(auditAttributesFull17);
        java.lang.String str19 = attachment0.getContentType();
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(userProfile7);
        org.junit.Assert.assertNotNull(auditAttributesFull9);
        org.junit.Assert.assertNotNull(auditAttributesFull11);
        org.junit.Assert.assertNotNull(auditAttributesFull13);
        org.junit.Assert.assertNotNull(auditAttributesFull17);
        org.junit.Assert.assertNotNull(attachment18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test26843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26843");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.lang.String str8 = timeSeriesDataServiceResponse3.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = timeSeriesDataServiceResponse3.setLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method> methodList11 = timeSeriesDataServiceResponse10.Methods;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest14 = trendLineAnalysisServiceRequest12.setType(trendLineAnalysisType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset16 = null;
        timeSeriesPoint15.Timestamp = statisticalDateTimeOffset16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset19 = timeSeriesPoint18.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = timeSeriesPoint20.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint15, timeSeriesPoint18, timeSeriesPoint20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList23, timeSeriesPointArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest25 = trendLineAnalysisServiceRequest14.setPoints(timeSeriesPointList23);
        timeSeriesDataServiceResponse10.Points = timeSeriesPointList23;
        java.lang.String str27 = timeSeriesDataServiceResponse10.Label;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse10);
        org.junit.Assert.assertNull(methodList11);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest14);
        org.junit.Assert.assertNull(statisticalDateTimeOffset19);
        org.junit.Assert.assertNull(statisticalDateTimeOffset21);
        org.junit.Assert.assertNotNull(timeSeriesPointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MinDuration" + "'", str27, "MinDuration");
    }

    @Test
    public void test26844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26844");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole();
        java.lang.String str1 = locationFolderUserRole0.UserLoginName;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test26845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26845");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        java.lang.String str1 = appliedTag0.Key;
        java.lang.String str2 = appliedTag0.getValue();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test26846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26846");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange();
        metricRange0.UpperLimitValue = 4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange4 = metricRange0.setId("'.'SSSSSSS");
        java.lang.String str5 = metricRange4.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange7 = metricRange4.setUpperLimitValue((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange9 = metricRange4.setDescription("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange11 = metricRange4.setUpperLimitValue((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange13 = metricRange4.setId("/AQUARIUS/Publish/v2");
        org.junit.Assert.assertNotNull(metricRange4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricRange7);
        org.junit.Assert.assertNotNull(metricRange9);
        org.junit.Assert.assertNotNull(metricRange11);
        org.junit.Assert.assertNotNull(metricRange13);
    }

    @Test
    public void test26847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26847");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList5 = standardDefinition4.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition8 = standardDefinition4.setActive((java.lang.Boolean) false);
        java.lang.String str9 = standardDefinition4.Name;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList10 = standardDefinition4.getObservationStandards();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition12 = standardDefinition4.setCustomId("/AQUARIUS");
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(samplingLocationSimpleList5);
        org.junit.Assert.assertNull(interval6);
        org.junit.Assert.assertNotNull(standardDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(observationStandardList10);
        org.junit.Assert.assertNotNull(standardDefinition12);
    }

    @Test
    public void test26848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26848");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setQualityAssuranceComments("2021.4.62.0");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList5 = dischargeSummary4.getGageHeightReadings();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNull(gageHeightReadingList5);
    }

    @Test
    public void test26849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26849");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = labResultDetails6.getLaboratory();
        java.lang.String str11 = labResultDetails6.getLabSampleId();
        java.time.OffsetDateTime offsetDateTime12 = labResultDetails6.getDateReceived();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails6.setAnalysisComment("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(laboratory10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(labResultDetails14);
    }

    @Test
    public void test26850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26850");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setErrorCount((java.lang.Integer) 0);
        java.lang.Integer int7 = importSummary0.getSuccessCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary9 = importSummary0.setExpectedCount((java.lang.Integer) 100);
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(importSummary9);
    }

    @Test
    public void test26851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26851");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel();
        searchResultTaxonomyLevel0.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str4 = taxonomyLevel3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel6 = taxonomyLevel3.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel8 = taxonomyLevel3.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str10 = taxonomyLevel9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel12 = taxonomyLevel9.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel14 = taxonomyLevel9.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = taxonomyLevel9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel[] taxonomyLevelArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel[] { taxonomyLevel8, taxonomyLevel9, taxonomyLevel16 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel> taxonomyLevelList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel>) taxonomyLevelList18, taxonomyLevelArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel20 = searchResultTaxonomyLevel0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel>) taxonomyLevelList18);
        searchResultTaxonomyLevel20.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel24 = searchResultTaxonomyLevel20.setCursor("/AQUARIUS/Acquisition/v2");
        searchResultTaxonomyLevel24.TotalCount = 1;
        searchResultTaxonomyLevel24.Cursor = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel> taxonomyLevelList29 = searchResultTaxonomyLevel24.getDomainObjects();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(taxonomyLevel6);
        org.junit.Assert.assertNotNull(taxonomyLevel8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(taxonomyLevel12);
        org.junit.Assert.assertNotNull(taxonomyLevel14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNotNull(taxonomyLevelArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel20);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel24);
        org.junit.Assert.assertNotNull(taxonomyLevelList29);
    }

    @Test
    public void test26852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26852");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty8.Name = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType11 = putObservedProperty8.getResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation12.setPlannedFieldResult(plannedFieldResult13);
        observation14.CustomId = "";
        observation14.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str21 = metricConfiguration20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty22.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration20.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType26 = observedProperty22.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup28 = postObservedProperty27.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit30 = null;
        quantity29.Unit = unit30;
        postObservedProperty27.LowerLimit = quantity29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity33 = postObservedProperty27.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = quantity33.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = observedProperty22.setUpperLimit(quantity33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = samplingLocation19.setElevation(quantity33);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList37 = samplingLocation36.getAttachments();
        java.lang.String str38 = samplingLocation36.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation14.setSamplingLocation(samplingLocation36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity40 = samplingLocation36.Elevation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty41 = putObservedProperty8.setLowerLimit(quantity40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty42 = putObservedProperty0.setUpperLimit(quantity40);
        putObservedProperty42.CasNumber = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(resultType11);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertNull(resultType26);
        org.junit.Assert.assertNull(unitGroup28);
        org.junit.Assert.assertNotNull(quantity33);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNotNull(observedProperty35);
        org.junit.Assert.assertNotNull(samplingLocation36);
        org.junit.Assert.assertNull(domainObjectAttachmentList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(quantity40);
        org.junit.Assert.assertNotNull(putObservedProperty41);
        org.junit.Assert.assertNotNull(putObservedProperty42);
    }

    @Test
    public void test26853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26853");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata4 = parameterMetadata0.setInterpolationType("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata6 = parameterMetadata4.setDisplayName("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        java.lang.String str7 = parameterMetadata4.getInterpolationType();
        org.junit.Assert.assertNotNull(parameterMetadata4);
        org.junit.Assert.assertNotNull(parameterMetadata6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS" + "'", str7, "/AQUARIUS");
    }

    @Test
    public void test26854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26854");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        ratingCurve0.Id = "https";
        java.lang.String str12 = ratingCurve0.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve14 = ratingCurve0.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType16 = expandedRatingCurve15.Type;
        expandedRatingCurve15.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve20 = expandedRatingCurve15.setOutputParameter(parameterWithUnit19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit21 = expandedRatingCurve20.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType23 = expandedRatingCurve22.Type;
        expandedRatingCurve22.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = expandedRatingCurve22.setOutputParameter(parameterWithUnit26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit28 = expandedRatingCurve27.getOutputParameter();
        expandedRatingCurve20.OutputParameter = parameterWithUnit28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType31 = expandedRatingCurve30.Type;
        expandedRatingCurve30.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve35 = expandedRatingCurve30.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList36 = expandedRatingCurve35.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList37 = expandedRatingCurve35.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType39 = expandedRatingCurve38.Type;
        expandedRatingCurve38.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve43 = expandedRatingCurve38.setOutputParameter(parameterWithUnit42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit44 = expandedRatingCurve43.getOutputParameter();
        expandedRatingCurve35.OutputParameter = parameterWithUnit44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve46 = expandedRatingCurve20.setOutputParameter(parameterWithUnit44);
        ratingCurve14.InputParameter = parameterWithUnit44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType49 = expandedRatingCurve48.Type;
        expandedRatingCurve48.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve53 = expandedRatingCurve48.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList54 = expandedRatingCurve53.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList55 = expandedRatingCurve53.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType57 = expandedRatingCurve56.Type;
        expandedRatingCurve56.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve61 = expandedRatingCurve56.setOutputParameter(parameterWithUnit60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit62 = expandedRatingCurve61.getOutputParameter();
        expandedRatingCurve53.OutputParameter = parameterWithUnit62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit65 = parameterWithUnit62.setParameterName("hi!");
        parameterWithUnit65.ParameterName = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve68 = ratingCurve14.setOutputParameter(parameterWithUnit65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit70 = parameterWithUnit65.setParameterUnit("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(ratingCurve14);
        org.junit.Assert.assertNull(ratingCurveType16);
        org.junit.Assert.assertNotNull(expandedRatingCurve20);
        org.junit.Assert.assertNotNull(parameterWithUnit21);
        org.junit.Assert.assertNull(ratingCurveType23);
        org.junit.Assert.assertNotNull(expandedRatingCurve27);
        org.junit.Assert.assertNotNull(parameterWithUnit28);
        org.junit.Assert.assertNull(ratingCurveType31);
        org.junit.Assert.assertNotNull(expandedRatingCurve35);
        org.junit.Assert.assertNull(ratingShiftList36);
        org.junit.Assert.assertNull(ratingShiftList37);
        org.junit.Assert.assertNull(ratingCurveType39);
        org.junit.Assert.assertNotNull(expandedRatingCurve43);
        org.junit.Assert.assertNotNull(parameterWithUnit44);
        org.junit.Assert.assertNotNull(expandedRatingCurve46);
        org.junit.Assert.assertNull(ratingCurveType49);
        org.junit.Assert.assertNotNull(expandedRatingCurve53);
        org.junit.Assert.assertNull(ratingShiftList54);
        org.junit.Assert.assertNull(ratingShiftList55);
        org.junit.Assert.assertNull(ratingCurveType57);
        org.junit.Assert.assertNotNull(expandedRatingCurve61);
        org.junit.Assert.assertNotNull(parameterWithUnit62);
        org.junit.Assert.assertNotNull(parameterWithUnit65);
        org.junit.Assert.assertNotNull(ratingCurve68);
        org.junit.Assert.assertNotNull(parameterWithUnit70);
    }

    @Test
    public void test26855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26855");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        specimenWithObservations2.Filtered = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity5 = specimenWithObservations2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer6 = specimenWithObservations2.getShippingContainer();
        java.lang.String str7 = specimenWithObservations2.FiltrationComment;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(activity5);
        org.junit.Assert.assertNull(shippingContainer6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26856");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.String str8 = timeAlignedPoint0.Qualifiers9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setGradeName10("");
        java.lang.Long long11 = timeAlignedPoint10.getApprovalLevel2();
        java.lang.String str12 = timeAlignedPoint10.getApprovalName7();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint10.setMethod5("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint10.setGradeName3("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(long11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
    }

    @Test
    public void test26857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26857");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setUniqueId("/AQUARIUS/Provisioning/v1");
        extendedAttribute0.Type = "'.'SSSSSSS";
        java.lang.String str5 = extendedAttribute0.getType();
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "'.'SSSSSSS" + "'", str5, "'.'SSSSSSS");
    }

    @Test
    public void test26858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26858");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem postConfigurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase2 = postConfigurableDropDownListItem0.setDisplayName("MaxInstant");
        java.lang.String str3 = configurableDropDownListItemBase2.getDropDownListId();
        configurableDropDownListItemBase2.DropDownListId = "";
        java.lang.String str6 = configurableDropDownListItemBase2.getDropDownListId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase8 = configurableDropDownListItemBase2.setDropDownListId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase8);
    }

    @Test
    public void test26859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26859");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = getObservationsV2_3.setDataClassifications((java.util.List<java.lang.String>) strList7);
        getObservationsV2_0.ResultStatuses = strList7;
        java.time.Instant instant11 = getObservationsV2_0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str13 = getChartDataV2_12.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_15 = getChartDataV2_12.setFilterId("");
        java.util.List<java.lang.String> strList16 = getChartDataV2_12.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList19 = getObservationsV2_18.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        getObservationsV2_18.ResultGrades = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems36 = getExtendedAttributeDropdownlistitems17.setSearch((java.util.List<java.lang.String>) strList31);
        getChartDataV2_12.ObservedPropertyIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_0.setSamplingLocationIds((java.util.List<java.lang.String>) strList31);
        java.time.Instant instant39 = getObservationsV2_0.getEndResultTime();
        java.lang.String str40 = getObservationsV2_0.getDepthUnitCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getChartDataV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems36);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test26860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26860");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        java.lang.String str1 = putDetectioncondition0.CustomId;
        java.lang.String str2 = putDetectioncondition0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition4 = putDetectioncondition0.setName("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition6 = putDetectioncondition0.setDescription("MaxInstant");
        java.lang.String str7 = putDetectioncondition0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putDetectioncondition4);
        org.junit.Assert.assertNotNull(putDetectioncondition6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26861");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        getObservationsV2_6.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant13 = getObservationsV2_6.getEndModificationTime();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(instant13);
    }

    @Test
    public void test26862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26862");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        java.lang.String str8 = taxonImportSummary0.InvalidRowsCsvUrl;
        java.lang.String str9 = taxonImportSummary0.InvalidRowsCsvUrl;
        taxonImportSummary0.SkippedCount = 10;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList12 = taxonImportSummary0.ErrorImportItems;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(importItemTaxonList12);
    }

    @Test
    public void test26863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26863");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum deleteStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum deleteStandardReferenceDatum2 = deleteStandardReferenceDatum0.setStandardIdentifier("MaxInstant");
        deleteStandardReferenceDatum0.StandardIdentifier = "http";
        java.lang.String str5 = deleteStandardReferenceDatum0.LocationUniqueId;
        org.junit.Assert.assertNotNull(deleteStandardReferenceDatum2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26864");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        java.lang.String str1 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str2 = activeDirectoryUser0.UserPrincipalName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user4 = activeDirectoryUser0.setCanConfigureSystem((java.lang.Boolean) true);
        activeDirectoryUser0.UserPrincipalName = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(user4);
    }

    @Test
    public void test26865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26865");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest();
        java.lang.Object obj2 = timeSeriesDescriptionListByUniqueIdServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart3 = inputPart0.setHeaders((java.lang.Object) timeSeriesDescriptionListByUniqueIdServiceRequest1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj5 = postSession4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession7 = postSession4.setEncryptedPassword("hi!");
        java.lang.String str8 = postSession7.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart9 = inputPart0.setHeaders((java.lang.Object) str8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart12 = inputPart10.setHeaders((java.lang.Object) interpolationType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        java.lang.String str14 = mediaType13.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart15 = inputPart10.setMediaType(mediaType13);
        java.lang.Object obj16 = mediaType13.Parameters;
        java.lang.Boolean boolean17 = mediaType13.getWildcardSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart18 = inputPart9.setMediaType(mediaType13);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertNotNull(inputPart3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(inputPart9);
        org.junit.Assert.assertTrue("'" + interpolationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(inputPart15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(inputPart18);
    }

    @Test
    public void test26866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26866");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList1 = postReferencePoint0.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList3 = postReferencePoint2.getReferencePointPeriods();
        java.lang.Double double4 = postReferencePoint2.Latitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList6 = postReferencePoint5.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod postReferencePointPeriod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] postReferencePointPeriodArray8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] { postReferencePointPeriod7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>) postReferencePointPeriodList9, postReferencePointPeriodArray8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint11 = postReferencePoint5.setReferencePointPeriods(postReferencePointPeriodList9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint12 = postReferencePoint2.setReferencePointPeriods(postReferencePointPeriodList9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase14 = postReferencePoint2.setLatitude((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod postReferencePointPeriod15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] postReferencePointPeriodArray16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] { postReferencePointPeriod15 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>) postReferencePointPeriodList17, postReferencePointPeriodArray16);
        postReferencePoint2.ReferencePointPeriods = postReferencePointPeriodList17;
        postReferencePoint0.ReferencePointPeriods = postReferencePointPeriodList17;
        org.junit.Assert.assertNull(postReferencePointPeriodList1);
        org.junit.Assert.assertNull(postReferencePointPeriodList3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(postReferencePointPeriodList6);
        org.junit.Assert.assertNotNull(postReferencePointPeriodArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(postReferencePoint11);
        org.junit.Assert.assertNotNull(postReferencePoint12);
        org.junit.Assert.assertNotNull(referencePointBase14);
        org.junit.Assert.assertNotNull(postReferencePointPeriodArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test26867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26867");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList2, adcpDischargeActivityArray1);
        dischargeActivity0.AdcpDischargeActivities = adcpDischargeActivityList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList6, engineeredStructureDischargeActivityArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity8 = dischargeActivity0.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList10, otherMethodDischargeActivityArray9);
        dischargeActivity0.OtherMethodDischargeActivities = otherMethodDischargeActivityList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList15, adcpDischargeActivityArray14);
        dischargeActivity13.AdcpDischargeActivities = adcpDischargeActivityList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList19, engineeredStructureDischargeActivityArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity21 = dischargeActivity13.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList23, otherMethodDischargeActivityArray22);
        dischargeActivity13.OtherMethodDischargeActivities = otherMethodDischargeActivityList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] volumetricDischargeActivityArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>) volumetricDischargeActivityList27, volumetricDischargeActivityArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity29 = dischargeActivity13.setVolumetricDischargeActivities(volumetricDischargeActivityList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList32, adcpDischargeActivityArray31);
        dischargeActivity30.AdcpDischargeActivities = adcpDischargeActivityList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList36, engineeredStructureDischargeActivityArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity38 = dischargeActivity30.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList40, otherMethodDischargeActivityArray39);
        dischargeActivity30.OtherMethodDischargeActivities = otherMethodDischargeActivityList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity43 = dischargeActivity13.setOtherMethodDischargeActivities(otherMethodDischargeActivityList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity44 = dischargeActivity0.setOtherMethodDischargeActivities(otherMethodDischargeActivityList40);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList45 = dischargeActivity0.EngineeredStructureDischargeActivities;
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dischargeActivity8);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dischargeActivity21);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(volumetricDischargeActivityArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dischargeActivity29);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dischargeActivity38);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dischargeActivity43);
        org.junit.Assert.assertNotNull(dischargeActivity44);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList45);
    }

    @Test
    public void test26868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26868");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory getSamplinglocationgrouptypeHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory();
        java.lang.String str1 = getSamplinglocationgrouptypeHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory getSamplinglocationgrouptypeHistory3 = getSamplinglocationgrouptypeHistory0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getSamplinglocationgrouptypeHistory3);
    }

    @Test
    public void test26869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26869");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = samplingPlanPlannedActivity0.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        activityTemplate4.AuditAttributes = auditAttributes5;
        java.lang.String str7 = activityTemplate4.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType8 = activityTemplate4.Medium;
        samplingPlanPlannedActivity0.ActivityTemplate = activityTemplate4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate10 = samplingPlanPlannedActivity0.ActivityTemplate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        activityTemplate11.AuditAttributes = auditAttributes12;
        java.lang.String str14 = activityTemplate11.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        activityTemplate11.SpecimenTemplates = specimenTemplateList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType33 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SOIL;
        activityTemplate11.Medium = mediumType33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate37 = postFieldVisitActivityWithTemplate35.setAuditAttributes(auditAttributes36);
        java.lang.String str38 = postFieldVisitActivityWithTemplate37.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate40 = postFieldVisitActivityWithTemplate37.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate43 = postFieldVisitActivityWithTemplate41.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation44.setPlannedFieldResult(plannedFieldResult45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction47 = null;
        observation46.LabInstruction = labInstruction47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation50 = observation46.setStatistics(observationStatistics49);
        java.time.OffsetDateTime offsetDateTime51 = observation50.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit53 = null;
        quantity52.Unit = unit53;
        observation50.Depth = quantity52;
        postFieldVisitActivityWithTemplate43.Depth = quantity52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate57 = postFieldVisitActivityWithTemplate37.setDepth(quantity52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate59.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList64 = specimenTemplate63.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = specimenTemplate65.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList70 = specimenTemplate69.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate59, specimenTemplate62, specimenTemplate63, specimenTemplate67, specimenTemplate68, specimenTemplate69 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72, specimenTemplateArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate74 = postFieldVisitActivityWithTemplate58.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate75 = postFieldVisitActivityWithTemplate57.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate76 = activityTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72);
        samplingPlanPlannedActivity0.ActivityTemplate = activityTemplate76;
        activityTemplate76.CustomId = "";
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNull(activityTemplate3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(mediumType8);
        org.junit.Assert.assertNotNull(activityTemplate10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertTrue("'" + mediumType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SOIL + "'", mediumType33.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SOIL));
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate40);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate43);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertNotNull(observation50);
        org.junit.Assert.assertNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate57);
        org.junit.Assert.assertNull(labInstructionTemplateList64);
        org.junit.Assert.assertNotNull(specimenTemplate67);
        org.junit.Assert.assertNull(labInstructionTemplateList70);
        org.junit.Assert.assertNotNull(specimenTemplateArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate74);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate75);
        org.junit.Assert.assertNotNull(activityTemplate76);
    }

    @Test
    public void test26870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26870");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        java.util.List<java.lang.String> strList33 = getObservationsV2_18.getLabReportIds();
        importItem17.Errors = getObservationsV2_18;
        java.lang.Object obj35 = importItem17.getExistingItem();
        importItem17.Input = "hi!";
        java.lang.Object obj38 = importItem17.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem40 = importItem17.setStatus(importItemStatusType39);
        importItem40.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate43.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = specimenTemplate43.setId("hi!");
        java.lang.Boolean boolean48 = specimenTemplate47.getFiltered();
        importItem40.Item = specimenTemplate47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = timeAlignedDataServiceRequest51.setTimeSeriesOutputUnitIds(strList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation66 = importItemObservation50.setFields((java.util.List<java.lang.String>) strList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType67 = importItemObservation50.Status;
        java.util.List<java.lang.String> strList68 = importItemObservation50.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType69 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation70 = importItemObservation50.setStatus(importItemStatusType69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem71 = importItem40.setStatus(importItemStatusType69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation72 = importItemObservation0.setStatus(importItemStatusType69);
        java.lang.String str73 = importItemObservation72.getInput();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + importItemStatusType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem40);
        org.junit.Assert.assertNotNull(specimenTemplate47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest65);
        org.junit.Assert.assertNotNull(importItemObservation66);
        org.junit.Assert.assertNull(importItemStatusType67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + importItemStatusType69 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED + "'", importItemStatusType69.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED));
        org.junit.Assert.assertNotNull(importItemObservation70);
        org.junit.Assert.assertNotNull(importItem71);
        org.junit.Assert.assertNotNull(importItemObservation72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test26871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26871");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_5 = deleteObservationsV2_0.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str7 = getChartDataV2_6.getActivityCustomId();
        java.util.List<java.lang.String> strList8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_6.setSearch(strList8);
        java.time.Instant instant10 = getChartDataV2_9.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation13 = importItemSamplingLocation11.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str15 = putLocationType14.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        putLocationType14.ExtendedAttributeDefinitionIds = strList38;
        importItemSamplingLocation11.Fields = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_45 = getChartDataV2_9.setSpecimenIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_46 = deleteObservationsV2_5.setCollectionMethodIds((java.util.List<java.lang.String>) strList38);
        java.util.List<java.lang.String> strList47 = deleteObservationsV2_46.CollectionMethodIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(deleteObservationsV2_5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNotNull(importItemSamplingLocation13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_45);
        org.junit.Assert.assertNotNull(deleteObservationsV2_46);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test26872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26872");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple1 = fieldVisitSimple0.getSamplingLocation();
        fieldVisitSimple0.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str5 = samplingLocationSimple4.Name;
        java.lang.String str6 = samplingLocationSimple4.Name;
        samplingLocationSimple4.CustomId = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple10 = samplingLocationSimple4.setName("");
        java.lang.String str11 = samplingLocationSimple4.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple12 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple14 = fieldVisitSimple0.setFieldTrip(fieldTripSimple13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple15 = fieldVisitSimple0.FieldTrip;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit18 = fieldVisit16.setFieldTrip(fieldTripSimple17);
        java.lang.String str19 = fieldVisit18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit20.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = putFieldVisit20.setProject(projectSimple23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = putFieldVisit20.setPlanningStatus(planningStatusType25);
        fieldVisit18.PlanningStatus = planningStatusType25;
        fieldVisitSimple0.PlanningStatus = planningStatusType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple30 = fieldVisitSimple29.getSamplingLocation();
        fieldVisitSimple29.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str34 = samplingLocationSimple33.Name;
        fieldVisitSimple29.SamplingLocation = samplingLocationSimple33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple37 = samplingLocationSimple33.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        samplingLocationSimple37.Name = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple40 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple37);
        org.junit.Assert.assertNull(samplingLocationSimple1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(samplingLocationSimple10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fieldVisitSimple12);
        org.junit.Assert.assertNotNull(fieldVisitSimple14);
        org.junit.Assert.assertNull(fieldTripSimple15);
        org.junit.Assert.assertNotNull(fieldVisit18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(putFieldVisit24);
        org.junit.Assert.assertTrue("'" + planningStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
        org.junit.Assert.assertNotNull(putFieldVisit26);
        org.junit.Assert.assertNull(samplingLocationSimple30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(samplingLocationSimple37);
        org.junit.Assert.assertNotNull(fieldVisitSimple40);
    }

    @Test
    public void test26873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26873");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        extendedAttributeField2.NumericScale = (-1);
        extendedAttributeField2.NumericType = "";
        java.lang.Boolean boolean49 = extendedAttributeField2.IsReadOnly;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField51 = extendedAttributeField2.setColumnIdentifier("MaxInstant");
        extendedAttributeField2.ColumnIdentifier = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(extendedAttributeField51);
    }

    @Test
    public void test26874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26874");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        java.lang.String str4 = user0.Email;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = null;
        user0.UserProfile = userProfile5;
        java.lang.String str7 = user0.getEmail();
        java.lang.String str8 = user0.getId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26875");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan35 = putFieldVisit0.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple36 = putFieldVisit0.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule37 = putFieldVisit0.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList38 = putFieldVisit0.PlannedFieldResults;
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNull(samplingPlan35);
        org.junit.Assert.assertNull(fieldTripSimple36);
        org.junit.Assert.assertNull(schedule37);
        org.junit.Assert.assertNull(plannedFieldResultList38);
    }

    @Test
    public void test26876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26876");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        postTaxon0.ItisTsn = "MaxDuration";
        postTaxon0.Comment = "MaxInstant";
        java.lang.String str7 = postTaxon0.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation8.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation13.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setCategoricalResult(categoricalResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19, importHistoryEventSimpleArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation13.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod22 = postLabAnalysisMethod12.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty23 = postObservedProperty11.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation24 = putSamplingLocation8.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon25 = postTaxon0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime27 = putSchedule26.StartDate;
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule26.setEndDate(offsetDateTime28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = putSchedule29.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime31 = putSchedule29.getEndDate();
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule29.setStartDate(offsetDateTime32);
        java.lang.Integer int34 = putSchedule29.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType35 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule29.RecurrenceDayMonthly = recurrenceDayMonthlyType35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = unit37.AuditAttributes;
        unit37.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        putAccessGroup41.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = unit37.setAuditAttributes(auditAttributes49);
        putSchedule29.AuditAttributes = auditAttributes49;
        postTaxon0.AuditAttributes = auditAttributes49;
        java.lang.String str54 = postTaxon0.Comment;
        java.lang.String str55 = postTaxon0.getScientificName();
        postTaxon0.ItisUrl = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxDuration" + "'", str7, "MaxDuration");
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod22);
        org.junit.Assert.assertNotNull(postObservedProperty23);
        org.junit.Assert.assertNotNull(putSamplingLocation24);
        org.junit.Assert.assertNotNull(postTaxon25);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(auditAttributes30);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType35.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(unit51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MaxInstant" + "'", str54, "MaxInstant");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test26877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26877");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        dischargeSummary0.MeasurementTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = dischargeSummary0.getGageHeightAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant9 = timeSeriesDescription8.getCorrectedStartTime();
        java.lang.String str10 = timeSeriesDescription8.getComputationIdentifier();
        timeSeriesDescription8.TimeSeriesType = "-PT87591240H";
        java.lang.String str13 = timeSeriesDescription8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        java.util.List<java.lang.String> strList21 = getObservationsV2_14.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        getObservationsV2_14.StartResultTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = timeSeriesDescription8.setCorrectedStartTime(instant25);
        dischargeSummary0.MeasurementStartTime = instant25;
        java.lang.String str30 = dischargeSummary0.getMeanGageHeightMethod();
        java.lang.String str31 = dischargeSummary0.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = dischargeSummary0.MeanGageHeight;
        dischargeSummary0.MeasurementId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(timeSeriesDescription28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(quantityWithDisplay32);
    }

    @Test
    public void test26878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26878");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        fieldVisitDataServiceResponse0.Identifier = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList5 = inspectionActivity4.getInspections();
        java.lang.String str6 = inspectionActivity4.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList7 = inspectionActivity4.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity9 = inspectionActivity4.setParty("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList10 = inspectionActivity9.Inspections;
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList13 = inspectionActivity12.getInspections();
        java.lang.String str14 = inspectionActivity12.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList15 = inspectionActivity12.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity17 = inspectionActivity12.setParty("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = reading18.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading21 = reading18.setParameterId("hi!");
        java.lang.String str22 = reading18.MonitoringMethod;
        reading18.SubLocationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = reading25.getValue();
        reading25.ReferencePointUniqueId = "hi!";
        java.lang.String str29 = reading25.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary30.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary32.DifferenceDuringVisit = doubleWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = doubleWithDisplay33.setNumeric((java.lang.Double) 100.0d);
        reading25.Value = doubleWithDisplay36;
        java.lang.String str38 = reading25.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading[] readingArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading[] { reading18, reading25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading>) readingList40, readingArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity42 = inspectionActivity17.setReadings(readingList40);
        inspectionActivity9.Readings = readingList40;
        java.lang.Boolean boolean44 = inspectionActivity9.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity46 = inspectionActivity9.setNumberOfReadingsNotDatumConverted((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity48 = inspectionActivity46.setIsValid((java.lang.Boolean) false);
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(inspectionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(readingList7);
        org.junit.Assert.assertNotNull(inspectionActivity9);
        org.junit.Assert.assertNull(inspectionList10);
        org.junit.Assert.assertNull(inspectionList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(readingList15);
        org.junit.Assert.assertNotNull(inspectionActivity17);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(reading21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(doubleWithDisplay26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(readingArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(inspectionActivity42);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNotNull(inspectionActivity46);
        org.junit.Assert.assertNotNull(inspectionActivity48);
    }

    @Test
    public void test26879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26879");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setPointOfContact("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postLaboratory0.AuditAttributes;
        java.lang.String str15 = postLaboratory0.Description;
        java.lang.String str16 = postLaboratory0.getPointOfContact();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2021.4.62.0" + "'", str16, "2021.4.62.0");
    }

    @Test
    public void test26880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26880");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = putSchedule12.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime14 = null;
        putSchedule12.EndDate = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = putSchedule12.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType17 = putSchedule12.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = putSchedule21.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.LastGenerationDate = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int26 = putSchedule25.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setRecurrenceType(recurrenceType27);
        putSchedule21.RecurrenceType = recurrenceType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule12.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule3.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime33 = putSchedule32.StartDate;
        java.time.OffsetDateTime offsetDateTime34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule35 = putSchedule32.setEndDate(offsetDateTime34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = putSchedule35.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime37 = putSchedule35.getEndDate();
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule39 = putSchedule35.setStartDate(offsetDateTime38);
        java.lang.Integer int40 = putSchedule35.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule35.RecurrenceDayMonthly = recurrenceDayMonthlyType41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = unit43.AuditAttributes;
        unit43.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity50 = samplingPlanPlannedActivity48.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = auditAttributes51.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity50.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = samplingPlanPlannedActivity50.AuditAttributes;
        putAccessGroup47.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit57 = unit43.setAuditAttributes(auditAttributes55);
        putSchedule35.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule59 = putSchedule31.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType60 = putSchedule59.getRecurrenceType();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(putSchedule35);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(putSchedule39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity50);
        org.junit.Assert.assertNotNull(auditAttributes53);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNotNull(unit57);
        org.junit.Assert.assertNotNull(putSchedule59);
        org.junit.Assert.assertTrue("'" + recurrenceType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
    }

    @Test
    public void test26881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26881");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = openWaterData0.getDistanceToMeter();
        openWaterData0.WetLineCorrection = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = openWaterData0.DistanceToWaterSurface;
        java.lang.Double double6 = openWaterData0.DryLineCorrection;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test26882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26882");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int1 = locationObservationsGroup0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str3 = samplingLocation2.Description;
        java.lang.String str4 = samplingLocation2.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26, extendedAttributeArray25);
        postActivity24.ExtendedAttributes = extendedAttributeList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation29 = samplingLocation22.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation30 = samplingLocation2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26);
        locationObservationsGroup0.SamplingLocation = samplingLocation2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = samplingLocation2.getExtendedAttributes();
        samplingLocation2.HorizontalCollectionMethod = "/api";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNotNull(extendedAttributeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(samplingLocation29);
        org.junit.Assert.assertNotNull(samplingLocation30);
        org.junit.Assert.assertNotNull(extendedAttributeList32);
    }

    @Test
    public void test26883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26883");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession3 = postSession0.setLocale("hi!");
        java.lang.String str4 = postSession3.getUsername();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession6 = postSession3.setLocale("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str7 = postSession3.EncryptedPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSession6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26884");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        java.time.Instant instant4 = null;
        reportListServiceRequest0.CreatedFrom = instant4;
        java.util.ArrayList<java.lang.String> strList6 = reportListServiceRequest0.TimeSeriesUniqueIds;
        java.time.Instant instant7 = reportListServiceRequest0.CreatedFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest8.ReportTitle = "MinDuration";
        java.lang.String str11 = reportListServiceRequest8.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        java.util.List<java.lang.String> strList27 = getObservationsV2_12.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_12.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList30 = getObservationsV2_29.getMedia();
        java.time.Instant instant31 = getObservationsV2_29.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_29.setProjectIds((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest39 = reportListServiceRequest8.setTagKeys(strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest41 = reportListServiceRequest8.setMaxResults((java.lang.Integer) 10);
        reportListServiceRequest41.ReportTitle = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str45 = deleteFieldVisits44.Sort;
        deleteFieldVisits44.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList48 = deleteFieldVisits44.getScheduleIds();
        java.util.List<java.lang.String> strList49 = deleteFieldVisits44.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        postTag50.PickListValues = strList55;
        java.util.ArrayList<java.lang.String> strList59 = postTag50.PickListValues;
        deleteFieldVisits44.PlanningStatuses = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest61 = reportListServiceRequest41.setTagKeys(strList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest62 = reportListServiceRequest0.setTimeSeriesUniqueIds(strList59);
        java.util.ArrayList<java.lang.String> strList63 = reportListServiceRequest0.getTagKeys();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(reportListServiceRequest39);
        org.junit.Assert.assertNotNull(reportListServiceRequest41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(reportListServiceRequest61);
        org.junit.Assert.assertNotNull(reportListServiceRequest62);
        org.junit.Assert.assertNull(strList63);
    }

    @Test
    public void test26885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26885");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        java.lang.String str2 = dischargeSummary0.MeanGageHeightMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary0.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        dischargeSummary0.AlternateRatingDischarge = quantityWithDisplay5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = dischargeSummary0.DurationInHours;
        java.time.Instant instant8 = dischargeSummary0.MeasurementStartTime;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test26886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26886");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str1 = crossSectionSurveyActivity0.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity3 = crossSectionSurveyActivity0.setComments("ZZZZZ");
        java.lang.String str4 = crossSectionSurveyActivity0.Channel;
        java.lang.String str5 = crossSectionSurveyActivity0.getChannel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26887");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = postStandard0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str5 = postStandard2.getId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList6 = postStandard2.ObservationStandards;
        org.junit.Assert.assertNotNull(postStandard2);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(observationStandardList6);
    }

    @Test
    public void test26888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26888");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation3 = velocityDepthObservation0.setRevolutionCount((java.lang.Integer) (-1));
        java.lang.Double double4 = velocityDepthObservation3.DepthMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = velocityDepthObservation3.Velocity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = velocityDepthObservation3.getDepth();
        java.lang.Boolean boolean7 = velocityDepthObservation3.IsVelocityEstimated;
        java.lang.Boolean boolean8 = velocityDepthObservation3.IsVelocityEstimated;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = velocityDepthObservation3.Velocity;
        velocityDepthObservation3.IsVelocityEstimated = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation13 = velocityDepthObservation3.setIsVelocityEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = velocityDepthObservation3.getDepth();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(velocityDepthObservation3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(quantityWithDisplay6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNotNull(velocityDepthObservation13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
    }

    @Test
    public void test26889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26889");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        java.lang.String str37 = putBulkEditResultGradesV2_0.Sort;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test26890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26890");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        deleteObservationsV2_0.FieldVisitId = "";
        org.junit.Assert.assertNull(strList1);
    }

    @Test
    public void test26891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26891");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = laboratory1.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = labReport0.setLaboratory(laboratory5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        java.lang.String str10 = laboratory7.PhoneNumber;
        laboratory7.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str13 = laboratory7.PointOfContact;
        labReport0.Laboratory = laboratory7;
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport16 = labReport0.setDateReceived(offsetDateTime15);
        labReport16.QcSummary = "";
        java.lang.String str19 = labReport16.QcSummary;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str21 = metricConfiguration20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty22.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration20.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType26 = observedProperty22.ResultType;
        observedProperty22.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = postObservedProperty29.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32, importHistoryEventSimpleArray31);
        postObservedProperty29.ImportHistoryEventSimples = importHistoryEventSimpleList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = observedProperty22.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList32);
        labReport16.ImportHistoryEventSimples = importHistoryEventSimpleList32;
        java.lang.String str37 = labReport16.getCaseNarrative();
        org.junit.Assert.assertNotNull(laboratory5);
        org.junit.Assert.assertNotNull(labReport6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(labReport16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertNull(resultType26);
        org.junit.Assert.assertNull(unitGroup30);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(observedProperty35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test26892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26892");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup putUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup putUnitGroup2 = putUnitGroup0.setDisplayName("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup putUnitGroup4 = putUnitGroup0.setDisplayName("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup putUnitGroup6 = putUnitGroup0.setDisplayName("PT87591240H");
        java.lang.String str7 = putUnitGroup0.UniqueId;
        org.junit.Assert.assertNotNull(putUnitGroup2);
        org.junit.Assert.assertNotNull(putUnitGroup4);
        org.junit.Assert.assertNotNull(putUnitGroup6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26893");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.String str1 = postObservedProperty0.getCasNumber();
        java.lang.Object obj2 = postObservedProperty0.getResponseType();
        postObservedProperty0.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = postObservedProperty0.DefaultUnit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup7 = postObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty9 = postObservedProperty0.setCustomId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = postObservedProperty0.setDescription("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = postObservedProperty0.ResultType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(unit5);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNull(unitGroup7);
        org.junit.Assert.assertNotNull(postObservedProperty9);
        org.junit.Assert.assertNotNull(postObservedProperty11);
        org.junit.Assert.assertNull(resultType12);
    }

    @Test
    public void test26894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26894");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList6 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSuccessCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int10 = samplingLocationImportSummary9.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList11 = samplingLocationImportSummary9.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList12 = samplingLocationImportSummary9.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple13 = samplingLocationImportSummary9.getImportHistoryEventSimple();
        samplingLocationImportSummary9.SuccessCount = (-1);
        samplingLocationImportSummary9.SummaryReportText = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        samplingLocationImportSummary9.ExpectedCount = 10;
        samplingLocationImportSummary9.ErrorCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple24 = importHistoryEventSimple22.setImportTime(offsetDateTime23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple26 = importHistoryEventSimple22.setTimeZoneOffset("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str27 = importHistoryEventSimple26.getTimeZoneOffset();
        java.lang.String str28 = importHistoryEventSimple26.Id;
        importHistoryEventSimple26.TimeZoneOffset = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary31 = samplingLocationImportSummary9.setImportHistoryEventSimple(importHistoryEventSimple26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary32 = taxonImportSummary8.setImportHistoryEventSimple(importHistoryEventSimple26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple34 = importHistoryEventSimple26.setTimeZoneOffset("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.time.OffsetDateTime offsetDateTime35 = null;
        importHistoryEventSimple26.ImportTime = offsetDateTime35;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importItemTaxonList6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(importItemSamplingLocationList11);
        org.junit.Assert.assertNull(importErrorList12);
        org.junit.Assert.assertNull(importHistoryEventSimple13);
        org.junit.Assert.assertNotNull(importHistoryEventSimple24);
        org.junit.Assert.assertNotNull(importHistoryEventSimple26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str27, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary31);
        org.junit.Assert.assertNotNull(taxonImportSummary32);
        org.junit.Assert.assertNotNull(importHistoryEventSimple34);
    }

    @Test
    public void test26895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26895");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary9.Reviewer = "";
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary9.MeasurementTime = instant12;
        postRecurringReport8.NextGenerationDate = instant12;
        java.time.Instant instant15 = postRecurringReport8.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset16 = statisticalDateTimeOffset7.setDateTimeOffset(instant15);
        vertical0.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        activeMeterDetails18.Manufacturer = "https";
        activeMeterDetails18.FirmwareVersion = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails24 = activeMeterDetails18.setSoftwareVersion("");
        java.lang.String str25 = activeMeterDetails24.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical26 = vertical0.setCurrentMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter) activeMeterDetails24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        java.lang.String str30 = calibrationCheck27.getModel();
        java.time.Instant instant31 = calibrationCheck27.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails32 = null;
        calibrationCheck27.StandardDetails = standardDetails32;
        java.lang.String str34 = calibrationCheck27.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType36 = null;
        controlConditionActivity35.ControlCleaned = controlCleanedType36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = controlConditionActivity35.getDistanceToGage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType39 = controlConditionActivity35.getControlCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType40 = controlConditionActivity35.getControlCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity42 = controlConditionActivity35.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant44 = crossSectionSurveyActivity43.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str46 = pointVelocityDischargeActivity45.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = pointVelocityDischargeActivity45.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity50 = pointVelocityDischargeActivity45.setSoftwareVersion("");
        java.lang.String str51 = pointVelocityDischargeActivity50.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType52 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity50.StartPoint = startPointType52;
        crossSectionSurveyActivity43.StartingPoint = startPointType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant56 = crossSectionSurveyActivity55.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str58 = pointVelocityDischargeActivity57.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = pointVelocityDischargeActivity57.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity62 = pointVelocityDischargeActivity57.setSoftwareVersion("");
        java.lang.String str63 = pointVelocityDischargeActivity62.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType64 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity62.StartPoint = startPointType64;
        crossSectionSurveyActivity55.StartingPoint = startPointType64;
        crossSectionSurveyActivity43.StartingPoint = startPointType64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity43.Stage = datumConvertedQuantityWithDisplay68;
        controlConditionActivity42.DistanceToGage = datumConvertedQuantityWithDisplay68;
        calibrationCheck27.Standard = datumConvertedQuantityWithDisplay68;
        datumConvertedQuantityWithDisplay68.Numeric = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical74 = vertical26.setSegmentWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = vertical74.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation76 = vertical74.getVelocityObservation();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset16);
        org.junit.Assert.assertNotNull(activeMeterDetails24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "https" + "'", str25, "https");
        org.junit.Assert.assertNotNull(vertical26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(quantityWithDisplay38);
        org.junit.Assert.assertNull(controlCleanedType39);
        org.junit.Assert.assertNull(controlCleanedType40);
        org.junit.Assert.assertNotNull(controlConditionActivity42);
        org.junit.Assert.assertNull(instant44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity48);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + startPointType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity60);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + startPointType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType64.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(vertical74);
        org.junit.Assert.assertNull(quantityWithDisplay75);
        org.junit.Assert.assertNull(velocityObservation76);
    }

    @Test
    public void test26896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26896");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        java.lang.String str4 = putTaxon0.getComment();
        putTaxon0.ItisTsn = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = putTaxon0.setSource("0001-01-01T00:00:00.0000000Z");
        java.lang.String str9 = putTaxon0.ItisComment;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putTaxon8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test26897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26897");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport2 = labReport0.setDateReceived(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory3.Id = "MaxInstant";
        java.lang.String str6 = laboratory3.PhoneNumber;
        laboratory3.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str9 = laboratory3.PointOfContact;
        laboratory3.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport12 = labReport2.setLaboratory(laboratory3);
        java.lang.String str13 = laboratory3.getId();
        org.junit.Assert.assertNotNull(labReport2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(labReport12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str13, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test26898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26898");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift2 = ratingShift0.setPeriodOfApplicability(periodOfApplicability1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability3 = ratingShift0.PeriodOfApplicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability4 = ratingShift0.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift7 = ratingShift5.setPeriodOfApplicability(periodOfApplicability6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability8 = ratingShift5.getPeriodOfApplicability();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList9 = ratingShift5.getShiftPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability();
        periodOfApplicability10.Remarks = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift13 = ratingShift5.setPeriodOfApplicability(periodOfApplicability10);
        ratingShift0.PeriodOfApplicability = periodOfApplicability10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability15 = ratingShift0.getPeriodOfApplicability();
        org.junit.Assert.assertNotNull(ratingShift2);
        org.junit.Assert.assertNull(periodOfApplicability3);
        org.junit.Assert.assertNull(periodOfApplicability4);
        org.junit.Assert.assertNotNull(ratingShift7);
        org.junit.Assert.assertNull(periodOfApplicability8);
        org.junit.Assert.assertNull(ratingShiftPointList9);
        org.junit.Assert.assertNotNull(ratingShift13);
        org.junit.Assert.assertNotNull(periodOfApplicability15);
    }

    @Test
    public void test26899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26899");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest12 = ratingModelEffectiveShiftsByStageValuesServiceRequest1.setMeasurementTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse13 = timeSeriesUniqueIdListServiceResponse0.setNextToken(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod17 = timeSeriesThresholdPeriod15.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod15.AppliedTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        postRecurringReport21.NextGenerationDate = instant25;
        java.time.Instant instant28 = postRecurringReport21.getNextGenerationDate();
        java.lang.String str29 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant28);
        metadataChangeTransactionListServiceRequest20.QueryFrom = instant28;
        timeSeriesThresholdPeriod15.AppliedTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse32 = fieldVisitDescriptionListServiceResponse14.setNextToken(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant34 = ratingCurveListServiceRequest33.QueryTo;
        java.lang.String str35 = ratingCurveListServiceRequest33.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = dischargeSummary37.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        dischargeSummary37.MeasurementTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse36.setNextToken(instant41);
        java.time.Instant instant45 = locationDescriptionListServiceResponse36.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType48 = null;
        controlConditionActivity47.ControlCleaned = controlCleanedType48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        controlConditionActivity47.DateCleaned = instant51;
        timeAlignedDataServiceRequest46.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse36.setNextToken(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest56 = ratingCurveListServiceRequest33.setQueryTo(instant51);
        java.time.Instant instant57 = ratingCurveListServiceRequest56.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse58 = fieldVisitDescriptionListServiceResponse32.setNextToken(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse59 = timeSeriesUniqueIdListServiceResponse13.setNextToken(instant57);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList60 = timeSeriesUniqueIdListServiceResponse59.getTimeSeriesUniqueIds();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList61 = timeSeriesUniqueIdListServiceResponse59.getTimeSeriesUniqueIds();
        java.lang.Boolean boolean62 = timeSeriesUniqueIdListServiceResponse59.TokenExpired;
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse13);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str29, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse32);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dischargeSummary39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse59);
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList60);
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList61);
        org.junit.Assert.assertNull(boolean62);
    }

    @Test
    public void test26900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26900");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.String str3 = locationDescriptionListServiceRequest0.LocationFolder;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str5 = deleteFieldVisits4.Sort;
        deleteFieldVisits4.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList8 = deleteFieldVisits4.getScheduleIds();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits4.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        postTag10.PickListValues = strList15;
        java.util.ArrayList<java.lang.String> strList19 = postTag10.PickListValues;
        deleteFieldVisits4.PlanningStatuses = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest21 = locationDescriptionListServiceRequest0.setTagKeys(strList19);
        java.util.ArrayList<java.lang.String> strList22 = locationDescriptionListServiceRequest21.getTagKeys();
        java.util.ArrayList<java.lang.String> strList23 = locationDescriptionListServiceRequest21.getTagNames();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList24 = locationDescriptionListServiceRequest21.ExtendedFilters;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList25 = locationDescriptionListServiceRequest21.getExtendedFilters();
        java.util.ArrayList<java.lang.String> strList26 = locationDescriptionListServiceRequest21.TagValues;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(extendedAttributeFilterList24);
        org.junit.Assert.assertNull(extendedAttributeFilterList25);
        org.junit.Assert.assertNull(strList26);
    }

    @Test
    public void test26901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26901");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = putActivity0.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity3 = putActivity0.setEndTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device4 = putActivity3.getDevice();
        org.junit.Assert.assertNull(plannedActivity1);
        org.junit.Assert.assertNotNull(putActivity3);
        org.junit.Assert.assertNull(device4);
    }

    @Test
    public void test26902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26902");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate2 = deleteActivityTemplate0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate4 = deleteActivityTemplate2.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str5 = deleteActivityTemplate4.getId();
        java.lang.String str6 = deleteActivityTemplate4.Id;
        org.junit.Assert.assertNotNull(deleteActivityTemplate2);
        org.junit.Assert.assertNotNull(deleteActivityTemplate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****" + "'", str5, "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****" + "'", str6, "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
    }

    @Test
    public void test26903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26903");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = openWaterData0.getDistanceToMeter();
        openWaterData0.SurfaceCoefficient = 10.0d;
        openWaterData0.DryLineCorrection = 1.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
    }

    @Test
    public void test26904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26904");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType17 = importItemObservation0.Status;
        java.util.List<java.lang.String> strList18 = importItemObservation0.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getLabReportIds();
        importItem19.Errors = getObservationsV2_20;
        java.lang.Object obj37 = importItem19.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation40 = importItemSamplingLocation38.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        java.util.List<java.lang.String> strList57 = getObservationsV2_42.getLabReportIds();
        importItem41.Errors = getObservationsV2_42;
        java.lang.Object obj59 = importItem41.getExistingItem();
        importItem41.Input = "hi!";
        java.lang.Object obj62 = importItem41.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType63 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem64 = importItem41.setStatus(importItemStatusType63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation65 = importItemSamplingLocation40.setStatus(importItemStatusType63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType66 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation67 = importItemSamplingLocation40.setStatus(importItemStatusType66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation69 = importItemSamplingLocation40.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem70 = importItem19.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation71 = importItemObservation0.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation73 = importItemObservation71.setItem(observation72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation74 = null;
        importItemObservation71.ExistingItem = observation74;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(importItemStatusType17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(importItemSamplingLocation40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + importItemStatusType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem64);
        org.junit.Assert.assertNotNull(importItemSamplingLocation65);
        org.junit.Assert.assertTrue("'" + importItemStatusType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation67);
        org.junit.Assert.assertTrue("'" + importItemStatusType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemSamplingLocation69);
        org.junit.Assert.assertNotNull(importItem70);
        org.junit.Assert.assertNotNull(importItemObservation71);
        org.junit.Assert.assertNotNull(importItemObservation73);
    }

    @Test
    public void test26905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26905");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading3.getUncertainty();
        reading3.SubLocationIdentifier = "";
        java.lang.String str9 = reading3.ReadingQualifier;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test26906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26906");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.BottomEstimateExponent;
        java.lang.String str4 = adcpDischargeActivity2.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity6 = adcpDischargeActivity2.setIsValid((java.lang.Boolean) false);
        java.lang.String str7 = adcpDischargeActivity6.getNavigationMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = trendLineAnalysis8.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = timeSeriesPoint10.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant13 = statisticalDateTimeOffset12.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint14 = timeSeriesPoint10.setTimestamp(statisticalDateTimeOffset12);
        trendLineAnalysis8.StartPoint = timeSeriesPoint10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = trendLineAnalysis8.getLowerQuartileOfResiduals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = trendLineAnalysis8.MedianOfResiduals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity20 = adcpDischargeActivity18.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = adcpDischargeActivity20.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = null;
        adcpDischargeActivity20.TopEstimateExponent = doubleWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType25 = calibrationCheck24.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = calibrationCheck24.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        dischargeSummary28.MeasurementTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse27.setNextToken(instant32);
        java.time.Instant instant36 = locationDescriptionListServiceResponse27.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = calibrationCheck24.setTime(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary41.DifferenceDuringVisit = doubleWithDisplay42;
        reading38.Value = doubleWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck45 = calibrationCheck37.setValue(doubleWithDisplay42);
        adcpDischargeActivity20.MagneticVariation = doubleWithDisplay42;
        java.lang.String str47 = doubleWithDisplay42.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis48 = trendLineAnalysis8.setActualPercentageChange(doubleWithDisplay42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = trendLineAnalysis8.getActualPercentageChange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str51 = volumetricDischargeReading50.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = dischargeSummary52.getMeanGageHeight();
        java.lang.String str54 = dischargeSummary52.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay59 = doubleWithDisplay57.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary52.DurationInHours = doubleWithDisplay59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading61 = volumetricDischargeReading50.setDischarge(doubleWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = volumetricDischargeReading50.EndingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = null;
        adcpDischargeActivity63.TransducerDepth = quantityWithDisplay64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary66.Reviewer = "";
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary66.MeasurementTime = instant69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType71 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary66.BaseFlow = baseFlowType71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary66.DischargeUncertainty = dischargeUncertainty73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay76 = dischargeSummary75.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay77 = dischargeSummary75.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = dischargeSummary75.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay81 = doubleWithDisplay79.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = dischargeSummary75.setDurationInHours(doubleWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty83 = dischargeUncertainty73.setQuantitativeUncertainty(doubleWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity84 = adcpDischargeActivity63.setTopEstimateExponent(doubleWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay86 = dischargeSummary85.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay87 = dischargeSummary85.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay88 = dischargeSummary85.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay91 = doubleWithDisplay89.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary92 = dischargeSummary85.setDurationInHours(doubleWithDisplay89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity93 = adcpDischargeActivity63.setBottomEstimateExponent(doubleWithDisplay89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading94 = volumetricDischargeReading50.setDurationInSeconds(doubleWithDisplay89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay95 = volumetricDischargeReading94.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay96 = volumetricDischargeReading94.getDurationInSeconds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis97 = trendLineAnalysis8.setSlope(doubleWithDisplay96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity98 = adcpDischargeActivity6.setBottomEstimateExponent(doubleWithDisplay96);
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(adcpDischargeActivity6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(timeSeriesPoint14);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNull(doubleWithDisplay17);
        org.junit.Assert.assertNotNull(adcpDischargeActivity20);
        org.junit.Assert.assertNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(calibrationCheckType25);
        org.junit.Assert.assertNull(doubleWithDisplay26);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(calibrationCheck37);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(calibrationCheck45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(trendLineAnalysis48);
        org.junit.Assert.assertNotNull(doubleWithDisplay49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(quantityWithDisplay53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(dischargeSummary56);
        org.junit.Assert.assertNotNull(doubleWithDisplay59);
        org.junit.Assert.assertNotNull(volumetricDischargeReading61);
        org.junit.Assert.assertNull(doubleWithDisplay62);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + baseFlowType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType71.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay76);
        org.junit.Assert.assertNull(quantityWithDisplay77);
        org.junit.Assert.assertNull(doubleWithDisplay78);
        org.junit.Assert.assertNotNull(doubleWithDisplay81);
        org.junit.Assert.assertNotNull(dischargeSummary82);
        org.junit.Assert.assertNotNull(dischargeUncertainty83);
        org.junit.Assert.assertNotNull(adcpDischargeActivity84);
        org.junit.Assert.assertNull(quantityWithDisplay86);
        org.junit.Assert.assertNull(quantityWithDisplay87);
        org.junit.Assert.assertNull(doubleWithDisplay88);
        org.junit.Assert.assertNotNull(doubleWithDisplay91);
        org.junit.Assert.assertNotNull(dischargeSummary92);
        org.junit.Assert.assertNotNull(adcpDischargeActivity93);
        org.junit.Assert.assertNotNull(volumetricDischargeReading94);
        org.junit.Assert.assertNull(doubleWithDisplay95);
        org.junit.Assert.assertNotNull(doubleWithDisplay96);
        org.junit.Assert.assertNotNull(trendLineAnalysis97);
        org.junit.Assert.assertNotNull(adcpDischargeActivity98);
    }

    @Test
    public void test26907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26907");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen0.Preservative = preservativeType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = postLabAnalysisMethod5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList9, observedPropertyArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod7.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType13 = analyticalGroup12.getType();
        analyticalGroup12.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = null;
        analyticalGroupItem22.AnalysisMethod = analysisMethod25;
        java.lang.String str27 = analyticalGroupItem22.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = null;
        analyticalGroupItem33.AnalysisMethod = analysisMethod36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem17, analyticalGroupItem19, analyticalGroupItem22, analyticalGroupItem28, analyticalGroupItem31, analyticalGroupItem33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39, analyticalGroupItemArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup41 = analyticalGroup16.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39);
        analyticalGroup12.AnalyticalGroupItems = analyticalGroupItemList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup12.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod45 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes43);
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes43.setModificationTime(offsetDateTime46);
        postSpecimen0.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate51 = specimenTemplate49.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate51.Preservative = preservativeType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN;
        specimenTemplate51.Preservative = preservativeType54;
        postSpecimen0.Preservative = preservativeType54;
        java.lang.String str57 = postSpecimen0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType59 = analyticalGroup58.getType();
        analyticalGroup58.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod71 = null;
        analyticalGroupItem68.AnalysisMethod = analysisMethod71;
        java.lang.String str73 = analyticalGroupItem68.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod76 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod78 = analyticalGroupItem77.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod80 = analyticalGroupItem79.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod81 = analyticalGroupItem79.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod82 = null;
        analyticalGroupItem79.AnalysisMethod = analysisMethod82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem63, analyticalGroupItem65, analyticalGroupItem68, analyticalGroupItem74, analyticalGroupItem77, analyticalGroupItem79 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList85 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList85, analyticalGroupItemArray84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup87 = analyticalGroup62.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList85);
        analyticalGroup58.AnalyticalGroupItems = analyticalGroupItemList85;
        analyticalGroup58.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        postSpecimen0.AnalyticalGroup = analyticalGroup58;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNotNull(postLabAnalysisMethod7);
        org.junit.Assert.assertNotNull(observedPropertyArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNull(analyticalGroupType13);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(analyticalGroup41);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(specimenTemplate51);
        org.junit.Assert.assertTrue("'" + preservativeType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertTrue("'" + preservativeType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN + "'", preservativeType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN));
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(analyticalGroupType59);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod67);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNull(analysisMethod70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(analysisMethod75);
        org.junit.Assert.assertNull(analysisMethod76);
        org.junit.Assert.assertNull(analysisMethod78);
        org.junit.Assert.assertNull(analysisMethod80);
        org.junit.Assert.assertNull(analysisMethod81);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(analyticalGroup87);
    }

    @Test
    public void test26908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26908");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setId("/AQUARIUS/Acquisition/v2");
        java.lang.String str3 = postSpreadsheetTemplate2.Description;
        postSpreadsheetTemplate2.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType6 = postSpreadsheetTemplate2.getType();
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(spreadsheetTemplateType6);
    }

    @Test
    public void test26909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26909");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        java.lang.String str5 = schedule0.getCustomId();
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test26910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26910");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList6 = locationDescriptionListServiceResponse5.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant8 = ratingCurveListServiceRequest7.QueryTo;
        java.lang.String str9 = ratingCurveListServiceRequest7.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType22 = null;
        controlConditionActivity21.ControlCleaned = controlCleanedType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        controlConditionActivity21.DateCleaned = instant25;
        timeAlignedDataServiceRequest20.QueryFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse10.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest30 = ratingCurveListServiceRequest7.setQueryTo(instant25);
        java.time.Instant instant31 = ratingCurveListServiceRequest30.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse5.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens33 = getExportSpecimens0.setStartModificationTime(instant31);
        java.lang.Integer int34 = getExportSpecimens0.getLimit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary36.Reviewer = "";
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary36.MeasurementTime = instant39;
        postRecurringReport35.NextGenerationDate = instant39;
        java.time.Instant instant42 = postRecurringReport35.getNextGenerationDate();
        getExportSpecimens0.StartModificationTime = instant42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens45 = getExportSpecimens0.setCursor("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double47 = putBulkEditResultGradesV2_46.DepthValue;
        java.time.Instant instant48 = putBulkEditResultGradesV2_46.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_46.setSort("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList54 = getObservationsV2_53.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        getObservationsV2_53.ResultGrades = strList66;
        getExtendedAttributeDropdownlistitems52.Search = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult72 = metricResult51.setMatchedObservations((java.util.List<java.lang.String>) strList66);
        metricResult72.OverriddenByUser = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str76 = metricConfiguration75.getId();
        metricConfiguration75.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean79 = metricConfiguration75.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration81 = metricConfiguration75.setUnit(unit80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType82 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration83 = metricConfiguration75.setAggregationType(aggregationType82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult84 = metricResult72.setMetricConfiguration(metricConfiguration75);
        java.util.List<java.lang.String> strList85 = metricResult72.MatchedObservations;
        putBulkEditResultGradesV2_46.TaxonIds = strList85;
        getExportSpecimens45.FieldTripIds = strList85;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(locationDescriptionList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(getExportSpecimens33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(getExportSpecimens45);
        org.junit.Assert.assertNull(double47);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(metricResult72);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(boolean79);
        org.junit.Assert.assertNotNull(metricConfiguration81);
        org.junit.Assert.assertTrue("'" + aggregationType82 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType82.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration83);
        org.junit.Assert.assertNotNull(metricResult84);
        org.junit.Assert.assertNotNull(strList85);
    }

    @Test
    public void test26911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26911");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation4 = putSamplingLocation2.setVerticalCollectionMethod("POST");
        java.lang.String str5 = putSamplingLocation2.getVerticalCollectionMethod();
        putSamplingLocation2.Longitude = "";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList8 = putSamplingLocation2.SamplingLocationGroups;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNotNull(putSamplingLocation4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
        org.junit.Assert.assertNull(samplingLocationGroupList8);
    }

    @Test
    public void test26912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26912");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj1 = postSession0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession3 = postSession0.setEncryptedPassword("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession5 = postSession3.setLocale("/AQUARIUS");
        java.lang.String str6 = postSession3.Locale;
        postSession3.Username = "'.'SSSSSSS";
        java.lang.String str9 = postSession3.getLocale();
        java.lang.String str10 = postSession3.Username;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNotNull(postSession5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS" + "'", str6, "/AQUARIUS");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS" + "'", str9, "/AQUARIUS");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "'.'SSSSSSS" + "'", str10, "'.'SSSSSSS");
    }

    @Test
    public void test26913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26913");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints();
        java.lang.String str1 = getLocationReferencePoints0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints3 = getLocationReferencePoints0.setLocationUniqueId("MinDuration");
        java.lang.Object obj4 = getLocationReferencePoints3.getResponseType();
        java.lang.Object obj5 = getLocationReferencePoints3.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLocationReferencePoints3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
    }

    @Test
    public void test26914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26914");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.lang.String str1 = putFilter0.getCustomId();
        java.lang.String str2 = putFilter0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test26915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26915");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest12 = ratingModelEffectiveShiftsByStageValuesServiceRequest1.setMeasurementTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse13 = timeSeriesUniqueIdListServiceResponse0.setNextToken(instant10);
        java.lang.Boolean boolean14 = timeSeriesUniqueIdListServiceResponse13.TokenExpired;
        java.lang.Boolean boolean15 = timeSeriesUniqueIdListServiceResponse13.isTokenExpired();
        java.time.Instant instant16 = timeSeriesUniqueIdListServiceResponse13.getNextToken();
        java.time.Instant instant17 = timeSeriesUniqueIdListServiceResponse13.getNextToken();
        java.lang.Boolean boolean18 = timeSeriesUniqueIdListServiceResponse13.isTokenExpired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary23.MeasurementTime = instant26;
        postRecurringReport22.NextGenerationDate = instant26;
        java.time.Instant instant29 = postRecurringReport22.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset30 = statisticalDateTimeOffset21.setDateTimeOffset(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest31 = ratingModelEffectiveShiftsByStageValuesServiceRequest20.setMeasurementTime(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse32 = timeSeriesUniqueIdListServiceResponse19.setNextToken(instant29);
        java.lang.Boolean boolean33 = timeSeriesUniqueIdListServiceResponse32.TokenExpired;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] timeSeriesUniqueIdsArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>) timeSeriesUniqueIdsList35, timeSeriesUniqueIdsArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse37 = timeSeriesUniqueIdListServiceResponse32.setTimeSeriesUniqueIds(timeSeriesUniqueIdsList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse38 = timeSeriesUniqueIdListServiceResponse13.setTimeSeriesUniqueIds(timeSeriesUniqueIdsList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.String str40 = putBulkEditResultGradesV2_39.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = putBulkEditResultGradesV2_39.setDepthUnitId("http");
        java.util.List<java.lang.String> strList43 = putBulkEditResultGradesV2_39.AnalysisMethodSimpleIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList45 = ratingModelDescriptionListServiceResponse44.RatingModelDescriptions;
        java.time.Instant instant46 = ratingModelDescriptionListServiceResponse44.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType48 = calibrationCheck47.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = calibrationCheck47.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary51.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        dischargeSummary51.MeasurementTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse50.setNextToken(instant55);
        java.time.Instant instant59 = locationDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck60 = calibrationCheck47.setTime(instant59);
        java.time.Instant instant61 = calibrationCheck60.Time;
        ratingModelDescriptionListServiceResponse44.NextToken = instant61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_63 = putBulkEditResultGradesV2_39.setStartObservedTime(instant61);
        timeSeriesUniqueIdListServiceResponse38.NextToken = instant61;
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset30);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest31);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdsArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse37);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(ratingModelDescriptionList45);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(calibrationCheckType48);
        org.junit.Assert.assertNull(doubleWithDisplay49);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(calibrationCheck60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_63);
    }

    @Test
    public void test26916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26916");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate2 = searchResultActivityTemplate0.setTotalCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setRecurrence(samplingPlanPlannedActivityRecurrence4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        activityTemplate6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod9 = activityTemplate6.CollectionMethod;
        activityTemplate6.Comment = "MaxInstant";
        samplingPlanPlannedActivity3.ActivityTemplate = activityTemplate6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType14 = samplingPlanPlannedActivityRecurrence13.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity15 = samplingPlanPlannedActivity3.setRecurrence(samplingPlanPlannedActivityRecurrence13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType16 = samplingPlanPlannedActivity3.getActivityType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType17 = samplingPlanPlannedActivity3.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        activityTemplate18.AuditAttributes = auditAttributes19;
        java.lang.String str21 = activityTemplate18.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType22 = activityTemplate18.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType23 = activityTemplate18.Medium;
        samplingPlanPlannedActivity3.ActivityTemplate = activityTemplate18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = samplingPlanPlannedActivity25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate28 = samplingPlanPlannedActivity25.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        activityTemplate29.AuditAttributes = auditAttributes30;
        java.lang.String str32 = activityTemplate29.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType33 = activityTemplate29.Medium;
        samplingPlanPlannedActivity25.ActivityTemplate = activityTemplate29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate35 = samplingPlanPlannedActivity25.ActivityTemplate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate[] activityTemplateArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate[] { activityTemplate18, activityTemplate35 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate> activityTemplateList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate>) activityTemplateList37, activityTemplateArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate39 = searchResultActivityTemplate0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate>) activityTemplateList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate41 = searchResultActivityTemplate0.setCursor("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        org.junit.Assert.assertNotNull(searchResultActivityTemplate2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNull(collectionMethod9);
        org.junit.Assert.assertNull(temporalExpressionType14);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity15);
        org.junit.Assert.assertNull(activityType16);
        org.junit.Assert.assertNull(activityType17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(activityTemplateType22);
        org.junit.Assert.assertNull(mediumType23);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity27);
        org.junit.Assert.assertNull(activityTemplate28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(mediumType33);
        org.junit.Assert.assertNotNull(activityTemplate35);
        org.junit.Assert.assertNotNull(activityTemplateArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(searchResultActivityTemplate39);
        org.junit.Assert.assertNotNull(searchResultActivityTemplate41);
    }

    @Test
    public void test26917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26917");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        samplingLocationImportSummary0.InvalidRowsCsvUrl = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary8.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary12 = observedPropertyImportSummary8.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = reading14.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading17 = reading14.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = reading17.setModel("MaxInstant");
        java.lang.Integer int20 = reading19.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField24 = extendedAttributeField22.setDisplayName("");
        java.lang.Boolean boolean25 = extendedAttributeField24.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_28.setDataClassifications((java.util.List<java.lang.String>) strList32);
        getObservationsV2_34.DepthUnitCustomId = "hi!";
        java.lang.String str37 = getObservationsV2_34.CustomId;
        java.util.List<java.lang.String> strList38 = getObservationsV2_34.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        getObservationsV2_39.QualityControlTypes = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_34.setMedia((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str56 = getObservationsV2_55.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        getObservationsV2_55.ProjectIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_34.setObservedPropertyIds((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = timeAlignedDataServiceRequest26.setTimeSeriesOutputUnitIds(strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField66 = extendedAttributeField24.setValueOptions((java.util.List<java.lang.String>) strList60);
        putBulkEditResultGradesV2_21.AnalysisMethodSimpleIds = strList60;
        reading19.ReadingQualifiers = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty69 = importItemObservedProperty13.setFields((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty13 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList71, importItemObservedPropertyArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary73 = observedPropertyImportSummary8.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary75 = observedPropertyImportSummary73.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary76.UpdateCount = (-1);
        java.lang.Integer int79 = observationImportSummary76.ExpectedCount;
        java.lang.String str80 = observationImportSummary76.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList82, importErrorArray81);
        observationImportSummary76.ImportJobErrors = importErrorList82;
        observedPropertyImportSummary73.ImportJobErrors = importErrorList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary86 = samplingLocationImportSummary7.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary87 = samplingLocationImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList82);
        java.lang.Integer int88 = samplingLocationImportSummary87.getExpectedCount();
        java.lang.Integer int89 = samplingLocationImportSummary87.SuccessCount;
        java.lang.String str90 = samplingLocationImportSummary87.getSummaryReportText();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(importHistoryEventSimple4);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary12);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(reading17);
        org.junit.Assert.assertNotNull(reading19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(extendedAttributeField24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest65);
        org.junit.Assert.assertNotNull(extendedAttributeField66);
        org.junit.Assert.assertNotNull(importItemObservedProperty69);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary73);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary75);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(importErrorArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary86);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary87);
        org.junit.Assert.assertNull(int88);
        org.junit.Assert.assertNull(int89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test26918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26918");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        java.time.Instant instant3 = controlConditionActivity0.getDateCleaned();
        java.lang.String str4 = controlConditionActivity0.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = controlConditionActivity0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        controlConditionActivity6.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = controlConditionActivity6.getDistanceToGage();
        java.time.Instant instant10 = controlConditionActivity6.DateCleaned;
        java.lang.String str11 = controlConditionActivity6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity13 = controlConditionActivity6.setIsValid((java.lang.Boolean) false);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(controlConditionActivity6);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str11, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(controlConditionActivity13);
    }

    @Test
    public void test26919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26919");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = pointVelocityDischargeActivity3.getVelocityAverage();
        java.lang.String str5 = pointVelocityDischargeActivity3.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity3.setNodeDetails("-PT87591240H");
        pointVelocityDischargeActivity7.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList11 = fieldVisitReading10.DatumConvertedValues;
        fieldVisitReading10.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = volumetricDischargeReading14.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = calibrationCheck16.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        calibrationCheck18.Difference = doubleWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = pointVelocityDischargeActivity24.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity24.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity24.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList31 = pointVelocityDischargeActivity30.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity30.DistanceToMeter = datumConvertedQuantityWithDisplay32;
        calibrationCheck18.Standard = datumConvertedQuantityWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading35 = volumetricDischargeReading14.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay32);
        fieldVisitReading10.AdjustmentAmount = datumConvertedQuantityWithDisplay32;
        pointVelocityDischargeActivity7.Area = datumConvertedQuantityWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity7.setNumberOfPanels((java.lang.Integer) 100);
        java.lang.Boolean boolean40 = pointVelocityDischargeActivity39.getIsValid();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList11);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(calibrationCheck18);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity26);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
        org.junit.Assert.assertNull(verticalList31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
    }

    @Test
    public void test26920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26920");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod2 = putActivityTemplate0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = putActivityTemplate0.setComment("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = putActivityTemplate4.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType6 = putActivityTemplate4.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation9.setResultStatus(resultStatus10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity12.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = postActivity12.setPlannedActivity(plannedActivity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType17 = postActivity12.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate19.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList24 = specimenTemplate23.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = specimenTemplate25.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList30 = specimenTemplate29.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate19, specimenTemplate22, specimenTemplate23, specimenTemplate27, specimenTemplate28, specimenTemplate29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList32, specimenTemplateArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate34 = postFieldVisitActivityWithTemplate18.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate36 = postFieldVisitActivityWithTemplate34.setCollectionMethod(collectionMethod35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity37 = postActivity12.setCollectionMethod(collectionMethod35);
        observation11.CollectionMethod = collectionMethod35;
        collectionMethod35.Name = "http";
        java.lang.String str41 = collectionMethod35.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate42 = putActivityTemplate4.setCollectionMethod(collectionMethod35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = putActivityTemplate4.getDepth();
        java.lang.String str44 = putActivityTemplate4.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate46.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList51 = specimenTemplate50.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = specimenTemplate52.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList57 = specimenTemplate56.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate46, specimenTemplate49, specimenTemplate50, specimenTemplate54, specimenTemplate55, specimenTemplate56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59, specimenTemplateArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate61 = postFieldVisitActivityWithTemplate45.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59);
        putActivityTemplate4.SpecimenTemplates = specimenTemplateList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType63 = putActivityTemplate4.Medium;
        java.lang.Object obj64 = putActivityTemplate4.getResponseType();
        putActivityTemplate4.Id = "'.'SSSSSSS";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(collectionMethod2);
        org.junit.Assert.assertNotNull(putActivityTemplate4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(mediumType6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(postActivity16);
        org.junit.Assert.assertNull(activityType17);
        org.junit.Assert.assertNull(labInstructionTemplateList24);
        org.junit.Assert.assertNotNull(specimenTemplate27);
        org.junit.Assert.assertNull(labInstructionTemplateList30);
        org.junit.Assert.assertNotNull(specimenTemplateArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate34);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate36);
        org.junit.Assert.assertNotNull(postActivity37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(putActivityTemplate42);
        org.junit.Assert.assertNull(quantity43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(labInstructionTemplateList51);
        org.junit.Assert.assertNotNull(specimenTemplate54);
        org.junit.Assert.assertNull(labInstructionTemplateList57);
        org.junit.Assert.assertNotNull(specimenTemplateArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate61);
        org.junit.Assert.assertNull(mediumType63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
    }

    @Test
    public void test26921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26921");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.EndDate;
        java.time.OffsetDateTime offsetDateTime2 = postSchedule0.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule4 = postSchedule0.setId("/AQUARIUS");
        java.lang.String str5 = postSchedule0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule7 = postSchedule0.setCustomId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str9 = samplingLocation8.Description;
        java.lang.String str10 = samplingLocation8.VerticalCollectionMethod;
        java.lang.String str11 = samplingLocation8.getLongitude();
        java.lang.String str12 = samplingLocation8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = postObservationV2_13.setLabInstruction(labInstruction14);
        java.lang.String str16 = postObservationV2_15.MediumSubdivision;
        java.lang.String str17 = postObservationV2_15.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_19 = postObservationV2_15.setLabResultDetails(labResultDetails18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier20 = postObservationV2_15.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList22 = fieldVisit21.Attachments;
        java.time.OffsetDateTime offsetDateTime23 = null;
        fieldVisit21.EndTime = offsetDateTime23;
        java.lang.String str25 = fieldVisit21.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str27 = samplingLocation26.Description;
        java.lang.String str28 = samplingLocation26.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str31 = metricConfiguration30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty32.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = metricConfiguration30.setObservedProperty(observedProperty32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType36 = observedProperty32.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup38 = postObservedProperty37.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = null;
        quantity39.Unit = unit40;
        postObservedProperty37.LowerLimit = quantity39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = postObservedProperty37.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = quantity43.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty45 = observedProperty32.setUpperLimit(quantity43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation46 = samplingLocation29.setElevation(quantity43);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList47 = samplingLocation46.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50, extendedAttributeArray49);
        postActivity48.ExtendedAttributes = extendedAttributeList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = samplingLocation46.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation26.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50);
        fieldVisit21.ExtendedAttributes = extendedAttributeList50;
        postObservationV2_15.ExtendedAttributes = extendedAttributeList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation57 = samplingLocation8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50);
        java.lang.String str58 = samplingLocation8.getVerticalDatum();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime61 = putSchedule60.StartDate;
        java.time.OffsetDateTime offsetDateTime62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule63 = putSchedule60.setEndDate(offsetDateTime62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = putSchedule63.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime65 = putSchedule63.getEndDate();
        java.time.OffsetDateTime offsetDateTime66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule67 = putSchedule63.setStartDate(offsetDateTime66);
        java.lang.Integer int68 = putSchedule63.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType69 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule63.RecurrenceDayMonthly = recurrenceDayMonthlyType69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = unit71.AuditAttributes;
        unit71.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity78 = samplingPlanPlannedActivity76.setAuditAttributes(auditAttributes77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = auditAttributes79.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity78.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = samplingPlanPlannedActivity78.AuditAttributes;
        putAccessGroup75.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit85 = unit71.setAuditAttributes(auditAttributes83);
        putSchedule63.AuditAttributes = auditAttributes83;
        java.lang.String str87 = auditAttributes83.getCreationUserProfileId();
        observationStandard59.AuditAttributes = auditAttributes83;
        samplingLocation8.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule90 = postSchedule0.setAuditAttributes(auditAttributes83);
        java.lang.String str91 = auditAttributes83.CreationUserProfileId;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(postSchedule4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSchedule7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postObservationV2_15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(postObservationV2_19);
        org.junit.Assert.assertNull(nullMeasureQualifier20);
        org.junit.Assert.assertNull(domainObjectAttachmentList22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(metricConfiguration35);
        org.junit.Assert.assertNull(resultType36);
        org.junit.Assert.assertNull(unitGroup38);
        org.junit.Assert.assertNotNull(quantity43);
        org.junit.Assert.assertNull(unit44);
        org.junit.Assert.assertNotNull(observedProperty45);
        org.junit.Assert.assertNotNull(samplingLocation46);
        org.junit.Assert.assertNull(domainObjectAttachmentList47);
        org.junit.Assert.assertNotNull(extendedAttributeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(samplingLocation53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(samplingLocation57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(putSchedule63);
        org.junit.Assert.assertNull(auditAttributes64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(putSchedule67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType69 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType69.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes72);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity78);
        org.junit.Assert.assertNotNull(auditAttributes81);
        org.junit.Assert.assertNotNull(auditAttributes83);
        org.junit.Assert.assertNotNull(unit85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "'.'SSSSSSS" + "'", str87, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(postSchedule90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "'.'SSSSSSS" + "'", str91, "'.'SSSSSSS");
    }

    @Test
    public void test26922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26922");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport();
        getRecurringReport0.UniqueId = "'.'SSSSSSS";
        java.lang.String str3 = getRecurringReport0.getUniqueId();
        java.lang.Object obj4 = getRecurringReport0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport6 = getRecurringReport0.setUniqueId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport8 = getRecurringReport6.setUniqueId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        getRecurringReport8.UniqueId = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(getRecurringReport6);
        org.junit.Assert.assertNotNull(getRecurringReport8);
    }

    @Test
    public void test26923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26923");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.lang.String str1 = labReport0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = labReport0.setId("2021.8.9990");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(labReport3);
    }

    @Test
    public void test26924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26924");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval5 = approval0.setApprovalLevel((java.lang.Integer) 4);
        approval0.ApprovalLevel = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval9 = approval0.setUser("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(approval5);
        org.junit.Assert.assertNotNull(approval9);
    }

    @Test
    public void test26925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26925");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.String str1 = locationDataServiceResponse0.Description;
        java.lang.Double double2 = locationDataServiceResponse0.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse4 = locationDataServiceResponse0.setLongitude((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse6 = locationDataServiceResponse4.setElevation((java.lang.Double) 10.0d);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList7 = locationDataServiceResponse4.ExtendedAttributes;
        locationDataServiceResponse4.Srid = 1.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(locationDataServiceResponse4);
        org.junit.Assert.assertNotNull(locationDataServiceResponse6);
        org.junit.Assert.assertNull(extendedAttributeList7);
    }

    @Test
    public void test26926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26926");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary0.Reviewer = "";
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary0.MeasurementTime = instant3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary0.setDischargeUncertainty(dischargeUncertainty5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setComments("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition12 = tagDefinition10.setValueType(tagValueType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition14 = tagDefinition10.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition16 = tagDefinition14.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition18 = tagDefinition14.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList30);
        tagDefinition18.PickListValues = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_35 = getGroupedObservationsV2_9.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType36 = getGroupedObservationsV2_35.FieldResultType;
        java.lang.String str37 = getGroupedObservationsV2_35.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_39 = getGroupedObservationsV2_35.setMinNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str41 = approval40.User;
        approval40.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval45 = approval40.setApprovalLevel((java.lang.Integer) 4);
        approval40.ApprovalLevel = (-1);
        java.lang.String str48 = approval40.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str50 = setting49.getKey();
        java.lang.String str51 = setting49.getDescription();
        java.lang.String str52 = setting49.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary53.setMeanGageHeightMethod("hi!");
        java.lang.String str56 = dischargeSummary55.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary55.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj60 = timeAlignedDataServiceRequest59.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant62 = sensor61.getLastModifiedUtc();
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor64 = sensor61.setLastModifiedUtc(instant63);
        java.time.Instant instant65 = sensor61.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = timeAlignedDataServiceRequest59.setQueryTo(instant65);
        dischargeSummary58.MeasurementStartTime = instant65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting68 = setting49.setLastModifiedTime(instant65);
        approval40.StartTime = instant65;
        getGroupedObservationsV2_35.StartModificationTime = instant65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = dischargeSummary6.setMeasurementTime(instant65);
        java.lang.String str72 = dischargeSummary6.QualityAssuranceComments;
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(tagDefinition12);
        org.junit.Assert.assertNotNull(tagDefinition14);
        org.junit.Assert.assertNotNull(tagDefinition16);
        org.junit.Assert.assertNotNull(tagDefinition18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_35);
        org.junit.Assert.assertNull(fieldResultType36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(approval45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(sensor64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest66);
        org.junit.Assert.assertNotNull(setting68);
        org.junit.Assert.assertNotNull(dischargeSummary71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test26927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26927");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = putObservationV2_2.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation11.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation11.setCategoricalResult(categoricalResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList17, importHistoryEventSimpleArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation11.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon20 = observation11.RelatedTaxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation21.setPlannedFieldResult(plannedFieldResult22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction24 = null;
        observation23.LabInstruction = labInstruction24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation23.setStatistics(observationStatistics26);
        java.time.OffsetDateTime offsetDateTime28 = observation27.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList29 = observation27.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setObservedProperty(observedProperty30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList33, ruleValidationDetailsArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList33);
        observation11.ValidationWarnings = ruleValidationDetailsList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList33);
        java.lang.String str38 = putObservationV2_37.getCustomId();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(quantity10);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(taxon20);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertNull(importHistoryEventSimpleList29);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test26928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26928");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = postObservationV2_2.getCategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation4.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation4.setCategoricalResult(categoricalResult7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus10 = observationNestedInSpecimen9.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction11 = observationNestedInSpecimen9.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction12 = null;
        observationNestedInSpecimen9.LabInstruction = labInstruction12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = observationNestedInSpecimen9.getObservedProperty();
        java.lang.String str15 = observationNestedInSpecimen9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType17 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus16.SystemCode = resultStatusSystemCodeType17;
        resultStatus16.CustomId = "-PT87591240H";
        observationNestedInSpecimen9.ResultStatus = resultStatus16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation4.setResultStatus(resultStatus16);
        java.lang.String str23 = resultStatus16.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_24 = postObservationV2_2.setResultStatus(resultStatus16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity25.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = postActivity25.setPlannedActivity(plannedActivity28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType30 = postActivity25.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate32.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList37 = specimenTemplate36.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = specimenTemplate38.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList43 = specimenTemplate42.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate32, specimenTemplate35, specimenTemplate36, specimenTemplate40, specimenTemplate41, specimenTemplate42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList45, specimenTemplateArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate47 = postFieldVisitActivityWithTemplate31.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate49 = postFieldVisitActivityWithTemplate47.setCollectionMethod(collectionMethod48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity50 = postActivity25.setCollectionMethod(collectionMethod48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity25.Medium = medium51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_53 = postObservationV2_2.setMedium(medium51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = putObservationV2_54.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType56 = putObservationV2_54.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty59 = postObservedProperty57.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType60 = postObservedProperty57.getAnalysisType();
        postObservedProperty57.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation65 = observation63.setPlannedFieldResult(plannedFieldResult64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction66 = null;
        observation65.LabInstruction = labInstruction66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation65.setStatistics(observationStatistics68);
        java.time.OffsetDateTime offsetDateTime70 = observation69.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList71 = observation69.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation73 = observation69.setObservedProperty(observedProperty72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade74 = observation73.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation76 = observation73.setNumericResult(numericResult75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup78 = postObservedProperty77.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList80, importHistoryEventSimpleArray79);
        postObservedProperty77.ImportHistoryEventSimples = importHistoryEventSimpleList80;
        observation73.ImportHistoryEventSimples = importHistoryEventSimpleList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty84 = postObservedProperty57.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_85 = putObservationV2_54.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_86 = postObservationV2_53.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList80);
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(categoricalResult3);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(resultStatus10);
        org.junit.Assert.assertNull(labInstruction11);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType17.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-PT87591240H" + "'", str23, "-PT87591240H");
        org.junit.Assert.assertNotNull(postObservationV2_24);
        org.junit.Assert.assertNotNull(postActivity29);
        org.junit.Assert.assertNull(activityType30);
        org.junit.Assert.assertNull(labInstructionTemplateList37);
        org.junit.Assert.assertNotNull(specimenTemplate40);
        org.junit.Assert.assertNull(labInstructionTemplateList43);
        org.junit.Assert.assertNotNull(specimenTemplateArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate47);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate49);
        org.junit.Assert.assertNotNull(postActivity50);
        org.junit.Assert.assertNotNull(postObservationV2_53);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNull(dataClassificationType56);
        org.junit.Assert.assertNotNull(postObservedProperty59);
        org.junit.Assert.assertNull(analysisType60);
        org.junit.Assert.assertNotNull(observation65);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNull(offsetDateTime70);
        org.junit.Assert.assertNull(importHistoryEventSimpleList71);
        org.junit.Assert.assertNotNull(observation73);
        org.junit.Assert.assertNull(resultGrade74);
        org.junit.Assert.assertNotNull(observation76);
        org.junit.Assert.assertNull(unitGroup78);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(postObservedProperty84);
        org.junit.Assert.assertNotNull(putObservationV2_85);
        org.junit.Assert.assertNotNull(postObservationV2_86);
    }

    @Test
    public void test26929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26929");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postDetectioncondition0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition10 = postDetectioncondition0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = postDetectioncondition10.setName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        java.lang.String str14 = putTag13.Name;
        java.lang.String str15 = putTag13.getName();
        java.lang.String str16 = putTag13.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = putTag13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag19 = putTag13.setDescription("MaxInstant");
        putTag19.Name = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        putTag19.Name = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        analyticalGroup27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = analyticalGroup27.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        java.lang.String str36 = samplingContextTag32.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putDetectioncondition38.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition41 = putDetectioncondition38.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        putDetectioncondition38.AuditAttributes = auditAttributes49;
        analysisMethodSimple37.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag32.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup27.setAuditAttributes(auditAttributes49);
        java.lang.String str54 = auditAttributes49.CreationUserProfileId;
        observedProperty24.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag56 = putTag19.setAuditAttributes(auditAttributes49);
        postDetectioncondition12.AuditAttributes = auditAttributes49;
        auditAttributes49.CreationUserProfileId = "PT87591240H";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(postDetectioncondition10);
        org.junit.Assert.assertNotNull(postDetectioncondition12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putTag19);
        org.junit.Assert.assertNotNull(analyticalGroup31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putDetectioncondition41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'.'SSSSSSS" + "'", str54, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putTag56);
    }

    @Test
    public void test26930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26930");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        java.time.Instant instant65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_66 = deleteObservationsV2_64.setStartObservedTime(instant65);
        java.util.List<java.lang.String> strList67 = deleteObservationsV2_66.getSamplingContextTagIds();
        java.time.Instant instant68 = deleteObservationsV2_66.getStartResultTime();
        java.util.List<java.lang.String> strList69 = deleteObservationsV2_66.getQualityControlTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_71 = deleteObservationsV2_66.setDepthUnitId("http://MaxDurationhttp/json/reply/Float");
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNotNull(deleteObservationsV2_66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(deleteObservationsV2_71);
    }

    @Test
    public void test26931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26931");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.lang.String str4 = dischargeChannelMeasurement1.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType5 = dischargeChannelMeasurement1.VelocityVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity6 = otherMethodDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType8 = dischargeChannelMeasurement7.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeChannelMeasurement7.Discharge;
        java.lang.String str10 = dischargeChannelMeasurement7.MonitoringMethod;
        java.time.Instant instant11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement12 = dischargeChannelMeasurement7.setEndTime(instant11);
        otherMethodDischargeActivity6.DischargeChannelMeasurement = dischargeChannelMeasurement12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement15 = dischargeChannelMeasurement12.setCurrentMeter(currentMeterType14);
        java.time.Instant instant16 = dischargeChannelMeasurement12.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType17 = dischargeChannelMeasurement12.getDeploymentMethod();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(velocityVariationType5);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivity6);
        org.junit.Assert.assertNull(channelMaterialType8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement12);
        org.junit.Assert.assertTrue("'" + currentMeterType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft + "'", currentMeterType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.HorizontalShaft));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(deploymentMethodType17);
    }

    @Test
    public void test26932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26932");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate1 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        postFieldVisitActivityFromPlannedActivity0.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate4.Medium = mediumType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity7 = postFieldVisitActivityFromPlannedActivity0.setMedium(mediumType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity32.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity32.setPlannedActivity(plannedActivity35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType37 = postActivity32.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate39.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList44 = specimenTemplate43.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = specimenTemplate45.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList50 = specimenTemplate49.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate39, specimenTemplate42, specimenTemplate43, specimenTemplate47, specimenTemplate48, specimenTemplate49 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList52, specimenTemplateArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate54 = postFieldVisitActivityWithTemplate38.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate56 = postFieldVisitActivityWithTemplate54.setCollectionMethod(collectionMethod55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = postActivity32.setCollectionMethod(collectionMethod55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate58 = postFieldVisitActivityWithTemplate15.setCollectionMethod(collectionMethod55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity59 = postActivity8.setCollectionMethod(collectionMethod55);
        postFieldVisitActivityFromPlannedActivity7.CollectionMethod = collectionMethod55;
        collectionMethod55.CustomId = "http://MaxDurationhttp";
        org.junit.Assert.assertNull(activityTemplate1);
        org.junit.Assert.assertTrue("'" + mediumType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNull(activityType37);
        org.junit.Assert.assertNull(labInstructionTemplateList44);
        org.junit.Assert.assertNotNull(specimenTemplate47);
        org.junit.Assert.assertNull(labInstructionTemplateList50);
        org.junit.Assert.assertNotNull(specimenTemplateArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate54);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate56);
        org.junit.Assert.assertNotNull(postActivity57);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate58);
        org.junit.Assert.assertNotNull(postActivity59);
    }

    @Test
    public void test26933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26933");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay3;
        java.lang.Boolean boolean5 = adcpDischargeActivity0.getIsValid();
        java.lang.String str6 = adcpDischargeActivity0.FirmwareVersion;
        java.lang.String str7 = adcpDischargeActivity0.getModel();
        java.lang.String str8 = adcpDischargeActivity0.BottomEstimateMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity11 = adcpDischargeActivity9.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = adcpDischargeActivity11.TopEstimateExponent;
        java.lang.String str13 = adcpDischargeActivity11.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = adcpDischargeActivity11.DischargeCoefficientVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = adcpDischargeActivity11.BottomEstimateExponent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        adcpDischargeActivity16.TransducerDepth = quantityWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        adcpDischargeActivity16.TransducerDepth = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity22 = adcpDischargeActivity16.setNumberOfTransects((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity22.setNodeDetails("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double27 = adjustment26.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType28 = adjustment26.getAdjustmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment30 = adjustment26.setAdjustmentType(adjustmentType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary25.setAdjustment(adjustment30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = doubleWithDisplay32.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary31.setDurationInHours(doubleWithDisplay34);
        adcpDischargeActivity22.PercentOfDischargeMeasured = doubleWithDisplay34;
        adcpDischargeActivity11.MagneticVariation = doubleWithDisplay34;
        adcpDischargeActivity0.BottomEstimateExponent = doubleWithDisplay34;
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(adcpDischargeActivity11);
        org.junit.Assert.assertNull(doubleWithDisplay12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(doubleWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(adcpDischargeActivity22);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(adjustmentType28);
        org.junit.Assert.assertTrue("'" + adjustmentType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount + "'", adjustmentType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount));
        org.junit.Assert.assertNotNull(adjustment30);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(doubleWithDisplay34);
        org.junit.Assert.assertNotNull(dischargeSummary35);
    }

    @Test
    public void test26934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26934");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.lang.String str1 = sensor0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setModel("/AQUARIUS/Provisioning/v1");
        java.lang.String str4 = sensor3.getComments();
        sensor3.ParameterId = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor8 = sensor3.setParameterId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        sensor8.Manufacturer = "MinDuration";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor8);
    }

    @Test
    public void test26935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26935");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setId("/AQUARIUS/Acquisition/v2");
        java.lang.Object obj3 = postSpreadsheetTemplate2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit4.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = putFieldVisit4.setProject(projectSimple7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule9.setCustomId("");
        java.time.OffsetDateTime offsetDateTime12 = schedule9.getLastGenerationDate();
        putFieldVisit4.Schedule = schedule9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation14 = putFieldVisit4.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple15 = null;
        putFieldVisit4.FieldTrip = fieldTripSimple15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit18 = putFieldVisit4.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        putFieldVisit4.SamplingPlan = samplingPlan19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule30 = schedule28.setCustomId("");
        putFieldVisit4.Schedule = schedule30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment37.setAttachment(attachment40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        java.lang.String str58 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = domainObjectAttachment56.setAttachment(attachment59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment42, domainObjectAttachment49, domainObjectAttachment54, domainObjectAttachment56, domainObjectAttachment61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan67 = putFieldVisit32.getSamplingPlan();
        java.time.OffsetDateTime offsetDateTime68 = null;
        putFieldVisit32.EndTime = offsetDateTime68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit71 = putFieldVisit32.setId("9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = putFieldVisit71.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit73 = putFieldVisit4.setAttachments(domainObjectAttachmentList72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate74 = postSpreadsheetTemplate2.setAttachments(domainObjectAttachmentList72);
        postSpreadsheetTemplate74.CustomId = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
        org.junit.Assert.assertNotNull(putFieldVisit8);
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNull(samplingLocation14);
        org.junit.Assert.assertNotNull(putFieldVisit18);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(schedule30);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachment60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNull(samplingPlan67);
        org.junit.Assert.assertNotNull(putFieldVisit71);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList72);
        org.junit.Assert.assertNotNull(putFieldVisit73);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate74);
    }

    @Test
    public void test26936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26936");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        java.lang.String str4 = fieldVisitSimple0.Id;
        fieldVisitSimple0.Notes = "MaxDuration";
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple8 = fieldVisitSimple0.setEndTime(offsetDateTime7);
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(fieldVisitSimple8);
    }

    @Test
    public void test26937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26937");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationObservationsGroup searchResultLocationObservationsGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationObservationsGroup();
        java.lang.Integer int1 = searchResultLocationObservationsGroup0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup> locationObservationsGroupList2 = searchResultLocationObservationsGroup0.DomainObjects;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(locationObservationsGroupList2);
    }

    @Test
    public void test26938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26938");
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer0 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.google.gson.GsonBuilder gsonBuilder1 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldNamer0.configure(gsonBuilder1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test26939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26939");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase4 = roleFlattenedBase2.setName("");
        roleFlattenedBase2.CanAddOrRemoveLocations = true;
        roleFlattenedBase2.CanEditAppendConfigurations = false;
        java.lang.Boolean boolean9 = roleFlattenedBase2.isCanRemoveFieldVisits();
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNotNull(roleFlattenedBase4);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test26940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26940");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setIsEnabled((java.lang.Boolean) true);
        java.lang.String str7 = reportPlugin0.FolderName;
        java.lang.String str8 = reportPlugin0.getVersion();
        java.lang.Boolean boolean9 = reportPlugin0.IsEnabled;
        java.lang.String str10 = reportPlugin0.UniqueId;
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str10, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test26941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26941");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        java.lang.String str3 = putStandard0.getCustomId();
        java.lang.String str4 = putStandard0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putAnalysisMethod5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = observationMinimal7.setSpecimen(specimenNestedInActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = observationMinimal9.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult11.getFixedValue();
        observationMinimal9.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult14.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue17 = categoricalResult14.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult14.NullMeasureQualifier = nullMeasureQualifier18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = categoricalResult11.setNullMeasureQualifier(nullMeasureQualifier18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier21 = categoricalResult11.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup24 = putAnalyticalGroup22.setAnalyticalGroupItems(analyticalGroupItemList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan28.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime31 = samplingPlan28.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit34 = putUnitGroupWithUnit32.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType35 = putUnitGroupWithUnit32.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity39 = samplingPlanPlannedActivity37.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = auditAttributes40.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity39.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = samplingPlanPlannedActivity39.AuditAttributes;
        putAccessGroup36.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit46 = putUnitGroupWithUnit32.setAuditAttributes(auditAttributes44);
        samplingPlan28.AuditAttributes = auditAttributes44;
        java.time.OffsetDateTime offsetDateTime48 = null;
        auditAttributes44.ModificationTime = offsetDateTime48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = labResultDetails25.setAuditAttributes(auditAttributes44);
        putAnalyticalGroup24.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier52 = nullMeasureQualifier21.setAuditAttributes(auditAttributes44);
        putAnalysisMethod5.AuditAttributes = auditAttributes44;
        putStandard0.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard56 = putStandard0.setName("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str57 = putStandard56.Description;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(observationMinimal9);
        org.junit.Assert.assertNull(observedProperty10);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNull(categoricalValue17);
        org.junit.Assert.assertNotNull(categoricalResult20);
        org.junit.Assert.assertNotNull(nullMeasureQualifier21);
        org.junit.Assert.assertNotNull(putAnalyticalGroup24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit34);
        org.junit.Assert.assertNull(unitGroupSystemCodeType35);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity39);
        org.junit.Assert.assertNotNull(auditAttributes42);
        org.junit.Assert.assertNotNull(auditAttributes44);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit46);
        org.junit.Assert.assertNotNull(labResultDetails50);
        org.junit.Assert.assertNotNull(nullMeasureQualifier52);
        org.junit.Assert.assertNotNull(putStandard56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test26942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26942");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        java.lang.Double double17 = getExportObservations0.MaxNumericResultValue;
        java.util.List<java.lang.String> strList18 = getExportObservations0.getObservedPropertyIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField21 = extendedAttributeField19.setDisplayName("");
        java.lang.Boolean boolean22 = extendedAttributeField21.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj24 = timeAlignedDataServiceRequest23.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_25.setDataClassifications((java.util.List<java.lang.String>) strList29);
        getObservationsV2_31.DepthUnitCustomId = "hi!";
        java.lang.String str34 = getObservationsV2_31.CustomId;
        java.util.List<java.lang.String> strList35 = getObservationsV2_31.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_31.setMedia((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str53 = getObservationsV2_52.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        getObservationsV2_52.ProjectIds = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_31.setObservedPropertyIds((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = timeAlignedDataServiceRequest23.setTimeSeriesOutputUnitIds(strList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField63 = extendedAttributeField21.setValueOptions((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations64 = getExportObservations0.setResultStatuses((java.util.List<java.lang.String>) strList57);
        java.lang.Double double65 = getExportObservations64.getNumericResultValue();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(extendedAttributeField21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest62);
        org.junit.Assert.assertNotNull(extendedAttributeField63);
        org.junit.Assert.assertNotNull(getExportObservations64);
        org.junit.Assert.assertNull(double65);
    }

    @Test
    public void test26943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26943");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant1 = activeMeterCalibration0.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double3 = activeMeterCalibrationEquation2.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double5 = activeMeterCalibrationEquation4.getSlope();
        java.lang.String str6 = activeMeterCalibrationEquation4.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double8 = activeMeterCalibrationEquation7.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation2, activeMeterCalibrationEquation4, activeMeterCalibrationEquation7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList10, activeMeterCalibrationEquationArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration12 = activeMeterCalibration0.setEquations(activeMeterCalibrationEquationList10);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList13 = activeMeterCalibration12.Equations;
        java.time.Instant instant14 = activeMeterCalibration12.getFirstUsedDate();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration12);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList13);
        org.junit.Assert.assertNull(instant14);
    }

    @Test
    public void test26944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26944");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteRole deleteRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteRole deleteRole2 = deleteRole0.setUniqueId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(deleteRole2);
    }

    @Test
    public void test26945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26945");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.getCorrectedStartTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList2 = timeSeriesDescription0.getExtendedAttributes();
        java.time.Instant instant3 = timeSeriesDescription0.CorrectedStartTime;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(extendedAttributeList2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test26946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26946");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "hi!", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ", "2021.4.62.0", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "/AQUARIUS", "hi!", "'.'SSSSSSS" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getExportSpecimens0.LaboratoryIds = strList15;
        java.util.List<java.lang.String> strList18 = getExportSpecimens0.getSpecimenStatuses();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant20 = ratingCurveListServiceRequest19.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str22 = timeSeriesDescription21.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription24 = timeSeriesDescription21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase27 = locationDatumPeriod25.setComment("'.'SSSSSSS");
        java.lang.Double double28 = locationDatumPeriodBase27.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant30 = qualifier29.DateApplied;
        java.lang.String str31 = qualifier29.User;
        java.lang.String str32 = qualifier29.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj34 = timeAlignedDataServiceRequest33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest33.setQueryFrom(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier39 = qualifier29.setDateApplied(instant36);
        java.time.Instant instant40 = qualifier39.getDateApplied();
        locationDatumPeriodBase27.ValidFrom = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription42 = timeSeriesDescription24.setLastModified(instant40);
        ratingCurveListServiceRequest19.QueryTo = instant40;
        getExportSpecimens0.StartModificationTime = instant40;
        java.time.Instant instant45 = getExportSpecimens0.EndModificationTime;
        java.util.List<java.lang.String> strList46 = null;
        getExportSpecimens0.FieldVisitId = strList46;
        java.lang.Integer int48 = getExportSpecimens0.getLimit();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(timeSeriesDescription24);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(qualifier39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(timeSeriesDescription42);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNull(int48);
    }

    @Test
    public void test26947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26947");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval4 = standardSimple0.getApplicabilityRange();
        standardSimple0.Name = "/AQUARIUS/Provisioning/v1";
        java.lang.String str7 = standardSimple0.Description;
        java.lang.String str8 = standardSimple0.CustomId;
        standardSimple0.Active = false;
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test26948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26948");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics0.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics0.P50 = 1.0d;
        java.lang.String str5 = observationStatistics0.ObservedPropertyId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = observationStatistics0.setSamplingLocationId("/AQUARIUS/Provisioning/v1");
        observationStatistics0.SamplingLocationId = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.Double double10 = observationStatistics0.P25;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(observationStatistics7);
        org.junit.Assert.assertNull(double10);
    }

    @Test
    public void test26949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26949");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        gapToleranceOperation0.User = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        gapToleranceOperation0.ToleranceInMinutes = 100.0d;
        java.time.Instant instant5 = gapToleranceOperation0.getDateAppliedUtc();
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test26950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26950");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str1 = postLocationAttachment0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postLocationAttachment0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment4 = postLocationAttachment0.setFile(iHttpFile3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment6 = postLocationAttachment4.setFile(iHttpFile5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList7 = postLocationAttachment6.Tags;
        java.lang.Object obj8 = postLocationAttachment6.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNotNull(postLocationAttachment4);
        org.junit.Assert.assertNotNull(postLocationAttachment6);
        org.junit.Assert.assertNull(applyTagRequestList7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostLocationAttachmentResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostLocationAttachmentResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostLocationAttachmentResponse");
    }

    @Test
    public void test26951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26951");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation73.setName("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList76 = postSamplingLocation73.Standards;
        postSamplingLocation73.Latitude = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation80 = postSamplingLocation73.setHorizontalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation82 = postSamplingLocation80.setLatitude("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation84 = postSamplingLocation82.setVerticalDatum("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone85 = postSamplingLocation82.TimeZone;
        postSamplingLocation82.HorizontalDatum = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNull(standardSimpleList76);
        org.junit.Assert.assertNotNull(postSamplingLocation80);
        org.junit.Assert.assertNotNull(postSamplingLocation82);
        org.junit.Assert.assertNotNull(postSamplingLocation84);
        org.junit.Assert.assertNull(timeZone85);
    }

    @Test
    public void test26952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26952");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTags getTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTags();
        java.lang.Object obj1 = getTags0.getResponseType();
        java.lang.Object obj2 = getTags0.getResponseType();
        java.lang.Object obj3 = getTags0.getResponseType();
        java.lang.Object obj4 = getTags0.getResponseType();
        java.lang.Object obj5 = getTags0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TagsResponse");
    }

    @Test
    public void test26953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26953");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        java.lang.String str1 = report0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int3 = getFieldVisits2.Limit;
        java.util.List<java.lang.String> strList4 = getFieldVisits2.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str8 = getObservationsV2_7.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        getObservationsV2_7.ProjectIds = strList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_16 = putBulkEditResultGradesV2_6.setTaxonIds((java.util.List<java.lang.String>) strList12);
        java.lang.Double double17 = putBulkEditResultGradesV2_16.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        putBulkEditResultGradesV2_16.ActivityTypes = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_46 = getGroupedObservationsV2_5.setIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits47 = getFieldVisits2.setIds((java.util.List<java.lang.String>) strList42);
        report0.SourceTimeSeriesUniqueIds = strList42;
        report0.IsTransient = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_16);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_46);
        org.junit.Assert.assertNotNull(getFieldVisits47);
    }

    @Test
    public void test26954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26954");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.lang.String str3 = getObservationExportIIV2_0.getSpecimenName();
        java.time.Instant instant4 = getObservationExportIIV2_0.StartResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_6 = getObservationExportIIV2_0.setImportHistoryEventId("hi!");
        java.util.List<java.lang.String> strList7 = getObservationExportIIV2_0.getCollectionMethodIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test26955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26955");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str1 = shippingContainer0.TrackingId;
        shippingContainer0.TrackingId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str4 = shippingContainer0.TrackingId;
        java.lang.String str5 = shippingContainer0.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str4, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26956");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation0.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation35 = postSamplingLocation33.setHorizontalDatum("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType36 = postSamplingLocation35.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = postSamplingLocation35.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList38 = postSamplingLocation35.ImportHistoryEventSimples;
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(postSamplingLocation35);
        org.junit.Assert.assertNull(locationType36);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNull(importHistoryEventSimpleList38);
    }

    @Test
    public void test26957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26957");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity0.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType3 = activity0.getType();
        org.junit.Assert.assertNull(activityType3);
    }

    @Test
    public void test26958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26958");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj1 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod3 = importItemAnalysisMethod0.setRowId("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList4 = importItemAnalysisMethod3.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod6 = importItemAnalysisMethod3.setExistingItem(analysisMethod5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier36 = putQualifier34.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        getObservationsV2_38.SpecimenIds = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        getObservationsV2_38.QualityControlTypes = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest37.setTimeSeriesUniqueIds(strList49);
        putQualifier34.GroupIdentifiers = strList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_13.setTaxonIds((java.util.List<java.lang.String>) strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod56 = importItemAnalysisMethod3.setFields((java.util.List<java.lang.String>) strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList58 = importItemObject57.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList60, importChangeItemArray59);
        importItemObject57.ItemComparison = importChangeItemList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject71 = importItemObject57.setExistingItem((java.lang.Object) putLocationTags63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser74 = openIdConnectUser72.setIdentifier("");
        java.lang.Boolean boolean75 = openIdConnectUser74.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject76 = importItemObject57.setErrors((java.lang.Object) openIdConnectUser74);
        importItemObject57.Input = "MaxInstant";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList79 = importItemObject57.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod80 = importItemAnalysisMethod56.setItemComparison(importChangeItemList79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod82 = importItemAnalysisMethod80.setRowId("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(putQualifier36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(importChangeItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(importItemObject71);
        org.junit.Assert.assertNotNull(openIdConnectUser74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertNotNull(importItemObject76);
        org.junit.Assert.assertNotNull(importChangeItemList79);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod80);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod82);
    }

    @Test
    public void test26959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26959");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity5.setFirmwareVersion("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.Boolean boolean8 = pointVelocityDischargeActivity7.isSuspensionCoefficientUsed();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test26960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26960");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer();
        java.lang.String str1 = putShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer3 = putShippingContainer0.setCustomId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = putShippingContainer0.getAuditAttributes();
        java.lang.String str5 = putShippingContainer0.Comment;
        putShippingContainer0.Id = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putShippingContainer3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26961");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser2 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser4 = postActiveDirectoryUser0.setUserPrincipalName("MinInstant");
        java.lang.String str5 = postActiveDirectoryUser0.getLastName();
        java.lang.String str6 = postActiveDirectoryUser0.ActiveDirectorySid;
        org.junit.Assert.assertNotNull(postActiveDirectoryUser2);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test26962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26962");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup getUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup();
        getUnitGroup0.UniqueId = "MaxInstant";
        java.lang.Object obj3 = getUnitGroup0.getResponseType();
        getUnitGroup0.UniqueId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup getUnitGroup7 = getUnitGroup0.setUniqueId("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup getUnitGroup9 = getUnitGroup7.setUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.Object obj10 = getUnitGroup9.getResponseType();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertNotNull(getUnitGroup7);
        org.junit.Assert.assertNotNull(getUnitGroup9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
    }

    @Test
    public void test26963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26963");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile1 = null;
        postReportPlugin0.File = iHttpFile1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin4 = postReportPlugin0.setFile(iHttpFile3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile5 = postReportPlugin0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin7 = postReportPlugin0.setFolderName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str8 = postReportPlugin7.FolderName;
        java.lang.String str9 = postReportPlugin7.FolderName;
        org.junit.Assert.assertNotNull(postReportPlugin4);
        org.junit.Assert.assertNull(iHttpFile5);
        org.junit.Assert.assertNotNull(postReportPlugin7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str8, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str9, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
    }

    @Test
    public void test26964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26964");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen0.Name = "-PT87591240H";
        java.lang.Boolean boolean3 = putSpecimen0.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType6 = putSpecimen0.Preservative;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup7 = null;
        putSpecimen0.AnalyticalGroup = analyticalGroup7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = specimenTemplate9.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate11.Preservative = preservativeType12;
        specimenTemplate11.Name = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = specimenTemplate16.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate18.Preservative = preservativeType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = specimenTemplate18.setPreservative(preservativeType21);
        specimenTemplate11.Preservative = preservativeType21;
        putSpecimen0.Preservative = preservativeType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport27 = putLabReport25.setDateReceived(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory28.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str31 = laboratory28.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = laboratory28.getAuditAttributes();
        java.lang.String str33 = laboratory28.getPointOfContact();
        laboratory28.PointOfContact = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport36 = putLabReport25.setLaboratory(laboratory28);
        java.lang.String str37 = putLabReport36.CaseNarrative;
        java.lang.String str38 = putLabReport36.CaseNarrative;
        java.lang.String str39 = putLabReport36.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str41 = labResultDetails40.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails40.setLaboratory(laboratory42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory44.Id = "MaxInstant";
        java.lang.String str47 = laboratory44.PhoneNumber;
        laboratory44.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str50 = laboratory44.PointOfContact;
        laboratory44.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = labResultDetails40.setLaboratory(laboratory44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory55 = laboratory44.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport56 = putLabReport36.setLaboratory(laboratory44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen57 = putSpecimen0.setLaboratory(laboratory44);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNull(preservativeType6);
        org.junit.Assert.assertNotNull(specimenTemplate11);
        org.junit.Assert.assertTrue("'" + preservativeType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(specimenTemplate18);
        org.junit.Assert.assertTrue("'" + preservativeType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertTrue("'" + preservativeType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNotNull(specimenTemplate22);
        org.junit.Assert.assertNotNull(putLabReport27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(putLabReport36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(labResultDetails53);
        org.junit.Assert.assertNotNull(laboratory55);
        org.junit.Assert.assertNotNull(putLabReport56);
        org.junit.Assert.assertNotNull(putSpecimen57);
    }

    @Test
    public void test26965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26965");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setPluralName("");
        unit0.SingularName = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.lang.String str5 = unit0.getUniqueId();
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test26966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26966");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = trendLineAnalysis0.getLowerQuartileOfResiduals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement13 = pointVelocityDischargeActivity9.DischargeChannelMeasurement;
        pointVelocityDischargeActivity9.FirmwareVersion = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = pointVelocityDischargeActivity9.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str18 = pointVelocityDischargeActivity17.getModel();
        java.lang.String str19 = pointVelocityDischargeActivity17.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList20 = pointVelocityDischargeActivity17.Verticals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        pointVelocityDischargeActivity17.DistanceToMeter = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = vertical23.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical23.VerticalType = verticalType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation29 = velocityObservation27.setDeploymentMethod(deploymentMethodType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation32 = velocityObservation30.setDeploymentMethod(deploymentMethodType31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList34, velocityDepthObservationArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation36 = velocityObservation32.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation37 = velocityObservation27.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical38 = vertical23.setVelocityObservation(velocityObservation27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical40 = vertical38.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity17.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        datumConvertedQuantityWithDisplay39.TargetDatum = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity44 = pointVelocityDischargeActivity9.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis45 = trendLineAnalysis0.setMedianOfResiduals((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = trendLineAnalysis0.getStandardDeviation();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(dischargeChannelMeasurement13);
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(verticalList20);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertTrue("'" + verticalType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation29);
        org.junit.Assert.assertTrue("'" + deploymentMethodType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation32);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(velocityObservation36);
        org.junit.Assert.assertNotNull(velocityObservation37);
        org.junit.Assert.assertNotNull(vertical38);
        org.junit.Assert.assertNotNull(vertical40);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity44);
        org.junit.Assert.assertNotNull(trendLineAnalysis45);
        org.junit.Assert.assertNull(doubleWithDisplay46);
    }

    @Test
    public void test26967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26967");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange();
        java.lang.String str1 = metricRange0.getId();
        java.lang.Integer int2 = metricRange0.ResultingScore;
        java.lang.String str3 = metricRange0.Comment;
        java.lang.Integer int4 = metricRange0.ResultingScore;
        metricRange0.UpperLimitValue = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange8 = metricRange0.setLowerLimitValue((java.lang.Integer) 0);
        metricRange8.LowerLimitValue = 5;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(metricRange8);
    }

    @Test
    public void test26968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26968");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        labInstructionTemplate0.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str5 = postExtendedAttribute4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType6 = postExtendedAttribute4.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = samplingPlanPlannedActivity7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity9.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = samplingPlanPlannedActivity9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute15 = postExtendedAttribute4.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate16 = labInstructionTemplate0.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate18 = labInstructionTemplate0.setAnalysisComment("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject21 = postProject19.setAuditAttributes(auditAttributes20);
        java.time.OffsetDateTime offsetDateTime22 = null;
        postProject19.StartTime = offsetDateTime22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity24.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = postActivity24.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject31 = postProject19.setAuditAttributes(auditAttributes29);
        java.lang.String str32 = postProject19.ApprovalAgency;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit33.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str36 = postFieldVisit33.Participants;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = plannedFieldResult37.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails41 = labResultDetails39.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails41.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult44 = plannedFieldResult37.setAuditAttributes(auditAttributes42);
        postFieldVisit33.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject46 = postProject19.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate47 = labInstructionTemplate18.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty48 = labInstructionTemplate47.ObservedProperty;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(dataType6);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(postExtendedAttribute15);
        org.junit.Assert.assertNotNull(labInstructionTemplate16);
        org.junit.Assert.assertNotNull(labInstructionTemplate18);
        org.junit.Assert.assertNotNull(postProject21);
        org.junit.Assert.assertNotNull(postActivity28);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(postProject31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str36, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNotNull(labResultDetails41);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNotNull(plannedFieldResult44);
        org.junit.Assert.assertNotNull(postProject46);
        org.junit.Assert.assertNotNull(labInstructionTemplate47);
        org.junit.Assert.assertNull(observedProperty48);
    }

    @Test
    public void test26969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26969");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = putObservationV2_0.getNumericResult();
        java.lang.String str4 = putObservationV2_0.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation5.setPlannedFieldResult(plannedFieldResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = null;
        observation7.LabInstruction = labInstruction8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod10 = observation7.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = null;
        observation7.NullMeasureQualifier = nullMeasureQualifier11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation7.DataClassification = dataClassificationType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_15 = putObservationV2_0.setDataClassification(dataClassificationType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = putObservationV2_0.LabResultDetails;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(numericResult3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(collectionMethod10);
        org.junit.Assert.assertTrue("'" + dataClassificationType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNotNull(putObservationV2_15);
        org.junit.Assert.assertNull(labResultDetails16);
    }

    @Test
    public void test26970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26970");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = dischargeSummary22.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary22.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = dischargeSummary22.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = doubleWithDisplay26.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary22.setDurationInHours(doubleWithDisplay26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity30 = adcpDischargeActivity0.setBottomEstimateExponent(doubleWithDisplay26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity32 = adcpDischargeActivity30.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay33 = adcpDischargeActivity32.Area;
        adcpDischargeActivity32.Model = "http://MaxDurationhttp/json/reply/Integer";
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(doubleWithDisplay25);
        org.junit.Assert.assertNotNull(doubleWithDisplay28);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(adcpDischargeActivity30);
        org.junit.Assert.assertNotNull(adcpDischargeActivity32);
        org.junit.Assert.assertNull(quantityWithDisplay33);
    }

    @Test
    public void test26971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26971");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal2.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue5 = categoricalResult4.getFixedValue();
        observationMinimal2.CategoricalResult = categoricalResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult7.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue10 = categoricalResult7.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult7.NullMeasureQualifier = nullMeasureQualifier11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult13 = categoricalResult4.setNullMeasureQualifier(nullMeasureQualifier11);
        java.lang.String str14 = nullMeasureQualifier11.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier16 = nullMeasureQualifier11.setCustomId("https");
        nullMeasureQualifier16.Name = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(categoricalValue5);
        org.junit.Assert.assertNull(categoricalValue10);
        org.junit.Assert.assertNotNull(categoricalResult13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nullMeasureQualifier16);
    }

    @Test
    public void test26972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26972");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = activityWithDetails0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium6 = activityWithDetails0.Medium;
        java.lang.String str7 = activityWithDetails0.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime9 = putSchedule8.StartDate;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = putSchedule8.setEndDate(offsetDateTime10);
        java.lang.Integer int12 = putSchedule8.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = putSchedule8.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty17 = postObservedProperty15.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType18 = postObservedProperty15.getAnalysisType();
        postObservedProperty15.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = postLabAnalysisMethod22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList26, observedPropertyArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod28 = postLabAnalysisMethod24.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType30 = analyticalGroup29.getType();
        analyticalGroup29.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = null;
        analyticalGroupItem39.AnalysisMethod = analysisMethod42;
        java.lang.String str44 = analyticalGroupItem39.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = null;
        analyticalGroupItem50.AnalysisMethod = analysisMethod53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem34, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56, analyticalGroupItemArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = analyticalGroup33.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56);
        analyticalGroup29.AnalyticalGroupItems = analyticalGroupItemList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup29.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod62 = postLabAnalysisMethod28.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty63 = postObservedProperty15.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule64 = putSchedule8.setAuditAttributes(auditAttributes60);
        activityWithDetails0.AuditAttributes = auditAttributes60;
        auditAttributes60.CreationUserProfileId = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(extendedAttributeList5);
        org.junit.Assert.assertNull(medium6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(putSchedule11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM + "'", samplingLocationGroupSelectionType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.RANDOM));
        org.junit.Assert.assertNotNull(putSchedule14);
        org.junit.Assert.assertNotNull(postObservedProperty17);
        org.junit.Assert.assertNull(analysisType18);
        org.junit.Assert.assertNull(quantity21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod24);
        org.junit.Assert.assertNotNull(observedPropertyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod28);
        org.junit.Assert.assertNull(analyticalGroupType30);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(analyticalGroup58);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod62);
        org.junit.Assert.assertNotNull(postObservedProperty63);
        org.junit.Assert.assertNotNull(putSchedule64);
    }

    @Test
    public void test26973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26973");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.String str8 = timeAlignedPoint0.Qualifiers9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setGradeName10("");
        java.lang.String str11 = timeAlignedPoint10.getApprovalName9();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint10.setApprovalName2("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint10.setGradeCode9((java.lang.Long) 100L);
        java.lang.Long long16 = timeAlignedPoint10.getGradeCode8();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNull(long16);
    }

    @Test
    public void test26974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26974");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag2 = deleteTag0.setId("ZZZZZ");
        java.lang.String str3 = deleteTag0.Id;
        java.lang.String str4 = deleteTag0.getId();
        org.junit.Assert.assertNotNull(deleteTag2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZZZZZ" + "'", str3, "ZZZZZ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZZZZZ" + "'", str4, "ZZZZZ");
    }

    @Test
    public void test26975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26975");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList2, timeAlignedPointArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse4 = timeAlignedDataServiceResponse0.setPoints(timeAlignedPointList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = correctionOperation5.setType(correctionType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse8 = timeAlignedDataServiceResponse0.setTimeRange((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange) correctionOperation7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse10 = timeAlignedDataServiceResponse0.setNumPoints((java.lang.Integer) 4);
        org.junit.Assert.assertNotNull(timeAlignedPointArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse4);
        org.junit.Assert.assertTrue("'" + correctionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation7);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse8);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse10);
    }

    @Test
    public void test26976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26976");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum();
        java.lang.String str1 = postBaseStandardReferenceDatum0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum3 = postBaseStandardReferenceDatum0.setComments("hi!");
        java.lang.String str4 = postBaseStandardReferenceDatum0.Comments;
        postBaseStandardReferenceDatum0.Uncertainty = 10.0d;
        postBaseStandardReferenceDatum0.Comments = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatum3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test26977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26977");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        attachmentRepresentation5.Resolution = "/AQUARIUS/Provisioning/v1";
        attachmentRepresentation5.Resolution = "MaxDuration";
        java.lang.String str10 = attachmentRepresentation5.Latitude;
        java.lang.String str11 = attachmentRepresentation5.Resolution;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MaxDuration" + "'", str11, "MaxDuration");
    }

    @Test
    public void test26978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26978");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean1 = roleFlattened0.CanRemoveFieldVisits;
        roleFlattened0.Name = "MaxInstant";
        java.lang.String str4 = roleFlattened0.UniqueId;
        java.lang.Boolean boolean5 = roleFlattened0.CanAddAppendConfigurations;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test26979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26979");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject3 = postProject1.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate6 = labInstructionTemplate4.setAuditAttributes(auditAttributes5);
        postProject1.AuditAttributes = auditAttributes5;
        putLaboratory0.AuditAttributes = auditAttributes5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory10 = putLaboratory0.setCustomId("9999-12-31T23:59:59.999Z");
        putLaboratory0.PointOfContact = "http://MaxDurationhttp";
        org.junit.Assert.assertNotNull(postProject3);
        org.junit.Assert.assertNotNull(labInstructionTemplate6);
        org.junit.Assert.assertNotNull(putLaboratory10);
    }

    @Test
    public void test26980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26980");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum();
        java.lang.Double double1 = putBaseStandardReferenceDatum0.getUncertainty();
        putBaseStandardReferenceDatum0.Comments = "";
        putBaseStandardReferenceDatum0.Comments = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNull(double1);
    }

    @Test
    public void test26981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26981");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        java.lang.Boolean boolean84 = locationDataServiceResponse83.getIsExternalLocation();
        java.lang.Double double85 = locationDataServiceResponse83.Longitude;
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNull(boolean84);
        org.junit.Assert.assertNull(double85);
    }

    @Test
    public void test26982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26982");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue2 = extendedAttributeValue0.setValue("http");
        java.lang.String str3 = extendedAttributeValue0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue5 = extendedAttributeValue0.setUniqueId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        extendedAttributeValue0.ColumnIdentifier = "http://MaxDurationhttp";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue9 = extendedAttributeValue0.setValue("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue11 = extendedAttributeValue9.setValue("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        extendedAttributeValue11.ColumnIdentifier = "";
        java.lang.String str14 = extendedAttributeValue11.UniqueId;
        org.junit.Assert.assertNotNull(extendedAttributeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http" + "'", str3, "http");
        org.junit.Assert.assertNotNull(extendedAttributeValue5);
        org.junit.Assert.assertNotNull(extendedAttributeValue9);
        org.junit.Assert.assertNotNull(extendedAttributeValue11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str14, "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test26983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26983");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str3 = attachment2.getUrl();
        java.lang.String str4 = attachment2.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double6 = putBulkEditResultGradesV2_5.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray17 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = putLocationTags13.setTagUniqueIds(strList18);
        getObservationsV2_7.QualityControlTypes = strList18;
        java.util.List<java.lang.String> strList22 = getObservationsV2_7.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList23 = getObservationsV2_7.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType24 = getObservationsV2_7.FieldResultType;
        java.time.Instant instant25 = getObservationsV2_7.getEndObservedTime();
        java.lang.String str26 = getObservationsV2_7.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getObservationsV2_7.ProjectIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_37 = putBulkEditResultGradesV2_5.setSearch((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_39 = putBulkEditResultGradesV2_37.setLabResultLaboratoryIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType41 = calibrationCheck40.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay42 = calibrationCheck40.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = dischargeSummary44.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        dischargeSummary44.MeasurementTime = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse43.setNextToken(instant48);
        java.time.Instant instant52 = locationDescriptionListServiceResponse43.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck53 = calibrationCheck40.setTime(instant52);
        putBulkEditResultGradesV2_39.StartResultTime = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment55 = attachment2.setDateUploaded(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest0.setQueryFrom(instant52);
        java.lang.Boolean boolean57 = timeAlignedDataServiceRequest56.ApplyRounding;
        java.util.ArrayList<java.lang.String> strList58 = timeAlignedDataServiceRequest56.getTimeSeriesUniqueIds();
        java.lang.Double double59 = timeAlignedDataServiceRequest56.getUtcOffset();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(putLocationTags20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(fieldResultType24);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_37);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_39);
        org.junit.Assert.assertNull(calibrationCheckType41);
        org.junit.Assert.assertNull(doubleWithDisplay42);
        org.junit.Assert.assertNotNull(dischargeSummary46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(calibrationCheck53);
        org.junit.Assert.assertNotNull(attachment55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(double59);
    }

    @Test
    public void test26984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26984");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition();
        java.lang.String str1 = nameTagDefinition0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition nameTagDefinition3 = nameTagDefinition0.setName("MinDuration");
        java.util.ArrayList<java.lang.String> strList4 = nameTagDefinition0.PickListValues;
        nameTagDefinition0.Name = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str7 = nameTagDefinition0.Name;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(nameTagDefinition3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str7, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test26985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26985");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportHistory getLabReportHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportHistory();
        java.lang.String str1 = getLabReportHistory0.Id;
        java.lang.Object obj2 = getLabReportHistory0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test26986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26986");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest0.ApplyShifts = true;
        java.time.Instant instant3 = ratingModelOutputValuesServiceRequest0.getEffectiveTime();
        java.lang.String str4 = ratingModelOutputValuesServiceRequest0.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest6 = ratingModelOutputValuesServiceRequest0.setApplyShifts((java.lang.Boolean) false);
        java.lang.String str7 = ratingModelOutputValuesServiceRequest0.RatingModelIdentifier;
        java.time.Instant instant8 = ratingModelOutputValuesServiceRequest0.EffectiveTime;
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test26987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26987");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = observation7.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation7.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade12 = observation11.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        observation11.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup27 = postObservedProperty26.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        postObservedProperty26.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = postObservedProperty26.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = quantity32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = observedProperty21.setUpperLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = observedProperty34.UnitGroup;
        observation11.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = observedProperty34.setCustomId("/AQUARIUS");
        observationStandard0.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity40 = observationStandard0.getResultLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = observationStandard0.getResultLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus43 = observationNestedInSpecimen42.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus44 = observationNestedInSpecimen42.getResultStatus();
        java.time.OffsetDateTime offsetDateTime45 = null;
        observationNestedInSpecimen42.ObservedTime = offsetDateTime45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen48 = observationNestedInSpecimen42.setObservedProperty(observedProperty47);
        java.lang.String str49 = observedProperty47.Description;
        observationStandard0.ObservedProperty = observedProperty47;
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(resultGrade12);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(unitGroup27);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNotNull(observedProperty34);
        org.junit.Assert.assertNull(unitGroup35);
        org.junit.Assert.assertNotNull(observedProperty38);
        org.junit.Assert.assertNull(quantity40);
        org.junit.Assert.assertNull(quantity41);
        org.junit.Assert.assertNull(resultStatus43);
        org.junit.Assert.assertNull(resultStatus44);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test26988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26988");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList5 = postObservationV2_2.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList7 = fieldVisit6.Attachments;
        java.time.OffsetDateTime offsetDateTime8 = null;
        fieldVisit6.EndTime = offsetDateTime8;
        java.lang.String str10 = fieldVisit6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit12 = fieldVisit6.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple13 = fieldVisit6.Project;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList14 = fieldVisit6.getAttachments();
        java.lang.String str15 = fieldVisit6.Notes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_2.setFieldVisit(fieldVisit6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_18 = postObservationV2_2.setId("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        observedProperty21.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str29 = putLabReport28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon30.ItisUrl = "MinInstant";
        java.lang.String str33 = postTaxon30.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon35 = postTaxon30.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon37 = postTaxon35.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon38.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str41 = putTaxon38.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = specimenTemplate43.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate45.Preservative = preservativeType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = labResultDetails48.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails52 = labResultDetails50.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate53 = specimenTemplate45.setAuditAttributes(auditAttributes51);
        extendedAttributeDefinition42.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon55 = putTaxon38.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon56.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str59 = putTaxon56.getComment();
        putTaxon56.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType63 = postObservedProperty62.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation65.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation65.setCategoricalResult(categoricalResult68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71, importHistoryEventSimpleArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation73 = observation65.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71);
        observedProperty64.ImportHistoryEventSimples = importHistoryEventSimpleList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty75 = postObservedProperty62.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon76 = putTaxon56.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon77 = putTaxon55.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon78 = postTaxon35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList71);
        postTaxon35.ScientificName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon82 = postTaxon35.setItisComment("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList83 = postTaxon82.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport84 = putLabReport28.setImportHistoryEventSimples(importHistoryEventSimpleList83);
        observedProperty21.ImportHistoryEventSimples = importHistoryEventSimpleList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_86 = postObservationV2_2.setImportHistoryEventSimples(importHistoryEventSimpleList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity87 = postObservationV2_86.Activity;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(importHistoryEventSimpleList5);
        org.junit.Assert.assertNull(domainObjectAttachmentList7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(fieldVisit12);
        org.junit.Assert.assertNull(projectSimple13);
        org.junit.Assert.assertNull(domainObjectAttachmentList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str15, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNotNull(postObservationV2_18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(postTaxon35);
        org.junit.Assert.assertNotNull(postTaxon37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertTrue("'" + preservativeType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails50);
        org.junit.Assert.assertNotNull(labResultDetails52);
        org.junit.Assert.assertNotNull(specimenTemplate53);
        org.junit.Assert.assertNotNull(putTaxon55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(analysisType63);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(observation73);
        org.junit.Assert.assertNotNull(postObservedProperty75);
        org.junit.Assert.assertNotNull(putTaxon76);
        org.junit.Assert.assertNotNull(putTaxon77);
        org.junit.Assert.assertNotNull(postTaxon78);
        org.junit.Assert.assertNotNull(postTaxon82);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList83);
        org.junit.Assert.assertNotNull(putLabReport84);
        org.junit.Assert.assertNotNull(postObservationV2_86);
        org.junit.Assert.assertNull(activity87);
    }

    @Test
    public void test26989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26989");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        java.lang.String str18 = timeSeries0.ComputationPeriodIdentifier;
        java.lang.String str19 = timeSeries0.getLocationName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_21.setDataClassifications((java.util.List<java.lang.String>) strList25);
        java.util.List<java.lang.String> strList28 = getObservationsV2_21.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        getObservationsV2_21.StartResultTime = instant32;
        java.lang.String[] strArray44 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_21.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription50 = locationDescription48.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType52 = null;
        controlConditionActivity51.ControlCleaned = controlCleanedType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        controlConditionActivity51.DateCleaned = instant55;
        locationDescription50.LastModified = instant55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_47.setStartResultTime(instant55);
        getSpecimens20.After = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries61 = timeSeries0.setLastModifiedTime(instant55);
        timeSeries0.UtcOffset = "9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNotNull(locationDescription50);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNotNull(timeSeries61);
    }

    @Test
    public void test26990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = dischargeSummary1.setMeanGageHeightMethod("hi!");
        java.lang.String str4 = dischargeSummary3.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary3.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType8 = calibrationCheck7.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = calibrationCheck7.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck20 = calibrationCheck7.setTime(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary3.setMeasurementTime(instant19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_22 = getChartDataV2_0.setStartResultTime(instant19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports23.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.SamplingContextTagIds;
        java.time.Instant instant28 = getObservationsV2_26.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_29.setDataClassifications((java.util.List<java.lang.String>) strList33);
        getObservationsV2_26.ResultStatuses = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports37 = getLabReports23.setSearch((java.util.List<java.lang.String>) strList33);
        getChartDataV2_0.AnalysisMethodIds = strList33;
        getChartDataV2_0.Sort = "MinInstant";
        java.util.List<java.lang.String> strList41 = getChartDataV2_0.getIds();
        java.util.List<java.lang.String> strList42 = getChartDataV2_0.ResultStatuses;
        getChartDataV2_0.DepthValue = 0.0d;
        org.junit.Assert.assertNotNull(dischargeSummary3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNull(calibrationCheckType8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(calibrationCheck20);
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNotNull(getChartDataV2_22);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(getLabReports37);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
    }

    @Test
    public void test26991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26991");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType1 = null;
        uncertainty0.UncertaintyType = uncertaintyType1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = uncertainty0.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty4.QualitativeUncertainty = qualitativeUncertaintyType5;
        uncertainty0.QualitativeUncertainty = qualitativeUncertaintyType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty9 = uncertainty0.setQualitativeUncertainty(qualitativeUncertaintyType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = uncertainty0.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType11 = uncertainty0.QualitativeUncertainty;
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
    }

    @Test
    public void test26992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26992");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest4 = timeSeriesDataCorrectedServiceRequest0.setUtcOffset((java.lang.Double) 100.0d);
        java.time.Instant instant5 = timeSeriesDataCorrectedServiceRequest4.getQueryFrom();
        java.lang.String str6 = timeSeriesDataCorrectedServiceRequest4.getTimeSeriesUniqueId();
        java.time.Instant instant7 = timeSeriesDataCorrectedServiceRequest4.QueryFrom;
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(instant7);
    }

    @Test
    public void test26993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26993");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str4 = referencePointPeriod0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod8 = referencePointPeriod0.setElevation((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod10 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) false);
        java.lang.String str11 = referencePointPeriod0.Unit;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNotNull(referencePointPeriod8);
        org.junit.Assert.assertNotNull(referencePointPeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str11, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test26994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26994");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        putReportPlugin0.UniqueId = "hi!";
        java.lang.Boolean boolean3 = putReportPlugin0.getIsEnabled();
        putReportPlugin0.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.Boolean boolean6 = putReportPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin8 = putReportPlugin0.setIsEnabled((java.lang.Boolean) true);
        java.lang.Object obj9 = putReportPlugin0.getResponseType();
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(putReportPlugin8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
    }

    @Test
    public void test26995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26995");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activity0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = putActivity5.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity5.setEndTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = device9.setType("/AQUARIUS/Acquisition/v2");
        putActivity5.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = device11.setDescription("9999-12-31T23:59:59.999Z");
        activity0.Device = device14;
        java.lang.String str16 = activity0.getLoggerFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity17.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity17.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity23 = null;
        putActivity22.PlannedActivity = plannedActivity23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity25.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = postActivity25.setPlannedActivity(plannedActivity28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str31 = samplingContextTag30.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = samplingContextTag30.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag33.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str39 = samplingContextTag38.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = null;
        samplingContextTag38.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str43 = samplingContextTag42.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = samplingContextTag42.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag35, samplingContextTag36, samplingContextTag38, samplingContextTag45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList47, samplingContextTagArray46);
        postActivity25.SamplingContextTags = samplingContextTagList47;
        putActivity22.SamplingContextTags = samplingContextTagList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity51 = postActivity21.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList47);
        activity0.SamplingContextTags = samplingContextTagList47;
        java.time.OffsetDateTime offsetDateTime53 = null;
        activity0.EndTime = offsetDateTime53;
        java.lang.String str55 = activity0.getLoggerFileName();
        java.lang.Boolean boolean56 = activity0.Refreshed;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod57 = activity0.getCollectionMethod();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(plannedActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(device11);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "'.'SSSSSSS" + "'", str16, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNotNull(postActivity29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(samplingContextTag33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingContextTag45);
        org.junit.Assert.assertNotNull(samplingContextTagArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(postActivity51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "'.'SSSSSSS" + "'", str55, "'.'SSSSSSS");
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNull(collectionMethod57);
    }

    @Test
    public void test26996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26996");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_2.DataClassification = dataClassificationType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails7.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails7.setAuditAttributes(auditAttributes12);
        postObservationV2_2.LabResultDetails = labResultDetails13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = postObservationV2_2.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str17 = analysisMethodSimple16.getId();
        java.lang.String str18 = analysisMethodSimple16.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_19 = postObservationV2_2.setAnalysisMethod(analysisMethodSimple16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation22 = postSamplingLocation20.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation24 = postSamplingLocation20.setAddress(address23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType26 = null;
        putObservedProperty25.ResultType = resultType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList29 = postAnalysisMethod28.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod31 = postAnalysisMethod28.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod33 = postAnalysisMethod28.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = postObservedProperty34.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37, importHistoryEventSimpleArray36);
        postObservedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod40 = postAnalysisMethod28.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty41 = putObservedProperty25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation42 = postSamplingLocation24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_43 = postObservationV2_2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        postObservationV2_43.MediumSubdivision = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        postObservationV2_43.Comment = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str49 = labInstructionTemplate48.HoldingTime;
        labInstructionTemplate48.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str53 = postExtendedAttribute52.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType54 = postExtendedAttribute52.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = samplingPlanPlannedActivity57.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute63 = postExtendedAttribute52.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate64 = labInstructionTemplate48.setAuditAttributes(auditAttributes62);
        postObservationV2_43.AuditAttributes = auditAttributes62;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + dataClassificationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNull(labInstruction15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postObservationV2_19);
        org.junit.Assert.assertNotNull(postSamplingLocation22);
        org.junit.Assert.assertNotNull(postSamplingLocation24);
        org.junit.Assert.assertNull(importHistoryEventSimpleList29);
        org.junit.Assert.assertNotNull(postAnalysisMethod31);
        org.junit.Assert.assertNotNull(postAnalysisMethod33);
        org.junit.Assert.assertNull(unitGroup35);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod40);
        org.junit.Assert.assertNotNull(putObservedProperty41);
        org.junit.Assert.assertNotNull(postSamplingLocation42);
        org.junit.Assert.assertNotNull(postObservationV2_43);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(dataType54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(postExtendedAttribute63);
        org.junit.Assert.assertNotNull(labInstructionTemplate64);
    }

    @Test
    public void test26997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26997");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = locationGroupType2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType5 = locationGroupType2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup0.LocationGroupType = locationGroupType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup8 = postSamplingLocationGroup0.setName("");
        java.lang.Object obj9 = postSamplingLocationGroup0.getResponseType();
        postSamplingLocationGroup0.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup13 = postSamplingLocationGroup0.setDescription("2021.8.9990");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(locationGroupType5);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertNotNull(postSamplingLocationGroup13);
    }

    @Test
    public void test26998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26998");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries3 = postCalculatedDerivedTimeSeries0.setMethod("'.'SSSSSSS");
        java.lang.String str4 = postCalculatedDerivedTimeSeries3.Method;
        java.lang.String str5 = postCalculatedDerivedTimeSeries3.SubLocationIdentifier;
        java.lang.String str6 = postCalculatedDerivedTimeSeries3.UtcOffset;
        java.lang.String str7 = postCalculatedDerivedTimeSeries3.SubLocationIdentifier;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test26999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test26999");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod2 = referencePointPeriod0.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection3 = referencePointPeriod2.MeasurementDirection;
        java.lang.String str4 = referencePointPeriod2.StandardIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod2.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        referencePointPeriod2.Uncertainty = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod10 = referencePointPeriod2.setUncertainty((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod12 = referencePointPeriod2.setUnit("");
        java.lang.String str13 = referencePointPeriod2.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean15 = referencePointPeriod14.IsMeasuredAgainstLocalAssumedDatum;
        java.lang.Double double16 = referencePointPeriod14.getElevation();
        java.lang.String str17 = referencePointPeriod14.Unit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        referencePointPeriod14.MeasurementDirection = measurementDirection18;
        referencePointPeriod2.MeasurementDirection = measurementDirection18;
        org.junit.Assert.assertNotNull(referencePointPeriod2);
        org.junit.Assert.assertNull(measurementDirection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str4, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNotNull(referencePointPeriod10);
        org.junit.Assert.assertNotNull(referencePointPeriod12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + measurementDirection18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
    }

    @Test
    public void test27000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest53.test27000");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        java.util.List<java.lang.String> strList18 = getObservationsV2_3.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_3.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList22 = fieldVisitDataServiceResponse21.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse24 = fieldVisitDataServiceResponse21.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        fieldVisitDataServiceResponse21.ResponseTime = instant28;
        getObservationsV2_3.StartObservedTime = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList33 = getSpecimens32.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType35 = putUserV2_34.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary38.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        dischargeSummary38.MeasurementTime = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse37.setNextToken(instant42);
        java.time.Instant instant46 = locationDescriptionListServiceResponse37.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities47 = getActivities36.setToStartTime(instant46);
        java.lang.String str48 = getActivities47.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList50 = getObservationsV2_49.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        getObservationsV2_51.QualityControlTypes = strList62;
        getObservationsV2_49.ResultGrades = strList62;
        getActivities47.Media = strList62;
        putUserV2_34.AccessGroups = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens69 = getSpecimens32.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList62);
        getObservationsV2_3.LabReportIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_71 = getChartDataV2_0.setAnalysisMethodIds((java.util.List<java.lang.String>) strList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_73 = getChartDataV2_0.setImportHistoryEventId("");
        getChartDataV2_0.DetectionCondition = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray80 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags83 = putLocationTags76.setTagUniqueIds(strList81);
        java.lang.Object obj84 = putLocationTags83.getResponseType();
        java.util.ArrayList<java.lang.String> strList85 = putLocationTags83.getTagUniqueIds();
        getChartDataV2_0.ResultGrades = strList85;
        java.util.List<java.lang.String> strList87 = getChartDataV2_0.getObservedPropertyIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList22);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(userType35);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(getActivities47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(getSpecimens69);
        org.junit.Assert.assertNotNull(getChartDataV2_71);
        org.junit.Assert.assertNotNull(getChartDataV2_73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(putLocationTags83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(strList87);
    }
}
