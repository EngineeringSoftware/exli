/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 03:28:06 GMT 2024
 */

package com.aquaticinformatics.aquarius.sdk.samples.serializers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer;
import com.github.javaparser.ast.expr.LongLiteralExpr;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.math.BigInteger;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class InstantDeserializer_ESTest extends InstantDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test01()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      
      String string0 = ",be}0k]";
      // Undeclared exception!
      try { 
        InstantDeserializer.parse(",be}0k]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000000)
  public void test02()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("CZ+0naf&@f]");
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      JsonDeserializationContext jsonDeserializationContext0 = mock(JsonDeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonPrimitive0, class0, jsonDeserializationContext0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000000)
  public void test03()  throws Throwable  {
      String string0 = "6qS201AdCP}bt3!fx}";
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("6qS201AdCP}bt3!fx}");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '6qS201AdCP}bt3!fx}' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test04()  throws Throwable  {
      String string0 = "T-";
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("T-");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'T00:00:00.000-' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test05()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      Instant instant0 = InstantDeserializer.parse("MinInstant");
      assertNotNull(instant0);
  }

  @Test(timeout = 4000000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("T+");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'T00:00:00.000+' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test07()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isEmpty());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonArray0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Array must have size 1, but has size 0
         //
         verifyException("com.google.gson.JsonArray", e);
      }
  }

  @Test(timeout = 4000000)
  public void test08()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        InstantDeserializer.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000000)
  public void test09()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonPrimitive0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse(",be}0k]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000000)
  public void test11()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      assertNotNull(jsonNull0);
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonArray());
      assertTrue(jsonNull0.isJsonNull());
      assertFalse(jsonNull0.isJsonPrimitive());
      
      Class<Void> class0 = Void.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      JsonDeserializationContext jsonDeserializationContext0 = mock(JsonDeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonNull0, class0, jsonDeserializationContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonNull
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000000)
  public void test12()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      Class<Void> class0 = Void.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("void", class0.toString());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize((JsonElement) null, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer", e);
      }
  }

  @Test(timeout = 4000000)
  public void test13()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonObject0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000000)
  public void test15()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("T-");
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      JsonDeserializationContext jsonDeserializationContext0 = mock(JsonDeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize(jsonPrimitive0, class0, jsonDeserializationContext0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'T00:00:00.000-' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test16()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      Instant instant0 = InstantDeserializer.parse("MaxInstant");
      assertNotNull(instant0);
      
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("ib*h#3");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'ib*h#3' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test17()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      BigInteger bigInteger0 = LongLiteralExpr.MAX_63_BIT_UNSIGNED_VALUE_AS_BIG_INTEGER;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      jsonObject0.addProperty("MinInstant", (Number) bigInteger0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      String string0 = "MinInstant";
      // Undeclared exception!
      try { 
        jsonObject0.getAsJsonObject("MinInstant");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.JsonPrimitive cannot be cast to com.google.gson.JsonObject
         //
         verifyException("com.google.gson.JsonObject", e);
      }
  }

  @Test(timeout = 4000000)
  public void test18()  throws Throwable  {
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("MinInstant");
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      Class<Void> class0 = Void.TYPE;
      assertNotNull(class0);
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      Instant instant0 = instantDeserializer0.deserialize(jsonPrimitive0, class0, (JsonDeserializationContext) null);
      assertNotNull(instant0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      System.setCurrentTimeMillis(184L);
      Instant instant1 = InstantDeserializer.parse("0001-01-01T00:00:00.000Z");
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = instantDeserializer0.deserialize(jsonPrimitive0, class0, (JsonDeserializationContext) null);
      assertNotSame(instant2, instant1);
      assertSame(instant2, instant0);
      assertNotNull(instant2);
      assertFalse(instant2.equals((Object)instant1));
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("T-");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'T00:00:00.000-' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstantDeserializer.parse("}\"{-:36");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '}\"{-:36' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000000)
  public void test21()  throws Throwable  {
      String string0 = "native ";
      Instant instant0 = InstantDeserializer.MinConcreteValue;
      assertNotNull(instant0);
      
      InstantDeserializer instantDeserializer0 = new InstantDeserializer();
      assertNotNull(instantDeserializer0);
      
      String string1 = "";
      Instant instant1 = InstantDeserializer.MaxConcreteValue;
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      JsonElement jsonElement0 = null;
      Instant instant2 = InstantDeserializer.parse("MinInstant");
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotNull(instant2);
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      JsonDeserializationContext jsonDeserializationContext0 = mock(JsonDeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instantDeserializer0.deserialize((JsonElement) null, class0, jsonDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer", e);
      }
  }
}
