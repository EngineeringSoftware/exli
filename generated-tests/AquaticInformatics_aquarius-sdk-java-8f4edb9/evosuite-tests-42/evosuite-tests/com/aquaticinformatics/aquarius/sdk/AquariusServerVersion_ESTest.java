/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 03:30:11 GMT 2024
 */

package com.aquaticinformatics.aquarius.sdk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aquaticinformatics.aquarius.sdk.AquariusServerVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class AquariusServerVersion_ESTest extends AquariusServerVersion_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test00()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("63");
      assertNotNull(aquariusServerVersion0);
      
      boolean boolean0 = aquariusServerVersion0.IsDeveloperBuild();
      assertFalse(boolean0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("9");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      boolean boolean1 = aquariusServerVersion1.IsLessThan(aquariusServerVersion0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = aquariusServerVersion0.IsLessThan(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        AquariusServerVersion.Create(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // apiVersion cannot be empty
         //
         verifyException("com.aquaticinformatics.aquarius.sdk.AquariusServerVersion", e);
      }
  }

  @Test(timeout = 4000000)
  public void test02()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      // Undeclared exception!
      try { 
        aquariusServerVersion0.IsLessThan((AquariusServerVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aquaticinformatics.aquarius.sdk.AquariusServerVersion", e);
      }
  }

  @Test(timeout = 4000000)
  public void test03()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion0);
      
      boolean boolean0 = aquariusServerVersion0.IsLessThan(aquariusServerVersion0);
      assertFalse(boolean0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion1.Compare(aquariusServerVersion0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals((-1), int0);
      
      boolean boolean1 = aquariusServerVersion0.IsDeveloperBuild();
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = aquariusServerVersion1.IsLessThan(aquariusServerVersion0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000000)
  public void test04()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      boolean boolean0 = aquariusServerVersion0.IsDeveloperBuild();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        AquariusServerVersion.Create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // apiVersion cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000000)
  public void test05()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      String string0 = aquariusServerVersion0.toString();
      assertNotNull(string0);
      assertEquals("5", string0);
  }

  @Test(timeout = 4000000)
  public void test06()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000000)
  public void test07()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals(0, int0);
      
      String string0 = aquariusServerVersion0.toString();
      assertNotNull(string0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertEquals("5", string0);
      
      String string1 = aquariusServerVersion1.toString();
      assertNotNull(string1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("5", string1);
      
      String string2 = aquariusServerVersion1.toString();
      assertNotNull(string2);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("5", string2);
      
      boolean boolean0 = aquariusServerVersion0.IsLessThan(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000000)
  public void test08()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("99");
      assertNotNull(aquariusServerVersion0);
  }

  @Test(timeout = 4000000)
  public void test09()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("63");
      assertNotNull(aquariusServerVersion0);
      
      String string0 = aquariusServerVersion0.toString();
      assertNotNull(string0);
      assertEquals("2063", string0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("2063");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      String string1 = aquariusServerVersion1.toString();
      assertNotNull(string1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("2063", string1);
      
      boolean boolean0 = aquariusServerVersion1.IsDeveloperBuild();
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(boolean0);
      
      int int0 = aquariusServerVersion1.Compare(aquariusServerVersion0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000000)
  public void test10()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals(0, int0);
      
      String string0 = aquariusServerVersion0.toString();
      assertNotNull(string0);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AquariusServerVersion.Create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // apiVersion cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000000)
  public void test12()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("633");
      assertNotNull(aquariusServerVersion0);
  }

  @Test(timeout = 4000000)
  public void test13()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("12");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000000)
  public void test14()  throws Throwable  {
      String string0 = "apiVersion cannot be null";
      // Undeclared exception!
      try { 
        AquariusServerVersion.Create("apiVersion cannot be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"apiVersion cannot be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000000)
  public void test15()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("14");
      assertNotNull(aquariusServerVersion0);
  }

  @Test(timeout = 4000000)
  public void test16()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("3");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000000)
  public void test17()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      // Undeclared exception!
      try { 
        aquariusServerVersion0.Compare((AquariusServerVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aquaticinformatics.aquarius.sdk.AquariusServerVersion", e);
      }
  }

  @Test(timeout = 4000000)
  public void test18()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion0);
      
      boolean boolean0 = aquariusServerVersion0.IsLessThan(aquariusServerVersion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000000)
  public void test19()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("7");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      boolean boolean0 = aquariusServerVersion0.IsLessThan(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000000)
  public void test20()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("5");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000000)
  public void test21()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("0");
      assertNotNull(aquariusServerVersion0);
      
      int int0 = aquariusServerVersion0.Compare(aquariusServerVersion0);
      assertEquals(0, int0);
      
      boolean boolean0 = aquariusServerVersion0.IsLessThan(aquariusServerVersion0);
      assertFalse(boolean0);
      
      boolean boolean1 = aquariusServerVersion0.IsDeveloperBuild();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        AquariusServerVersion.Create("5d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000000)
  public void test23()  throws Throwable  {
      AquariusServerVersion aquariusServerVersion0 = AquariusServerVersion.Create("63");
      assertNotNull(aquariusServerVersion0);
      
      AquariusServerVersion aquariusServerVersion1 = AquariusServerVersion.Create("63");
      assertNotNull(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      
      AquariusServerVersion aquariusServerVersion2 = AquariusServerVersion.Create("63");
      assertNotNull(aquariusServerVersion2);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion0);
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion0));
      
      int int0 = aquariusServerVersion1.Compare(aquariusServerVersion2);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion2);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion0);
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion2));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion0));
      assertEquals(0, int0);
      
      int int1 = aquariusServerVersion0.Compare(aquariusServerVersion1);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion2);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion1, aquariusServerVersion2);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion2));
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion1.equals((Object)aquariusServerVersion2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = aquariusServerVersion0.IsDeveloperBuild();
      assertNotSame(aquariusServerVersion0, aquariusServerVersion2);
      assertNotSame(aquariusServerVersion0, aquariusServerVersion1);
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion2));
      assertFalse(aquariusServerVersion0.equals((Object)aquariusServerVersion1));
      assertFalse(boolean0);
      
      AquariusServerVersion aquariusServerVersion3 = AquariusServerVersion.Create("9");
      assertNotNull(aquariusServerVersion3);
      assertNotSame(aquariusServerVersion3, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion3, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion3, aquariusServerVersion2);
      assertFalse(aquariusServerVersion3.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion3.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion3.equals((Object)aquariusServerVersion2));
      
      AquariusServerVersion aquariusServerVersion4 = AquariusServerVersion.Create("9");
      assertNotNull(aquariusServerVersion4);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion3);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion2);
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion3));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion2));
      
      int int2 = aquariusServerVersion4.Compare(aquariusServerVersion2);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion4);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion3);
      assertNotSame(aquariusServerVersion2, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion3);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion0);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion1);
      assertNotSame(aquariusServerVersion4, aquariusServerVersion2);
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion4));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion3));
      assertFalse(aquariusServerVersion2.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion3));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion0));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion1));
      assertFalse(aquariusServerVersion4.equals((Object)aquariusServerVersion2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }
}
