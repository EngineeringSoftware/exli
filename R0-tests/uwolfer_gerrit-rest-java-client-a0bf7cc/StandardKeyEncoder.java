// Copyright 2008 Google Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.google.gwtorm.server;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import org.inlinetest.Here;
import static org.inlinetest.Here.group;

public class StandardKeyEncoder {

    private static final char[] hexc = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

    private static final char[] safe;

    private static final byte[] hexb;

    static {
        safe = new char[256];
        safe['-'] = '-';
        safe['_'] = '_';
        safe['.'] = '.';
        safe['!'] = '!';
        safe['~'] = '~';
        safe['*'] = '*';
        safe['\''] = '\'';
        safe['('] = '(';
        safe[')'] = ')';
        safe['/'] = '/';
        safe[' '] = '+';
        for (char c = '0'; c <= '9'; c++) safe[c] = c;
        for (char c = 'A'; c <= 'Z'; c++) safe[c] = c;
        for (char c = 'a'; c <= 'z'; c++) safe[c] = c;
        hexb = new byte['f' + 1];
        Arrays.fill(hexb, (byte) -1);
        for (char i = '0'; i <= '9'; i++) hexb[i] = (byte) (i - '0');
        for (char i = 'A'; i <= 'F'; i++) hexb[i] = (byte) ((i - 'A') + 10);
        for (char i = 'a'; i <= 'f'; i++) hexb[i] = (byte) ((i - 'a') + 10);
    }

    public static String encode(final String e) {
        final byte[] b;
        try {
            b = e.getBytes("UTF-8");
        } catch (UnsupportedEncodingException e1) {
            throw new RuntimeException("No UTF-8 support", e1);
        }
        final StringBuilder r = new StringBuilder(b.length);
        for (int i = 0; i < b.length; i++) {
            final int c = b[i] & 0xff;
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 0).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 21).checkEq(c, 101);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 19).checkEq(c, 97);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 49).checkEq(c, 70);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 68).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 25).checkEq(c, 104);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 1).checkEq(c, 103);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 53).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 7).checkEq(c, 76);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 11).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 15).checkEq(c, 37);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 24).checkEq(c, 68);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 16).checkEq(c, 55);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 7).checkEq(c, 102);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 62).checkEq(c, 114);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 11).checkEq(c, 73);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 41).checkEq(c, 108);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 42).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 17).checkEq(c, 104);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 12).checkEq(c, 58);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 27).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 3).checkEq(c, 109);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 0).checkEq(c, 47);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 50).checkEq(c, 100);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 14).checkEq(c, 97);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 2).checkEq(c, 111);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 6).checkEq(c, 110);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 18).checkEq(c, 110);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 14).checkEq(c, 111);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 2).checkEq(c, 102);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 2).checkEq(c, 114);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 43).checkEq(c, 51);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 52).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 8).checkEq(c, 100);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 37).checkEq(c, 103);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 65).checkEq(c, 51);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 1).checkEq(c, 114);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 70).checkEq(c, 43);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 38).checkEq(c, 101);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 55).checkEq(c, 121);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 35).checkEq(c, 109);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 76).checkEq(c, 116);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 29).checkEq(c, 49);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 4).checkEq(c, 112);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 40).checkEq(c, 114);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 28).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 17).checkEq(c, 66);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 73).checkEq(c, 114);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 6).checkEq(c, 103);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 12).checkEq(c, 110);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 66).checkEq(c, 68);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 18).checkEq(c, 101);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 7).checkEq(c, 101);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 57).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 1).checkEq(c, 115);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 10).checkEq(c, 37);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 51).checkEq(c, 100);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 7).checkEq(c, 47);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 34).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 4).checkEq(c, 117);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 47).checkEq(c, 37);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 77).checkEq(c, 37);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 9).checkEq(c, 110);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 72).checkEq(c, 97);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 61).checkEq(c, 117);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 6).checkEq(c, 98);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 33).checkEq(c, 43);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 5).checkEq(c, 112);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 56).checkEq(c, 121);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 78).checkEq(c, 55);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 26).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 39).checkEq(c, 85);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 54).checkEq(c, 70);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 45).checkEq(c, 77);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 8).checkEq(c, 104);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 48).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 23).checkEq(c, 51);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 2).checkEq(c, 58);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 3).checkEq(c, 117);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 6).checkEq(c, 115);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 20).checkEq(c, 109);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 69).checkEq(c, 67);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 0).checkEq(c, 68);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 58).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 32).checkEq(c, 67);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 10).checkEq(c, 107);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 44).checkEq(c, 68);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 3).checkEq(c, 102);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 36).checkEq(c, 97);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 59).checkEq(c, 67);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 19).checkEq(c, 100);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 8).checkEq(c, 105);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 4).checkEq(c, 101);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 79).checkEq(c, 68);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 71).checkEq(c, 116);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 22).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 13).checkEq(c, 119);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 9).checkEq(c, 32);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 5).checkEq(c, 73);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 31).checkEq(c, 50);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 46).checkEq(c, 77);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 10).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 5).checkEq(c, 101);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 13).checkEq(c, 102);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 16).checkEq(c, 99);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 75).checkEq(c, 101);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 11).checkEq(c, 115);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 30).checkEq(c, 37);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 4).checkEq(c, 87);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 1).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 63).checkEq(c, 108);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 12).checkEq(c, 49);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 15).checkEq(c, 116);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 9).checkEq(c, 105);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 74).checkEq(c, 103);
            new Here("Randoop", 67).given(b, new byte[] { 71, 114, 111, 117, 112, 73, 110, 102, 111, 123, 110, 97, 109, 101, 61, 110, 117, 108, 108, 44, 32, 105, 100, 61, 110, 117, 108, 108, 125 }).given(i, 0).checkEq(c, 71);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 60).checkEq(c, 43);
            new Here("Randoop", 67).given(b, new byte[] { 47, 103, 114, 111, 117, 112, 115, 47, 104, 105, 37, 50, 49 }).given(i, 3).checkEq(c, 111);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 67).checkEq(c, 37);
            new Here("Unit", 67).given(b, new byte[] { 105, 115, 58, 109, 101, 114, 103, 101, 100, 32, 105, 115, 58, 119, 97, 116, 99, 104, 101, 100 }).given(i, 5).checkEq(c, 114);
            new Here("Randoop", 67).given(b, new byte[] { 68, 105, 102, 102, 87, 101, 98, 76, 105, 110, 107, 73, 110, 102, 111, 37, 55, 66, 110, 97, 109, 101, 37, 51, 68, 104, 105, 37, 50, 49, 37, 50, 67, 43, 105, 109, 97, 103, 101, 85, 114, 108, 37, 51, 68, 77, 77, 37, 50, 70, 100, 100, 37, 50, 70, 121, 121, 37, 50, 67, 43, 117, 114, 108, 37, 51, 68, 37, 50, 67, 43, 116, 97, 114, 103, 101, 116, 37, 55, 68 }).given(i, 64).checkEq(c, 37);
            final char s = safe[c];
            if (s == 0) {
                r.append('%');
                r.append(hexc[c >> 4]);
                r.append(hexc[c & 15]);
            } else {
                r.append(s);
            }
        }
        return r.toString();
    }

    public static String decode(final String e) {
        if (e.indexOf('%') < 0) {
            new Here("Randoop", 81).given(e, "com.urswolfer.gerrit.client.rest.http.HttpStatusException: MM/dd/yy").checkTrue(group());
            new Here("Randoop", 81).given(e, "NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]}").checkFalse(group());
            new Here("Randoop", 81).given(e, "GroupInfo{name=null, id=null}").checkTrue(group());
            new Here("Randoop", 81).given(e, "CommitInfo{null, author=null, committer=null, subject=GitPerson{name=null, email=null, date=null, tz=32}, message=null}").checkTrue(group());
            new Here("Randoop", 81).given(e, "/groups/TagInfo{ref=^(?:/a)?(?:/p/|/)(.+)(?:/info/lfs/)(?:%s)$, revision=locks(?:/(.*)(?:/unlock))?, canDelete=false}").checkFalse(group());
            new Here("Randoop", 81).given(e, "MenuItem{url=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},name=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},target=RelatedChangeAndCommitInfo{project=null, changeId=null, commit=null, _changeNumber=null, _revisionNumber=null, _currentRevisionNumber=null, status=null},id=-1}").checkFalse(group());
            return e.replace('+', ' ');
        }
        final byte[] b = new byte[e.length()];
        int bPtr = 0;
        try {
            for (int i = 0; i < e.length(); ) {
                final char c = e.charAt(i);
                if (c == '%' && i + 2 < e.length()) {
                    final int v = (hexb[e.charAt(i + 1)] << 4) | hexb[e.charAt(i + 2)];
                    new Here("Randoop", 91).given(e, "MenuItem{url=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},name=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},target=RelatedChangeAndCommitInfo{project=null, changeId=null, commit=null, _changeNumber=null, _revisionNumber=null, _currentRevisionNumber=null, status=null},id=-1}").given(hexb, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15 }).given(i, 156).checkEq(v, 33);
                    new Here("Randoop", 91).given(e, "MenuItem{url=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},name=NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]},target=RelatedChangeAndCommitInfo{project=null, changeId=null, commit=null, _changeNumber=null, _revisionNumber=null, _currentRevisionNumber=null, status=null},id=-1}").given(hexb, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15 }).given(i, 406).checkEq(v, 33);
                    new Here("Randoop", 91).given(e, "NotifyInfo{accounts=[, hi!, /groups, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}, /groups/hi%21, MenuItem{url=locks(?:/(.*)(?:/unlock))?,name=locks(?:/(.*)(?:/unlock))?,target=_blank,id=null}]}").given(hexb, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15 }).given(i, 143).checkEq(v, 33);
                    if (v < 0) {
                        throw new IllegalArgumentException(e.substring(i, i + 3));
                    }
                    b[bPtr++] = (byte) v;
                    i += 3;
                } else if (c == '+') {
                    b[bPtr++] = ' ';
                    i++;
                } else {
                    b[bPtr++] = (byte) c;
                    i++;
                }
            }
        } catch (ArrayIndexOutOfBoundsException err) {
            throw new IllegalArgumentException("Bad encoding: " + e);
        }
        try {
            return new String(b, 0, bPtr, "UTF-8");
        } catch (UnsupportedEncodingException e1) {
            throw new RuntimeException("No UTF-8 support", e1);
        }
    }
}
