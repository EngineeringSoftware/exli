package com.mpatric.mp3agic;

import java.io.UnsupportedEncodingException;
import org.inlinetest.ITest;
import static org.inlinetest.ITest.itest;
import static org.inlinetest.ITest.group;

public final class BufferTools {

    protected static final String defaultCharsetName = "ISO-8859-1";

    private BufferTools() {
    }

    public static String byteBufferToStringIgnoringEncodingIssues(byte[] bytes, int offset, int length) {
        try {
            return byteBufferToString(bytes, offset, length, defaultCharsetName);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }

    public static String byteBufferToString(byte[] bytes, int offset, int length) throws UnsupportedEncodingException {
        return byteBufferToString(bytes, offset, length, defaultCharsetName);
    }

    public static String byteBufferToString(byte[] bytes, int offset, int length, String charsetName) throws UnsupportedEncodingException {
        if (length < 1) {
            return "";
        }
        return new String(bytes, offset, length, charsetName);
    }

    public static byte[] stringToByteBufferIgnoringEncodingIssues(String s, int offset, int length) {
        try {
            return stringToByteBuffer(s, offset, length);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }

    public static byte[] stringToByteBuffer(String s, int offset, int length) throws UnsupportedEncodingException {
        return stringToByteBuffer(s, offset, length, defaultCharsetName);
    }

    public static byte[] stringToByteBuffer(String s, int offset, int length, String charsetName) throws UnsupportedEncodingException {
        String stringToCopy = s.substring(offset, offset + length);
        itest("randoop", 41).given(s, "com.mpatric.mp3agic.UnsupportedTagException: TT1").given(offset, 0).given(length, 35).checkEq(stringToCopy, "com.mpatric.mp3agic.UnsupportedTagE");
        itest("randoop", 41).given(s, "WPUB").given(offset, 2).given(length, 0).checkEq(stringToCopy, "");
        itest("randoop", 41).given(s, "ID3v2ChapterFrameData [id=4.0, startTime=1, endTime=255, startOffset=29360272, endOffset=97, subframes=[]]").given(offset, 4).given(length, 32).checkEq(stringToCopy, "2ChapterFrameData [id=4.0, start");
        itest("dev", 41).given(s, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDExxxxx").given(offset, 0).given(length, 43).checkEq(stringToCopy, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("randoop", 41).given(s, "[com.mpatric.mp3agic.NoSuchTagException: TOA]").given(offset, 5).given(length, 19).checkEq(stringToCopy, "mpatric.mp3agic.NoS");
        itest("evosuite", 41).given(s, "").given(offset, 0).given(length, 0).checkEq(stringToCopy, "");
        itest("evosuite", 41).given(s, "ISO-8859-1").given(offset, 0).given(length, 1).checkEq(stringToCopy, "I");
        itest("dev", 41).given(s, "Not unicode").given(offset, 0).given(length, 11).checkEq(stringToCopy, "Not unicode");
        itest("dev", 41).given(s, "\u03B3\u03B5\u03B9\u03AC \u03C3\u03BF\u03C5").given(offset, 0).given(length, 8).checkEq(stringToCopy, "\u03B3\u03B5\u03B9\u03AC \u03C3\u03BF\u03C5");
        itest("dev", 41).given(s, "00ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 33).checkEq(stringToCopy, "00ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("dev", 41).given(s, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE?????").given(offset, 0).given(length, 43).checkEq(stringToCopy, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("evosuite", 41).given(s, "2wYQH|W5").given(offset, 3).given(length, 3).checkEq(stringToCopy, "QH|");
        itest("dev", 41).given(s, "0ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 32).checkEq(stringToCopy, "0ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("randoop", 41).given(s, "Joint stereo").given(offset, 0).given(length, 3).checkEq(stringToCopy, "Joi");
        itest("dev", 41).given(s, "TAGTITLE1234567890123456789012345ARTIST123456789012345678901234ALBUM12345678901234567890123452001COMMENT123456789012345678901234").given(offset, 0).given(length, 128).checkEq(stringToCopy, "TAGTITLE1234567890123456789012345ARTIST123456789012345678901234ALBUM12345678901234567890123452001COMMENT123456789012345678901234");
        itest("randoop", 41).given(s, "ID3v2ChapterFrameData [id=TEN, startTime=97, endTime=100, startOffset=3, endOffset=6, subframes=[]]").given(offset, 16).given(length, 16).checkEq(stringToCopy, "eData [id=TEN, s");
        itest("randoop", 41).given(s, "[com.mpatric.mp3agic.UnsupportedTagException: USLT] caused by [com.mpatric.mp3agic.NotSupportedException: 4.0] caused by [com.mpatric.mp3agic.NotSupportedException]").given(offset, 7).given(length, 68).checkEq(stringToCopy, "atric.mp3agic.UnsupportedTagException: USLT] caused by [com.mpatric.");
        itest("dev", 41).given(s, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 43).checkEq(stringToCopy, "WXXX000!0000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("evosuite", 41).given(s, "\u0001").given(offset, 1).given(length, 0).checkEq(stringToCopy, "");
        itest("evosuite", 41).given(s, ",").given(offset, 0).given(length, 0).checkEq(stringToCopy, "");
        itest("dev", 41).given(s, "xxxxxTPE1000 000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 47).checkEq(stringToCopy, "xxxxxTPE1000 000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("dev", 41).given(s, "0ARTISTABCDEFGHIJKLMNOPQRSTUVWXYZ0").given(offset, 0).given(length, 34).checkEq(stringToCopy, "0ARTISTABCDEFGHIJKLMNOPQRSTUVWXYZ0");
        itest("randoop", 41).given(s, "UNKNOWN-SNAPSHOT - http://github.com/mpatric/mp3agic").given(offset, 15).given(length, 12).checkEq(stringToCopy, "T - http://g");
        itest("evosuite", 41).given(s, "ISO-8859-1").given(offset, 0).given(length, 7).checkEq(stringToCopy, "ISO-885");
        itest("evosuite", 41).given(s, "ISO-8859-1").given(offset, 0).given(length, 0).checkEq(stringToCopy, "");
        itest("evosuite", 41).given(s, "pOCi0&8^76[").given(offset, 0).given(length, 0).checkEq(stringToCopy, "");
        itest("randoop", 41).given(s, "ID3v2ChapterFrameData [id=None, startTime=7, endTime=8, startOffset=-1, endOffset=10, subframes=[]]").given(offset, 80).given(length, 7).checkEq(stringToCopy, "t=10, s");
        itest("randoop", 41).given(s, "[com.mpatric.mp3agic.UnsupportedTagException: ISO-8859-1]                                                                                                                                                                                                                                                                                                              ").given(offset, 52).given(length, 0).checkEq(stringToCopy, "");
        itest("dev", 41).given(s, "00000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 36).checkEq(stringToCopy, "00000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("dev", 41).given(s, "COMM000$0000000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE").given(offset, 0).given(length, 46).checkEq(stringToCopy, "COMM000$0000000ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE");
        itest("randoop", 41).given(s, "WCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOM");
        itest("randoop", 41).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]").given(offset, 7).given(length, 35).checkEq(stringToCopy, "apterTOCFrameData [isRoot=false, is");
        itest("dev", 41).given(s, "1234567890QWERTYUIOP").given(offset, 0).given(length, 20).checkEq(stringToCopy, "1234567890QWERTYUIOP");
        itest("dev", 41).given(s, "xxxxxTP100\"0ARTISTABCDEFGHIJKLMNOPQRSTUVWXYZ0").given(offset, 0).given(length, 45).checkEq(stringToCopy, "xxxxxTP100\"0ARTISTABCDEFGHIJKLMNOPQRSTUVWXYZ0");
        itest("dev", 41).given(s, "TAGTITLE                         ARTIST                        ALBUM                         2001COMMENT                        ").given(offset, 0).given(length, 128).checkEq(stringToCopy, "TAGTITLE                         ARTIST                        ALBUM                         2001COMMENT                        ");
        itest("dev", 41).given(s, "1234567890QWERTYUIOP").given(offset, 2).given(length, 15).checkEq(stringToCopy, "34567890QWERTYU");
        itest("dev", 41).given(s, "\u03B3\u03B5\u03B9\u03AC \u03C3\u03BF\u03C5").given(offset, 2).given(length, 3).checkEq(stringToCopy, "\u03B9\u03AC ");
        return stringToCopy.getBytes(charsetName);
    }

    public static void stringIntoByteBuffer(String s, int offset, int length, byte[] bytes, int destOffset) throws UnsupportedEncodingException {
        stringIntoByteBuffer(s, offset, length, bytes, destOffset, defaultCharsetName);
    }

    public static void stringIntoByteBuffer(String s, int offset, int length, byte[] bytes, int destOffset, String charsetName) throws UnsupportedEncodingException {
        String stringToCopy = s.substring(offset, offset + length);
        itest("evosuite", 50).given(s, "description and comment must have same text encoding").given(offset, 0).given(length, 52).checkEq(stringToCopy, "description and comment must have same text encoding");
        itest("dev", 50).given(s, "COMMENT").given(offset, 0).given(length, 7).checkEq(stringToCopy, "COMMENT");
        itest("randoop", 50).given(s, "TRK").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TRK");
        itest("dev", 50).given(s, "WPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPUB");
        itest("evosuite", 50).given(s, "WCOP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOP");
        itest("dev", 50).given(s, "TENC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TENC");
        itest("evosuite", 50).given(s, "WORS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WORS");
        itest("dev", 50).given(s, "TDAT").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TDAT");
        itest("evosuite", 50).given(s, "=f_=Q").given(offset, 0).given(length, 5).checkEq(stringToCopy, "=f_=Q");
        itest("evosuite", 50).given(s, "4w{Mct EF[$").given(offset, 0).given(length, 11).checkEq(stringToCopy, "4w{Mct EF[$");
        itest("evosuite", 50).given(s, "ID3").given(offset, 0).given(length, 3).checkEq(stringToCopy, "ID3");
        itest("evosuite", 50).given(s, "B*_.KrN&O7^TM0V").given(offset, 0).given(length, 15).checkEq(stringToCopy, "B*_.KrN&O7^TM0V");
        itest("dev", 50).given(s, "ALBUM1234567890123456789012345").given(offset, 0).given(length, 30).checkEq(stringToCopy, "ALBUM1234567890123456789012345");
        itest("evosuite", 50).given(s, "4:").given(offset, 0).given(length, 2).checkEq(stringToCopy, "4:");
        itest("evosuite", 50).given(s, "APIC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "APIC");
        itest("evosuite", 50).given(s, "TCM").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TCM");
        itest("randoop", 50).given(s, "TYER").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TYER");
        itest("evosuite", 50).given(s, "6Cte").given(offset, 0).given(length, 4).checkEq(stringToCopy, "6Cte");
        itest("evosuite", 50).given(s, "pdY4<kS+;/{02").given(offset, 0).given(length, 13).checkEq(stringToCopy, "pdY4<kS+;/{02");
        itest("randoop", 50).given(s, "1.0").given(offset, 0).given(length, 3).checkEq(stringToCopy, "1.0");
        itest("randoop", 50).given(s, "II").given(offset, 0).given(length, 2).checkEq(stringToCopy, "II");
        itest("evosuite", 50).given(s, "c@Z!=W$LC~").given(offset, 0).given(length, 10).checkEq(stringToCopy, "c@Z!=W$LC~");
        itest("randoop", 50).given(s, "UTF-16LE").given(offset, 0).given(length, 8).checkEq(stringToCopy, "UTF-16LE");
        itest("evosuite", 50).given(s, " caused by ").given(offset, 0).given(length, 11).checkEq(stringToCopy, " caused by ");
        itest("dev", 50).given(s, "TPOS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPOS");
        itest("evosuite", 50).given(s, "TOA").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TOA");
        itest("dev", 50).given(s, "TCMP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCMP");
        itest("randoop", 50).given(s, "ID3v2ChapterFrameData [id=null, startTime=97, endTime=0, startOffset=0, endOffset=0, subframes=[]]").given(offset, 0).given(length, 98).checkEq(stringToCopy, "ID3v2ChapterFrameData [id=null, startTime=97, endTime=0, startOffset=0, endOffset=0, subframes=[]]");
        itest("dev", 50).given(s, "ID3").given(offset, 0).given(length, 3).checkEq(stringToCopy, "ID3");
        itest("dev", 50).given(s, "TIT1").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TIT1");
        itest("dev", 50).given(s, "WCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOM");
        itest("evosuite", 50).given(s, "TIT2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TIT2");
        itest("dev", 50).given(s, "mime/type").given(offset, 0).given(length, 9).checkEq(stringToCopy, "mime/type");
        itest("evosuite", 50).given(s, "W").given(offset, 0).given(length, 1).checkEq(stringToCopy, "W");
        itest("randoop", 50).given(s, "ID3").given(offset, 0).given(length, 3).checkEq(stringToCopy, "ID3");
        itest("evosuite", 50).given(s, "3DI").given(offset, 0).given(length, 3).checkEq(stringToCopy, "3DI");
        itest("evosuite", 50).given(s, "\u3053\u3093\u306B\u3061\u306F").given(offset, 0).given(length, 5).checkEq(stringToCopy, "\u3053\u3093\u306B\u3061\u306F");
        itest("randoop", 50).given(s, "Intensity stereo").given(offset, 0).given(length, 16).checkEq(stringToCopy, "Intensity stereo");
        itest("randoop", 50).given(s, "TP2").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TP2");
        itest("randoop", 50).given(s, "WPAY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPAY");
        itest("randoop", 50).given(s, "TBP").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TBP");
        itest("randoop", 50).given(s, "TCON").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCON");
        itest("randoop", 50).given(s, "TPOS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPOS");
        itest("evosuite", 50).given(s, "NA$eE,*T|6D").given(offset, 0).given(length, 11).checkEq(stringToCopy, "NA$eE,*T|6D");
        itest("evosuite", 50).given(s, "WOAR").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAR");
        itest("randoop", 50).given(s, "TP1                                                                                                                             ").given(offset, 0).given(length, 128).checkEq(stringToCopy, "TP1                                                                                                                             ");
        itest("dev", 50).given(s, "TDRC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TDRC");
        itest("randoop", 50).given(s, "TDRC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TDRC");
        itest("randoop", 50).given(s, "WXX").given(offset, 0).given(length, 3).checkEq(stringToCopy, "WXX");
        itest("evosuite", 50).given(s, "U>C1.k93A_Nub").given(offset, 0).given(length, 13).checkEq(stringToCopy, "U>C1.k93A_Nub");
        itest("dev", 50).given(s, "OFFICIALARTISTURL").given(offset, 0).given(length, 17).checkEq(stringToCopy, "OFFICIALARTISTURL");
        itest("randoop", 50).given(s, "[com.mpatric.mp3agic.BaseException] caused by [com.mpatric.mp3agic.InvalidDataException: WOAS]").given(offset, 13).given(length, 4).checkEq(stringToCopy, "mp3a");
        itest("dev", 50).given(s, "TRCK").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TRCK");
        itest("dev", 50).given(s, "TCOP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCOP");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[null, I, II, III], subframes=[]]").given(offset, 0).given(length, 30).checkEq(stringToCopy, "ID3v2ChapterTOCFrameData [isRo");
        itest("evosuite", 50).given(s, "zQZ").given(offset, 0).given(length, 3).checkEq(stringToCopy, "zQZ");
        itest("randoop", 50).given(s, "ID3v2ChapterFrameData [id=3.0, startTime=0, endTime=0, startOffset=5, endOffset=0, subframes=[]]").given(offset, 52).given(length, 0).checkEq(stringToCopy, "");
        itest("dev", 50).given(s, "COMM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "COMM");
        itest("evosuite", 50).given(s, "Y)]qw").given(offset, 0).given(length, 5).checkEq(stringToCopy, "Y)]qw");
        itest("dev", 50).given(s, "WPAY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPAY");
        itest("randoop", 50).given(s, "2.0").given(offset, 0).given(length, 3).checkEq(stringToCopy, "2.0");
        itest("randoop", 50).given(s, "TCP").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TCP");
        itest("randoop", 50).given(s, "TDAT").given(offset, 0).given(length, 1).checkEq(stringToCopy, "T");
        itest("evosuite", 50).given(s, "Ballad").given(offset, 0).given(length, 6).checkEq(stringToCopy, "Ballad");
        itest("evosuite", 50).given(s, "m?>,[)fm0Xk$").given(offset, 0).given(length, 12).checkEq(stringToCopy, "m?>,[)fm0Xk$");
        itest("evosuite", 50).given(s, ":fA5zkv`").given(offset, 0).given(length, 8).checkEq(stringToCopy, ":fA5zkv`");
        itest("randoop", 50).given(s, "TDA").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TDA");
        itest("dev", 50).given(s, "TEST").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TEST");
        itest("evosuite", 50).given(s, "TKE").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TKE");
        itest("randoop", 50).given(s, "M/S stereo").given(offset, 0).given(length, 10).checkEq(stringToCopy, "M/S stereo");
        itest("dev", 50).given(s, "TIT2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TIT2");
        itest("randoop", 50).given(s, "WOAF").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAF");
        itest("evosuite", 50).given(s, "WCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOM");
        itest("dev", 50).given(s, "\u03B3\u03B5\u03B9\u03AC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "\u03B3\u03B5\u03B9\u03AC");
        itest("randoop", 50).given(s, "TPE1").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE1");
        itest("evosuite", 50).given(s, "TPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPUB");
        itest("evosuite", 50).given(s, "Classical").given(offset, 0).given(length, 9).checkEq(stringToCopy, "Classical");
        itest("evosuite", 50).given(s, "ps,lZgx+bz{t").given(offset, 0).given(length, 12).checkEq(stringToCopy, "ps,lZgx+bz{t");
        itest("randoop", 50).given(s, "http://github.com/mpatric/mp3agic").given(offset, 0).given(length, 33).checkEq(stringToCopy, "http://github.com/mpatric/mp3agic");
        itest("evosuite", 50).given(s, "TOPE").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TOPE");
        itest("randoop", 50).given(s, "TCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCOM");
        itest("randoop", 50).given(s, "4.0").given(offset, 0).given(length, 3).checkEq(stringToCopy, "4.0");
        itest("dev", 50).given(s, "TALB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TALB");
        itest("randoop", 50).given(s, "TBPM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TBPM");
        itest("evosuite", 50).given(s, "TKEY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TKEY");
        itest("randoop", 50).given(s, "TCR").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TCR");
        itest("evosuite", 50).given(s, "H|b<i").given(offset, 0).given(length, 5).checkEq(stringToCopy, "H|b<i");
        itest("randoop", 50).given(s, "WOAS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAS");
        itest("randoop", 50).given(s, "TAG").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TAG");
        itest("dev", 50).given(s, "TPE2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE2");
        itest("evosuite", 50).given(s, "mbb!B").given(offset, 0).given(length, 5).checkEq(stringToCopy, "mbb!B");
        itest("randoop", 50).given(s, "TENC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TENC");
        itest("randoop", 50).given(s, "WPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPUB");
        itest("evosuite", 50).given(s, "Cabaret").given(offset, 0).given(length, 7).checkEq(stringToCopy, "Cabaret");
        itest("evosuite", 50).given(s, "POPM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "POPM");
        itest("evosuite", 50).given(s, "COMM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "COMM");
        itest("dev", 50).given(s, "COPYRIGHTURL").given(offset, 0).given(length, 12).checkEq(stringToCopy, "COPYRIGHTURL");
        itest("randoop", 50).given(s, "n/a").given(offset, 0).given(length, 3).checkEq(stringToCopy, "n/a");
        itest("randoop", 50).given(s, "[com.mpatric.mp3agic.NotSupportedException]").given(offset, 0).given(length, 43).checkEq(stringToCopy, "[com.mpatric.mp3agic.NotSupportedException]");
        itest("evosuite", 50).given(s, "TPE2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE2");
        itest("evosuite", 50).given(s, "TALB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TALB");
        itest("evosuite", 50).given(s, "USLT").given(offset, 0).given(length, 4).checkEq(stringToCopy, "USLT");
        itest("randoop", 50).given(s, "None").given(offset, 0).given(length, 4).checkEq(stringToCopy, "None");
        itest("dev", 50).given(s, "TPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPUB");
        itest("dev", 50).given(s, "TOPE").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TOPE");
        itest("randoop", 50).given(s, "Mono").given(offset, 0).given(length, 4).checkEq(stringToCopy, "Mono");
        itest("evosuite", 50).given(s, "ZesMBh[)46").given(offset, 0).given(length, 10).checkEq(stringToCopy, "ZesMBh[)46");
        itest("evosuite", 50).given(s, "WXX").given(offset, 0).given(length, 3).checkEq(stringToCopy, "WXX");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[Intensity & M/S stereo, TKEY, TCR, WCOP, I], subframes=[]]").given(offset, 0).given(length, 133).checkEq(stringToCopy, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[Intensity & M/S stereo, TKEY, TCR, WCOP, I], subframes=[]]");
        itest("evosuite", 50).given(s, "O.twzj").given(offset, 0).given(length, 6).checkEq(stringToCopy, "O.twzj");
        itest("randoop", 50).given(s, "CTOC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "CTOC");
        itest("dev", 50).given(s, "TYER").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TYER");
        itest("randoop", 50).given(s, "TEN").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TEN");
        itest("evosuite", 50).given(s, "X!(.W{S[<wOYmMZ").given(offset, 0).given(length, 15).checkEq(stringToCopy, "X!(.W{S[<wOYmMZ");
        itest("evosuite", 50).given(s, "TaCM0@").given(offset, 0).given(length, 6).checkEq(stringToCopy, "TaCM0@");
        itest("dev", 50).given(s, "WXXX").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WXXX");
        itest("evosuite", 50).given(s, "PIC").given(offset, 0).given(length, 3).checkEq(stringToCopy, "PIC");
        itest("dev", 50).given(s, "image/png").given(offset, 0).given(length, 9).checkEq(stringToCopy, "image/png");
        itest("dev", 50).given(s, "\u03B3\u03B5\u03B9\u03AC").given(offset, 1).given(length, 2).checkEq(stringToCopy, "\u03B5\u03B9");
        itest("randoop", 50).given(s, "APIC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "APIC");
        itest("randoop", 50).given(s, "Joint stereo").given(offset, 0).given(length, 12).checkEq(stringToCopy, "Joint stereo");
        itest("randoop", 50).given(s, "TALB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TALB");
        itest("dev", 50).given(s, "WOAS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAS");
        itest("dev", 50).given(s, "TKEY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TKEY");
        itest("dev", 50).given(s, "TAG-").given(offset, 1).given(length, 2).checkEq(stringToCopy, "AG");
        itest("randoop", 50).given(s, "3.0").given(offset, 0).given(length, 3).checkEq(stringToCopy, "3.0");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=false, id=Mono, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]: 0").given(offset, 0).given(length, 130).checkEq(stringToCopy, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=false, id=Mono, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]: 0");
        itest("dev", 50).given(s, "ARTIST").given(offset, 0).given(length, 6).checkEq(stringToCopy, "ARTIST");
        itest("randoop", 50).given(s, "eng").given(offset, 0).given(length, 3).checkEq(stringToCopy, "eng");
        itest("evosuite", 50).given(s, "Cwc5X%8").given(offset, 0).given(length, 7).checkEq(stringToCopy, "Cwc5X%8");
        itest("evosuite", 50).given(s, "b[9g80DM{<U`").given(offset, 0).given(length, 12).checkEq(stringToCopy, "b[9g80DM{<U`");
        itest("evosuite", 50).given(s, "TYER").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TYER");
        itest("dev", 50).given(s, "\u0000\u0000\u0000").given(offset, 0).given(length, 3).checkEq(stringToCopy, "\u0000\u0000\u0000");
        itest("randoop", 50).given(s, "WOAR").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAR");
        itest("dev", 50).given(s, "TPE1").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE1");
        itest("evosuite", 50).given(s, "SOJ").given(offset, 0).given(length, 3).checkEq(stringToCopy, "SOJ");
        itest("randoop", 50).given(s, "WOAS4444444444444444444444444").given(offset, 0).given(length, 29).checkEq(stringToCopy, "WOAS4444444444444444444444444");
        itest("dev", 50).given(s, "COMMERCIALURL").given(offset, 0).given(length, 13).checkEq(stringToCopy, "COMMERCIALURL");
        itest("evosuite", 50).given(s, "TCOP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCOP");
        itest("evosuite", 50).given(s, "WPAY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPAY");
        itest("randoop", 50).given(s, "ISO-8859-1").given(offset, 0).given(length, 10).checkEq(stringToCopy, "ISO-8859-1");
        itest("evosuite", 50).given(s, "com.mpatric.mp3agic.ID3v1Genres").given(offset, 0).given(length, 31).checkEq(stringToCopy, "com.mpatric.mp3agic.ID3v1Genres");
        itest("dev", 50).given(s, "TAG-").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TAG-");
        itest("dev", 50).given(s, "WOAR").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAR");
        itest("randoop", 50).given(s, "CHAP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "CHAP");
        itest("randoop", 50).given(s, "com.mpatric.mp3agic.NotSupportedException: ").given(offset, 0).given(length, 43).checkEq(stringToCopy, "com.mpatric.mp3agic.NotSupportedException: ");
        itest("randoop", 50).given(s, "TP1").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TP1");
        itest("evosuite", 50).given(s, "0;*").given(offset, 0).given(length, 3).checkEq(stringToCopy, "0;*");
        itest("dev", 50).given(s, "ARTIST123456789012345678901234").given(offset, 0).given(length, 30).checkEq(stringToCopy, "ARTIST123456789012345678901234");
        itest("dev", 50).given(s, "USLT").given(offset, 0).given(length, 4).checkEq(stringToCopy, "USLT");
        itest("evosuite", 50).given(s, "H7sA/1").given(offset, 0).given(length, 6).checkEq(stringToCopy, "H7sA/1");
        itest("dev", 50).given(s, "TAG").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TAG");
        itest("dev", 50).given(s, "INTERNETRADIOSTATIONURL").given(offset, 0).given(length, 23).checkEq(stringToCopy, "INTERNETRADIOSTATIONURL");
        itest("dev", 50).given(s, "TITLE").given(offset, 0).given(length, 5).checkEq(stringToCopy, "TITLE");
        itest("evosuite", 50).given(s, "|SrnhSkPSs;9aPC$db").given(offset, 0).given(length, 18).checkEq(stringToCopy, "|SrnhSkPSs;9aPC$db");
        itest("evosuite", 50).given(s, "eng").given(offset, 0).given(length, 3).checkEq(stringToCopy, "eng");
        itest("randoop", 50).given(s, "50/15 ms").given(offset, 0).given(length, 8).checkEq(stringToCopy, "50/15 ms");
        itest("randoop", 50).given(s, "2.").given(offset, 0).given(length, 2).checkEq(stringToCopy, "2.");
        itest("randoop", 50).given(s, "TKEY").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TKEY");
        itest("evosuite", 50).given(s, "TBPM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TBPM");
        itest("randoop", 50).given(s, "Windows Media Player 9 Series").given(offset, 6).given(length, 2).checkEq(stringToCopy, "s ");
        itest("dev", 50).given(s, "APIC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "APIC");
        itest("evosuite", 50).given(s, "Samba").given(offset, 0).given(length, 5).checkEq(stringToCopy, "Samba");
        itest("evosuite", 50).given(s, "/").given(offset, 0).given(length, 1).checkEq(stringToCopy, "/");
        itest("evosuite", 50).given(s, "kUU|95").given(offset, 0).given(length, 6).checkEq(stringToCopy, "kUU|95");
        itest("evosuite", 50).given(s, "w?$CyV(hXpo#i").given(offset, 0).given(length, 13).checkEq(stringToCopy, "w?$CyV(hXpo#i");
        itest("evosuite", 50).given(s, "TEN").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TEN");
        itest("dev", 50).given(s, "COMMENT123456789012345678901").given(offset, 0).given(length, 28).checkEq(stringToCopy, "COMMENT123456789012345678901");
        itest("dev", 50).given(s, "WORS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WORS");
        itest("randoop", 50).given(s, "hi!").given(offset, 0).given(length, 3).checkEq(stringToCopy, "hi!");
        itest("dev", 50).given(s, "http://ABCDEFGHIJKLMNOPQ").given(offset, 0).given(length, 24).checkEq(stringToCopy, "http://ABCDEFGHIJKLMNOPQ");
        itest("evosuite", 50).given(s, "Showtunes").given(offset, 0).given(length, 9).checkEq(stringToCopy, "Showtunes");
        itest("randoop", 50).given(s, "TRCK").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TRCK");
        itest("randoop", 50).given(s, "com.mpatric.mp3agic.NotSupportedException").given(offset, 0).given(length, 41).checkEq(stringToCopy, "com.mpatric.mp3agic.NotSupportedException");
        itest("evosuite", 50).given(s, "").given(offset, 0).given(length, 0).checkEq(stringToCopy, "");
        itest("randoop", 50).given(s, "TKE").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TKE");
        itest("randoop", 50).given(s, "TCO").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TCO");
        itest("evosuite", 50).given(s, "'I}j\"Wc").given(offset, 0).given(length, 7).checkEq(stringToCopy, "'I}j\"Wc");
        itest("dev", 50).given(s, "WCOP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOP");
        itest("evosuite", 50).given(s, "\u0002\u0002\u0003").given(offset, 0).given(length, 3).checkEq(stringToCopy, "\u0002\u0002\u0003");
        itest("evosuite", 50).given(s, "\u0000\u0000\u0000").given(offset, 0).given(length, 3).checkEq(stringToCopy, "\u0000\u0000\u0000");
        itest("evosuite", 50).given(s, "n4rSOM>/~?8_;bbnW").given(offset, 0).given(length, 17).checkEq(stringToCopy, "n4rSOM>/~?8_;bbnW");
        itest("evosuite", 50).given(s, "7").given(offset, 0).given(length, 1).checkEq(stringToCopy, "7");
        itest("evosuite", 50).given(s, "TPOS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPOS");
        itest("evosuite", 50).given(s, "M&qmD\"yjOAnj").given(offset, 0).given(length, 12).checkEq(stringToCopy, "M&qmD\"yjOAnj");
        itest("randoop", 50).given(s, "TPA").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TPA");
        itest("evosuite", 50).given(s, "TCON").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCON");
        itest("randoop", 50).given(s, "WCOP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOP");
        itest("evosuite", 50).given(s, "ZB0_;DU1bLvpP%Zeke").given(offset, 0).given(length, 18).checkEq(stringToCopy, "ZB0_;DU1bLvpP%Zeke");
        itest("dev", 50).given(s, "eng").given(offset, 0).given(length, 3).checkEq(stringToCopy, "eng");
        itest("randoop", 50).given(s, "TT2").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TT2");
        itest("randoop", 50).given(s, "\u0006\n").given(offset, 0).given(length, 2).checkEq(stringToCopy, "\u0006\n");
        itest("evosuite", 50).given(s, "K").given(offset, 0).given(length, 1).checkEq(stringToCopy, "K");
        itest("dev", 50).given(s, "OFFICIALAUDIOFILEURL").given(offset, 0).given(length, 20).checkEq(stringToCopy, "OFFICIALAUDIOFILEURL");
        itest("dev", 50).given(s, "TITLE1234567890123456789012345").given(offset, 0).given(length, 30).checkEq(stringToCopy, "TITLE1234567890123456789012345");
        itest("dev", 50).given(s, "PUBLISHERURL").given(offset, 0).given(length, 12).checkEq(stringToCopy, "PUBLISHERURL");
        itest("randoop", 50).given(s, "WORS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WORS");
        itest("evosuite", 50).given(s, "TP1").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TP1");
        itest("evosuite", 50).given(s, "KiQ8y}UmO&HM}").given(offset, 0).given(length, 13).checkEq(stringToCopy, "KiQ8y}UmO&HM}");
        itest("dev", 50).given(s, "3DI").given(offset, 0).given(length, 3).checkEq(stringToCopy, "3DI");
        itest("evosuite", 50).given(s, "IW").given(offset, 0).given(length, 2).checkEq(stringToCopy, "IW");
        itest("evosuite", 50).given(s, "TPE1").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE1");
        itest("evosuite", 50).given(s, "TPA").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TPA");
        itest("randoop", 50).given(s, "CCITT J.17").given(offset, 6).given(length, 1).checkEq(stringToCopy, "J");
        itest("randoop", 50).given(s, "3DI").given(offset, 0).given(length, 3).checkEq(stringToCopy, "3DI");
        itest("evosuite", 50).given(s, "z").given(offset, 0).given(length, 1).checkEq(stringToCopy, "z");
        itest("randoop", 50).given(s, "WCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WCOM");
        itest("randoop", 50).given(s, "TPE2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPE2");
        itest("randoop", 50).given(s, "TIT1").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TIT1");
        itest("randoop", 50).given(s, "Dual mono").given(offset, 0).given(length, 9).checkEq(stringToCopy, "Dual mono");
        itest("randoop", 50).given(s, "2.5").given(offset, 0).given(length, 3).checkEq(stringToCopy, "2.5");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=false, id=, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]").given(offset, 52).given(length, 11).checkEq(stringToCopy, "lse, id=, c");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]").given(offset, 0).given(length, 126).checkEq(stringToCopy, "ID3v2ChapterTOCFrameData [isRoot=false, isOrdered=true, id=Mono, children=[ISO-8859-1, Stereo, ISO-8859-1, TRK], subframes=[]]");
        itest("dev", 50).given(s, "TCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCOM");
        itest("evosuite", 50).given(s, "i").given(offset, 0).given(length, 1).checkEq(stringToCopy, "i");
        itest("randoop", 50).given(s, "0").given(offset, 0).given(length, 1).checkEq(stringToCopy, "0");
        itest("dev", 50).given(s, "TBPM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TBPM");
        itest("evosuite", 50).given(s, "Stp").given(offset, 0).given(length, 4).checkEq(stringToCopy, "Stp");
        itest("dev", 50).given(s, "OFFICIALAUDIOSOURCEURL").given(offset, 0).given(length, 22).checkEq(stringToCopy, "OFFICIALAUDIOSOURCEURL");
        itest("evosuite", 50).given(s, "Soul").given(offset, 0).given(length, 4).checkEq(stringToCopy, "Soul");
        itest("randoop", 50).given(s, "TCM").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TCM");
        itest("randoop", 50).given(s, "I").given(offset, 0).given(length, 1).checkEq(stringToCopy, "I");
        itest("randoop", 50).given(s, "UTF-16BE").given(offset, 0).given(length, 8).checkEq(stringToCopy, "UTF-16BE");
        itest("evosuite", 50).given(s, "V?97bL`1^4").given(offset, 0).given(length, 10).checkEq(stringToCopy, "V?97bL`1^4");
        itest("randoop", 50).given(s, "ID3v2ChapterTOCFrameData [isRoot=true, isOrdered=false, id=TOPE, children=[Intensity & M/S stereo, TKEY, TCR, WCOP, I], subframes=[]]").given(offset, 0).given(length, 133).checkEq(stringToCopy, "ID3v2ChapterTOCFrameData [isRoot=true, isOrdered=false, id=TOPE, children=[Intensity & M/S stereo, TKEY, TCR, WCOP, I], subframes=[]]");
        itest("randoop", 50).given(s, "CCITT J.17").given(offset, 0).given(length, 10).checkEq(stringToCopy, "CCITT J.17");
        itest("randoop", 50).given(s, "COM").given(offset, 0).given(length, 3).checkEq(stringToCopy, "COM");
        itest("dev", 50).given(s, "WOAF").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAF");
        itest("randoop", 50).given(s, "TIT2").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TIT2");
        itest("randoop", 50).given(s, "Bands 4-31").given(offset, 0).given(length, 10).checkEq(stringToCopy, "Bands 4-31");
        itest("evosuite", 50).given(s, "ng").given(offset, 0).given(length, 2).checkEq(stringToCopy, "ng");
        itest("evosuite", 50).given(s, "TRCK").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TRCK");
        itest("dev", 50).given(s, "TCON").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCON");
        itest("evosuite", 50).given(s, "D'").given(offset, 0).given(length, 2).checkEq(stringToCopy, "D'");
        itest("evosuite", 50).given(s, "WOAS").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WOAS");
        itest("dev", 50).given(s, "URL").given(offset, 0).given(length, 3).checkEq(stringToCopy, "URL");
        itest("dev", 50).given(s, "PAYMENTURL").given(offset, 0).given(length, 10).checkEq(stringToCopy, "PAYMENTURL");
        itest("randoop", 50).given(s, "PIC").given(offset, 0).given(length, 3).checkEq(stringToCopy, "PIC");
        itest("evosuite", 50).given(s, "TCOM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCOM");
        itest("dev", 50).given(s, "2001").given(offset, 0).given(length, 4).checkEq(stringToCopy, "2001");
        itest("randoop", 50).given(s, "WXXX").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WXXX");
        itest("randoop", 50).given(s, "POPM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "POPM");
        itest("randoop", 50).given(s, "COMM").given(offset, 0).given(length, 4).checkEq(stringToCopy, "COMM");
        itest("evosuite", 50).given(s, "TDAT").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TDAT");
        itest("randoop", 50).given(s, "1").given(offset, 0).given(length, 1).checkEq(stringToCopy, "1");
        itest("randoop", 50).given(s, "TCMP").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TCMP");
        itest("evosuite", 50).given(s, "COM").given(offset, 0).given(length, 3).checkEq(stringToCopy, "COM");
        itest("evosuite", 50).given(s, "WPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "WPUB");
        itest("randoop", 50).given(s, "ID3v2ChapterFrameData [id=None, startTime=7, endTime=2, startOffset=-1, endOffset=10, subframes=[]]").given(offset, 0).given(length, 99).checkEq(stringToCopy, "ID3v2ChapterFrameData [id=None, startTime=7, endTime=2, startOffset=-1, endOffset=10, subframes=[]]");
        itest("randoop", 50).given(s, "USLT").given(offset, 0).given(length, 4).checkEq(stringToCopy, "USLT");
        itest("evosuite", 50).given(s, "TENC").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TENC");
        itest("dev", 50).given(s, "TAG-").given(offset, 0).given(length, 1).checkEq(stringToCopy, "T");
        itest("evosuite", 50).given(s, "TP2").given(offset, 0).given(length, 3).checkEq(stringToCopy, "TP2");
        itest("randoop", 50).given(s, "Intensity & M/S stereo").given(offset, 0).given(length, 22).checkEq(stringToCopy, "Intensity & M/S stereo");
        itest("randoop", 50).given(s, "TOPE").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TOPE");
        itest("randoop", 50).given(s, "UTF-8").given(offset, 0).given(length, 5).checkEq(stringToCopy, "UTF-8");
        itest("randoop", 50).given(s, "UTF-8: 0").given(offset, 0).given(length, 8).checkEq(stringToCopy, "UTF-8: 0");
        itest("randoop", 50).given(s, "TPUB").given(offset, 0).given(length, 4).checkEq(stringToCopy, "TPUB");
        itest("dev", 50).given(s, "1997").given(offset, 0).given(length, 4).checkEq(stringToCopy, "1997");
        itest("evosuite", 50).given(s, "E(Px$3t+#Fp").given(offset, 0).given(length, 11).checkEq(stringToCopy, "E(Px$3t+#Fp");
        itest("evosuite", 50).given(s, "Trailer").given(offset, 0).given(length, 7).checkEq(stringToCopy, "Trailer");
        itest("evosuite", 50).given(s, "1").given(offset, 0).given(length, 1).checkEq(stringToCopy, "1");
        itest("dev", 50).given(s, "ALBUM").given(offset, 0).given(length, 5).checkEq(stringToCopy, "ALBUM");
        itest("randoop", 50).given(s, "Windows Media Player 9 Series").given(offset, 0).given(length, 29).checkEq(stringToCopy, "Windows Media Player 9 Series");
        itest("evosuite", 50).given(s, "1RMi").given(offset, 0).given(length, 4).checkEq(stringToCopy, "1RMi");
        itest("randoop", 50).given(s, "Bands 8-31").given(offset, 0).given(length, 10).checkEq(stringToCopy, "Bands 8-31");
        byte[] srcBytes = stringToCopy.getBytes(charsetName);
        if (srcBytes.length > 0) {
            System.arraycopy(srcBytes, 0, bytes, destOffset, srcBytes.length);
        }
    }

    public static String trimStringRight(String s) {
        int endPosition = s.length() - 1;
        char endChar;
        while (endPosition >= 0) {
            endChar = s.charAt(endPosition);
            if (endChar > 32) {
                break;
            }
            endPosition--;
        }
        if (endPosition == s.length() - 1) {
            return s;
        } else if (endPosition < 0) {
            return "";
        }
        return s.substring(0, endPosition + 1);
    }

    public static String padStringRight(String s, int length, char padWith) {
        if (s.length() >= length) {
            return s;
        }
        StringBuilder stringBuffer = new StringBuilder(s);
        while (stringBuffer.length() < length) {
            stringBuffer.append(padWith);
        }
        return stringBuffer.toString();
    }

    public static boolean checkBit(byte b, int bitPosition) {
        return ((b & (0x01 << bitPosition)) != 0);
    }

    public static byte setBit(byte b, int bitPosition, boolean value) {
        byte newByte;
        if (value) {
            newByte = (byte) (b | ((byte) 0x01 << bitPosition));
            itest("randoop", 88).given(b, 13).given(bitPosition, 35).checkEq(newByte, 13);
            itest("randoop", 88).given(b, 12).given(bitPosition, 519).checkEq(newByte, -116);
            itest("randoop", 88).given(b, 0).given(bitPosition, 59).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 20).given(bitPosition, 318704907).checkEq(newByte, 20);
            itest("randoop", 88).given(b, -1).given(bitPosition, 8651264).checkEq(newByte, -1);
            itest("randoop", 88).given(b, 13).given(bitPosition, 33817616).checkEq(newByte, 13);
            itest("randoop", 88).given(b, 18).given(bitPosition, 25600).checkEq(newByte, 19);
            itest("randoop", 88).given(b, 20).given(bitPosition, 51).checkEq(newByte, 20);
            itest("evosuite", 88).given(b, 113).given(bitPosition, 113).checkEq(newByte, 113);
            itest("randoop", 88).given(b, 1).given(bitPosition, 107).checkEq(newByte, 1);
            itest("dev", 88).given(b, 0).given(bitPosition, 4).checkEq(newByte, 16);
            itest("randoop", 88).given(b, 5).given(bitPosition, 42).checkEq(newByte, 5);
            itest("evosuite", 88).given(b, 0).given(bitPosition, 4).checkEq(newByte, 16);
            itest("randoop", 88).given(b, 9).given(bitPosition, 49).checkEq(newByte, 9);
            itest("randoop", 88).given(b, 6).given(bitPosition, 100).checkEq(newByte, 22);
            itest("randoop", 88).given(b, 10).given(bitPosition, 11).checkEq(newByte, 10);
            itest("randoop", 88).given(b, 3).given(bitPosition, 171).checkEq(newByte, 3);
            itest("randoop", 88).given(b, 0).given(bitPosition, 374).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 4).given(bitPosition, 52).checkEq(newByte, 4);
            itest("randoop", 88).given(b, 22).given(bitPosition, 15).checkEq(newByte, 22);
            itest("evosuite", 88).given(b, 0).given(bitPosition, 0).checkEq(newByte, 1);
            itest("dev", 88).given(b, -54).given(bitPosition, 4).checkEq(newByte, -38);
            itest("dev", 88).given(b, -54).given(bitPosition, 7).checkEq(newByte, -54);
            itest("dev", 88).given(b, -54).given(bitPosition, 0).checkEq(newByte, -53);
            itest("randoop", 88).given(b, 14).given(bitPosition, 139).checkEq(newByte, 14);
            itest("randoop", 88).given(b, 0).given(bitPosition, 7).checkEq(newByte, -128);
            itest("evosuite", 88).given(b, 16).given(bitPosition, 4).checkEq(newByte, 16);
            itest("randoop", 88).given(b, 6).given(bitPosition, 10).checkEq(newByte, 6);
            itest("evosuite", 88).given(b, 0).given(bitPosition, 6).checkEq(newByte, 64);
            itest("randoop", 88).given(b, 1).given(bitPosition, 15).checkEq(newByte, 1);
            itest("randoop", 88).given(b, 12).given(bitPosition, 73).checkEq(newByte, 12);
            itest("randoop", 88).given(b, 20).given(bitPosition, 68359680).checkEq(newByte, 21);
            itest("evosuite", 88).given(b, 0).given(bitPosition, -24).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 19).given(bitPosition, 21312000).checkEq(newByte, 19);
            itest("randoop", 88).given(b, 100).given(bitPosition, 442).checkEq(newByte, 100);
            itest("randoop", 88).given(b, 0).given(bitPosition, 190).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 0).given(bitPosition, 347).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 7).given(bitPosition, -1).checkEq(newByte, 7);
            itest("evosuite", 88).given(b, -16).given(bitPosition, -16).checkEq(newByte, -16);
            itest("dev", 88).given(b, 0).given(bitPosition, 7).checkEq(newByte, -128);
            itest("randoop", 88).given(b, 0).given(bitPosition, 15056780).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 8).given(bitPosition, 10).checkEq(newByte, 8);
            itest("randoop", 88).given(b, -1).given(bitPosition, 0).checkEq(newByte, -1);
            itest("dev", 88).given(b, 0).given(bitPosition, 6).checkEq(newByte, 64);
            itest("randoop", 88).given(b, 14).given(bitPosition, 10).checkEq(newByte, 14);
            itest("randoop", 88).given(b, 0).given(bitPosition, 27575950).checkEq(newByte, 0);
            itest("randoop", 88).given(b, 0).given(bitPosition, 44).checkEq(newByte, 0);
        } else {
            newByte = (byte) (b & (~((byte) 0x01 << bitPosition)));
            itest("randoop", 90).given(b, 116).given(bitPosition, 6).checkEq(newByte, 52);
            itest("randoop", 90).given(b, 16).given(bitPosition, -1).checkEq(newByte, 16);
            itest("dev", 90).given(b, 0).given(bitPosition, 2).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 0).given(bitPosition, 2).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 116).given(bitPosition, 7).checkEq(newByte, 116);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 6).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 79).given(bitPosition, 7).checkEq(newByte, 79);
            itest("randoop", 90).given(b, 14).given(bitPosition, 40).checkEq(newByte, 14);
            itest("randoop", 90).given(b, 22).given(bitPosition, 327).checkEq(newByte, 22);
            itest("randoop", 90).given(b, 0).given(bitPosition, 3).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, -15).given(bitPosition, 0).checkEq(newByte, -16);
            itest("evosuite", 90).given(b, 16).given(bitPosition, 6).checkEq(newByte, 16);
            itest("dev", 90).given(b, -54).given(bitPosition, 3).checkEq(newByte, -62);
            itest("randoop", 90).given(b, 11).given(bitPosition, 33817616).checkEq(newByte, 11);
            itest("randoop", 90).given(b, 0).given(bitPosition, 255).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 5).checkEq(newByte, 0);
            itest("dev", 90).given(b, -128).given(bitPosition, 6).checkEq(newByte, -128);
            itest("dev", 90).given(b, 0).given(bitPosition, 1).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 3).given(bitPosition, 134414336).checkEq(newByte, 2);
            itest("evosuite", 90).given(b, 4).given(bitPosition, 6).checkEq(newByte, 4);
            itest("evosuite", 90).given(b, -67).given(bitPosition, -67).checkEq(newByte, -67);
            itest("dev", 90).given(b, 64).given(bitPosition, 5).checkEq(newByte, 64);
            itest("evosuite", 90).given(b, 4).given(bitPosition, 5).checkEq(newByte, 4);
            itest("evosuite", 90).given(b, 97).given(bitPosition, 0).checkEq(newByte, 96);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 0).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 52).given(bitPosition, 5).checkEq(newByte, 20);
            itest("randoop", 90).given(b, 11).given(bitPosition, 77).checkEq(newByte, 11);
            itest("randoop", 90).given(b, -128).given(bitPosition, 7).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 14).given(bitPosition, 5).checkEq(newByte, 14);
            itest("randoop", 90).given(b, 1).given(bitPosition, 197634).checkEq(newByte, 1);
            itest("randoop", 90).given(b, 110).given(bitPosition, 7).checkEq(newByte, 110);
            itest("evosuite", 90).given(b, 4).given(bitPosition, 7).checkEq(newByte, 4);
            itest("evosuite", 90).given(b, 18).given(bitPosition, 6).checkEq(newByte, 18);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 7).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 20).given(bitPosition, 29362048).checkEq(newByte, 20);
            itest("randoop", 90).given(b, 0).given(bitPosition, 1).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 14).given(bitPosition, 6).checkEq(newByte, 14);
            itest("randoop", 90).given(b, 79).given(bitPosition, 6).checkEq(newByte, 15);
            itest("evosuite", 90).given(b, 18).given(bitPosition, 7).checkEq(newByte, 18);
            itest("dev", 90).given(b, 0).given(bitPosition, 3).checkEq(newByte, 0);
            itest("dev", 90).given(b, 0).given(bitPosition, 5).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 14).given(bitPosition, 7).checkEq(newByte, 14);
            itest("randoop", 90).given(b, 0).given(bitPosition, 167777795).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 9).given(bitPosition, 154).checkEq(newByte, 9);
            itest("evosuite", 90).given(b, 0).given(bitPosition, -2147483648).checkEq(newByte, 0);
            itest("dev", 90).given(b, 0).given(bitPosition, 4).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 15).given(bitPosition, 5).checkEq(newByte, 15);
            itest("randoop", 90).given(b, 0).given(bitPosition, 0).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 0).given(bitPosition, 32).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 2).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 0).given(bitPosition, 6).checkEq(newByte, 0);
            itest("dev", 90).given(b, -54).given(bitPosition, 7).checkEq(newByte, 74);
            itest("randoop", 90).given(b, -128).given(bitPosition, 5).checkEq(newByte, -128);
            itest("dev", 90).given(b, 0).given(bitPosition, 6).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 100).given(bitPosition, 16986634).checkEq(newByte, 100);
            itest("randoop", 90).given(b, 8).given(bitPosition, 128).checkEq(newByte, 8);
            itest("evosuite", 90).given(b, 109).given(bitPosition, 8).checkEq(newByte, 109);
            itest("dev", 90).given(b, -54).given(bitPosition, 0).checkEq(newByte, -54);
            itest("randoop", 90).given(b, -128).given(bitPosition, 6).checkEq(newByte, -128);
            itest("randoop", 90).given(b, 10).given(bitPosition, 0).checkEq(newByte, 10);
            itest("randoop", 90).given(b, 11).given(bitPosition, 0).checkEq(newByte, 10);
            itest("randoop", 90).given(b, 8).given(bitPosition, 70).checkEq(newByte, 8);
            itest("randoop", 90).given(b, 7).given(bitPosition, 6373889).checkEq(newByte, 5);
            itest("randoop", 90).given(b, 18).given(bitPosition, 67).checkEq(newByte, 18);
            itest("randoop", 90).given(b, 8).given(bitPosition, 15).checkEq(newByte, 8);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 992).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 16).given(bitPosition, 7).checkEq(newByte, 16);
            itest("randoop", 90).given(b, -116).given(bitPosition, 57).checkEq(newByte, -116);
            itest("dev", 90).given(b, 0).given(bitPosition, 7).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 4).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 100).given(bitPosition, 252379406).checkEq(newByte, 100);
            itest("randoop", 90).given(b, 20).given(bitPosition, 298).checkEq(newByte, 20);
            itest("randoop", 90).given(b, 46).given(bitPosition, 5).checkEq(newByte, 14);
            itest("randoop", 90).given(b, 16).given(bitPosition, 49).checkEq(newByte, 16);
            itest("randoop", 90).given(b, 8).given(bitPosition, 134).checkEq(newByte, 8);
            itest("dev", 90).given(b, 0).given(bitPosition, 0).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 19).given(bitPosition, 18).checkEq(newByte, 19);
            itest("randoop", 90).given(b, 0).given(bitPosition, 7).checkEq(newByte, 0);
            itest("dev", 90).given(b, 64).given(bitPosition, 4).checkEq(newByte, 64);
            itest("evosuite", 90).given(b, -1).given(bitPosition, 120).checkEq(newByte, -1);
            itest("randoop", 90).given(b, -1).given(bitPosition, 7).checkEq(newByte, 127);
            itest("randoop", 90).given(b, 0).given(bitPosition, 67).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 1).checkEq(newByte, 0);
            itest("evosuite", 90).given(b, 16).given(bitPosition, 5).checkEq(newByte, 16);
            itest("randoop", 90).given(b, 0).given(bitPosition, 4).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 3).given(bitPosition, 6).checkEq(newByte, 3);
            itest("evosuite", 90).given(b, 64).given(bitPosition, 4).checkEq(newByte, 64);
            itest("evosuite", 90).given(b, 4).given(bitPosition, 4).checkEq(newByte, 4);
            itest("randoop", 90).given(b, 16).given(bitPosition, 100).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 110).given(bitPosition, 6).checkEq(newByte, 46);
            itest("evosuite", 90).given(b, 64).given(bitPosition, 5).checkEq(newByte, 64);
            itest("randoop", 90).given(b, 12).given(bitPosition, 65).checkEq(newByte, 12);
            itest("evosuite", 90).given(b, 0).given(bitPosition, 3).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 13).given(bitPosition, 251660032).checkEq(newByte, 12);
            itest("randoop", 90).given(b, 6).given(bitPosition, 100).checkEq(newByte, 6);
            itest("randoop", 90).given(b, 19).given(bitPosition, 219026435).checkEq(newByte, 19);
            itest("randoop", 90).given(b, 18).given(bitPosition, 16986634).checkEq(newByte, 18);
            itest("randoop", 90).given(b, 127).given(bitPosition, 318704907).checkEq(newByte, 127);
            itest("randoop", 90).given(b, 19).given(bitPosition, 16).checkEq(newByte, 19);
            itest("randoop", 90).given(b, 0).given(bitPosition, -1).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 5).given(bitPosition, 18).checkEq(newByte, 5);
            itest("randoop", 90).given(b, 6).given(bitPosition, 16).checkEq(newByte, 6);
            itest("randoop", 90).given(b, 20).given(bitPosition, 303237376).checkEq(newByte, 20);
            itest("randoop", 90).given(b, 0).given(bitPosition, 127).checkEq(newByte, 0);
            itest("randoop", 90).given(b, 0).given(bitPosition, 5).checkEq(newByte, 0);
        }
        return newByte;
    }

    public static int shiftByte(byte c, int places) {
        int i = c & 0xff;
        itest("dev", 96).given(c, -21).checkEq(i, 235);
        itest("randoop", 96).given(c, 32).checkEq(i, 32);
        itest("evosuite", 96).given(c, -6).checkEq(i, 250);
        itest("randoop", 96).given(c, 96).checkEq(i, 96);
        itest("evosuite", 96).given(c, 85).checkEq(i, 85);
        itest("evosuite", 96).given(c, -59).checkEq(i, 197);
        itest("evosuite", 96).given(c, -32).checkEq(i, 224);
        itest("evosuite", 96).given(c, 123).checkEq(i, 123);
        itest("evosuite", 96).given(c, -21).checkEq(i, 235);
        itest("evosuite", 96).given(c, 117).checkEq(i, 117);
        itest("randoop", 96).given(c, -54).checkEq(i, 202);
        itest("randoop", 96).given(c, 52).checkEq(i, 52);
        itest("randoop", 96).given(c, 49).checkEq(i, 49);
        itest("evosuite", 96).given(c, 102).checkEq(i, 102);
        itest("randoop", 96).given(c, 69).checkEq(i, 69);
        itest("evosuite", 96).given(c, -7).checkEq(i, 249);
        itest("evosuite", 96).given(c, 78).checkEq(i, 78);
        itest("evosuite", 96).given(c, 1).checkEq(i, 1);
        itest("evosuite", 96).given(c, -14).checkEq(i, 242);
        itest("evosuite", 96).given(c, -25).checkEq(i, 231);
        itest("randoop", 96).given(c, 20).checkEq(i, 20);
        itest("evosuite", 96).given(c, -37).checkEq(i, 219);
        itest("evosuite", 96).given(c, 19).checkEq(i, 19);
        itest("evosuite", 96).given(c, 46).checkEq(i, 46);
        itest("evosuite", 96).given(c, -56).checkEq(i, 200);
        itest("evosuite", 96).given(c, -9).checkEq(i, 247);
        itest("dev", 96).given(c, -112).checkEq(i, 144);
        itest("dev", 96).given(c, -14).checkEq(i, 242);
        itest("dev", 96).given(c, -37).checkEq(i, 219);
        itest("evosuite", 96).given(c, -99).checkEq(i, 157);
        itest("dev", 96).given(c, 3).checkEq(i, 3);
        itest("evosuite", 96).given(c, -77).checkEq(i, 179);
        itest("evosuite", 96).given(c, -120).checkEq(i, 136);
        itest("dev", 96).given(c, 8).checkEq(i, 8);
        itest("randoop", 96).given(c, 71).checkEq(i, 71);
        itest("evosuite", 96).given(c, 45).checkEq(i, 45);
        itest("evosuite", 96).given(c, -36).checkEq(i, 220);
        itest("evosuite", 96).given(c, 106).checkEq(i, 106);
        itest("evosuite", 96).given(c, 34).checkEq(i, 34);
        itest("evosuite", 96).given(c, -4).checkEq(i, 252);
        itest("randoop", 96).given(c, 2).checkEq(i, 2);
        itest("evosuite", 96).given(c, 66).checkEq(i, 66);
        itest("evosuite", 96).given(c, -111).checkEq(i, 145);
        itest("evosuite", 96).given(c, -28).checkEq(i, 228);
        itest("evosuite", 96).given(c, 77).checkEq(i, 77);
        itest("dev", 96).given(c, 5).checkEq(i, 5);
        itest("randoop", 96).given(c, 18).checkEq(i, 18);
        itest("dev", 96).given(c, 10).checkEq(i, 10);
        itest("randoop", 96).given(c, 84).checkEq(i, 84);
        itest("evosuite", 96).given(c, 53).checkEq(i, 53);
        itest("evosuite", 96).given(c, 127).checkEq(i, 127);
        itest("evosuite", 96).given(c, 10).checkEq(i, 10);
        itest("dev", 96).given(c, -7).checkEq(i, 249);
        itest("randoop", 96).given(c, 51).checkEq(i, 51);
        itest("evosuite", 96).given(c, -30).checkEq(i, 226);
        itest("randoop", 96).given(c, 0).checkEq(i, 0);
        itest("evosuite", 96).given(c, -68).checkEq(i, 188);
        itest("randoop", 96).given(c, 83).checkEq(i, 83);
        itest("dev", 96).given(c, 85).checkEq(i, 85);
        itest("evosuite", 96).given(c, -114).checkEq(i, 142);
        itest("dev", 96).given(c, -80).checkEq(i, 176);
        itest("dev", 96).given(c, 11).checkEq(i, 11);
        itest("randoop", 96).given(c, 16).checkEq(i, 16);
        itest("evosuite", 96).given(c, -92).checkEq(i, 164);
        itest("evosuite", 96).given(c, 118).checkEq(i, 118);
        itest("evosuite", 96).given(c, -81).checkEq(i, 175);
        itest("randoop", 96).given(c, -1).checkEq(i, 255);
        itest("evosuite", 96).given(c, -128).checkEq(i, 128);
        itest("dev", 96).given(c, 65).checkEq(i, 65);
        itest("evosuite", 96).given(c, -91).checkEq(i, 165);
        itest("evosuite", 96).given(c, -105).checkEq(i, 151);
        itest("dev", 96).given(c, 67).checkEq(i, 67);
        itest("randoop", 96).given(c, 36).checkEq(i, 36);
        itest("randoop", 96).given(c, 3).checkEq(i, 3);
        itest("dev", 96).given(c, 1).checkEq(i, 1);
        itest("evosuite", 96).given(c, -1).checkEq(i, 255);
        itest("randoop", 96).given(c, 48).checkEq(i, 48);
        itest("evosuite", 96).given(c, -109).checkEq(i, 147);
        itest("randoop", 96).given(c, 116).checkEq(i, 116);
        itest("randoop", 96).given(c, 111).checkEq(i, 111);
        itest("dev", 96).given(c, 2).checkEq(i, 2);
        itest("randoop", 96).given(c, 4).checkEq(i, 4);
        itest("evosuite", 96).given(c, 81).checkEq(i, 81);
        itest("randoop", 96).given(c, 78).checkEq(i, 78);
        itest("randoop", 96).given(c, -116).checkEq(i, 140);
        itest("evosuite", 96).given(c, -78).checkEq(i, 178);
        itest("evosuite", 96).given(c, -3).checkEq(i, 253);
        itest("dev", 96).given(c, 15).checkEq(i, 15);
        itest("dev", 96).given(c, 112).checkEq(i, 112);
        itest("randoop", 96).given(c, 5).checkEq(i, 5);
        itest("randoop", 96).given(c, 68).checkEq(i, 68);
        itest("randoop", 96).given(c, 14).checkEq(i, 14);
        itest("randoop", 96).given(c, 7).checkEq(i, 7);
        itest("evosuite", 96).given(c, 91).checkEq(i, 91);
        itest("randoop", 96).given(c, 46).checkEq(i, 46);
        itest("evosuite", 96).given(c, -90).checkEq(i, 166);
        itest("evosuite", 96).given(c, -122).checkEq(i, 134);
        itest("dev", 96).given(c, 0).checkEq(i, 0);
        itest("randoop", 96).given(c, 44).checkEq(i, 44);
        itest("evosuite", 96).given(c, -10).checkEq(i, 246);
        itest("randoop", 96).given(c, 8).checkEq(i, 8);
        itest("evosuite", 96).given(c, -119).checkEq(i, 137);
        itest("randoop", 96).given(c, 12).checkEq(i, 12);
        itest("randoop", 96).given(c, 127).checkEq(i, 127);
        itest("randoop", 96).given(c, 9).checkEq(i, 9);
        itest("evosuite", 96).given(c, -79).checkEq(i, 177);
        itest("evosuite", 96).given(c, 16).checkEq(i, 16);
        itest("randoop", 96).given(c, 100).checkEq(i, 100);
        itest("randoop", 96).given(c, 10).checkEq(i, 10);
        itest("randoop", 96).given(c, 6).checkEq(i, 6);
        itest("randoop", 96).given(c, 1).checkEq(i, 1);
        itest("randoop", 96).given(c, 86).checkEq(i, 86);
        itest("evosuite", 96).given(c, -55).checkEq(i, 201);
        itest("evosuite", 96).given(c, 63).checkEq(i, 63);
        itest("dev", 96).given(c, -100).checkEq(i, 156);
        itest("evosuite", 96).given(c, -11).checkEq(i, 245);
        itest("evosuite", 96).given(c, 36).checkEq(i, 36);
        itest("dev", 96).given(c, 4).checkEq(i, 4);
        itest("randoop", 96).given(c, 22).checkEq(i, 22);
        itest("evosuite", 96).given(c, -5).checkEq(i, 251);
        itest("dev", 96).given(c, 9).checkEq(i, 9);
        itest("evosuite", 96).given(c, 31).checkEq(i, 31);
        itest("evosuite", 96).given(c, -53).checkEq(i, 203);
        itest("evosuite", 96).given(c, 24).checkEq(i, 24);
        itest("evosuite", 96).given(c, -69).checkEq(i, 187);
        itest("evosuite", 96).given(c, -31).checkEq(i, 225);
        itest("randoop", 96).given(c, 104).checkEq(i, 104);
        itest("evosuite", 96).given(c, 83).checkEq(i, 83);
        itest("dev", 96).given(c, 71).checkEq(i, 71);
        itest("evosuite", 96).given(c, 90).checkEq(i, 90);
        itest("dev", 96).given(c, 83).checkEq(i, 83);
        itest("evosuite", 96).given(c, 68).checkEq(i, 68);
        itest("evosuite", 96).given(c, 119).checkEq(i, 119);
        itest("randoop", 96).given(c, 15).checkEq(i, 15);
        itest("evosuite", 96).given(c, -40).checkEq(i, 216);
        itest("randoop", 96).given(c, 50).checkEq(i, 50);
        itest("dev", 96).given(c, 84).checkEq(i, 84);
        itest("evosuite", 96).given(c, -18).checkEq(i, 238);
        itest("evosuite", 96).given(c, -98).checkEq(i, 158);
        itest("dev", 96).given(c, -64).checkEq(i, 192);
        itest("randoop", 96).given(c, 82).checkEq(i, 82);
        itest("evosuite", 96).given(c, -26).checkEq(i, 230);
        itest("dev", 96).given(c, -1).checkEq(i, 255);
        itest("randoop", 96).given(c, 19).checkEq(i, 19);
        itest("evosuite", 96).given(c, -27).checkEq(i, 229);
        itest("evosuite", 96).given(c, 64).checkEq(i, 64);
        itest("evosuite", 96).given(c, -62).checkEq(i, 194);
        itest("randoop", 96).given(c, 73).checkEq(i, 73);
        itest("dev", 96).given(c, -82).checkEq(i, 174);
        itest("evosuite", 96).given(c, -115).checkEq(i, 141);
        itest("evosuite", 96).given(c, 4).checkEq(i, 4);
        itest("dev", 96).given(c, 96).checkEq(i, 96);
        itest("randoop", 96).given(c, 105).checkEq(i, 105);
        itest("dev", 96).given(c, 7).checkEq(i, 7);
        itest("dev", 96).given(c, 20).checkEq(i, 20);
        itest("evosuite", 96).given(c, -13).checkEq(i, 243);
        itest("randoop", 96).given(c, 75).checkEq(i, 75);
        itest("evosuite", 96).given(c, 69).checkEq(i, 69);
        itest("randoop", 96).given(c, 21).checkEq(i, 21);
        itest("dev", 96).given(c, 18).checkEq(i, 18);
        itest("randoop", 96).given(c, 97).checkEq(i, 97);
        itest("randoop", 96).given(c, 85).checkEq(i, 85);
        itest("evosuite", 96).given(c, 103).checkEq(i, 103);
        itest("evosuite", 96).given(c, 37).checkEq(i, 37);
        itest("evosuite", 96).given(c, 52).checkEq(i, 52);
        itest("evosuite", 96).given(c, 79).checkEq(i, 79);
        itest("evosuite", 96).given(c, 74).checkEq(i, 74);
        itest("randoop", 96).given(c, 65).checkEq(i, 65);
        itest("evosuite", 96).given(c, 47).checkEq(i, 47);
        itest("evosuite", 96).given(c, 42).checkEq(i, 42);
        itest("randoop", 96).given(c, 11).checkEq(i, 11);
        itest("evosuite", 96).given(c, 96).checkEq(i, 96);
        itest("randoop", 96).given(c, 87).checkEq(i, 87);
        itest("randoop", 96).given(c, 70).checkEq(i, 70);
        itest("evosuite", 96).given(c, 72).checkEq(i, 72);
        itest("dev", 96).given(c, 16).checkEq(i, 16);
        itest("evosuite", 96).given(c, -101).checkEq(i, 155);
        itest("evosuite", 96).given(c, 67).checkEq(i, 67);
        itest("evosuite", 96).given(c, 94).checkEq(i, 94);
        itest("dev", 96).given(c, -5).checkEq(i, 251);
        itest("dev", 96).given(c, -94).checkEq(i, 162);
        itest("randoop", 96).given(c, 101).checkEq(i, 101);
        itest("evosuite", 96).given(c, 114).checkEq(i, 114);
        itest("randoop", 96).given(c, 80).checkEq(i, 80);
        itest("evosuite", 96).given(c, 0).checkEq(i, 0);
        itest("evosuite", 96).given(c, -29).checkEq(i, 227);
        itest("dev", 96).given(c, -128).checkEq(i, 128);
        itest("evosuite", 96).given(c, 29).checkEq(i, 29);
        itest("randoop", 96).given(c, 67).checkEq(i, 67);
        itest("randoop", 96).given(c, -63).checkEq(i, 193);
        itest("randoop", 96).given(c, 13).checkEq(i, 13);
        itest("randoop", 96).given(c, 112).checkEq(i, 112);
        itest("randoop", 96).given(c, 89).checkEq(i, 89);
        itest("randoop", 96).given(c, 79).checkEq(i, 79);
        itest("dev", 96).given(c, 48).checkEq(i, 48);
        itest("evosuite", 96).given(c, -16).checkEq(i, 240);
        itest("evosuite", 96).given(c, 80).checkEq(i, 80);
        itest("dev", 96).given(c, 24).checkEq(i, 24);
        itest("randoop", 96).given(c, 33).checkEq(i, 33);
        itest("randoop", 96).given(c, 77).checkEq(i, 77);
        itest("dev", 96).given(c, -13).checkEq(i, 243);
        itest("randoop", 96).given(c, 99).checkEq(i, 99);
        itest("evosuite", 96).given(c, 60).checkEq(i, 60);
        itest("dev", 96).given(c, 14).checkEq(i, 14);
        itest("evosuite", 96).given(c, 27).checkEq(i, 27);
        itest("evosuite", 96).given(c, -24).checkEq(i, 232);
        itest("evosuite", 96).given(c, -47).checkEq(i, 209);
        itest("randoop", 96).given(c, 45).checkEq(i, 45);
        if (places < 0) {
            return i << -places;
        } else if (places > 0) {
            return i >> places;
        }
        return i;
    }

    public static int unpackInteger(byte b1, byte b2, byte b3, byte b4) {
        int value = b4 & 0xff;
        itest("dev", 106).given(b4, 63).checkEq(value, 63);
        itest("evosuite", 106).given(b4, 21).checkEq(value, 21);
        itest("evosuite", 106).given(b4, 9).checkEq(value, 9);
        itest("dev", 106).given(b4, 3).checkEq(value, 3);
        itest("evosuite", 106).given(b4, -98).checkEq(value, 158);
        itest("evosuite", 106).given(b4, -52).checkEq(value, 204);
        itest("evosuite", 106).given(b4, -125).checkEq(value, 131);
        itest("evosuite", 106).given(b4, 112).checkEq(value, 112);
        itest("evosuite", 106).given(b4, 48).checkEq(value, 48);
        itest("evosuite", 106).given(b4, 41).checkEq(value, 41);
        itest("evosuite", 106).given(b4, -127).checkEq(value, 129);
        itest("evosuite", 106).given(b4, 104).checkEq(value, 104);
        itest("randoop", 106).given(b4, 40).checkEq(value, 40);
        itest("evosuite", 106).given(b4, -115).checkEq(value, 141);
        itest("evosuite", 106).given(b4, -10).checkEq(value, 246);
        itest("evosuite", 106).given(b4, -59).checkEq(value, 197);
        itest("randoop", 106).given(b4, 1).checkEq(value, 1);
        itest("evosuite", 106).given(b4, 15).checkEq(value, 15);
        itest("randoop", 106).given(b4, 48).checkEq(value, 48);
        itest("randoop", 106).given(b4, 20).checkEq(value, 20);
        itest("dev", 106).given(b4, 43).checkEq(value, 43);
        itest("randoop", 106).given(b4, 13).checkEq(value, 13);
        itest("evosuite", 106).given(b4, 69).checkEq(value, 69);
        itest("dev", 106).given(b4, 36).checkEq(value, 36);
        itest("evosuite", 106).given(b4, -13).checkEq(value, 243);
        itest("dev", 106).given(b4, 50).checkEq(value, 50);
        itest("randoop", 106).given(b4, 67).checkEq(value, 67);
        itest("evosuite", 106).given(b4, -7).checkEq(value, 249);
        itest("evosuite", 106).given(b4, 54).checkEq(value, 54);
        itest("dev", 106).given(b4, 15).checkEq(value, 15);
        itest("evosuite", 106).given(b4, -32).checkEq(value, 224);
        itest("evosuite", 106).given(b4, -27).checkEq(value, 229);
        itest("randoop", 106).given(b4, 9).checkEq(value, 9);
        itest("dev", 106).given(b4, 69).checkEq(value, 69);
        itest("evosuite", 106).given(b4, 74).checkEq(value, 74);
        itest("randoop", 106).given(b4, 6).checkEq(value, 6);
        itest("randoop", 106).given(b4, 5).checkEq(value, 5);
        itest("evosuite", 106).given(b4, 94).checkEq(value, 94);
        itest("evosuite", 106).given(b4, 40).checkEq(value, 40);
        itest("randoop", 106).given(b4, 15).checkEq(value, 15);
        itest("evosuite", 106).given(b4, -103).checkEq(value, 153);
        itest("dev", 106).given(b4, 22).checkEq(value, 22);
        itest("randoop", 106).given(b4, -122).checkEq(value, 134);
        itest("evosuite", 106).given(b4, 102).checkEq(value, 102);
        itest("evosuite", 106).given(b4, 29).checkEq(value, 29);
        itest("randoop", 106).given(b4, 12).checkEq(value, 12);
        itest("dev", 106).given(b4, -60).checkEq(value, 196);
        itest("dev", 106).given(b4, 7).checkEq(value, 7);
        itest("randoop", 106).given(b4, 49).checkEq(value, 49);
        itest("dev", 106).given(b4, 8).checkEq(value, 8);
        itest("evosuite", 106).given(b4, 36).checkEq(value, 36);
        itest("evosuite", 106).given(b4, 43).checkEq(value, 43);
        itest("evosuite", 106).given(b4, 123).checkEq(value, 123);
        itest("evosuite", 106).given(b4, 80).checkEq(value, 80);
        itest("randoop", 106).given(b4, 22).checkEq(value, 22);
        itest("evosuite", 106).given(b4, 33).checkEq(value, 33);
        itest("evosuite", 106).given(b4, 8).checkEq(value, 8);
        itest("evosuite", 106).given(b4, 60).checkEq(value, 60);
        itest("evosuite", 106).given(b4, -22).checkEq(value, 234);
        itest("evosuite", 106).given(b4, 63).checkEq(value, 63);
        itest("evosuite", 106).given(b4, 16).checkEq(value, 16);
        itest("dev", 106).given(b4, 92).checkEq(value, 92);
        itest("dev", 106).given(b4, 41).checkEq(value, 41);
        itest("randoop", 106).given(b4, 4).checkEq(value, 4);
        itest("evosuite", 106).given(b4, 83).checkEq(value, 83);
        itest("evosuite", 106).given(b4, -11).checkEq(value, 245);
        itest("evosuite", 106).given(b4, 13).checkEq(value, 13);
        itest("randoop", 106).given(b4, 2).checkEq(value, 2);
        itest("randoop", 106).given(b4, 45).checkEq(value, 45);
        itest("randoop", 106).given(b4, 0).checkEq(value, 0);
        itest("evosuite", 106).given(b4, 47).checkEq(value, 47);
        itest("dev", 106).given(b4, 106).checkEq(value, 106);
        itest("dev", 106).given(b4, 21).checkEq(value, 21);
        itest("randoop", 106).given(b4, 11).checkEq(value, 11);
        itest("evosuite", 106).given(b4, 32).checkEq(value, 32);
        itest("dev", 106).given(b4, 27).checkEq(value, 27);
        itest("dev", 106).given(b4, 64).checkEq(value, 64);
        itest("evosuite", 106).given(b4, 103).checkEq(value, 103);
        itest("dev", 106).given(b4, 84).checkEq(value, 84);
        itest("dev", 106).given(b4, 47).checkEq(value, 47);
        itest("randoop", 106).given(b4, -1).checkEq(value, 255);
        itest("evosuite", 106).given(b4, 52).checkEq(value, 52);
        itest("evosuite", 106).given(b4, 27).checkEq(value, 27);
        itest("evosuite", 106).given(b4, -55).checkEq(value, 201);
        itest("randoop", 106).given(b4, 14).checkEq(value, 14);
        itest("evosuite", 106).given(b4, 2).checkEq(value, 2);
        itest("evosuite", 106).given(b4, -5).checkEq(value, 251);
        itest("dev", 106).given(b4, -127).checkEq(value, 129);
        itest("evosuite", 106).given(b4, -30).checkEq(value, 226);
        itest("evosuite", 106).given(b4, 0).checkEq(value, 0);
        itest("dev", 106).given(b4, 13).checkEq(value, 13);
        itest("evosuite", 106).given(b4, 24).checkEq(value, 24);
        itest("randoop", 106).given(b4, 82).checkEq(value, 82);
        itest("randoop", 106).given(b4, 34).checkEq(value, 34);
        itest("evosuite", 106).given(b4, 6).checkEq(value, 6);
        itest("dev", 106).given(b4, 100).checkEq(value, 100);
        itest("evosuite", 106).given(b4, -25).checkEq(value, 231);
        itest("dev", 106).given(b4, 10).checkEq(value, 10);
        itest("dev", 106).given(b4, 1).checkEq(value, 1);
        itest("dev", 106).given(b4, 26).checkEq(value, 26);
        itest("evosuite", 106).given(b4, -1).checkEq(value, 255);
        itest("evosuite", 106).given(b4, -14).checkEq(value, 242);
        itest("randoop", 106).given(b4, 10).checkEq(value, 10);
        itest("evosuite", 106).given(b4, -92).checkEq(value, 164);
        itest("randoop", 106).given(b4, 127).checkEq(value, 127);
        itest("evosuite", 106).given(b4, 85).checkEq(value, 85);
        itest("evosuite", 106).given(b4, 31).checkEq(value, 31);
        itest("evosuite", 106).given(b4, 45).checkEq(value, 45);
        itest("dev", 106).given(b4, 19).checkEq(value, 19);
        itest("evosuite", 106).given(b4, -24).checkEq(value, 232);
        itest("dev", 106).given(b4, 12).checkEq(value, 12);
        itest("randoop", 106).given(b4, 100).checkEq(value, 100);
        itest("evosuite", 106).given(b4, 51).checkEq(value, 51);
        itest("randoop", 106).given(b4, 3).checkEq(value, 3);
        itest("dev", 106).given(b4, 33).checkEq(value, 33);
        itest("dev", 106).given(b4, 40).checkEq(value, 40);
        itest("evosuite", 106).given(b4, 18).checkEq(value, 18);
        itest("dev", 106).given(b4, 46).checkEq(value, 46);
        itest("evosuite", 106).given(b4, -6).checkEq(value, 250);
        itest("evosuite", 106).given(b4, -21).checkEq(value, 235);
        itest("evosuite", 106).given(b4, 91).checkEq(value, 91);
        itest("evosuite", 106).given(b4, 64).checkEq(value, 64);
        itest("evosuite", 106).given(b4, 66).checkEq(value, 66);
        itest("randoop", 106).given(b4, 8).checkEq(value, 8);
        itest("evosuite", 106).given(b4, 71).checkEq(value, 71);
        itest("evosuite", 106).given(b4, -26).checkEq(value, 230);
        itest("randoop", 106).given(b4, 7).checkEq(value, 7);
        itest("evosuite", 106).given(b4, 19).checkEq(value, 19);
        itest("randoop", 106).given(b4, 126).checkEq(value, 126);
        itest("randoop", 106).given(b4, 18).checkEq(value, 18);
        itest("evosuite", 106).given(b4, -43).checkEq(value, 213);
        itest("dev", 106).given(b4, 66).checkEq(value, 66);
        itest("evosuite", 106).given(b4, 84).checkEq(value, 84);
        itest("evosuite", 106).given(b4, 50).checkEq(value, 50);
        itest("evosuite", 106).given(b4, 118).checkEq(value, 118);
        itest("evosuite", 106).given(b4, 46).checkEq(value, 46);
        itest("dev", 106).given(b4, 5).checkEq(value, 5);
        itest("evosuite", 106).given(b4, -60).checkEq(value, 196);
        itest("dev", 106).given(b4, 6).checkEq(value, 6);
        itest("evosuite", 106).given(b4, -87).checkEq(value, 169);
        itest("dev", 106).given(b4, 32).checkEq(value, 32);
        itest("dev", 106).given(b4, 9).checkEq(value, 9);
        itest("dev", 106).given(b4, 48).checkEq(value, 48);
        itest("dev", 106).given(b4, 2).checkEq(value, 2);
        itest("randoop", 106).given(b4, 32).checkEq(value, 32);
        itest("randoop", 106).given(b4, 66).checkEq(value, 66);
        itest("dev", 106).given(b4, 4).checkEq(value, 4);
        itest("dev", 106).given(b4, 31).checkEq(value, 31);
        itest("evosuite", 106).given(b4, 23).checkEq(value, 23);
        itest("evosuite", 106).given(b4, -107).checkEq(value, 149);
        itest("dev", 106).given(b4, 0).checkEq(value, 0);
        itest("evosuite", 106).given(b4, -9).checkEq(value, 247);
        itest("evosuite", 106).given(b4, 119).checkEq(value, 119);
        itest("dev", 106).given(b4, 34).checkEq(value, 34);
        itest("evosuite", 106).given(b4, -4).checkEq(value, 252);
        itest("randoop", 106).given(b4, -116).checkEq(value, 140);
        itest("randoop", 106).given(b4, 83).checkEq(value, 83);
        itest("evosuite", 106).given(b4, 73).checkEq(value, 73);
        itest("evosuite", 106).given(b4, -90).checkEq(value, 166);
        itest("dev", 106).given(b4, 11).checkEq(value, 11);
        itest("randoop", 106).given(b4, 19).checkEq(value, 19);
        itest("dev", 106).given(b4, 68).checkEq(value, 68);
        itest("dev", 106).given(b4, 17).checkEq(value, 17);
        itest("evosuite", 106).given(b4, 127).checkEq(value, 127);
        itest("evosuite", 106).given(b4, -40).checkEq(value, 216);
        itest("randoop", 106).given(b4, 111).checkEq(value, 111);
        itest("dev", 106).given(b4, 65).checkEq(value, 65);
        itest("evosuite", 106).given(b4, 114).checkEq(value, 114);
        itest("evosuite", 106).given(b4, -99).checkEq(value, 157);
        itest("randoop", 106).given(b4, 16).checkEq(value, 16);
        itest("dev", 106).given(b4, 20).checkEq(value, 20);
        itest("evosuite", 106).given(b4, 17).checkEq(value, 17);
        itest("dev", 106).given(b4, 104).checkEq(value, 104);
        itest("dev", 106).given(b4, 37).checkEq(value, 37);
        itest("randoop", 106).given(b4, 21).checkEq(value, 21);
        itest("evosuite", 106).given(b4, 37).checkEq(value, 37);
        itest("evosuite", 106).given(b4, 42).checkEq(value, 42);
        itest("evosuite", 106).given(b4, 96).checkEq(value, 96);
        itest("evosuite", 106).given(b4, 68).checkEq(value, 68);
        itest("dev", 106).given(b4, 23).checkEq(value, 23);
        itest("evosuite", 106).given(b4, 1).checkEq(value, 1);
        itest("randoop", 106).given(b4, 112).checkEq(value, 112);
        itest("evosuite", 106).given(b4, 100).checkEq(value, 100);
        itest("dev", 106).given(b4, 54).checkEq(value, 54);
        itest("dev", 106).given(b4, 57).checkEq(value, 57);
        itest("evosuite", 106).given(b4, 5).checkEq(value, 5);
        itest("randoop", 106).given(b4, -83).checkEq(value, 173);
        itest("randoop", 106).given(b4, 78).checkEq(value, 78);
        itest("evosuite", 106).given(b4, 3).checkEq(value, 3);
        value += BufferTools.shiftByte(b3, -8);
        value += BufferTools.shiftByte(b2, -16);
        value += BufferTools.shiftByte(b1, -24);
        return value;
    }

    public static byte[] packInteger(int i) {
        byte[] bytes = new byte[4];
        bytes[3] = (byte) (i & 0xff);
        itest("randoop", 115).given(i, 33).checkEq(bytes[3], 33);
        itest("randoop", 115).given(i, 10).checkEq(bytes[3], 10);
        itest("dev", 115).given(i, 22).checkEq(bytes[3], 22);
        itest("randoop", 115).given(i, 65).checkEq(bytes[3], 65);
        itest("randoop", 115).given(i, 9).checkEq(bytes[3], 9);
        itest("evosuite", 115).given(i, 24).checkEq(bytes[3], 24);
        itest("dev", 115).given(i, 8).checkEq(bytes[3], 8);
        itest("randoop", 115).given(i, 80).checkEq(bytes[3], 80);
        itest("randoop", 115).given(i, 42).checkEq(bytes[3], 42);
        itest("randoop", 115).given(i, 6373889).checkEq(bytes[3], 1);
        itest("randoop", 115).given(i, 101190678).checkEq(bytes[3], 22);
        itest("randoop", 115).given(i, 59).checkEq(bytes[3], 59);
        itest("randoop", 115).given(i, 242).checkEq(bytes[3], -14);
        itest("randoop", 115).given(i, 16986634).checkEq(bytes[3], 10);
        itest("randoop", 115).given(i, 15).checkEq(bytes[3], 15);
        itest("randoop", 115).given(i, 53).checkEq(bytes[3], 53);
        itest("randoop", 115).given(i, 5).checkEq(bytes[3], 5);
        itest("evosuite", 115).given(i, -94).checkEq(bytes[3], -94);
        itest("randoop", 115).given(i, 62).checkEq(bytes[3], 62);
        itest("randoop", 115).given(i, 45).checkEq(bytes[3], 45);
        itest("randoop", 115).given(i, 100865046).checkEq(bytes[3], 22);
        itest("randoop", 115).given(i, 25362324).checkEq(bytes[3], -108);
        itest("randoop", 115).given(i, 128).checkEq(bytes[3], -128);
        itest("dev", 115).given(i, 31).checkEq(bytes[3], 31);
        itest("evosuite", 115).given(i, -48).checkEq(bytes[3], -48);
        itest("randoop", 115).given(i, 129).checkEq(bytes[3], -127);
        itest("dev", 115).given(i, 10).checkEq(bytes[3], 10);
        itest("randoop", 115).given(i, 0).checkEq(bytes[3], 0);
        itest("evosuite", 115).given(i, 10).checkEq(bytes[3], 10);
        itest("evosuite", 115).given(i, 0).checkEq(bytes[3], 0);
        itest("randoop", 115).given(i, 320).checkEq(bytes[3], 64);
        itest("randoop", 115).given(i, 73).checkEq(bytes[3], 73);
        itest("randoop", 115).given(i, 16).checkEq(bytes[3], 16);
        itest("randoop", 115).given(i, 31).checkEq(bytes[3], 31);
        itest("randoop", 115).given(i, 105).checkEq(bytes[3], 105);
        itest("dev", 115).given(i, 33).checkEq(bytes[3], 33);
        itest("dev", 115).given(i, 20).checkEq(bytes[3], 20);
        itest("randoop", 115).given(i, 16779273).checkEq(bytes[3], 9);
        itest("randoop", 115).given(i, 3).checkEq(bytes[3], 3);
        itest("randoop", 115).given(i, 1182463).checkEq(bytes[3], -1);
        itest("randoop", 115).given(i, 21).checkEq(bytes[3], 21);
        itest("evosuite", 115).given(i, -1).checkEq(bytes[3], -1);
        itest("dev", 115).given(i, 17).checkEq(bytes[3], 17);
        itest("dev", 115).given(i, 2).checkEq(bytes[3], 2);
        itest("randoop", 115).given(i, 34).checkEq(bytes[3], 34);
        itest("randoop", 115).given(i, 255).checkEq(bytes[3], -1);
        itest("randoop", 115).given(i, 108).checkEq(bytes[3], 108);
        itest("randoop", 115).given(i, 13).checkEq(bytes[3], 13);
        itest("dev", 115).given(i, 7).checkEq(bytes[3], 7);
        itest("randoop", 115).given(i, -1).checkEq(bytes[3], -1);
        itest("randoop", 115).given(i, 68).checkEq(bytes[3], 68);
        itest("randoop", 115).given(i, 126).checkEq(bytes[3], 126);
        itest("randoop", 115).given(i, 4).checkEq(bytes[3], 4);
        itest("dev", 115).given(i, 46).checkEq(bytes[3], 46);
        itest("randoop", 115).given(i, 429).checkEq(bytes[3], -83);
        itest("randoop", 115).given(i, 84085000).checkEq(bytes[3], 8);
        itest("dev", 115).given(i, 12).checkEq(bytes[3], 12);
        itest("randoop", 115).given(i, 39).checkEq(bytes[3], 39);
        itest("evosuite", 115).given(i, 1).checkEq(bytes[3], 1);
        itest("randoop", 115).given(i, 18).checkEq(bytes[3], 18);
        itest("randoop", 115).given(i, 134).checkEq(bytes[3], -122);
        itest("randoop", 115).given(i, 90).checkEq(bytes[3], 90);
        itest("randoop", 115).given(i, 52).checkEq(bytes[3], 52);
        itest("randoop", 115).given(i, 14).checkEq(bytes[3], 14);
        itest("dev", 115).given(i, 5).checkEq(bytes[3], 5);
        itest("randoop", 115).given(i, 359).checkEq(bytes[3], 103);
        itest("randoop", 115).given(i, 7).checkEq(bytes[3], 7);
        itest("evosuite", 115).given(i, 6).checkEq(bytes[3], 6);
        itest("randoop", 115).given(i, 101).checkEq(bytes[3], 101);
        itest("randoop", 115).given(i, 12700165).checkEq(bytes[3], 5);
        itest("dev", 115).given(i, 26).checkEq(bytes[3], 26);
        itest("evosuite", 115).given(i, -1832).checkEq(bytes[3], -40);
        itest("randoop", 115).given(i, 23).checkEq(bytes[3], 23);
        itest("randoop", 115).given(i, 2).checkEq(bytes[3], 2);
        itest("randoop", 115).given(i, 100).checkEq(bytes[3], 100);
        itest("evosuite", 115).given(i, 11).checkEq(bytes[3], 11);
        itest("dev", 115).given(i, 32).checkEq(bytes[3], 32);
        itest("randoop", 115).given(i, 93).checkEq(bytes[3], 93);
        itest("randoop", 115).given(i, 17).checkEq(bytes[3], 17);
        itest("randoop", 115).given(i, 298).checkEq(bytes[3], 42);
        itest("dev", 115).given(i, 15).checkEq(bytes[3], 15);
        itest("randoop", 115).given(i, 70).checkEq(bytes[3], 70);
        itest("randoop", 115).given(i, 431).checkEq(bytes[3], -81);
        itest("randoop", 115).given(i, 49).checkEq(bytes[3], 49);
        itest("randoop", 115).given(i, 334).checkEq(bytes[3], 78);
        itest("randoop", 115).given(i, 11).checkEq(bytes[3], 11);
        itest("randoop", 115).given(i, 33571207).checkEq(bytes[3], -121);
        itest("randoop", 115).given(i, -16575744).checkEq(bytes[3], 0);
        itest("dev", 115).given(i, 23).checkEq(bytes[3], 23);
        itest("dev", 115).given(i, 6).checkEq(bytes[3], 6);
        itest("evosuite", 115).given(i, -404).checkEq(bytes[3], 108);
        itest("randoop", 115).given(i, 58).checkEq(bytes[3], 58);
        itest("randoop", 115).given(i, 234885908).checkEq(bytes[3], 20);
        itest("randoop", 115).given(i, 75).checkEq(bytes[3], 75);
        itest("evosuite", 115).given(i, 5).checkEq(bytes[3], 5);
        itest("randoop", 115).given(i, 54).checkEq(bytes[3], 54);
        itest("randoop", 115).given(i, 8).checkEq(bytes[3], 8);
        itest("randoop", 115).given(i, 21168134).checkEq(bytes[3], 6);
        itest("randoop", 115).given(i, 12).checkEq(bytes[3], 12);
        itest("dev", 115).given(i, 4).checkEq(bytes[3], 4);
        itest("dev", 115).given(i, 9).checkEq(bytes[3], 9);
        itest("evosuite", 115).given(i, -100).checkEq(bytes[3], -100);
        itest("dev", 115).given(i, -290748).checkEq(bytes[3], 68);
        itest("randoop", 115).given(i, 25).checkEq(bytes[3], 25);
        itest("randoop", 115).given(i, 339).checkEq(bytes[3], 83);
        itest("randoop", 115).given(i, 6).checkEq(bytes[3], 6);
        itest("randoop", 115).given(i, 127).checkEq(bytes[3], 127);
        itest("evosuite", 115).given(i, -127).checkEq(bytes[3], -127);
        itest("randoop", 115).given(i, 40).checkEq(bytes[3], 40);
        itest("randoop", 115).given(i, 19).checkEq(bytes[3], 19);
        itest("randoop", 115).given(i, 95).checkEq(bytes[3], 95);
        itest("randoop", 115).given(i, 363).checkEq(bytes[3], 107);
        itest("randoop", 115).given(i, 51).checkEq(bytes[3], 51);
        itest("dev", 115).given(i, 13).checkEq(bytes[3], 13);
        itest("dev", 115).given(i, 21).checkEq(bytes[3], 21);
        itest("dev", 115).given(i, 1898).checkEq(bytes[3], 106);
        itest("evosuite", 115).given(i, 20).checkEq(bytes[3], 20);
        itest("randoop", 115).given(i, 98).checkEq(bytes[3], 98);
        itest("randoop", 115).given(i, 133).checkEq(bytes[3], -123);
        itest("dev", 115).given(i, 12345).checkEq(bytes[3], 57);
        bytes[2] = (byte) ((i >> 8) & 0xff);
        itest("randoop", 116).given(i, 70).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 22).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 320).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 62).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 24).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 15).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 23).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 127).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 21).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 13).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 0).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 8).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 54).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 20).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 9).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 95).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 32).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 17).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 100).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 33571207).checkEq(bytes[2], 65);
        itest("randoop", 116).given(i, 339).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 33).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 1182463).checkEq(bytes[2], 10);
        itest("randoop", 116).given(i, 31).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 7).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 16986634).checkEq(bytes[2], 50);
        itest("randoop", 116).given(i, 25362324).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, -1).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, 255).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 0).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 26).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 6).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 12345).checkEq(bytes[2], 48);
        itest("randoop", 116).given(i, 84085000).checkEq(bytes[2], 9);
        itest("randoop", 116).given(i, 429).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 90).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 10).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 59).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 6).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 58).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, -1).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, 6373889).checkEq(bytes[2], 66);
        itest("evosuite", 116).given(i, -48).checkEq(bytes[2], -1);
        itest("dev", 116).given(i, 33).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 34).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 5).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, -127).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, 80).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 12).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 363).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 12).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 25).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 49).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 4).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 133).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 2).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 23).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 9).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 11).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 93).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, -1832).checkEq(bytes[2], -8);
        itest("randoop", 116).given(i, 3).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 10).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 7).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 46).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 15).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 39).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 13).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 100865046).checkEq(bytes[2], 20);
        itest("dev", 116).given(i, 21).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 21168134).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 101).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 298).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 134).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 14).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 431).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 101190678).checkEq(bytes[2], 12);
        itest("randoop", 116).given(i, 126).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, -290748).checkEq(bytes[2], -112);
        itest("dev", 116).given(i, 5).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 1).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 234885908).checkEq(bytes[2], 19);
        itest("randoop", 116).given(i, 45).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 98).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 8).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 108).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 68).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 16).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, -16575744).checkEq(bytes[2], 19);
        itest("dev", 116).given(i, 31).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 73).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 75).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 1898).checkEq(bytes[2], 7);
        itest("dev", 116).given(i, 2).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 19).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 242).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 11).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 51).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 18).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 4).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 16779273).checkEq(bytes[2], 8);
        itest("randoop", 116).given(i, 12700165).checkEq(bytes[2], -54);
        itest("evosuite", 116).given(i, 6).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 20).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 42).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, -100).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, 65).checkEq(bytes[2], 0);
        itest("dev", 116).given(i, 17).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, 5).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 105).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 53).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 129).checkEq(bytes[2], 0);
        itest("evosuite", 116).given(i, -404).checkEq(bytes[2], -2);
        itest("evosuite", 116).given(i, -94).checkEq(bytes[2], -1);
        itest("randoop", 116).given(i, 359).checkEq(bytes[2], 1);
        itest("evosuite", 116).given(i, 10).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 334).checkEq(bytes[2], 1);
        itest("randoop", 116).given(i, 52).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 128).checkEq(bytes[2], 0);
        itest("randoop", 116).given(i, 40).checkEq(bytes[2], 0);
        bytes[1] = (byte) ((i >> 16) & 0xff);
        itest("randoop", 117).given(i, 9).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 6).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 242).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 108).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 10).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 0).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 90).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 68).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 51).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 16779273).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 19).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 298).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 431).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, -16575744).checkEq(bytes[1], 3);
        itest("randoop", 117).given(i, 234885908).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -100).checkEq(bytes[1], -1);
        itest("evosuite", 117).given(i, 0).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 25362324).checkEq(bytes[1], -126);
        itest("evosuite", 117).given(i, -1).checkEq(bytes[1], -1);
        itest("randoop", 117).given(i, 45).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 7).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 32).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 58).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 13).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 101190678).checkEq(bytes[1], 8);
        itest("randoop", 117).given(i, 17).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 33).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 26).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 129).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 5).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 21168134).checkEq(bytes[1], 67);
        itest("dev", 117).given(i, 4).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 84085000).checkEq(bytes[1], 3);
        itest("randoop", 117).given(i, 15).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 429).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 4).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 22).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 70).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 255).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 23).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 39).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 23).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 12345).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 3).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 14).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 21).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 95).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 25).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 8).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 2).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 80).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 13).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 9).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 46).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -94).checkEq(bytes[1], -1);
        itest("randoop", 117).given(i, 49).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 334).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 11).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 12).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 6373889).checkEq(bytes[1], 97);
        itest("dev", 117).given(i, 1898).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 359).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 93).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 10).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 75).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, 20).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, -290748).checkEq(bytes[1], -5);
        itest("evosuite", 117).given(i, 1).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 5).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -127).checkEq(bytes[1], -1);
        itest("dev", 117).given(i, 7).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 16986634).checkEq(bytes[1], 3);
        itest("randoop", 117).given(i, 59).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 8).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 1182463).checkEq(bytes[1], 18);
        itest("randoop", 117).given(i, 42).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 18).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 33).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 320).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 12).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 34).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -1832).checkEq(bytes[1], -1);
        itest("randoop", 117).given(i, 133).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 20).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 105).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 73).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 6).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 21).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 98).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 339).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 16).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 31).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 33571207).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 128).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 15).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, -1).checkEq(bytes[1], -1);
        itest("evosuite", 117).given(i, 6).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 31).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 54).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 134).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -404).checkEq(bytes[1], -1);
        itest("randoop", 117).given(i, 62).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, 5).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, 24).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, -48).checkEq(bytes[1], -1);
        itest("randoop", 117).given(i, 127).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 2).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, 10).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 53).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 12700165).checkEq(bytes[1], -63);
        itest("randoop", 117).given(i, 65).checkEq(bytes[1], 0);
        itest("dev", 117).given(i, 17).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 100865046).checkEq(bytes[1], 3);
        itest("randoop", 117).given(i, 101).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 126).checkEq(bytes[1], 0);
        itest("evosuite", 117).given(i, 11).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 52).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 363).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 40).checkEq(bytes[1], 0);
        itest("randoop", 117).given(i, 100).checkEq(bytes[1], 0);
        bytes[0] = (byte) ((i >> 24) & 0xff);
        itest("evosuite", 118).given(i, 0).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, -290748).checkEq(bytes[0], -1);
        itest("dev", 118).given(i, 23).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 15).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 128).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 7).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 4).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 39).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 14).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 429).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 17).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 100865046).checkEq(bytes[0], 6);
        itest("randoop", 118).given(i, 5).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 126).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 2).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 98).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 73).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 101).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 16779273).checkEq(bytes[0], 1);
        itest("dev", 118).given(i, 13).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 45).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 16).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 31).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 5).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 25362324).checkEq(bytes[0], 1);
        itest("randoop", 118).given(i, 11).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 108).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 3).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 8).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 90).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 59).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 12).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 242).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 10).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 2).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -48).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 34).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 16986634).checkEq(bytes[0], 1);
        itest("dev", 118).given(i, 9).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 13).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 33).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 21).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 6).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 80).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 25).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 1898).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 320).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 46).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 12).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 22).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 49).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 21168134).checkEq(bytes[0], 1);
        itest("randoop", 118).given(i, 129).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 10).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -127).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 93).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 7).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 105).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, -16575744).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 0).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 23).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 334).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 359).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 255).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 31).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 15).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 62).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 24).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 84085000).checkEq(bytes[0], 5);
        itest("randoop", 118).given(i, 6).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 127).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 32).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 70).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 54).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 1182463).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 95).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 5).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 33).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 58).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 298).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 20).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 431).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 26).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 234885908).checkEq(bytes[0], 14);
        itest("randoop", 118).given(i, 21).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 17).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 6).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 12700165).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 363).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 100).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 33571207).checkEq(bytes[0], 2);
        itest("randoop", 118).given(i, -1).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 4).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 68).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 20).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 51).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 339).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 19).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 42).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -100).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 75).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 6373889).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 18).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -404).checkEq(bytes[0], -1);
        itest("evosuite", 118).given(i, 10).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 134).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 53).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 9).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 11).checkEq(bytes[0], 0);
        itest("dev", 118).given(i, 12345).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -1).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 52).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, -94).checkEq(bytes[0], -1);
        itest("evosuite", 118).given(i, -1832).checkEq(bytes[0], -1);
        itest("randoop", 118).given(i, 65).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 101190678).checkEq(bytes[0], 6);
        itest("randoop", 118).given(i, 133).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 40).checkEq(bytes[0], 0);
        itest("randoop", 118).given(i, 8).checkEq(bytes[0], 0);
        itest("evosuite", 118).given(i, 1).checkEq(bytes[0], 0);
        return bytes;
    }

    public static int unpackSynchsafeInteger(byte b1, byte b2, byte b3, byte b4) {
        int value = ((byte) (b4 & 0x7f));
        itest("dev", 123).given(b4, 1).checkEq(value, 1);
        itest("evosuite", 123).given(b4, 31).checkEq(value, 31);
        itest("randoop", 123).given(b4, 100).checkEq(value, 100);
        itest("dev", 123).given(b4, 5).checkEq(value, 5);
        itest("evosuite", 123).given(b4, 65).checkEq(value, 65);
        itest("dev", 123).given(b4, 46).checkEq(value, 46);
        itest("randoop", 123).given(b4, 78).checkEq(value, 78);
        itest("dev", 123).given(b4, 32).checkEq(value, 32);
        itest("randoop", 123).given(b4, 3).checkEq(value, 3);
        itest("evosuite", 123).given(b4, 11).checkEq(value, 11);
        itest("dev", 123).given(b4, 12).checkEq(value, 12);
        itest("randoop", 123).given(b4, 16).checkEq(value, 16);
        itest("evosuite", 123).given(b4, 64).checkEq(value, 64);
        itest("dev", 123).given(b4, 20).checkEq(value, 20);
        itest("evosuite", 123).given(b4, 10).checkEq(value, 10);
        itest("dev", 123).given(b4, 13).checkEq(value, 13);
        itest("dev", 123).given(b4, 110).checkEq(value, 110);
        itest("evosuite", 123).given(b4, 24).checkEq(value, 24);
        itest("randoop", 123).given(b4, -116).checkEq(value, 12);
        itest("dev", 123).given(b4, 19).checkEq(value, 19);
        itest("randoop", 123).given(b4, 10).checkEq(value, 10);
        itest("dev", 123).given(b4, 33).checkEq(value, 33);
        itest("evosuite", 123).given(b4, 6).checkEq(value, 6);
        itest("dev", 123).given(b4, 26).checkEq(value, 26);
        itest("randoop", 123).given(b4, 124).checkEq(value, 124);
        itest("randoop", 123).given(b4, 42).checkEq(value, 42);
        itest("randoop", 123).given(b4, 103).checkEq(value, 103);
        itest("dev", 123).given(b4, 75).checkEq(value, 75);
        itest("dev", 123).given(b4, 24).checkEq(value, 24);
        itest("randoop", 123).given(b4, 19).checkEq(value, 19);
        itest("randoop", 123).given(b4, 2).checkEq(value, 2);
        itest("randoop", 123).given(b4, 4).checkEq(value, 4);
        itest("dev", 123).given(b4, 122).checkEq(value, 122);
        itest("randoop", 123).given(b4, 65).checkEq(value, 65);
        itest("randoop", 123).given(b4, 11).checkEq(value, 11);
        itest("randoop", 123).given(b4, 0).checkEq(value, 0);
        itest("evosuite", 123).given(b4, 15).checkEq(value, 15);
        itest("randoop", 123).given(b4, 6).checkEq(value, 6);
        itest("randoop", 123).given(b4, 8).checkEq(value, 8);
        itest("dev", 123).given(b4, 7).checkEq(value, 7);
        itest("dev", 123).given(b4, 9).checkEq(value, 9);
        itest("randoop", 123).given(b4, 22).checkEq(value, 22);
        itest("randoop", 123).given(b4, 79).checkEq(value, 79);
        itest("randoop", 123).given(b4, 28).checkEq(value, 28);
        itest("randoop", 123).given(b4, 20).checkEq(value, 20);
        itest("randoop", 123).given(b4, 27).checkEq(value, 27);
        itest("dev", 123).given(b4, 36).checkEq(value, 36);
        itest("evosuite", 123).given(b4, 21).checkEq(value, 21);
        itest("dev", 123).given(b4, 107).checkEq(value, 107);
        itest("randoop", 123).given(b4, 1).checkEq(value, 1);
        itest("dev", 123).given(b4, 22).checkEq(value, 22);
        itest("randoop", 123).given(b4, 5).checkEq(value, 5);
        itest("randoop", 123).given(b4, 33).checkEq(value, 33);
        itest("randoop", 123).given(b4, 14).checkEq(value, 14);
        itest("randoop", 123).given(b4, 68).checkEq(value, 68);
        itest("randoop", 123).given(b4, 40).checkEq(value, 40);
        itest("dev", 123).given(b4, 15).checkEq(value, 15);
        itest("dev", 123).given(b4, 57).checkEq(value, 57);
        itest("randoop", 123).given(b4, 75).checkEq(value, 75);
        itest("dev", 123).given(b4, 64).checkEq(value, 64);
        itest("dev", 123).given(b4, 10).checkEq(value, 10);
        itest("evosuite", 123).given(b4, 1).checkEq(value, 1);
        itest("evosuite", 123).given(b4, 0).checkEq(value, 0);
        itest("randoop", 123).given(b4, 13).checkEq(value, 13);
        itest("dev", 123).given(b4, 16).checkEq(value, 16);
        itest("dev", 123).given(b4, 23).checkEq(value, 23);
        itest("evosuite", 123).given(b4, 5).checkEq(value, 5);
        itest("evosuite", 123).given(b4, 27).checkEq(value, 27);
        itest("dev", 123).given(b4, 30).checkEq(value, 30);
        itest("dev", 123).given(b4, 14).checkEq(value, 14);
        itest("randoop", 123).given(b4, 86).checkEq(value, 86);
        itest("randoop", 123).given(b4, 15).checkEq(value, 15);
        itest("dev", 123).given(b4, 0).checkEq(value, 0);
        itest("dev", 123).given(b4, 31).checkEq(value, 31);
        itest("dev", 123).given(b4, 2).checkEq(value, 2);
        itest("evosuite", 123).given(b4, 36).checkEq(value, 36);
        itest("randoop", 123).given(b4, 52).checkEq(value, 52);
        itest("randoop", 123).given(b4, 12).checkEq(value, 12);
        itest("dev", 123).given(b4, 4).checkEq(value, 4);
        itest("evosuite", 123).given(b4, 122).checkEq(value, 122);
        itest("dev", 123).given(b4, 37).checkEq(value, 37);
        itest("evosuite", 123).given(b4, 16).checkEq(value, 16);
        itest("randoop", 123).given(b4, 21).checkEq(value, 21);
        itest("randoop", 123).given(b4, 72).checkEq(value, 72);
        itest("dev", 123).given(b4, 106).checkEq(value, 106);
        itest("randoop", 123).given(b4, 7).checkEq(value, 7);
        itest("evosuite", 123).given(b4, 50).checkEq(value, 50);
        itest("randoop", 123).given(b4, 63).checkEq(value, 63);
        itest("randoop", 123).given(b4, 9).checkEq(value, 9);
        itest("dev", 123).given(b4, 17).checkEq(value, 17);
        itest("randoop", 123).given(b4, 127).checkEq(value, 127);
        itest("dev", 123).given(b4, 6).checkEq(value, 6);
        itest("randoop", 123).given(b4, 89).checkEq(value, 89);
        itest("randoop", 123).given(b4, 18).checkEq(value, 18);
        itest("randoop", 123).given(b4, 35).checkEq(value, 35);
        itest("randoop", 123).given(b4, -1).checkEq(value, 127);
        itest("dev", 123).given(b4, 65).checkEq(value, 65);
        itest("dev", 123).given(b4, 8).checkEq(value, 8);
        itest("randoop", 123).given(b4, 114).checkEq(value, 114);
        value += shiftByte((byte) (b3 & 0x7f), -7);
        itest("randoop", 124).given(b3, 1).given(value, 127).checkEq(value, 255);
        itest("randoop", 124).given(b3, 0).given(value, 75).checkEq(value, 75);
        itest("evosuite", 124).given(b3, 0).given(value, 11).checkEq(value, 11);
        itest("dev", 124).given(b3, 0).given(value, 7).checkEq(value, 7);
        itest("evosuite", 124).given(b3, 8).given(value, 65).checkEq(value, 1089);
        itest("evosuite", 124).given(b3, 0).given(value, 31).checkEq(value, 31);
        itest("dev", 124).given(b3, 0).given(value, 17).checkEq(value, 17);
        itest("dev", 124).given(b3, 9).given(value, 75).checkEq(value, 1227);
        itest("randoop", 124).given(b3, 0).given(value, 14).checkEq(value, 14);
        itest("randoop", 124).given(b3, 3).given(value, 16).checkEq(value, 400);
        itest("randoop", 124).given(b3, 0).given(value, 28).checkEq(value, 28);
        itest("randoop", 124).given(b3, 20).given(value, 10).checkEq(value, 2570);
        itest("randoop", 124).given(b3, 0).given(value, 21).checkEq(value, 21);
        itest("randoop", 124).given(b3, 0).given(value, 89).checkEq(value, 89);
        itest("randoop", 124).given(b3, 0).given(value, 3).checkEq(value, 3);
        itest("dev", 124).given(b3, 96).given(value, 57).checkEq(value, 12345);
        itest("dev", 124).given(b3, 0).given(value, 37).checkEq(value, 37);
        itest("randoop", 124).given(b3, 101).given(value, 114).checkEq(value, 13042);
        itest("randoop", 124).given(b3, 0).given(value, 35).checkEq(value, 35);
        itest("dev", 124).given(b3, 0).given(value, 10).checkEq(value, 10);
        itest("dev", 124).given(b3, 14).given(value, 106).checkEq(value, 1898);
        itest("randoop", 124).given(b3, 1).given(value, 5).checkEq(value, 133);
        itest("randoop", 124).given(b3, 1).given(value, 16).checkEq(value, 144);
        itest("evosuite", 124).given(b3, 11).given(value, 24).checkEq(value, 1432);
        itest("randoop", 124).given(b3, 6).given(value, 12).checkEq(value, 780);
        itest("randoop", 124).given(b3, 5).given(value, 0).checkEq(value, 640);
        itest("randoop", 124).given(b3, 2).given(value, 0).checkEq(value, 256);
        itest("dev", 124).given(b3, 0).given(value, 23).checkEq(value, 23);
        itest("randoop", 124).given(b3, 0).given(value, 27).checkEq(value, 27);
        itest("evosuite", 124).given(b3, 88).given(value, 1).checkEq(value, 11265);
        itest("evosuite", 124).given(b3, 0).given(value, 0).checkEq(value, 0);
        itest("dev", 124).given(b3, 7).given(value, 106).checkEq(value, 1002);
        itest("randoop", 124).given(b3, 15).given(value, 0).checkEq(value, 1920);
        itest("dev", 124).given(b3, 24).given(value, 65).checkEq(value, 3137);
        itest("randoop", 124).given(b3, 1).given(value, 72).checkEq(value, 200);
        itest("dev", 124).given(b3, 0).given(value, 16).checkEq(value, 16);
        itest("randoop", 124).given(b3, 21).given(value, 127).checkEq(value, 2815);
        itest("randoop", 124).given(b3, 2).given(value, 42).checkEq(value, 298);
        itest("dev", 124).given(b3, 0).given(value, 30).checkEq(value, 30);
        itest("randoop", 124).given(b3, 18).given(value, 0).checkEq(value, 2304);
        itest("randoop", 124).given(b3, 20).given(value, 5).checkEq(value, 2565);
        itest("dev", 124).given(b3, 20).given(value, 26).checkEq(value, 2586);
        itest("evosuite", 124).given(b3, 0).given(value, 50).checkEq(value, 50);
        itest("dev", 124).given(b3, 1).given(value, 64).checkEq(value, 192);
        itest("dev", 124).given(b3, 0).given(value, 12).checkEq(value, 12);
        itest("randoop", 124).given(b3, 5).given(value, 2).checkEq(value, 642);
        itest("dev", 124).given(b3, 0).given(value, 19).checkEq(value, 19);
        itest("randoop", 124).given(b3, 0).given(value, 8).checkEq(value, 8);
        itest("evosuite", 124).given(b3, 0).given(value, 16).checkEq(value, 16);
        itest("dev", 124).given(b3, 0).given(value, 46).checkEq(value, 46);
        itest("randoop", 124).given(b3, 1).given(value, 10).checkEq(value, 138);
        itest("randoop", 124).given(b3, 2).given(value, 68).checkEq(value, 324);
        itest("randoop", 124).given(b3, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 124).given(b3, 0).given(value, 4).checkEq(value, 4);
        itest("dev", 124).given(b3, 9).given(value, 65).checkEq(value, 1217);
        itest("randoop", 124).given(b3, -1).given(value, 22).checkEq(value, 16278);
        itest("randoop", 124).given(b3, 127).given(value, 20).checkEq(value, 16276);
        itest("randoop", 124).given(b3, 18).given(value, 9).checkEq(value, 2313);
        itest("randoop", 124).given(b3, 1).given(value, 3).checkEq(value, 131);
        itest("dev", 124).given(b3, 0).given(value, 15).checkEq(value, 15);
        itest("randoop", 124).given(b3, 6).given(value, 14).checkEq(value, 782);
        itest("randoop", 124).given(b3, 0).given(value, 40).checkEq(value, 40);
        itest("randoop", 124).given(b3, 22).given(value, 7).checkEq(value, 2823);
        itest("randoop", 124).given(b3, 0).given(value, 0).checkEq(value, 0);
        itest("dev", 124).given(b3, 0).given(value, 32).checkEq(value, 32);
        itest("randoop", 124).given(b3, 14).given(value, 13).checkEq(value, 1805);
        itest("randoop", 124).given(b3, 13).given(value, 127).checkEq(value, 1791);
        itest("evosuite", 124).given(b3, 0).given(value, 10).checkEq(value, 10);
        itest("randoop", 124).given(b3, 2).given(value, 86).checkEq(value, 342);
        itest("randoop", 124).given(b3, 4).given(value, 15).checkEq(value, 527);
        itest("randoop", 124).given(b3, 2).given(value, 18).checkEq(value, 274);
        itest("evosuite", 124).given(b3, 0).given(value, 27).checkEq(value, 27);
        itest("randoop", 124).given(b3, 100).given(value, 0).checkEq(value, 12800);
        itest("randoop", 124).given(b3, 5).given(value, 11).checkEq(value, 651);
        itest("randoop", 124).given(b3, 127).given(value, 6).checkEq(value, 16262);
        itest("randoop", 124).given(b3, -116).given(value, 16).checkEq(value, 1552);
        itest("dev", 124).given(b3, 10).given(value, 122).checkEq(value, 1402);
        itest("randoop", 124).given(b3, 5).given(value, 100).checkEq(value, 740);
        itest("randoop", 124).given(b3, 20).given(value, 9).checkEq(value, 2569);
        itest("randoop", 124).given(b3, 22).given(value, 100).checkEq(value, 2916);
        itest("evosuite", 124).given(b3, 0).given(value, 21).checkEq(value, 21);
        itest("randoop", 124).given(b3, 0).given(value, 12).checkEq(value, 12);
        itest("randoop", 124).given(b3, 0).given(value, 63).checkEq(value, 63);
        itest("dev", 124).given(b3, 0).given(value, 9).checkEq(value, 9);
        itest("randoop", 124).given(b3, 10).given(value, 4).checkEq(value, 1284);
        itest("randoop", 124).given(b3, 4).given(value, 1).checkEq(value, 513);
        itest("randoop", 124).given(b3, 15).given(value, 19).checkEq(value, 1939);
        itest("randoop", 124).given(b3, 0).given(value, 9).checkEq(value, 9);
        itest("randoop", 124).given(b3, 0).given(value, 11).checkEq(value, 11);
        itest("randoop", 124).given(b3, 0).given(value, 65).checkEq(value, 65);
        itest("dev", 124).given(b3, 3).given(value, 110).checkEq(value, 494);
        itest("randoop", 124).given(b3, 0).given(value, 5).checkEq(value, 5);
        itest("dev", 124).given(b3, 2).given(value, 1).checkEq(value, 257);
        itest("dev", 124).given(b3, 0).given(value, 20).checkEq(value, 20);
        itest("evosuite", 124).given(b3, 113).given(value, 0).checkEq(value, 14464);
        itest("randoop", 124).given(b3, 2).given(value, 4).checkEq(value, 260);
        itest("evosuite", 124).given(b3, 0).given(value, 15).checkEq(value, 15);
        itest("randoop", 124).given(b3, 127).given(value, 1).checkEq(value, 16257);
        itest("dev", 124).given(b3, 0).given(value, 5).checkEq(value, 5);
        itest("randoop", 124).given(b3, 16).given(value, 8).checkEq(value, 2056);
        itest("randoop", 124).given(b3, 3).given(value, 7).checkEq(value, 391);
        itest("randoop", 124).given(b3, 0).given(value, 52).checkEq(value, 52);
        itest("randoop", 124).given(b3, 0).given(value, 10).checkEq(value, 10);
        itest("randoop", 124).given(b3, 127).given(value, 12).checkEq(value, 16268);
        itest("evosuite", 124).given(b3, 1).given(value, 64).checkEq(value, 192);
        itest("randoop", 124).given(b3, 4).given(value, 0).checkEq(value, 512);
        itest("randoop", 124).given(b3, 8).given(value, 1).checkEq(value, 1025);
        itest("dev", 124).given(b3, 18).given(value, 26).checkEq(value, 2330);
        itest("randoop", 124).given(b3, -1).given(value, 19).checkEq(value, 16275);
        itest("randoop", 124).given(b3, 2).given(value, 20).checkEq(value, 276);
        itest("evosuite", 124).given(b3, 0).given(value, 5).checkEq(value, 5);
        itest("dev", 124).given(b3, 0).given(value, 13).checkEq(value, 13);
        itest("evosuite", 124).given(b3, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 124).given(b3, 5).given(value, 16).checkEq(value, 656);
        itest("randoop", 124).given(b3, 0).given(value, 78).checkEq(value, 78);
        itest("randoop", 124).given(b3, 11).given(value, 4).checkEq(value, 1412);
        itest("evosuite", 124).given(b3, 0).given(value, 36).checkEq(value, 36);
        itest("randoop", 124).given(b3, 2).given(value, 5).checkEq(value, 261);
        itest("randoop", 124).given(b3, 22).given(value, 13).checkEq(value, 2829);
        itest("randoop", 124).given(b3, 67).given(value, 79).checkEq(value, 8655);
        itest("randoop", 124).given(b3, 18).given(value, 7).checkEq(value, 2311);
        itest("dev", 124).given(b3, 0).given(value, 33).checkEq(value, 33);
        itest("dev", 124).given(b3, 8).given(value, 65).checkEq(value, 1089);
        itest("randoop", 124).given(b3, 16).given(value, 9).checkEq(value, 2057);
        itest("evosuite", 124).given(b3, 127).given(value, 0).checkEq(value, 16256);
        itest("randoop", 124).given(b3, 0).given(value, 16).checkEq(value, 16);
        itest("randoop", 124).given(b3, 2).given(value, 14).checkEq(value, 270);
        itest("randoop", 124).given(b3, 2).given(value, 124).checkEq(value, 380);
        itest("dev", 124).given(b3, 0).given(value, 8).checkEq(value, 8);
        itest("randoop", 124).given(b3, -1).given(value, 127).checkEq(value, 16383);
        itest("randoop", 124).given(b3, 9).given(value, 127).checkEq(value, 1279);
        itest("randoop", 124).given(b3, 20).given(value, 0).checkEq(value, 2560);
        itest("dev", 124).given(b3, 4).given(value, 7).checkEq(value, 519);
        itest("randoop", 124).given(b3, 0).given(value, 13).checkEq(value, 13);
        itest("randoop", 124).given(b3, 10).given(value, 8).checkEq(value, 1288);
        itest("dev", 124).given(b3, 0).given(value, 2).checkEq(value, 2);
        itest("randoop", 124).given(b3, 8).given(value, 0).checkEq(value, 1024);
        itest("dev", 124).given(b3, 0).given(value, 0).checkEq(value, 0);
        itest("randoop", 124).given(b3, 0).given(value, 33).checkEq(value, 33);
        itest("dev", 124).given(b3, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 124).given(b3, 13).given(value, 14).checkEq(value, 1678);
        itest("randoop", 124).given(b3, 2).given(value, 15).checkEq(value, 271);
        itest("evosuite", 124).given(b3, 10).given(value, 122).checkEq(value, 1402);
        itest("dev", 124).given(b3, 0).given(value, 22).checkEq(value, 22);
        itest("randoop", 124).given(b3, 100).given(value, 15).checkEq(value, 12815);
        itest("dev", 124).given(b3, 0).given(value, 4).checkEq(value, 4);
        itest("dev", 124).given(b3, 11).given(value, 24).checkEq(value, 1432);
        itest("randoop", 124).given(b3, 100).given(value, 10).checkEq(value, 12810);
        itest("randoop", 124).given(b3, 18).given(value, 12).checkEq(value, 2316);
        itest("randoop", 124).given(b3, 10).given(value, 2).checkEq(value, 1282);
        itest("randoop", 124).given(b3, 1).given(value, 7).checkEq(value, 135);
        itest("dev", 124).given(b3, 3).given(value, 107).checkEq(value, 491);
        itest("dev", 124).given(b3, 18).given(value, 36).checkEq(value, 2340);
        itest("randoop", 124).given(b3, 20).given(value, 6).checkEq(value, 2566);
        itest("dev", 124).given(b3, 0).given(value, 31).checkEq(value, 31);
        itest("randoop", 124).given(b3, 13).given(value, 2).checkEq(value, 1666);
        itest("randoop", 124).given(b3, 97).given(value, 103).checkEq(value, 12519);
        itest("dev", 124).given(b3, 0).given(value, 14).checkEq(value, 14);
        value += shiftByte((byte) (b2 & 0x7f), -14);
        itest("randoop", 125).given(b2, 12).given(value, 6).checkEq(value, 196614);
        itest("dev", 125).given(b2, 0).given(value, 46).checkEq(value, 46);
        itest("randoop", 125).given(b2, 19).given(value, 1678).checkEq(value, 312974);
        itest("randoop", 125).given(b2, 0).given(value, 656).checkEq(value, 656);
        itest("randoop", 125).given(b2, 7).given(value, 2916).checkEq(value, 117604);
        itest("randoop", 125).given(b2, 13).given(value, 2566).checkEq(value, 215558);
        itest("randoop", 125).given(b2, 13).given(value, 1288).checkEq(value, 214280);
        itest("randoop", 125).given(b2, 0).given(value, 138).checkEq(value, 138);
        itest("randoop", 125).given(b2, 11).given(value, 1666).checkEq(value, 181890);
        itest("randoop", 125).given(b2, 1).given(value, 256).checkEq(value, 16640);
        itest("dev", 125).given(b2, 0).given(value, 5).checkEq(value, 5);
        itest("randoop", 125).given(b2, 12).given(value, 270).checkEq(value, 196878);
        itest("randoop", 125).given(b2, 51).given(value, 12519).checkEq(value, 848103);
        itest("evosuite", 125).given(b2, 0).given(value, 27).checkEq(value, 27);
        itest("dev", 125).given(b2, 0).given(value, 1898).checkEq(value, 1898);
        itest("randoop", 125).given(b2, 22).given(value, 261).checkEq(value, 360709);
        itest("randoop", 125).given(b2, 0).given(value, 16).checkEq(value, 16);
        itest("randoop", 125).given(b2, 22).given(value, 1791).checkEq(value, 362239);
        itest("dev", 125).given(b2, 0).given(value, 1089).checkEq(value, 1089);
        itest("dev", 125).given(b2, 0).given(value, 12).checkEq(value, 12);
        itest("randoop", 125).given(b2, 127).given(value, 9).checkEq(value, 2080777);
        itest("evosuite", 125).given(b2, 44).given(value, 11265).checkEq(value, 732161);
        itest("randoop", 125).given(b2, 1).given(value, 1805).checkEq(value, 18189);
        itest("randoop", 125).given(b2, 18).given(value, 260).checkEq(value, 295172);
        itest("randoop", 125).given(b2, 18).given(value, 16257).checkEq(value, 311169);
        itest("randoop", 125).given(b2, 2).given(value, 1552).checkEq(value, 34320);
        itest("randoop", 125).given(b2, 20).given(value, 12800).checkEq(value, 340480);
        itest("randoop", 125).given(b2, 0).given(value, 2057).checkEq(value, 2057);
        itest("randoop", 125).given(b2, -116).given(value, 276).checkEq(value, 196884);
        itest("randoop", 125).given(b2, 16).given(value, 2570).checkEq(value, 264714);
        itest("dev", 125).given(b2, 0).given(value, 32).checkEq(value, 32);
        itest("dev", 125).given(b2, 0).given(value, 9).checkEq(value, 9);
        itest("evosuite", 125).given(b2, 0).given(value, 21).checkEq(value, 21);
        itest("randoop", 125).given(b2, 8).given(value, 1025).checkEq(value, 132097);
        itest("dev", 125).given(b2, 15).given(value, 1432).checkEq(value, 247192);
        itest("randoop", 125).given(b2, 22).given(value, 16268).checkEq(value, 376716);
        itest("dev", 125).given(b2, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 125).given(b2, 0).given(value, 63).checkEq(value, 63);
        itest("randoop", 125).given(b2, 0).given(value, 640).checkEq(value, 640);
        itest("randoop", 125).given(b2, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 125).given(b2, 84).given(value, 8655).checkEq(value, 1384911);
        itest("evosuite", 125).given(b2, 0).given(value, 6).checkEq(value, 6);
        itest("randoop", 125).given(b2, 5).given(value, 2304).checkEq(value, 84224);
        itest("randoop", 125).given(b2, 14).given(value, 642).checkEq(value, 230018);
        itest("randoop", 125).given(b2, 0).given(value, 5).checkEq(value, 5);
        itest("randoop", 125).given(b2, 20).given(value, 1282).checkEq(value, 328962);
        itest("evosuite", 125).given(b2, 0).given(value, 5).checkEq(value, 5);
        itest("randoop", 125).given(b2, 7).given(value, 2316).checkEq(value, 117004);
        itest("randoop", 125).given(b2, 3).given(value, 12).checkEq(value, 49164);
        itest("randoop", 125).given(b2, 0).given(value, 200).checkEq(value, 200);
        itest("randoop", 125).given(b2, 0).given(value, 0).checkEq(value, 0);
        itest("evosuite", 125).given(b2, 17).given(value, 16256).checkEq(value, 294784);
        itest("randoop", 125).given(b2, 7).given(value, 133).checkEq(value, 114821);
        itest("randoop", 125).given(b2, 127).given(value, 780).checkEq(value, 2081548);
        itest("randoop", 125).given(b2, 11).given(value, 400).checkEq(value, 180624);
        itest("dev", 125).given(b2, 0).given(value, 257).checkEq(value, 257);
        itest("randoop", 125).given(b2, 9).given(value, 2560).checkEq(value, 150016);
        itest("randoop", 125).given(b2, 8).given(value, 2311).checkEq(value, 133383);
        itest("randoop", 125).given(b2, 0).given(value, 52).checkEq(value, 52);
        itest("randoop", 125).given(b2, 0).given(value, 89).checkEq(value, 89);
        itest("randoop", 125).given(b2, 0).given(value, 35).checkEq(value, 35);
        itest("dev", 125).given(b2, 0).given(value, 12345).checkEq(value, 12345);
        itest("dev", 125).given(b2, 0).given(value, 192).checkEq(value, 192);
        itest("evosuite", 125).given(b2, 15).given(value, 1432).checkEq(value, 247192);
        itest("randoop", 125).given(b2, 116).given(value, 13042).checkEq(value, 1913586);
        itest("dev", 125).given(b2, 0).given(value, 13).checkEq(value, 13);
        itest("randoop", 125).given(b2, 6).given(value, 16278).checkEq(value, 114582);
        itest("evosuite", 125).given(b2, 0).given(value, 192).checkEq(value, 192);
        itest("dev", 125).given(b2, 0).given(value, 10).checkEq(value, 10);
        itest("randoop", 125).given(b2, 1).given(value, 16383).checkEq(value, 32767);
        itest("evosuite", 125).given(b2, 0).given(value, 16).checkEq(value, 16);
        itest("randoop", 125).given(b2, 13).given(value, 2815).checkEq(value, 215807);
        itest("randoop", 125).given(b2, 1).given(value, 391).checkEq(value, 16775);
        itest("dev", 125).given(b2, 0).given(value, 16).checkEq(value, 16);
        itest("dev", 125).given(b2, 0).given(value, 33).checkEq(value, 33);
        itest("randoop", 125).given(b2, 0).given(value, 21).checkEq(value, 21);
        itest("randoop", 125).given(b2, 0).given(value, 75).checkEq(value, 75);
        itest("evosuite", 125).given(b2, 0).given(value, 36).checkEq(value, 36);
        itest("randoop", 125).given(b2, 0).given(value, 78).checkEq(value, 78);
        itest("randoop", 125).given(b2, 0).given(value, 27).checkEq(value, 27);
        itest("evosuite", 125).given(b2, 0).given(value, 1402).checkEq(value, 1402);
        itest("randoop", 125).given(b2, 20).given(value, 10).checkEq(value, 327690);
        itest("dev", 125).given(b2, 0).given(value, 30).checkEq(value, 30);
        itest("randoop", 125).given(b2, 18).given(value, 2823).checkEq(value, 297735);
        itest("dev", 125).given(b2, 0).given(value, 19).checkEq(value, 19);
        itest("randoop", 125).given(b2, -1).given(value, 1939).checkEq(value, 2082707);
        itest("randoop", 125).given(b2, 0).given(value, 1024).checkEq(value, 1024);
        itest("evosuite", 125).given(b2, 0).given(value, 50).checkEq(value, 50);
        itest("dev", 125).given(b2, 0).given(value, 2330).checkEq(value, 2330);
        itest("evosuite", 125).given(b2, 0).given(value, 1089).checkEq(value, 1089);
        itest("randoop", 125).given(b2, 16).given(value, 135).checkEq(value, 262279);
        itest("dev", 125).given(b2, 0).given(value, 2586).checkEq(value, 2586);
        itest("randoop", 125).given(b2, 0).given(value, 1920).checkEq(value, 1920);
        itest("dev", 125).given(b2, 0).given(value, 491).checkEq(value, 491);
        itest("randoop", 125).given(b2, 0).given(value, 40).checkEq(value, 40);
        itest("randoop", 125).given(b2, 0).given(value, 33).checkEq(value, 33);
        itest("evosuite", 125).given(b2, 0).given(value, 10).checkEq(value, 10);
        itest("randoop", 125).given(b2, 0).given(value, 324).checkEq(value, 324);
        itest("dev", 125).given(b2, 0).given(value, 22).checkEq(value, 22);
        itest("randoop", 125).given(b2, 0).given(value, 13).checkEq(value, 13);
        itest("dev", 125).given(b2, 0).given(value, 15).checkEq(value, 15);
        itest("randoop", 125).given(b2, 5).given(value, 2569).checkEq(value, 84489);
        itest("randoop", 125).given(b2, 18).given(value, 271).checkEq(value, 295183);
        itest("randoop", 125).given(b2, 11).given(value, 16275).checkEq(value, 196499);
        itest("dev", 125).given(b2, 0).given(value, 1227).checkEq(value, 1227);
        itest("randoop", 125).given(b2, 100).given(value, 527).checkEq(value, 1638927);
        itest("dev", 125).given(b2, 0).given(value, 1402).checkEq(value, 1402);
        itest("dev", 125).given(b2, 0).given(value, 1217).checkEq(value, 1217);
        itest("randoop", 125).given(b2, 14).given(value, 2829).checkEq(value, 232205);
        itest("randoop", 125).given(b2, 100).given(value, 1279).checkEq(value, 1639679);
        itest("randoop", 125).given(b2, 0).given(value, 255).checkEq(value, 255);
        itest("dev", 125).given(b2, 0).given(value, 1002).checkEq(value, 1002);
        itest("dev", 125).given(b2, 0).given(value, 8).checkEq(value, 8);
        itest("randoop", 125).given(b2, 0).given(value, 8).checkEq(value, 8);
        itest("evosuite", 125).given(b2, 0).given(value, 0).checkEq(value, 0);
        itest("dev", 125).given(b2, 0).given(value, 3137).checkEq(value, 3137);
        itest("dev", 125).given(b2, 0).given(value, 7).checkEq(value, 7);
        itest("dev", 125).given(b2, 0).given(value, 519).checkEq(value, 519);
        itest("evosuite", 125).given(b2, 0).given(value, 11).checkEq(value, 11);
        itest("randoop", 125).given(b2, 0).given(value, 4).checkEq(value, 4);
        itest("randoop", 125).given(b2, 0).given(value, 2313).checkEq(value, 2313);
        itest("randoop", 125).given(b2, 6).given(value, 651).checkEq(value, 98955);
        itest("randoop", 125).given(b2, 5).given(value, 513).checkEq(value, 82433);
        itest("randoop", 125).given(b2, 0).given(value, 3).checkEq(value, 3);
        itest("dev", 125).given(b2, 0).given(value, 14).checkEq(value, 14);
        itest("randoop", 125).given(b2, 0).given(value, 380).checkEq(value, 380);
        itest("dev", 125).given(b2, 0).given(value, 0).checkEq(value, 0);
        itest("randoop", 125).given(b2, 0).given(value, 65).checkEq(value, 65);
        itest("randoop", 125).given(b2, 0).given(value, 28).checkEq(value, 28);
        itest("dev", 125).given(b2, 0).given(value, 494).checkEq(value, 494);
        itest("dev", 125).given(b2, 0).given(value, 2340).checkEq(value, 2340);
        itest("dev", 125).given(b2, 0).given(value, 4).checkEq(value, 4);
        itest("dev", 125).given(b2, 0).given(value, 2).checkEq(value, 2);
        itest("randoop", 125).given(b2, 10).given(value, 2056).checkEq(value, 165896);
        itest("randoop", 125).given(b2, 8).given(value, 740).checkEq(value, 131812);
        itest("randoop", 125).given(b2, 0).given(value, 11).checkEq(value, 11);
        itest("randoop", 125).given(b2, 7).given(value, 2565).checkEq(value, 117253);
        itest("dev", 125).given(b2, 0).given(value, 17).checkEq(value, 17);
        itest("randoop", 125).given(b2, 0).given(value, 144).checkEq(value, 144);
        itest("randoop", 125).given(b2, 13).given(value, 1412).checkEq(value, 214404);
        itest("evosuite", 125).given(b2, 0).given(value, 31).checkEq(value, 31);
        itest("dev", 125).given(b2, 0).given(value, 31).checkEq(value, 31);
        itest("randoop", 125).given(b2, 12).given(value, 12810).checkEq(value, 209418);
        itest("dev", 125).given(b2, 0).given(value, 37).checkEq(value, 37);
        itest("randoop", 125).given(b2, 8).given(value, 656).checkEq(value, 131728);
        itest("randoop", 125).given(b2, 0).given(value, 16262).checkEq(value, 16262);
        itest("evosuite", 125).given(b2, 0).given(value, 15).checkEq(value, 15);
        itest("randoop", 125).given(b2, 16).given(value, 274).checkEq(value, 262418);
        itest("randoop", 125).given(b2, 2).given(value, 1678).checkEq(value, 34446);
        itest("randoop", 125).given(b2, 11).given(value, 16276).checkEq(value, 196500);
        itest("randoop", 125).given(b2, 18).given(value, 131).checkEq(value, 295043);
        itest("randoop", 125).given(b2, 0).given(value, 298).checkEq(value, 298);
        itest("randoop", 125).given(b2, 1).given(value, 12815).checkEq(value, 29199);
        itest("dev", 125).given(b2, 4).given(value, 257).checkEq(value, 65793);
        itest("randoop", 125).given(b2, 127).given(value, 11).checkEq(value, 2080779);
        itest("randoop", 125).given(b2, 0).given(value, 14).checkEq(value, 14);
        itest("evosuite", 125).given(b2, 40).given(value, 14464).checkEq(value, 669824);
        itest("randoop", 125).given(b2, 16).given(value, 782).checkEq(value, 262926);
        itest("dev", 125).given(b2, 0).given(value, 20).checkEq(value, 20);
        itest("randoop", 125).given(b2, 19).given(value, 1284).checkEq(value, 312580);
        itest("dev", 125).given(b2, 0).given(value, 23).checkEq(value, 23);
        itest("randoop", 125).given(b2, 16).given(value, 512).checkEq(value, 262656);
        itest("randoop", 125).given(b2, 0).given(value, 342).checkEq(value, 342);
        value += shiftByte((byte) (b1 & 0x7f), -21);
        itest("randoop", 126).given(value, 5).given(b1, 0).checkEq(value, 5);
        itest("evosuite", 126).given(value, 6).given(b1, 0).checkEq(value, 6);
        itest("randoop", 126).given(value, 21).given(b1, 0).checkEq(value, 21);
        itest("dev", 126).given(value, 13).given(b1, 0).checkEq(value, 13);
        itest("randoop", 126).given(value, 84224).given(b1, 11).checkEq(value, 23152896);
        itest("dev", 126).given(value, 0).given(b1, 0).checkEq(value, 0);
        itest("randoop", 126).given(value, 232205).given(b1, 9).checkEq(value, 19106573);
        itest("dev", 126).given(value, 519).given(b1, 0).checkEq(value, 519);
        itest("randoop", 126).given(value, 35).given(b1, 0).checkEq(value, 35);
        itest("dev", 126).given(value, 31).given(b1, 0).checkEq(value, 31);
        itest("dev", 126).given(value, 1402).given(b1, 0).checkEq(value, 1402);
        itest("evosuite", 126).given(value, 16).given(b1, 0).checkEq(value, 16);
        itest("randoop", 126).given(value, 264714).given(b1, 20).checkEq(value, 42207754);
        itest("evosuite", 126).given(value, 11).given(b1, 0).checkEq(value, 11);
        itest("randoop", 126).given(value, 34320).given(b1, 14).checkEq(value, 29394448);
        itest("randoop", 126).given(value, 98955).given(b1, 14).checkEq(value, 29459083);
        itest("dev", 126).given(value, 22).given(b1, 0).checkEq(value, 22);
        itest("randoop", 126).given(value, 114582).given(b1, 127).checkEq(value, 266452886);
        itest("randoop", 126).given(value, 131728).given(b1, 11).checkEq(value, 23200400);
        itest("randoop", 126).given(value, 200).given(b1, 0).checkEq(value, 200);
        itest("randoop", 126).given(value, 262656).given(b1, 4).checkEq(value, 8651264);
        itest("evosuite", 126).given(value, 0).given(b1, 0).checkEq(value, 0);
        itest("dev", 126).given(value, 12345).given(b1, 0).checkEq(value, 12345);
        itest("randoop", 126).given(value, 2081548).given(b1, 0).checkEq(value, 2081548);
        itest("randoop", 126).given(value, 196884).given(b1, 15).checkEq(value, 31654164);
        itest("randoop", 126).given(value, 8).given(b1, 13).checkEq(value, 27262984);
        itest("evosuite", 126).given(value, 31).given(b1, 0).checkEq(value, 31);
        itest("randoop", 126).given(value, 262279).given(b1, 12).checkEq(value, 25428103);
        itest("dev", 126).given(value, 1002).given(b1, 0).checkEq(value, 1002);
        itest("randoop", 126).given(value, 0).given(b1, 0).checkEq(value, 0);
        itest("dev", 126).given(value, 3137).given(b1, 0).checkEq(value, 3137);
        itest("randoop", 126).given(value, 214404).given(b1, 100).checkEq(value, 209929604);
        itest("dev", 126).given(value, 192).given(b1, 0).checkEq(value, 192);
        itest("dev", 126).given(value, 15).given(b1, 0).checkEq(value, 15);
        itest("randoop", 126).given(value, 131812).given(b1, 16).checkEq(value, 33686244);
        itest("randoop", 126).given(value, 362239).given(b1, 3).checkEq(value, 6653695);
        itest("dev", 126).given(value, 33).given(b1, 0).checkEq(value, 33);
        itest("randoop", 126).given(value, 1024).given(b1, 18).checkEq(value, 37749760);
        itest("randoop", 126).given(value, 215558).given(b1, 19).checkEq(value, 40061446);
        itest("randoop", 126).given(value, 297735).given(b1, 14).checkEq(value, 29657863);
        itest("randoop", 126).given(value, 165896).given(b1, 14).checkEq(value, 29526024);
        itest("randoop", 126).given(value, 295183).given(b1, 6).checkEq(value, 12878095);
        itest("randoop", 126).given(value, 28).given(b1, 0).checkEq(value, 28);
        itest("randoop", 126).given(value, 16640).given(b1, 3).checkEq(value, 6308096);
        itest("randoop", 126).given(value, 295043).given(b1, 19).checkEq(value, 40140931);
        itest("randoop", 126).given(value, 63).given(b1, 0).checkEq(value, 63);
        itest("randoop", 126).given(value, 6).given(b1, 0).checkEq(value, 6);
        itest("randoop", 126).given(value, 380).given(b1, 0).checkEq(value, 380);
        itest("randoop", 126).given(value, 14).given(b1, 0).checkEq(value, 14);
        itest("evosuite", 126).given(value, 50).given(b1, 0).checkEq(value, 50);
        itest("randoop", 126).given(value, 376716).given(b1, 7).checkEq(value, 15056780);
        itest("evosuite", 126).given(value, 36).given(b1, 0).checkEq(value, 36);
        itest("dev", 126).given(value, 16).given(b1, 0).checkEq(value, 16);
        itest("dev", 126).given(value, 7).given(b1, 0).checkEq(value, 7);
        itest("randoop", 126).given(value, 117004).given(b1, 4).checkEq(value, 8505612);
        itest("dev", 126).given(value, 19).given(b1, 0).checkEq(value, 19);
        itest("dev", 126).given(value, 2330).given(b1, 0).checkEq(value, 2330);
        itest("randoop", 126).given(value, 327690).given(b1, 5).checkEq(value, 10813450);
        itest("randoop", 126).given(value, 65).given(b1, 0).checkEq(value, 65);
        itest("randoop", 126).given(value, 2057).given(b1, 8).checkEq(value, 16779273);
        itest("dev", 126).given(value, 17).given(b1, 0).checkEq(value, 17);
        itest("randoop", 126).given(value, 84489).given(b1, 2).checkEq(value, 4278793);
        itest("randoop", 126).given(value, 1920).given(b1, 14).checkEq(value, 29362048);
        itest("dev", 126).given(value, 257).given(b1, 0).checkEq(value, 257);
        itest("dev", 126).given(value, 494).given(b1, 0).checkEq(value, 494);
        itest("randoop", 126).given(value, 78).given(b1, 0).checkEq(value, 78);
        itest("evosuite", 126).given(value, 1089).given(b1, 0).checkEq(value, 1089);
        itest("randoop", 126).given(value, 1913586).given(b1, 83).checkEq(value, 175977202);
        itest("randoop", 126).given(value, 4).given(b1, 0).checkEq(value, 4);
        itest("randoop", 126).given(value, 16775).given(b1, 16).checkEq(value, 33571207);
        itest("evosuite", 126).given(value, 21).given(b1, 0).checkEq(value, 21);
        itest("randoop", 126).given(value, 2080777).given(b1, 19).checkEq(value, 41926665);
        itest("randoop", 126).given(value, 82433).given(b1, 3).checkEq(value, 6373889);
        itest("dev", 126).given(value, 20).given(b1, 0).checkEq(value, 20);
        itest("dev", 126).given(value, 5).given(b1, 0).checkEq(value, 5);
        itest("randoop", 126).given(value, 180624).given(b1, 8).checkEq(value, 16957840);
        itest("randoop", 126).given(value, 33).given(b1, 0).checkEq(value, 33);
        itest("dev", 126).given(value, 2586).given(b1, 0).checkEq(value, 2586);
        itest("evosuite", 126).given(value, 247192).given(b1, 0).checkEq(value, 247192);
        itest("randoop", 126).given(value, 150016).given(b1, 15).checkEq(value, 31607296);
        itest("randoop", 126).given(value, 75).given(b1, 0).checkEq(value, 75);
        itest("randoop", 126).given(value, 89).given(b1, 0).checkEq(value, 89);
        itest("dev", 126).given(value, 8).given(b1, 0).checkEq(value, 8);
        itest("randoop", 126).given(value, 29199).given(b1, 15).checkEq(value, 31486479);
        itest("randoop", 126).given(value, 52).given(b1, 0).checkEq(value, 52);
        itest("randoop", 126).given(value, 34446).given(b1, 8).checkEq(value, 16811662);
        itest("evosuite", 126).given(value, 1402).given(b1, 0).checkEq(value, 1402);
        itest("randoop", 126).given(value, 32767).given(b1, 13).checkEq(value, 27295743);
        itest("evosuite", 126).given(value, 669824).given(b1, 1).checkEq(value, 2766976);
        itest("dev", 126).given(value, 30).given(b1, 0).checkEq(value, 30);
        itest("randoop", 126).given(value, 360709).given(b1, 8).checkEq(value, 17137925);
        itest("randoop", 126).given(value, 340480).given(b1, 10).checkEq(value, 21312000);
        itest("dev", 126).given(value, 1217).given(b1, 0).checkEq(value, 1217);
        itest("randoop", 126).given(value, 27).given(b1, 0).checkEq(value, 27);
        itest("dev", 126).given(value, 14).given(b1, 0).checkEq(value, 14);
        itest("dev", 126).given(value, 23).given(b1, 0).checkEq(value, 23);
        itest("randoop", 126).given(value, 298).given(b1, 0).checkEq(value, 298);
        itest("randoop", 126).given(value, 1638927).given(b1, 9).checkEq(value, 20513295);
        itest("randoop", 126).given(value, 2082707).given(b1, 6).checkEq(value, 14665619);
        itest("dev", 126).given(value, 247192).given(b1, 0).checkEq(value, 247192);
        itest("randoop", 126).given(value, 295172).given(b1, 11).checkEq(value, 23363844);
        itest("dev", 126).given(value, 37).given(b1, 0).checkEq(value, 37);
        itest("dev", 126).given(value, 1089).given(b1, 0).checkEq(value, 1089);
        itest("dev", 126).given(value, 2).given(b1, 0).checkEq(value, 2);
        itest("randoop", 126).given(value, 117604).given(b1, 20).checkEq(value, 42060644);
        itest("randoop", 126).given(value, 312580).given(b1, 1).checkEq(value, 2409732);
        itest("evosuite", 126).given(value, 192).given(b1, 0).checkEq(value, 192);
        itest("evosuite", 126).given(value, 10).given(b1, 0).checkEq(value, 10);
        itest("randoop", 126).given(value, 215807).given(b1, 19).checkEq(value, 40061695);
        itest("randoop", 126).given(value, 196499).given(b1, 13).checkEq(value, 27459475);
        itest("evosuite", 126).given(value, 732161).given(b1, -14).checkEq(value, 239807489);
        itest("dev", 126).given(value, 491).given(b1, 0).checkEq(value, 491);
        itest("randoop", 126).given(value, 132097).given(b1, 11).checkEq(value, 23200769);
        itest("randoop", 126).given(value, 196500).given(b1, 12).checkEq(value, 25362324);
        itest("dev", 126).given(value, 32).given(b1, 0).checkEq(value, 32);
        itest("dev", 126).given(value, 9).given(b1, 0).checkEq(value, 9);
        itest("randoop", 126).given(value, 312974).given(b1, 13).checkEq(value, 27575950);
        itest("evosuite", 126).given(value, 15).given(b1, 0).checkEq(value, 15);
        itest("dev", 126).given(value, 65793).given(b1, 8).checkEq(value, 16843009);
        itest("randoop", 126).given(value, 640).given(b1, 0).checkEq(value, 640);
        itest("dev", 126).given(value, 46).given(b1, 0).checkEq(value, 46);
        itest("randoop", 126).given(value, 13).given(b1, 0).checkEq(value, 13);
        itest("randoop", 126).given(value, 311169).given(b1, 127).checkEq(value, 266649473);
        itest("dev", 126).given(value, 4).given(b1, 0).checkEq(value, 4);
        itest("randoop", 126).given(value, 1639679).given(b1, 13).checkEq(value, 28902655);
        itest("dev", 126).given(value, 10).given(b1, 0).checkEq(value, 10);
        itest("randoop", 126).given(value, 2080779).given(b1, 11).checkEq(value, 25149451);
        itest("randoop", 126).given(value, 181890).given(b1, 10).checkEq(value, 21153410);
        itest("randoop", 126).given(value, 262418).given(b1, 0).checkEq(value, 262418);
        itest("randoop", 126).given(value, 133383).given(b1, 1).checkEq(value, 2230535);
        itest("randoop", 126).given(value, 18189).given(b1, 4).checkEq(value, 8406797);
        itest("randoop", 126).given(value, 40).given(b1, 0).checkEq(value, 40);
        itest("randoop", 126).given(value, 262926).given(b1, 3).checkEq(value, 6554382);
        itest("randoop", 126).given(value, 16).given(b1, 7).checkEq(value, 14680080);
        itest("evosuite", 126).given(value, 294784).given(b1, 0).checkEq(value, 294784);
        itest("randoop", 126).given(value, 209418).given(b1, 8).checkEq(value, 16986634);
        itest("randoop", 126).given(value, 16262).given(b1, 16).checkEq(value, 33570694);
        itest("dev", 126).given(value, 2340).given(b1, 0).checkEq(value, 2340);
        itest("randoop", 126).given(value, 114821).given(b1, 8).checkEq(value, 16892037);
        itest("dev", 126).given(value, 1227).given(b1, 0).checkEq(value, 1227);
        itest("randoop", 126).given(value, 3).given(b1, 0).checkEq(value, 3);
        itest("randoop", 126).given(value, 328962).given(b1, 8).checkEq(value, 17106178);
        itest("randoop", 126).given(value, 196878).given(b1, 6).checkEq(value, 12779790);
        itest("randoop", 126).given(value, 848103).given(b1, 112).checkEq(value, 235729127);
        itest("randoop", 126).given(value, 214280).given(b1, 11).checkEq(value, 23282952);
        itest("dev", 126).given(value, 6).given(b1, 0).checkEq(value, 6);
        itest("randoop", 126).given(value, 11).given(b1, 0).checkEq(value, 11);
        itest("evosuite", 126).given(value, 27).given(b1, 0).checkEq(value, 27);
        itest("randoop", 126).given(value, 230018).given(b1, 12).checkEq(value, 25395842);
        itest("randoop", 126).given(value, 138).given(b1, 16).checkEq(value, 33554570);
        itest("evosuite", 126).given(value, 5).given(b1, 0).checkEq(value, 5);
        itest("randoop", 126).given(value, 342).given(b1, 0).checkEq(value, 342);
        itest("randoop", 126).given(value, 117253).given(b1, 6).checkEq(value, 12700165);
        itest("randoop", 126).given(value, 2313).given(b1, 3).checkEq(value, 6293769);
        itest("randoop", 126).given(value, 1384911).given(b1, 86).checkEq(value, 181739983);
        itest("randoop", 126).given(value, 255).given(b1, 0).checkEq(value, 255);
        itest("randoop", 126).given(value, 324).given(b1, 0).checkEq(value, 324);
        itest("randoop", 126).given(value, 196614).given(b1, 10).checkEq(value, 21168134);
        itest("dev", 126).given(value, 1898).given(b1, 0).checkEq(value, 1898);
        itest("dev", 126).given(value, 12).given(b1, 0).checkEq(value, 12);
        itest("randoop", 126).given(value, 144).given(b1, 14).checkEq(value, 29360272);
        itest("randoop", 126).given(value, 49164).given(b1, 0).checkEq(value, 49164);
        itest("randoop", 126).given(value, 656).given(b1, 16).checkEq(value, 33555088);
        return value;
    }

    public static byte[] packSynchsafeInteger(int i) {
        byte[] bytes = new byte[4];
        packSynchsafeInteger(i, bytes, 0);
        return bytes;
    }

    public static void packSynchsafeInteger(int i, byte[] bytes, int offset) {
        bytes[offset + 3] = (byte) (i & 0x7f);
        itest("randoop", 137).given(i, 147).checkEq(bytes[offset + 3], 19);
        itest("evosuite", 137).given(i, -733).checkEq(bytes[offset + 3], 35);
        itest("randoop", 137).given(i, 160).checkEq(bytes[offset + 3], 32);
        itest("randoop", 137).given(i, 3).checkEq(bytes[offset + 3], 3);
        itest("evosuite", 137).given(i, 17).checkEq(bytes[offset + 3], 17);
        itest("randoop", 137).given(i, 90).checkEq(bytes[offset + 3], 90);
        itest("dev", 137).given(i, 16843009).checkEq(bytes[offset + 3], 1);
        itest("randoop", 137).given(i, 15).checkEq(bytes[offset + 3], 15);
        itest("dev", 137).given(i, 192).checkEq(bytes[offset + 3], 64);
        itest("dev", 137).given(i, 22).checkEq(bytes[offset + 3], 22);
        itest("randoop", 137).given(i, 42).checkEq(bytes[offset + 3], 42);
        itest("evosuite", 137).given(i, 21).checkEq(bytes[offset + 3], 21);
        itest("dev", 137).given(i, 2340).checkEq(bytes[offset + 3], 36);
        itest("randoop", 137).given(i, 128).checkEq(bytes[offset + 3], 0);
        itest("randoop", 137).given(i, 8).checkEq(bytes[offset + 3], 8);
        itest("randoop", 137).given(i, 54).checkEq(bytes[offset + 3], 54);
        itest("evosuite", 137).given(i, -88).checkEq(bytes[offset + 3], 40);
        itest("evosuite", 137).given(i, 1457).checkEq(bytes[offset + 3], 49);
        itest("randoop", 137).given(i, 117506580).checkEq(bytes[offset + 3], 20);
        itest("dev", 137).given(i, 5).checkEq(bytes[offset + 3], 5);
        itest("randoop", 137).given(i, 25600).checkEq(bytes[offset + 3], 0);
        itest("randoop", 137).given(i, 23363844).checkEq(bytes[offset + 3], 4);
        itest("randoop", 137).given(i, 65).checkEq(bytes[offset + 3], 65);
        itest("dev", 137).given(i, 10).checkEq(bytes[offset + 3], 10);
        itest("evosuite", 137).given(i, 1884).checkEq(bytes[offset + 3], 92);
        itest("randoop", 137).given(i, 40).checkEq(bytes[offset + 3], 40);
        itest("evosuite", 137).given(i, 24).checkEq(bytes[offset + 3], 24);
        itest("randoop", 137).given(i, 56).checkEq(bytes[offset + 3], 56);
        itest("randoop", 137).given(i, 63).checkEq(bytes[offset + 3], 63);
        itest("randoop", 137).given(i, 9).checkEq(bytes[offset + 3], 9);
        itest("randoop", 137).given(i, 334).checkEq(bytes[offset + 3], 78);
        itest("randoop", 137).given(i, 197).checkEq(bytes[offset + 3], 69);
        itest("evosuite", 137).given(i, 15).checkEq(bytes[offset + 3], 15);
        itest("evosuite", 137).given(i, 76).checkEq(bytes[offset + 3], 76);
        itest("dev", 137).given(i, 15).checkEq(bytes[offset + 3], 15);
        itest("evosuite", 137).given(i, -166).checkEq(bytes[offset + 3], 90);
        itest("randoop", 137).given(i, 86).checkEq(bytes[offset + 3], 86);
        itest("randoop", 137).given(i, 38).checkEq(bytes[offset + 3], 38);
        itest("randoop", 137).given(i, 33).checkEq(bytes[offset + 3], 33);
        itest("randoop", 137).given(i, 81).checkEq(bytes[offset + 3], 81);
        itest("evosuite", 137).given(i, 4).checkEq(bytes[offset + 3], 4);
        itest("randoop", 137).given(i, 2).checkEq(bytes[offset + 3], 2);
        itest("evosuite", 137).given(i, -1276).checkEq(bytes[offset + 3], 4);
        itest("randoop", 137).given(i, 10).checkEq(bytes[offset + 3], 10);
        itest("randoop", 137).given(i, 95).checkEq(bytes[offset + 3], 95);
        itest("randoop", 137).given(i, 35).checkEq(bytes[offset + 3], 35);
        itest("randoop", 137).given(i, 21).checkEq(bytes[offset + 3], 21);
        itest("randoop", 137).given(i, 210).checkEq(bytes[offset + 3], 82);
        itest("evosuite", 137).given(i, -46).checkEq(bytes[offset + 3], 82);
        itest("randoop", 137).given(i, 124).checkEq(bytes[offset + 3], 124);
        itest("evosuite", 137).given(i, 531).checkEq(bytes[offset + 3], 19);
        itest("randoop", 137).given(i, 49).checkEq(bytes[offset + 3], 49);
        itest("randoop", 137).given(i, 339).checkEq(bytes[offset + 3], 83);
        itest("dev", 137).given(i, 1217).checkEq(bytes[offset + 3], 65);
        itest("randoop", 137).given(i, 48).checkEq(bytes[offset + 3], 48);
        itest("evosuite", 137).given(i, 36).checkEq(bytes[offset + 3], 36);
        itest("evosuite", 137).given(i, -1).checkEq(bytes[offset + 3], 127);
        itest("evosuite", 137).given(i, 50).checkEq(bytes[offset + 3], 50);
        itest("randoop", 137).given(i, 4).checkEq(bytes[offset + 3], 4);
        itest("evosuite", 137).given(i, 19).checkEq(bytes[offset + 3], 19);
        itest("dev", 137).given(i, 8).checkEq(bytes[offset + 3], 8);
        itest("dev", 137).given(i, 1002).checkEq(bytes[offset + 3], 106);
        itest("randoop", 137).given(i, 144).checkEq(bytes[offset + 3], 16);
        itest("randoop", 137).given(i, 447).checkEq(bytes[offset + 3], 63);
        itest("randoop", 137).given(i, 255).checkEq(bytes[offset + 3], 127);
        itest("evosuite", 137).given(i, 1).checkEq(bytes[offset + 3], 1);
        itest("dev", 137).given(i, 30).checkEq(bytes[offset + 3], 30);
        itest("randoop", 137).given(i, 97).checkEq(bytes[offset + 3], 97);
        itest("randoop", 137).given(i, 146).checkEq(bytes[offset + 3], 18);
        itest("dev", 137).given(i, 2586).checkEq(bytes[offset + 3], 26);
        itest("randoop", 137).given(i, 379).checkEq(bytes[offset + 3], 123);
        itest("randoop", 137).given(i, 67).checkEq(bytes[offset + 3], 67);
        itest("dev", 137).given(i, 12).checkEq(bytes[offset + 3], 12);
        itest("randoop", 137).given(i, 326).checkEq(bytes[offset + 3], 70);
        itest("randoop", 137).given(i, 52).checkEq(bytes[offset + 3], 52);
        itest("randoop", 137).given(i, 283).checkEq(bytes[offset + 3], 27);
        itest("randoop", 137).given(i, 158).checkEq(bytes[offset + 3], 30);
        itest("dev", 137).given(i, 1898).checkEq(bytes[offset + 3], 106);
        itest("randoop", 137).given(i, 31607296).checkEq(bytes[offset + 3], 0);
        itest("evosuite", 137).given(i, 484).checkEq(bytes[offset + 3], 100);
        itest("randoop", 137).given(i, 6).checkEq(bytes[offset + 3], 6);
        itest("dev", 137).given(i, 13).checkEq(bytes[offset + 3], 13);
        itest("randoop", 137).given(i, 98).checkEq(bytes[offset + 3], 98);
        itest("evosuite", 137).given(i, -500).checkEq(bytes[offset + 3], 12);
        itest("dev", 137).given(i, 14).checkEq(bytes[offset + 3], 14);
        itest("dev", 137).given(i, 19).checkEq(bytes[offset + 3], 19);
        itest("randoop", 137).given(i, 55).checkEq(bytes[offset + 3], 55);
        itest("dev", 137).given(i, 1089).checkEq(bytes[offset + 3], 65);
        itest("dev", 137).given(i, 23).checkEq(bytes[offset + 3], 23);
        itest("evosuite", 137).given(i, 2805).checkEq(bytes[offset + 3], 117);
        itest("randoop", 137).given(i, 32).checkEq(bytes[offset + 3], 32);
        itest("dev", 137).given(i, 7).checkEq(bytes[offset + 3], 7);
        itest("evosuite", 137).given(i, 25).checkEq(bytes[offset + 3], 25);
        itest("randoop", 137).given(i, 381).checkEq(bytes[offset + 3], 125);
        itest("randoop", 137).given(i, 96).checkEq(bytes[offset + 3], 96);
        itest("randoop", 137).given(i, 380).checkEq(bytes[offset + 3], 124);
        itest("randoop", 137).given(i, 28).checkEq(bytes[offset + 3], 28);
        itest("evosuite", 137).given(i, 256).checkEq(bytes[offset + 3], 0);
        itest("evosuite", 137).given(i, 6).checkEq(bytes[offset + 3], 6);
        itest("randoop", 137).given(i, 367).checkEq(bytes[offset + 3], 111);
        itest("dev", 137).given(i, 257).checkEq(bytes[offset + 3], 1);
        itest("randoop", 137).given(i, 14).checkEq(bytes[offset + 3], 14);
        itest("randoop", 137).given(i, 645).checkEq(bytes[offset + 3], 5);
        itest("randoop", 137).given(i, 357).checkEq(bytes[offset + 3], 101);
        itest("randoop", 137).given(i, 312).checkEq(bytes[offset + 3], 56);
        itest("randoop", 137).given(i, 0).checkEq(bytes[offset + 3], 0);
        itest("evosuite", 137).given(i, 16).checkEq(bytes[offset + 3], 16);
        itest("randoop", 137).given(i, 217).checkEq(bytes[offset + 3], 89);
        itest("evosuite", 137).given(i, 61).checkEq(bytes[offset + 3], 61);
        itest("evosuite", 137).given(i, -236).checkEq(bytes[offset + 3], 20);
        itest("randoop", 137).given(i, 361).checkEq(bytes[offset + 3], 105);
        itest("randoop", 137).given(i, 16).checkEq(bytes[offset + 3], 16);
        itest("randoop", 137).given(i, 11).checkEq(bytes[offset + 3], 11);
        itest("evosuite", 137).given(i, 5).checkEq(bytes[offset + 3], 5);
        itest("evosuite", 137).given(i, -49).checkEq(bytes[offset + 3], 79);
        itest("randoop", 137).given(i, 1).checkEq(bytes[offset + 3], 1);
        itest("randoop", 137).given(i, 230).checkEq(bytes[offset + 3], 102);
        itest("randoop", 137).given(i, 342).checkEq(bytes[offset + 3], 86);
        itest("evosuite", 137).given(i, 31).checkEq(bytes[offset + 3], 31);
        itest("dev", 137).given(i, 16).checkEq(bytes[offset + 3], 16);
        itest("dev", 137).given(i, 2330).checkEq(bytes[offset + 3], 26);
        itest("randoop", 137).given(i, 78).checkEq(bytes[offset + 3], 78);
        itest("randoop", 137).given(i, 41).checkEq(bytes[offset + 3], 41);
        itest("randoop", 137).given(i, 169).checkEq(bytes[offset + 3], 41);
        itest("dev", 137).given(i, 6).checkEq(bytes[offset + 3], 6);
        itest("randoop", 137).given(i, 298).checkEq(bytes[offset + 3], 42);
        itest("randoop", 137).given(i, 241).checkEq(bytes[offset + 3], 113);
        itest("randoop", 137).given(i, 89).checkEq(bytes[offset + 3], 89);
        itest("randoop", 137).given(i, 93).checkEq(bytes[offset + 3], 93);
        itest("randoop", 137).given(i, 26).checkEq(bytes[offset + 3], 26);
        itest("evosuite", 137).given(i, 14).checkEq(bytes[offset + 3], 14);
        itest("dev", 137).given(i, 20).checkEq(bytes[offset + 3], 20);
        itest("randoop", 137).given(i, 202183184).checkEq(bytes[offset + 3], 16);
        itest("randoop", 137).given(i, 324).checkEq(bytes[offset + 3], 68);
        itest("randoop", 137).given(i, 12).checkEq(bytes[offset + 3], 12);
        itest("randoop", 137).given(i, 7).checkEq(bytes[offset + 3], 7);
        itest("randoop", 137).given(i, 121).checkEq(bytes[offset + 3], 121);
        itest("randoop", 137).given(i, 125).checkEq(bytes[offset + 3], 125);
        itest("evosuite", 137).given(i, 480).checkEq(bytes[offset + 3], 96);
        itest("randoop", 137).given(i, 6373889).checkEq(bytes[offset + 3], 1);
        itest("dev", 137).given(i, 17).checkEq(bytes[offset + 3], 17);
        itest("randoop", 137).given(i, 316).checkEq(bytes[offset + 3], 60);
        itest("evosuite", 137).given(i, 2).checkEq(bytes[offset + 3], 2);
        itest("randoop", 137).given(i, 33817616).checkEq(bytes[offset + 3], 16);
        itest("randoop", 137).given(i, 62).checkEq(bytes[offset + 3], 62);
        itest("randoop", 137).given(i, 133).checkEq(bytes[offset + 3], 5);
        itest("randoop", 137).given(i, 200).checkEq(bytes[offset + 3], 72);
        itest("randoop", 137).given(i, 31).checkEq(bytes[offset + 3], 31);
        itest("randoop", 137).given(i, 100).checkEq(bytes[offset + 3], 100);
        itest("randoop", 137).given(i, 214).checkEq(bytes[offset + 3], 86);
        itest("evosuite", 137).given(i, 10).checkEq(bytes[offset + 3], 10);
        itest("randoop", 137).given(i, 107).checkEq(bytes[offset + 3], 107);
        itest("evosuite", 137).given(i, 9).checkEq(bytes[offset + 3], 9);
        itest("randoop", 137).given(i, 74).checkEq(bytes[offset + 3], 74);
        itest("evosuite", 137).given(i, 27).checkEq(bytes[offset + 3], 27);
        itest("randoop", 137).given(i, 389).checkEq(bytes[offset + 3], 5);
        itest("randoop", 137).given(i, 5).checkEq(bytes[offset + 3], 5);
        itest("randoop", 137).given(i, 76).checkEq(bytes[offset + 3], 76);
        itest("dev", 137).given(i, 9).checkEq(bytes[offset + 3], 9);
        itest("randoop", 137).given(i, 854292).checkEq(bytes[offset + 3], 20);
        itest("randoop", 137).given(i, 13).checkEq(bytes[offset + 3], 13);
        itest("evosuite", 137).given(i, 11).checkEq(bytes[offset + 3], 11);
        itest("dev", 137).given(i, 2).checkEq(bytes[offset + 3], 2);
        itest("evosuite", 137).given(i, -2357).checkEq(bytes[offset + 3], 75);
        itest("dev", 137).given(i, 1227).checkEq(bytes[offset + 3], 75);
        itest("evosuite", 137).given(i, 0).checkEq(bytes[offset + 3], 0);
        itest("randoop", 137).given(i, 75).checkEq(bytes[offset + 3], 75);
        itest("randoop", 137).given(i, 27).checkEq(bytes[offset + 3], 27);
        itest("randoop", 137).given(i, 61).checkEq(bytes[offset + 3], 61);
        itest("randoop", 137).given(i, 242).checkEq(bytes[offset + 3], 114);
        itest("dev", 137).given(i, 12345).checkEq(bytes[offset + 3], 57);
        bytes[offset + 2] = (byte) ((i >> 7) & 0x7f);
        itest("evosuite", 138).given(i, 531).checkEq(bytes[offset + 2], 4);
        itest("randoop", 138).given(i, 63).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 169).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 75).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 144).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 107).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 12345).checkEq(bytes[offset + 2], 96);
        itest("dev", 138).given(i, 15).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 1089).checkEq(bytes[offset + 2], 8);
        itest("dev", 138).given(i, 8).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 379).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 158).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 89).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 133).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 16).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 33817616).checkEq(bytes[offset + 2], 8);
        itest("evosuite", 138).given(i, -1276).checkEq(bytes[offset + 2], 118);
        itest("dev", 138).given(i, 2330).checkEq(bytes[offset + 2], 18);
        itest("randoop", 138).given(i, 76).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 257).checkEq(bytes[offset + 2], 2);
        itest("dev", 138).given(i, 14).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 241).checkEq(bytes[offset + 2], 1);
        itest("dev", 138).given(i, 9).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 31).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 86).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 65).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 255).checkEq(bytes[offset + 2], 1);
        itest("evosuite", 138).given(i, -49).checkEq(bytes[offset + 2], 127);
        itest("randoop", 138).given(i, 146).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 98).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 28).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -1).checkEq(bytes[offset + 2], 127);
        itest("dev", 138).given(i, 6).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 17).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 342).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 31607296).checkEq(bytes[offset + 2], 20);
        itest("evosuite", 138).given(i, 2805).checkEq(bytes[offset + 2], 21);
        itest("randoop", 138).given(i, 62).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 480).checkEq(bytes[offset + 2], 3);
        itest("randoop", 138).given(i, 14).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 41).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 23363844).checkEq(bytes[offset + 2], 2);
        itest("dev", 138).given(i, 12).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 854292).checkEq(bytes[offset + 2], 18);
        itest("dev", 138).given(i, 1227).checkEq(bytes[offset + 2], 9);
        itest("evosuite", 138).given(i, 9).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -733).checkEq(bytes[offset + 2], 122);
        itest("randoop", 138).given(i, 74).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 42).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 9).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -88).checkEq(bytes[offset + 2], 127);
        itest("evosuite", 138).given(i, 17).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 21).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 38).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 13).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 1).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 316).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 0).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 23).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 283).checkEq(bytes[offset + 2], 2);
        itest("dev", 138).given(i, 2340).checkEq(bytes[offset + 2], 18);
        itest("dev", 138).given(i, 10).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 645).checkEq(bytes[offset + 2], 5);
        itest("randoop", 138).given(i, 97).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 16843009).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 55).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 0).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 334).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 380).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 217).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 447).checkEq(bytes[offset + 2], 3);
        itest("randoop", 138).given(i, 31).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 10).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 1457).checkEq(bytes[offset + 2], 11);
        itest("dev", 138).given(i, 2586).checkEq(bytes[offset + 2], 20);
        itest("randoop", 138).given(i, 200).checkEq(bytes[offset + 2], 1);
        itest("dev", 138).given(i, 13).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 242).checkEq(bytes[offset + 2], 1);
        itest("evosuite", 138).given(i, 11).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 214).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 52).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 6).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 19).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 160).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 25600).checkEq(bytes[offset + 2], 72);
        itest("randoop", 138).given(i, 125).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 389).checkEq(bytes[offset + 2], 3);
        itest("evosuite", 138).given(i, 50).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 48).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 16).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 3).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 27).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 7).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 21).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 5).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 4).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 25).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 128).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 33).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 20).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 312).checkEq(bytes[offset + 2], 2);
        itest("evosuite", 138).given(i, 14).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 4).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 124).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 324).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 93).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -236).checkEq(bytes[offset + 2], 126);
        itest("randoop", 138).given(i, 81).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 7).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 15).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 36).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 61).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 197).checkEq(bytes[offset + 2], 1);
        itest("evosuite", 138).given(i, -46).checkEq(bytes[offset + 2], 127);
        itest("randoop", 138).given(i, 326).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 90).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 6).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 121).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 100).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 56).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -500).checkEq(bytes[offset + 2], 124);
        itest("randoop", 138).given(i, 2).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 49).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 27).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 381).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 210).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 35).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 298).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 32).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -166).checkEq(bytes[offset + 2], 126);
        itest("evosuite", 138).given(i, 24).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 30).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 11).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 95).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 357).checkEq(bytes[offset + 2], 2);
        itest("evosuite", 138).given(i, 256).checkEq(bytes[offset + 2], 2);
        itest("randoop", 138).given(i, 67).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 54).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 12).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 26).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 1884).checkEq(bytes[offset + 2], 14);
        itest("evosuite", 138).given(i, 76).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 361).checkEq(bytes[offset + 2], 2);
        itest("dev", 138).given(i, 1217).checkEq(bytes[offset + 2], 9);
        itest("randoop", 138).given(i, 96).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 8).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 192).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 339).checkEq(bytes[offset + 2], 2);
        itest("dev", 138).given(i, 5).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, -2357).checkEq(bytes[offset + 2], 109);
        itest("evosuite", 138).given(i, 10).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 6373889).checkEq(bytes[offset + 2], 4);
        itest("randoop", 138).given(i, 1).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 22).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 61).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 19).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 15).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 230).checkEq(bytes[offset + 2], 1);
        itest("randoop", 138).given(i, 40).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 2).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 367).checkEq(bytes[offset + 2], 2);
        itest("evosuite", 138).given(i, 484).checkEq(bytes[offset + 2], 3);
        itest("evosuite", 138).given(i, 16).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 147).checkEq(bytes[offset + 2], 1);
        itest("evosuite", 138).given(i, 5).checkEq(bytes[offset + 2], 0);
        itest("randoop", 138).given(i, 78).checkEq(bytes[offset + 2], 0);
        itest("evosuite", 138).given(i, 2).checkEq(bytes[offset + 2], 0);
        itest("dev", 138).given(i, 1002).checkEq(bytes[offset + 2], 7);
        itest("dev", 138).given(i, 1898).checkEq(bytes[offset + 2], 14);
        itest("randoop", 138).given(i, 202183184).checkEq(bytes[offset + 2], 36);
        itest("randoop", 138).given(i, 117506580).checkEq(bytes[offset + 2], 4);
        bytes[offset + 1] = (byte) ((i >> 14) & 0x7f);
        itest("randoop", 139).given(i, 76).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 2).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 16).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 117506580).checkEq(bytes[offset + 1], 4);
        itest("randoop", 139).given(i, 63).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 2).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 326).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 3).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 447).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 31).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 15).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 484).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 52).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 339).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 144).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 361).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 89).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 169).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 1).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 133).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 4).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 28).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 14).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 312).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 74).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 16843009).checkEq(bytes[offset + 1], 4);
        itest("randoop", 139).given(i, 86).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 65).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 0).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 23363844).checkEq(bytes[offset + 1], 18);
        itest("dev", 139).given(i, 1227).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 324).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 16).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 217).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 6373889).checkEq(bytes[offset + 1], 5);
        itest("randoop", 139).given(i, 230).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 1).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 531).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 17).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 121).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 242).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 62).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 41).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 21).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 31607296).checkEq(bytes[offset + 1], 9);
        itest("randoop", 139).given(i, 298).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 12).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 214).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 1217).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 381).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 26).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 76).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 9).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 67).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 6).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 2).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -2357).checkEq(bytes[offset + 1], 127);
        itest("evosuite", 139).given(i, 10).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 5).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 90).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 8).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 78).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 1457).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 22).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 40).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 61).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -46).checkEq(bytes[offset + 1], 127);
        itest("evosuite", 139).given(i, 19).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -49).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 96).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 5).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 75).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 54).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 33).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 12).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -236).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 128).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 256).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 107).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 1898).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 367).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 125).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 146).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 15).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 16).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 210).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 12345).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 93).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 160).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -1).checkEq(bytes[offset + 1], 127);
        itest("dev", 139).given(i, 5).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 21).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 33817616).checkEq(bytes[offset + 1], 16);
        itest("randoop", 139).given(i, 35).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -1276).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 10).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 2586).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 9).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 81).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 9).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 357).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 27).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 6).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 14).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 20).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 61).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -733).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 95).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 32).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 11).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 24).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 49).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 15).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 36).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 854292).checkEq(bytes[offset + 1], 52);
        itest("dev", 139).given(i, 257).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 124).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 7).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 30).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 645).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 25600).checkEq(bytes[offset + 1], 1);
        itest("randoop", 139).given(i, 100).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 8).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 342).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 200).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 2805).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 97).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 6).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 55).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -500).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 42).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 1884).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 480).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 389).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 14).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -88).checkEq(bytes[offset + 1], 127);
        itest("dev", 139).given(i, 192).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 147).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 17).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 31).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 98).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 56).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 23).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 38).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 13).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 2340).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 10).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, -166).checkEq(bytes[offset + 1], 127);
        itest("randoop", 139).given(i, 0).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 379).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 202183184).checkEq(bytes[offset + 1], 52);
        itest("randoop", 139).given(i, 158).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 11).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 283).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 2330).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 7).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 241).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 4).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 19).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 1002).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 25).checkEq(bytes[offset + 1], 0);
        itest("evosuite", 139).given(i, 50).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 13).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 197).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 334).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 380).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 27).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 255).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 48).checkEq(bytes[offset + 1], 0);
        itest("randoop", 139).given(i, 316).checkEq(bytes[offset + 1], 0);
        itest("dev", 139).given(i, 1089).checkEq(bytes[offset + 1], 0);
        bytes[offset + 0] = (byte) ((i >> 21) & 0x7f);
        itest("randoop", 140).given(i, 61).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 86).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 202183184).checkEq(bytes[offset + 0], 96);
        itest("randoop", 140).given(i, 197).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 19).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 14).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 74).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 257).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 2330).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 27).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 23363844).checkEq(bytes[offset + 0], 11);
        itest("dev", 140).given(i, 13).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 15).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 4).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 16).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 160).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 2586).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 16843009).checkEq(bytes[offset + 0], 8);
        itest("randoop", 140).given(i, 125).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 367).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 342).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 75).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 100).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 2).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 28).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 3).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 379).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 63).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 31607296).checkEq(bytes[offset + 0], 15);
        itest("randoop", 140).given(i, 38).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 6).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 645).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 6).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 5).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 124).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 357).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 62).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 2).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 210).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 15).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 26).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 89).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 95).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 98).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 2805).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 12).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 0).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 1).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -236).checkEq(bytes[offset + 0], 127);
        itest("randoop", 140).given(i, 14).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 8).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 12345).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 334).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 22).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 380).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 255).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 230).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 147).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 389).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 11).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 78).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 1002).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 16).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 158).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 2340).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 192).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 133).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 17).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 31).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 96).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 54).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 93).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 49).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 9).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 316).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 25600).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 12).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -1).checkEq(bytes[offset + 0], 127);
        itest("randoop", 140).given(i, 67).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 76).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 2).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 283).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 1884).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 241).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 5).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 6).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 144).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 1089).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 9).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 117506580).checkEq(bytes[offset + 0], 56);
        itest("randoop", 140).given(i, 40).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 36).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 11).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 217).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 447).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 326).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 30).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 32).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 90).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 8).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 312).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 10).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 33).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -2357).checkEq(bytes[offset + 0], 127);
        itest("randoop", 140).given(i, 107).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 7).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -733).checkEq(bytes[offset + 0], 127);
        itest("randoop", 140).given(i, 42).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 21).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 5).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 324).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 531).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -1276).checkEq(bytes[offset + 0], 127);
        itest("evosuite", 140).given(i, -49).checkEq(bytes[offset + 0], 127);
        itest("evosuite", 140).given(i, -46).checkEq(bytes[offset + 0], 127);
        itest("evosuite", 140).given(i, 21).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -88).checkEq(bytes[offset + 0], 127);
        itest("evosuite", 140).given(i, 480).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 27).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 9).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 169).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 24).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 339).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 35).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 361).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 56).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 15).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 65).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 61).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 48).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 0).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 41).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 14).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 1227).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 7).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 23).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 381).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 81).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -166).checkEq(bytes[offset + 0], 127);
        itest("dev", 140).given(i, 10).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 146).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 128).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 200).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 121).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 242).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 17).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 33817616).checkEq(bytes[offset + 0], 16);
        itest("evosuite", 140).given(i, 256).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 20).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, -500).checkEq(bytes[offset + 0], 127);
        itest("dev", 140).given(i, 16).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 25).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 97).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 76).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 55).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 1898).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 13).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 1).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 854292).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 298).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 19).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 52).checkEq(bytes[offset + 0], 0);
        itest("dev", 140).given(i, 1217).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 31).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 484).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 4).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 6373889).checkEq(bytes[offset + 0], 3);
        itest("randoop", 140).given(i, 10).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 50).checkEq(bytes[offset + 0], 0);
        itest("evosuite", 140).given(i, 1457).checkEq(bytes[offset + 0], 0);
        itest("randoop", 140).given(i, 214).checkEq(bytes[offset + 0], 0);
    }

    public static byte[] copyBuffer(byte[] bytes, int offset, int length) {
        byte[] copy = new byte[length];
        if (length > 0) {
            System.arraycopy(bytes, offset, copy, 0, length);
        }
        return copy;
    }

    public static void copyIntoByteBuffer(byte[] bytes, int offset, int length, byte[] destBuffer, int destOffset) {
        if (length > 0) {
            System.arraycopy(bytes, offset, destBuffer, destOffset, length);
        }
    }

    public static int sizeUnsynchronisationWouldAdd(byte[] bytes) {
        int count = 0;
        for (int i = 0; i < bytes.length - 1; i++) {
            if (bytes[i] == (byte) 0xff && ((bytes[i + 1] & (byte) 0xe0) == (byte) 0xe0 || bytes[i + 1] == 0)) {
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 3).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 41).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 33).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 10).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 6).checkTrue(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 21).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 10).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 80).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 12).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 7).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 6).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 3).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 4).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 28).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 12).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 64).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 72).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 6).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 56).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 76).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 5).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 17).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, -1, -5, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 16).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 12).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 2).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -1, -1 }).given(i, 1).checkTrue(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 4).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 10).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 2).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 29).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 17).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 14).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 12).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 9).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 1).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 21).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 9).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 33).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, -1 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 6).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 14).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 7).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 2).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 45).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 27).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 53).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 7).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 44).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 32).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 52).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 2).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 68).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 16).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 5).checkTrue(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 14).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 18).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 15).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 67).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 19).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 7).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 30).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 79).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 6).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 18).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 73).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 15).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 5).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 40).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, -1, -5, 0 }).given(i, 1).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 32).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 8).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 18).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 4).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 20).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 3).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 16).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 11).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 69).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 19).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 11).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 11).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 6).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 75).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 34).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 0, -1, -5 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 29).checkTrue(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 22).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 9).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 38).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 14).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 17).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 6, 10 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 10).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 47).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 12).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 11).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 24).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 8).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 4).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 6).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 7).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 60).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 15).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 31).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 4).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 71).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 6).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 36).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 7).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 13).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 49).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 50, 46, 48 }).given(i, 1).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 2).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 0).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 9).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 12).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 26).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 82).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 25).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 1).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 15).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 14).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 10).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 5).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 0, -1, -5 }).given(i, 3).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 50, 46, 48 }).given(i, 0).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 66).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 7).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 6).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 4).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 4).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 1, -5 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 3).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 27).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 19).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 10).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 10).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 4).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 51).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 12).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 12).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 23).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 0, -1, -5 }).given(i, 2).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 35).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 23).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 1).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 12).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 11).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 4).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 8).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 6).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 5).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 18).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 14).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 74).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 62).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 58).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 19).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 46).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 14).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 14).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, -1, -5, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 0).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 78).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 18).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 9).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 9).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 5).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 4).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 20).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 77).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 17).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 3).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 31).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 30).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 9).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 43).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 17).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 55).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 11).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 9).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 42).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 5).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 54).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 11).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 81).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 26).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 5).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 59).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 65).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 3).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 13).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 2).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 4).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 57).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 0, -1, -5 }).given(i, 0).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 24).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 3).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 12).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 5).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 1, -5 }).given(i, 0).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 0).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 3).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 3).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 4).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 7).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 13).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 28).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 11).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 3).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 63).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 15).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 16).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 50).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 84, 114, 97, 105, 108, 101, 114, 0, 0, 0, 19, 8, 11 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 1).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 18).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 22).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 5).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -1, -1 }).given(i, 0).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 2).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 1).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 11).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 10).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 25).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 7).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 13).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 10).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 1).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 3).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 39).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 8).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 61).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 7).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 16).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 16).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 0).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 17).checkTrue(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 15).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 48).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 11).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, -5 }).given(i, 0).checkTrue(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 8).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 1).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 83).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 84, 67, 77, 0, 0, 0, 4, -95, 0, 0, 0, 18, 0, 0, 0, 80, 0, 0, 0, 20 }).given(i, 6).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 1).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 0, 0, 0, 0, 93, 80, 55, -124, 0, 93, 80, 55, -124 }).given(i, 0).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 77, 111, 110, 111, 0, 2, 4, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 83, 116, 101, 114, 101, 111, 0, 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0, 84, 82, 75, 0 }).given(i, 5).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 70).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 37).checkFalse(group());
                itest("randoop", 160).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 9).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 9).checkFalse(group());
                itest("evosuite", 160).given(bytes, new byte[] { 87, 80, 85, 66, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 4 }).given(i, 5).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 14).checkFalse(group());
                itest("dev", 160).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 0).checkTrue(group());
                count++;
            }
        }
        if (bytes.length > 0 && bytes[bytes.length - 1] == (byte) 0xff) {
            count++;
        }
        return count;
    }

    public static byte[] unsynchroniseBuffer(byte[] bytes) {
        // unsynchronisation is replacing instances of:
        // 11111111 111xxxxx with 11111111 00000000 111xxxxx and
        // 11111111 00000000 with 11111111 00000000 00000000
        int count = sizeUnsynchronisationWouldAdd(bytes);
        if (count == 0) {
            return bytes;
        }
        byte[] newBuffer = new byte[bytes.length + count];
        int j = 0;
        for (int i = 0; i < bytes.length - 1; i++) {
            newBuffer[j++] = bytes[i];
            if (bytes[i] == (byte) 0xff && ((bytes[i + 1] & (byte) 0xe0) == (byte) 0xe0 || bytes[i + 1] == 0)) {
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 13).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 6).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 5).checkTrue(group());
                itest("randoop", 178).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 1).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 2).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 10).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 20).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 1).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -94 }).given(i, 1).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 13).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 12).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 19).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 15).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 0).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 10).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -48 }).given(i, 1).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 0).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 8).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 7).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 18).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 19).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 7).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 33).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 17).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 17).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 8).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 10).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 11).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 5).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 22).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 1).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 18).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 1).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 31).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 12).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 14).checkTrue(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 6).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 2).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 6).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 13).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 15).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 14).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 32).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 19).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 14).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 14).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 1).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 5).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 1).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 13).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -94 }).given(i, 0).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 4).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 5).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 30).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 15).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkTrue(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 20).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 2).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 4).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 11).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 11).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 11, -1, -9, -1, 68, 13, 54, -1 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 17).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 11).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 1).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 11).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 99, 15, -1, -8, -18, 2, -102 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 14).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 3).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 29).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 4).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -94 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 5).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 1).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 14).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 4).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 2).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 28).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 13).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 5).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 21).checkFalse(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 1).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 2).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 5).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 16).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 2).checkTrue(group());
                itest("randoop", 178).given(bytes, new byte[] { 1, -1, -2, 77, 0, 111, 0, 110, 0, 111, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 7).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 0).checkTrue(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 0).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 10).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 7).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 18).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 8).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 8).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 6).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 4).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -127, -1 }).given(i, 0).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 15).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 16).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 7).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -48 }).given(i, 2).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 23).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 15).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 5).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -127, -1 }).given(i, 1).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 10).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 8).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 24).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 2).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 6).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 6).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -48 }).given(i, 0).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 84, 67, 79, 0, 0, 0, 0, 4, 0, 0, 0, 4, -114, 56, -29, -111, -1, -1, -15, 63 }).given(i, 16).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 18).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 11).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 17).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 13).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 13).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 25).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 67, 72, 65, 80, 0, -1, -1, -1, -90, 0, 0, 0, -17, -1, -1, -1, -90, 0, 0, 12, -102 }).given(i, 12).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 7).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 178).given(bytes, new byte[] { 1, 101, 110, 103, -1, -2, 101, 0, 110, 0, 103, 0, 0, 0, -1, -2, 101, 0, 110, 0, 103, 0 }).given(i, 16).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, 0, 2, 3, 4, -1, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0 }).given(i, 11).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 14).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { -1, -5, 2, 3, 4, -1, -32, 7, 8, 9, 10, 11, 12, 13, -1, -16 }).given(i, 12).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 27).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, -1, -1, -1 }).given(i, 0).checkTrue(group());
                itest("evosuite", 178).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 26).checkFalse(group());
                itest("dev", 178).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, -5, -1, -5, -1, 0, 4, 5 }).given(i, 8).checkFalse(group());
                newBuffer[j++] = 0;
            }
        }
        newBuffer[j++] = bytes[bytes.length - 1];
        if (bytes[bytes.length - 1] == (byte) 0xff) {
            newBuffer[j++] = 0;
        }
        return newBuffer;
    }

    public static int sizeSynchronisationWouldSubtract(byte[] bytes) {
        int count = 0;
        for (int i = 0; i < bytes.length - 2; i++) {
            if (bytes[i] == (byte) 0xff && bytes[i + 1] == 0 && ((bytes[i + 2] & (byte) 0xe0) == (byte) 0xe0 || bytes[i + 2] == 0)) {
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 8).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 79).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 0).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 21).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 29).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 13).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 48).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 13).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 13).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 101, 110, 103, 0 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 13 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 31).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 100 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 52).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 36).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 2).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 15).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 17).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 64).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 33).checkTrue(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 80).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 10).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 65, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 104, 105, 33, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 9).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { -53, 79, 0, 0, -79, 51, 31 }).given(i, 0).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 22).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 75).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 0, -1, 0, -5 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 38).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 26).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { -53, 79, 0, 0, -79, 51, 31 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 14).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 9).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 17).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 33).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 25).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, -1, 0, -5, 0 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 41).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 7).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 8).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 1, -5 }).given(i, 0).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 11).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 26).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 44).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 32).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 56).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 23).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 13).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 5).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 35).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 68).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { -53, 79, 0, 0, -79, 51, 31 }).given(i, 3).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 7).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 22).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5 }).given(i, 0).checkTrue(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 11).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 6).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 34).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 55).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 67).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 14).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 39).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 22).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 10).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 4).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 20).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 78).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 12).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 10).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 20).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 28).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 61).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 9).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 24).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 34).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 8).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 76).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 21).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 15).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 35).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 14).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 63).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 59).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 18).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 8).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 7).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 50).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 0, -1, 0, -5 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 74).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 27).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 81).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 28).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 32).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 4).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 72).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 16 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 16).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 11).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 101, 110, 103, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 37).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, -1, 0, -5, 0 }).given(i, 1).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 29).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 0).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 6).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 12).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 26).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 50, 46, 48, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 21).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 62).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 27).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 13).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 11).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 15).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 46).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 54).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 15).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 70).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 65, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 104, 105, 33, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 3).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 16).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 12).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 36).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 20).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 77).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 19).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 11).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 35).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 11).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, -1, 0, -5, 0 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 23).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 16).checkTrue(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 6).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 19).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 5).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 42).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 34).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 8).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 18, -1, 18, -1 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 25).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 23).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 58).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 33).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0 }).given(i, 2).checkTrue(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 66).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 15).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 13).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 4).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 6).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 24).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 0).checkTrue(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 7).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 57).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 32).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 24).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 16).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 65).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 8).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 69).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 12).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { -53, 79, 0, 0, -79, 51, 31 }).given(i, 2).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 4).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 0, -1, 0, -5 }).given(i, 0).checkTrue(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 43).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 7).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 9).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 31).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 10).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 30).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 6).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 14).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 0, -1, 0, -5 }).given(i, 4).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 7).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 11).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 37).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 53).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 9).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { -53, 79, 0, 0, -79, 51, 31 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 14).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 45).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 16).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 12).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0 }).given(i, 0).checkTrue(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 4).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 65, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 104, 105, 33, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 6).checkTrue(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 2, 2, 3, 3, 0 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 40).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 29).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 2, 73, 2, 3, 3 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 5).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 13 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 30).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 51).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 18).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 9).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 18).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 1, 16, 14, 16, 7, 14 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 47).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 2).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 10).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 82).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 27).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 65, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 104, 105, 33, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10 }).given(i, 3).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 31).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 19).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 3).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 25).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 7).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 100 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, -5, 0, -1, 0, -5 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 73).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 28).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 49).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 1, 1, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, -1, 0 }).given(i, 0).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 60).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }).given(i, 1).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 50, 46, 48, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 0, 101, 110, 103, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 31, 84, 79, 80, 69, 0, 0, 0, 6, 0, 0, 0, 73, 97, 57, 106, 46, 84, 82, 67, 75, 0, 0, 0, 5, 0, 0, 0, 87, 79, 65, 83 }).given(i, 17).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 38).checkFalse(group());
                itest("randoop", 192).given(bytes, new byte[] { 0, 0, 0, 16 }).given(i, 0).checkFalse(group());
                itest("dev", 192).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 30).checkTrue(group());
                itest("randoop", 192).given(bytes, new byte[] { 73, 68, 51, 3, 0, 0, 0, 0, 0, 75, 84, 67, 79, 77, 0, 0, 0, 5, 0, 0, 0, 84, 73, 84, 49, 87, 79, 82, 83, 0, 0, 0, 3, 0, 0, 84, 67, 82, 87, 88, 88, 88, 0, 0, 0, 6, 0, 0, 0, 0, 84, 73, 84, 49, 65, 80, 73, 67, 0, 0, 0, 11, 0, 0, 0, 73, 73, 0, 100, 104, 105, 33, 0, 6, 10, 51, 68, 73, 3, 0, 0, 0, 0, 0, 75 }).given(i, 71).checkFalse(group());
                count++;
            }
        }
        if (bytes.length > 1 && bytes[bytes.length - 2] == (byte) 0xff && bytes[bytes.length - 1] == 0) {
            count++;
        }
        return count;
    }

    public static byte[] synchroniseBuffer(byte[] bytes) {
        // synchronisation is replacing instances of:
        // 11111111 00000000 111xxxxx with 11111111 111xxxxx and
        // 11111111 00000000 00000000 with 11111111 00000000
        int count = sizeSynchronisationWouldSubtract(bytes);
        if (count == 0) {
            return bytes;
        }
        byte[] newBuffer = new byte[bytes.length - count];
        int i = 0;
        for (int j = 0; j < newBuffer.length - 1; j++) {
            newBuffer[j] = bytes[i];
            if (bytes[i] == (byte) 0xff && bytes[i + 1] == 0 && ((bytes[i + 2] & (byte) 0xe0) == (byte) 0xe0 || bytes[i + 2] == 0)) {
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 11).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 11).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 43, -1, -1, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 4).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 13).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 4).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 13).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 11).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 15).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, -94 }).given(i, 4).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 21).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 6).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 9).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 0).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 6).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 5).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 6).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 15).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 4).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 10).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, -94 }).given(i, 2).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 23).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 13).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 36).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 11).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 8).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 11).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 3).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 10).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 2).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 16).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 6).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 12).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 4).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 2).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 15).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 43, -1, -1, 0 }).given(i, 3).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 27).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 32).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 16).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 10).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 14).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 14).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 20).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 0).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -127, -1, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 9).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 13).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 8).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 11).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -127, -1, 0 }).given(i, 1).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 13).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 4).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 14).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, -94 }).given(i, 0).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 3).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 8).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 22).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 5).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 7).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 10).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 12).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 43, -1, -1, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 10).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 2).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 4).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 5).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 24).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 12).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 14).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 7).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 16).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 35).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 14).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 43, -1, -1, 0 }).given(i, 0).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 0).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, 0, 2, 3, 4, -1, 0, 0, 7, 8, 9, 10, 11, 12, 13, -1, 0, 0 }).given(i, 9).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 0).checkTrue(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 9).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 9).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 26).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 19).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -1, 0, -1, 0, -1, 0 }).given(i, 2).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 15).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 3).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 7).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 4).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 25).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 8).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 0).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 30).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 18).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 17).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 1).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 14).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 5).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, -1, 0, 17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 33).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 2).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 1).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 10).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 29).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 0).checkTrue(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 16).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 7).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 13).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 1).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 12).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0 }).given(i, 2).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 15).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { -1, 0, 74, -1, 0, 0, 0, 0, 0, 0, 0, 0 }).given(i, 6).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { -1, 0, -5, 2, 3, 4, -1, 0, -32, 7, 8, 9, 10, 11, 12, 13, -1, 0, -16 }).given(i, 9).checkFalse(group());
                itest("evosuite", 210).given(bytes, new byte[] { 72, 72, -54, -1, -1, 0, -1, 0, -39 }).given(i, 2).checkFalse(group());
                itest("dev", 210).given(bytes, new byte[] { 0, 109, 105, 109, 101, 47, 116, 121, 112, 101, 0, 3, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 1, 2, 3, -1, 0, -5, -1, 0, -5, -1, 0, 0, 4, 5 }).given(i, 0).checkFalse(group());
                i++;
            }
            i++;
        }
        newBuffer[newBuffer.length - 1] = bytes[i];
        return newBuffer;
    }

    public static String substitute(String s, String replaceThis, String withThis) {
        if (replaceThis.length() < 1 || !s.contains(replaceThis)) {
            return s;
        }
        StringBuilder newString = new StringBuilder();
        int lastPosition = 0;
        int position = 0;
        while ((position = s.indexOf(replaceThis, position)) >= 0) {
            if (position > lastPosition) {
                newString.append(s.substring(lastPosition, position));
            }
            if (withThis != null) {
                newString.append(withThis);
            }
            lastPosition = position + replaceThis.length();
            position++;
        }
        if (lastPosition < s.length()) {
            newString.append(s.substring(lastPosition));
        }
        return newString.toString();
    }

    public static String asciiOnly(String s) {
        StringBuilder newString = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (ch < 32 || ch > 126) {
                newString.append('?');
            } else {
                newString.append(ch);
            }
        }
        return newString.toString();
    }

    public static int indexOfTerminator(byte[] bytes) {
        return indexOfTerminator(bytes, 0);
    }

    public static int indexOfTerminator(byte[] bytes, int fromIndex) {
        return indexOfTerminator(bytes, 0, 1);
    }

    public static int indexOfTerminator(byte[] bytes, int fromIndex, int terminatorLength) {
        int marker = -1;
        for (int i = fromIndex; i <= bytes.length - terminatorLength; i++) {
            if ((i - fromIndex) % terminatorLength == 0) {
                int matched;
                for (matched = 0; matched < terminatorLength; matched++) {
                    if (bytes[i + matched] != 0) {
                        break;
                    }
                }
                if (matched == terminatorLength) {
                    marker = i;
                    break;
                }
            }
        }
        return marker;
    }

    public static int indexOfTerminatorForEncoding(byte[] bytes, int fromIndex, int encoding) {
        int terminatorLength = (encoding == EncodedText.TEXT_ENCODING_UTF_16 || encoding == EncodedText.TEXT_ENCODING_UTF_16BE) ? 2 : 1;
        return indexOfTerminator(bytes, fromIndex, terminatorLength);
    }
}
