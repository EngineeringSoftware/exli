package biz.paluch.logging.gelf.intern;

import biz.paluch.logging.gelf.DynamicMdcMessageField;
import biz.paluch.logging.gelf.GelfMessageAssembler;
import biz.paluch.logging.gelf.MdcMessageField;
import biz.paluch.logging.gelf.StaticMessageField;
import org.inlinetest.ITest;
import static org.inlinetest.ITest.itest;
import static org.inlinetest.ITest.group;

/**
 * @author Mark Paluch
 * @author Thomas Herzog
 */
public class ConfigurationSupport {

    public static final String MULTI_VALUE_DELIMITTER = ",";

    public static final char EQ = '=';

    private ConfigurationSupport() {
    }

    /**
     * Set the additional (static) fields.
     *
     * @param spec field=value,field1=value1, ...
     * @param gelfMessageAssembler the Gelf message assembler to apply the configuration
     */
    public static void setAdditionalFields(String spec, GelfMessageAssembler gelfMessageAssembler) {
        if (null != spec) {
            String[] properties = spec.split(MULTI_VALUE_DELIMITTER);
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "false").checkEq(properties, new String[] { "false" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='full_message', value='{\"host\":\"logstash-gelf\",\"facility\":\"includeLocation\",\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}']").checkEq(properties, new String[] { "StaticMessageField [name='full_message'", " value='{\"host\":\"logstash-gelf\"", "\"facility\":\"includeLocation\"", "\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration").checkEq(properties, new String[] { "profiling.requestDuration" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"redis-sentinel\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"version\":\"redis-sentinel\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "deliveryAttempts").checkEq(properties, new String[] { "deliveryAttempts" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1}\",\"full_message\":\"U2VydmVy\",\"timestamp\":\"-0.001\",\"level\":\"logstash-gelf.fqdn.hostname\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"short_message\":\"1}\"", "\"full_message\":\"U2VydmVy\"", "\"timestamp\":\"-0.001\"", "\"level\":\"logstash-gelf.fqdn.hostname\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, ",").checkEq(properties, new String[] {});
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "fieldName1=fieldValue1,fieldName2=fieldValue2").checkEq(properties, new String[] { "fieldName1=fieldValue1", "fieldName2=fieldValue2" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "NDC").checkEq(properties, new String[] { "NDC" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "host").checkEq(properties, new String[] { "host" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Marker").checkEq(properties, new String[] { "Marker" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "<empty>").checkEq(properties, new String[] { "<empty>" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "resolutionOrder").checkEq(properties, new String[] { "resolutionOrder" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "readTimeout").checkEq(properties, new String[] { "readTimeout" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "propertyField1=en,propertyField2=value of myproperty,propertyField3=otherproperty:fallback_IS_UNDEFINED,propertyField4=embeddedvalue of mypropertyproperty").checkEq(properties, new String[] { "propertyField1=en", "propertyField2=value of myproperty", "propertyField3=otherproperty:fallback_IS_UNDEFINED", "propertyField4=embeddedvalue of mypropertyproperty" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "YXBwZW5kZXI=").checkEq(properties, new String[] { "YXBwZW5kZXI=" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0.001").checkEq(properties, new String[] { "0.001" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "U2VydmVy").checkEq(properties, new String[] { "U2VydmVy" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "id").checkEq(properties, new String[] { "id" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9").checkEq(properties, new String[] { "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffTime").checkEq(properties, new String[] { "writeBackoffTime" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "bG9uZw==").checkEq(properties, new String[] { "bG9uZw==" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"version\",\"facility\":\"logstash-gelf\",\"full_messageresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"host\":\"version\"", "\"facility\":\"logstash-gelf\"", "\"full_messageresolutionOrder\":1.1}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogHost").checkEq(properties, new String[] { "graylogHost" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "-0.001").checkEq(properties, new String[] { "-0.001" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "level").checkEq(properties, new String[] { "level" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "007\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "007\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "originHost").checkEq(properties, new String[] { "originHost" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "version").checkEq(properties, new String[] { "version" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "yyyy-MM-dd HH:mm:ss,SSS").checkEq(properties, new String[] { "yyyy-MM-dd HH:mm:ss", "SSS" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "d3JpdGVCYWNrb2ZmVGhyZXNob2xk").checkEq(properties, new String[] { "d3JpdGVCYWNrb2ZmVGhyZXNob2xk" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "propertyField1=en,propertyField2=myproperty_IS_UNDEFINED,propertyField3=otherproperty:fallback_IS_UNDEFINED,propertyField4=embeddedmyproperty_IS_UNDEFINEDproperty").checkEq(properties, new String[] { "propertyField1=en", "propertyField2=myproperty_IS_UNDEFINED", "propertyField3=otherproperty:fallback_IS_UNDEFINED", "propertyField4=embeddedmyproperty_IS_UNDEFINEDproperty" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.001\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"timestamp\":\"0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "text/plain").checkEq(properties, new String[] { "text/plain" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "fieldName1=fieldValue1,fieldName2=fieldValue2,myOriginHost=af98d36bacae").checkEq(properties, new String[] { "fieldName1=fieldValue1", "fieldName2=fieldValue2", "myOriginHost=af98d36bacae" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "dGV4dC9wbGFpbg==").checkEq(properties, new String[] { "dGV4dC9wbGFpbg==" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf").checkEq(properties, new String[] { "logstash-gelf" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.buffer.size").checkEq(properties, new String[] { "logstash-gelf.buffer.size" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=").checkEq(properties, new String[] { "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"MdcMessageField [name='logstash-gelf.hostname', mdcName='']\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"level\":\"MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='profiling.requestStart.millis', namedLogField=SourceClassName]").checkEq(properties, new String[] { "PatternLogMessageField [name='profiling.requestStart.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "short_message").checkEq(properties, new String[] { "short_message" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"kafkaresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"kafkaresolutionOrder\":1.1}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFieldTypes").checkEq(properties, new String[] { "additionalFieldTypes" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "/StackTraceFilter.packages").checkEq(properties, new String[] { "/StackTraceFilter.packages" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestamp").checkEq(properties, new String[] { "timestamp" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "facility").checkEq(properties, new String[] { "facility" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='facility']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='facility']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=").checkEq(properties, new String[] { "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceMethodName").checkEq(properties, new String[] { "SourceMethodName" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='Converter', namedLogField=SourceSimpleClassName]").checkEq(properties, new String[] { "LogMessageField [name='Converter'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceClassName").checkEq(properties, new String[] { "SourceClassName" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "dynamicMdcFieldTypes").checkEq(properties, new String[] { "dynamicMdcFieldTypes" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"logstash-gelf.hostname\",\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"short_message\":\"logstash-gelf.hostname\"", "\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"logstash-gelf.message.poolingresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"logstash-gelf.message.poolingresolutionOrder\":1.1}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(properties, new String[] { "" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration.millis").checkEq(properties, new String[] { "profiling.requestDuration.millis" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='host', mdcName='host']").checkEq(properties, new String[] { "MdcMessageField [name='host'", " mdcName='host']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "long").checkEq(properties, new String[] { "long" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "a2VlcEFsaXZl").checkEq(properties, new String[] { "a2VlcEFsaXZl" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFields").checkEq(properties, new String[] { "additionalFields" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Time").checkEq(properties, new String[] { "Time" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MessageParam").checkEq(properties, new String[] { "MessageParam" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.resolutionOrder").checkEq(properties, new String[] { "logstash-gelf.resolutionOrder" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "appender").checkEq(properties, new String[] { "appender" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "dynamicMdcFields.").checkEq(properties, new String[] { "dynamicMdcFields." });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis").checkEq(properties, new String[] { "redis" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "discover").checkEq(properties, new String[] { "discover" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "full_message").checkEq(properties, new String[] { "full_message" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='', mdcName='false']").checkEq(properties, new String[] { "MdcMessageField [name=''", " mdcName='false']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestEnd").checkEq(properties, new String[] { "profiling.requestEnd" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='keepAlive']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='keepAlive']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='logstash-gelf.hostname', mdcName='']").checkEq(properties, new String[] { "MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalField.").checkEq(properties, new String[] { "additionalField." });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "String").checkEq(properties, new String[] { "String" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "propertyField1=en,propertyField2=value of myproperty,propertyField3=,propertyField4=embeddedvalue of mypropertyproperty").checkEq(properties, new String[] { "propertyField1=en", "propertyField2=value of myproperty", "propertyField3=", "propertyField4=embeddedvalue of mypropertyproperty" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "keepAlive").checkEq(properties, new String[] { "keepAlive" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.StackTraceFilter.verbose").checkEq(properties, new String[] { "logstash-gelf.StackTraceFilter.verbose" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "propertyField1=en,propertyField2=,propertyField3=,propertyField4=embeddedproperty").checkEq(properties, new String[] { "propertyField1=en", "propertyField2=", "propertyField3=", "propertyField4=embeddedproperty" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filter").checkEq(properties, new String[] { "filter" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='maxWriteBackoffTime', namedLogField=SourceClassName]").checkEq(properties, new String[] { "LogMessageField [name='maxWriteBackoffTime'", " namedLogField=SourceClassName]" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "maxWriteBackoffTime").checkEq(properties, new String[] { "maxWriteBackoffTime" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "propertyField1=${user.language},propertyField2=${myproperty},propertyField3=${otherproperty:fallback},propertyField4=embedded${myproperty}property").checkEq(properties, new String[] { "propertyField1=${user.language}", "propertyField2=${myproperty}", "propertyField3=${otherproperty:fallback}", "propertyField4=embedded${myproperty}property" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1}']").checkEq(properties, new String[] { "1}']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "size").checkEq(properties, new String[] { "size" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filterStackTrace").checkEq(properties, new String[] { "filterStackTrace" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "extractStackTrace").checkEq(properties, new String[] { "extractStackTrace" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "ZHluYW1pY01kY0ZpZWxkVHlwZXM=").checkEq(properties, new String[] { "ZHluYW1pY01kY0ZpZWxkVHlwZXM=" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='redis', mdcName='']").checkEq(properties, new String[] { "MdcMessageField [name='redis'", " mdcName='']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.hostname").checkEq(properties, new String[] { "logstash-gelf.hostname" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogPort").checkEq(properties, new String[] { "graylogPort" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "localhost,network").checkEq(properties, new String[] { "localhost", "network" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0").checkEq(properties, new String[] { "0" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=").checkEq(properties, new String[] { "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='deliveryAttempts', mdcName='profiling.requestDuration']").checkEq(properties, new String[] { "MdcMessageField [name='deliveryAttempts'", " mdcName='profiling.requestDuration']" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdsb2dzdGFzaC1nZWxmLlN0YWNrVHJhY2VGaWx0ZXIudmVyYm9zZScsIHZhbHVlPSdkb3VibGUnXQ==").checkEq(properties, new String[] { "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdsb2dzdGFzaC1nZWxmLlN0YWNrVHJhY2VGaWx0ZXIudmVyYm9zZScsIHZhbHVlPSdkb3VibGUnXQ==" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"discover\"}").checkEq(properties, new String[] { "{\"facility\":\"discover\"}" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "\n").checkEq(properties, new String[] { "\n" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Double").checkEq(properties, new String[] { "Double" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "biz.paluch.logging.gelf.logback.GelfLogbackAppender[null]").checkEq(properties, new String[] { "biz.paluch.logging.gelf.logback.GelfLogbackAppender[null]" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "connectionTimeout").checkEq(properties, new String[] { "connectionTimeout" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.skipHostnameResolution").checkEq(properties, new String[] { "logstash-gelf.skipHostnameResolution" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "hi!").checkEq(properties, new String[] { "hi!" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_graylogPort\":\"double\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_graylogPort\":\"double\"", "\"_resolutionOrder\":1.1}" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "crossCheckHostName=af98d36bacae").checkEq(properties, new String[] { "crossCheckHostName=af98d36bacae" });
            itest("dev", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(properties, new String[] { "" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLocation").checkEq(properties, new String[] { "includeLocation" });
            itest("randoop", 28).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPScnLCBtZGNOYW1lPSdmYWxzZSdd").checkEq(properties, new String[] { "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPScnLCBtZGNOYW1lPSdmYWxzZSdd" });
            for (String field : properties) {
                final int index = field.indexOf(EQ);
                itest("randoop", 31).given(field, "{\"version\":\"redis-sentinel\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "{\"level\":\"additionalFieldTypes\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " mdcName='']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 31).given(field, "\"includeFullMdc\":\"graylogPort\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "Marker").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "Time").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "timestamp").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "propertyField3=").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 66);
                itest("randoop", 31).given(field, "MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, "version").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "logstash-gelf.buffer.size").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "text/plain").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "MdcMessageField [name=''").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, " mdcName='false']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 31).given(field, "maxWriteBackoffTime").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "MdcMessageField [name='redis'").given(EQ, '=').checkEq(index, 21);
                itest("dev", 31).given(field, "propertyField2=").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPScnLCBtZGNOYW1lPSdmYWxzZSdd").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "{\"host\":\"version\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\"facility\":\"logstash-gelf\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "readTimeout").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "logstash-gelf").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "{\"timestamp\":\"0.001\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "{\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\"full_messageresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " mdcName='']\"").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 31).given(field, "additionalFieldTypes").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "SSS").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "long").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "profiling.requestDuration.millis").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdsb2dzdGFzaC1nZWxmLlN0YWNrVHJhY2VGaWx0ZXIudmVyYm9zZScsIHZhbHVlPSdkb3VibGUnXQ==").given(EQ, '=').checkEq(index, 110);
                itest("randoop", 31).given(field, " mdcName='host']\"").given(EQ, '=').checkEq(index, 8);
                itest("dev", 31).given(field, "propertyField2=value of myproperty").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, " mdcName='profiling.requestDuration']").given(EQ, '=').checkEq(index, 8);
                itest("dev", 31).given(field, "propertyField4=embedded${myproperty}property").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "{\"level\":\"MdcMessageField [name='logstash-gelf.hostname'").given(EQ, '=').checkEq(index, 31);
                itest("randoop", 31).given(field, "\"_graylogPort\":\"double\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "network").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "deliveryAttempts").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " mdcName='host']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 31).given(field, "discover").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "dynamicMdcFieldTypes").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "profiling.requestDuration").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "hi!").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "{\"facility\":\"discover\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " mdcName='{\\\"level\\\":\\\"additionalFieldTypes\\\"").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 31).given(field, "id").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "additionalField.").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "propertyField2=${myproperty}").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "DynamicMdcMessageField [regex='facility']").given(EQ, '=').checkEq(index, 29);
                itest("randoop", 31).given(field, "host").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "U2VydmVy").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "short_message").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "level").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "a2VlcEFsaXZl").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "logstash-gelf.StackTraceFilter.verbose").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "propertyField4=embeddedproperty").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "originHost").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "fieldName2=fieldValue2").given(EQ, '=').checkEq(index, 10);
                itest("dev", 31).given(field, "propertyField4=embeddedmyproperty_IS_UNDEFINEDproperty").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "eyJmYWNpbGl0eSI6ImxvZ3N0YXNoLWdlbGYiLCJ7XCJzaG9ydF9tZXNzYWdlXCI6XCIxLjFcIixcImZ1bGxfbWVzc2FnZVwiOlwiSG9zdG5hbWVDb252ZXJ0ZXJcIixcInRpbWVzdGFtcFwiOlwiMC4wMzVcIixcImxldmVsXCI6XCJrZWVwQWxpdmVcIixcImZhY2lsaXR5XCI6XCJsb2dzdGFzaC1nZWxmXCJ9cmVzb2x1dGlvbk9yZGVyIjoxLjF9").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "SourceMethodName").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "connectionTimeout").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\n").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "propertyField1=${user.language}").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "Double").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "YXBwZW5kZXI=").given(EQ, '=').checkEq(index, 11);
                itest("randoop", 31).given(field, "graylogHost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "logstash-gelf.skipHostnameResolution").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " namedLogField=SourceSimpleClassName]").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "localhost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "biz.paluch.logging.gelf.logback.GelfLogbackAppender[null]").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "extractStackTrace").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "resolutionOrder").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "0.001").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=").given(EQ, '=').checkEq(index, 167);
                itest("randoop", 31).given(field, "\\\"kafkaresolutionOrder\\\":1.1}']a2VlcEFsaXZl\":\"MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 67);
                itest("dev", 31).given(field, "propertyField3=otherproperty:fallback_IS_UNDEFINED").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "filter").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\"_resolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "MessageParam").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "facility").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, " namedLogField=SourceClassName]").given(EQ, '=').checkEq(index, 14);
                itest("dev", 31).given(field, "propertyField1=en").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=").given(EQ, '=').checkEq(index, 51);
                itest("randoop", 31).given(field, "\\\"kafkaresolutionOrder\\\":1.1}']resolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "graylogPort").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\"logstash-gelf.message.poolingresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "LogMessageField [name='maxWriteBackoffTime'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, "logstash-gelf.resolutionOrder").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "String").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "fieldName1=fieldValue1").given(EQ, '=').checkEq(index, 10);
                itest("randoop", 31).given(field, "writeBackoffTime").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "myOriginHost=af98d36bacae").given(EQ, '=').checkEq(index, 12);
                itest("dev", 31).given(field, "propertyField3=${otherproperty:fallback}").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "\"MdcMessageField [name='timestamp'").given(EQ, '=').checkEq(index, 22);
                itest("randoop", 31).given(field, "filterStackTrace").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "full_message").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "<empty>").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "PatternLogMessageField [name='profiling.requestStart.millis'").given(EQ, '=').checkEq(index, 28);
                itest("dev", 31).given(field, "propertyField4=embeddedvalue of mypropertyproperty").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 31).given(field, "\\\"facility\\\":\\\"logstash-gelf\\\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "LogMessageField [name='Converter'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, "-0.001").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "logstash-gelf.hostname").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "crossCheckHostName=af98d36bacae").given(EQ, '=').checkEq(index, 18);
                itest("randoop", 31).given(field, "false").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "MdcMessageField [name='logstash-gelf.hostname'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, "appender").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 31).given(field, "bG9uZw==").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 31).given(field, "MdcMessageField [name='deliveryAttempts'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 31).given(field, "dynamicMdcFields.").given(EQ, '=').checkEq(index, -1);
                itest("dev", 31).given(field, "propertyField2=myproperty_IS_UNDEFINED").given(EQ, '=').checkEq(index, 14);
                if (-1 == index) {
                    continue;
                }
                gelfMessageAssembler.addField(new StaticMessageField(field.substring(0, index), field.substring(index + 1)));
            }
        }
    }

    /**
     * Set the MDC fields.
     *
     * @param spec field, field2, field3
     * @param gelfMessageAssembler the Gelf message assembler to apply the configuration
     */
    public static void setMdcFields(String spec, GelfMessageAssembler gelfMessageAssembler) {
        if (null != spec) {
            String[] fields = spec.split(MULTI_VALUE_DELIMITTER);
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='logstash-gelf.hostname', mdcName='']").checkEq(fields, new String[] { "MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"version\",\"facility\":\"logstash-gelf\",\"full_messageresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"host\":\"version\"", "\"facility\":\"logstash-gelf\"", "\"full_messageresolutionOrder\":1.1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "keepAlive").checkEq(fields, new String[] { "keepAlive" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='', namedLogField=SourceMethodName]").checkEq(fields, new String[] { "PatternLogMessageField [name=''", " namedLogField=SourceMethodName]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"logstash-gelf.LogMessageField.verbose\",\"facility\":\"logstash-gelf\",\",appender\":\"Long\"}").checkEq(fields, new String[] { "{\"version\":\"logstash-gelf.LogMessageField.verbose\"", "\"facility\":\"logstash-gelf\"", "\"", "appender\":\"Long\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFieldType.").checkEq(fields, new String[] { "additionalFieldType." });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.001\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"timestamp\":\"0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "pooling").checkEq(fields, new String[] { "pooling" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "network,localhost").checkEq(fields, new String[] { "network", "localhost" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "a2VlcEFsaXZl").checkEq(fields, new String[] { "a2VlcEFsaXZl" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.StackTraceFilter.verbose").checkEq(fields, new String[] { "logstash-gelf.StackTraceFilter.verbose" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"network,localhost\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"host\":\"network", "localhost\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='profiling.requestDuration.millis', namedLogField=SourceClassName]").checkEq(fields, new String[] { "LogMessageField [name='profiling.requestDuration.millis'", " namedLogField=SourceClassName]" });
            itest("dev", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcField1,mdcField2").checkEq(fields, new String[] { "mdcField1", "mdcField2" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJzaG9ydF9tZXNzYWdlIjoieXl5eS1NTS1kZCBISDptbTpzcyxTU1MiLCJsZXZlbCI6ImFkZGl0aW9uYWxGaWVsZFR5cGVzIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIiwiX3Jlc29sdXRpb25PcmRlciI6MS4xfQ==").checkEq(fields, new String[] { "eyJzaG9ydF9tZXNzYWdlIjoieXl5eS1NTS1kZCBISDptbTpzcyxTU1MiLCJsZXZlbCI6ImFkZGl0aW9uYWxGaWVsZFR5cGVzIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIiwiX3Jlc29sdXRpb25PcmRlciI6MS4xfQ==" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_graylogPort\":\"double\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_graylogPort\":\"double\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(fields, new String[] { "" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogPort").checkEq(fields, new String[] { "graylogPort" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "requestEnd").checkEq(fields, new String[] { "requestEnd" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffThreshold").checkEq(fields, new String[] { "writeBackoffThreshold" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "originHost").checkEq(fields, new String[] { "originHost" });
            itest("dev", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(fields, new String[] { "" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis").checkEq(fields, new String[] { "redis" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.LogMessageField.verbose").checkEq(fields, new String[] { "logstash-gelf.LogMessageField.verbose" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "<empty>").checkEq(fields, new String[] { "<empty>" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "text/plain").checkEq(fields, new String[] { "text/plain" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "level").checkEq(fields, new String[] { "level" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJob3N0IjoibG9nc3Rhc2gtZ2VsZiIsImZhY2lsaXR5IjoiaW5jbHVkZUxvY2F0aW9uIiwibG9nc3Rhc2gtZ2VsZi5Mb2dNZXNzYWdlRmllbGQudmVyYm9zZXJlc29sdXRpb25PcmRlciI6MS4xfQ==").checkEq(fields, new String[] { "eyJob3N0IjoibG9nc3Rhc2gtZ2VsZiIsImZhY2lsaXR5IjoiaW5jbHVkZUxvY2F0aW9uIiwibG9nc3Rhc2gtZ2VsZi5Mb2dNZXNzYWdlRmllbGQudmVyYm9zZXJlc29sdXRpb25PcmRlciI6MS4xfQ==" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "resolutionOrder").checkEq(fields, new String[] { "resolutionOrder" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "yyyy-MM-dd HH:mm:ss,SSS").checkEq(fields, new String[] { "yyyy-MM-dd HH:mm:ss", "SSS" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='maxWriteBackoffTime', namedLogField=SourceClassName]").checkEq(fields, new String[] { "LogMessageField [name='maxWriteBackoffTime'", " namedLogField=SourceClassName]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "HostnameConverter").checkEq(fields, new String[] { "HostnameConverter" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceMethodName").checkEq(fields, new String[] { "SourceMethodName" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MessageParam").checkEq(fields, new String[] { "MessageParam" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "VUdGMGRHVnlia3h2WjAxbGMzTmhaMlZHYVdWc1pDQmJibUZ0WlQwbmFXNWpiSFZrWlVaMWJHeE5aR01uTENCdVlXMWxaRXh2WjBacFpXeGtQVk52ZFhKalpVMWxkR2h2WkU1aGJXVmQ=").checkEq(fields, new String[] { "VUdGMGRHVnlia3h2WjAxbGMzTmhaMlZHYVdWc1pDQmJibUZ0WlQwbmFXNWpiSFZrWlVaMWJHeE5aR01uTENCdVlXMWxaRXh2WjBacFpXeGtQVk52ZFhKalpVMWxkR2h2WkU1aGJXVmQ=" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.message.pooling").checkEq(fields, new String[] { "logstash-gelf.message.pooling" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcProfiling").checkEq(fields, new String[] { "mdcProfiling" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "String").checkEq(fields, new String[] { "String" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "maxWriteBackoffTime").checkEq(fields, new String[] { "maxWriteBackoffTime" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='profiling.requestStart.millis', namedLogField=SourceClassName]").checkEq(fields, new String[] { "PatternLogMessageField [name='profiling.requestStart.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"Long\",\"full_message\":\"DynamicMdcMessageField [regex='facility']\",\"timestamp\":\"0.1\",\"level\":\"0\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"short_message\":\"Long\"", "\"full_message\":\"DynamicMdcMessageField [regex='facility']\"", "\"timestamp\":\"0.1\"", "\"level\":\"0\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "readTimeout").checkEq(fields, new String[] { "readTimeout" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestamp").checkEq(fields, new String[] { "timestamp" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"readTimeout\",\"facility\":\"logstash-gelf\",\"{\\\"facility\\\":\\\"logstash-gelf\\\",\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}").checkEq(fields, new String[] { "{\"short_message\":\"readTimeout\"", "\"facility\":\"logstash-gelf\"", "\"{\\\"facility\\\":\\\"logstash-gelf\\\"", "\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestEnd").checkEq(fields, new String[] { "profiling.requestEnd" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffTime").checkEq(fields, new String[] { "writeBackoffTime" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.skipHostnameResolution").checkEq(fields, new String[] { "logstash-gelf.skipHostnameResolution" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='includeFullMdc', namedLogField=SourceMethodName]").checkEq(fields, new String[] { "PatternLogMessageField [name='includeFullMdc'", " namedLogField=SourceMethodName]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"text/plainresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"text/plainresolutionOrder\":1.1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "port").checkEq(fields, new String[] { "port" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration.millis").checkEq(fields, new String[] { "profiling.requestDuration.millis" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "biz.paluch.logging.gelf.logback.GelfLogbackAppender[null]").checkEq(fields, new String[] { "biz.paluch.logging.gelf.logback.GelfLogbackAppender[null]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name=',', value='logstash-gelf.buffer.size']").checkEq(fields, new String[] { "StaticMessageField [name='", "'", " value='logstash-gelf.buffer.size']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Server").checkEq(fields, new String[] { "Server" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "verbose").checkEq(fields, new String[] { "verbose" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='kafka']").checkEq(fields, new String[] { "DynamicMdcMessageField [regex='kafka']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1}").checkEq(fields, new String[] { "1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogHost").checkEq(fields, new String[] { "graylogHost" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "localhost,network").checkEq(fields, new String[] { "localhost", "network" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "af98d36bacae").checkEq(fields, new String[] { "af98d36bacae" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"-0.001\",\"_graylogPort\":\"double\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"-0.001\"", "\"_graylogPort\":\"double\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeFullMdc").checkEq(fields, new String[] { "includeFullMdc" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "YXBwZW5kZXI=").checkEq(fields, new String[] { "YXBwZW5kZXI=" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='af98d36bacae', mdcName='logstash-gelf.buffer.size']").checkEq(fields, new String[] { "MdcMessageField [name='af98d36bacae'", " mdcName='logstash-gelf.buffer.size']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "ZnVsbF9tZXNzYWdl").checkEq(fields, new String[] { "ZnVsbF9tZXNzYWdl" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "ZGVsaXZlcnlBdHRlbXB0cw==").checkEq(fields, new String[] { "ZGVsaXZlcnlBdHRlbXB0cw==" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1.1\",\"full_message\":\"HostnameConverter\",\"timestamp\":\"0.035\",\"level\":\"keepAlive\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"short_message\":\"1.1\"", "\"full_message\":\"HostnameConverter\"", "\"timestamp\":\"0.035\"", "\"level\":\"keepAlive\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=").checkEq(fields, new String[] { "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose', namedLogField=Server]").checkEq(fields, new String[] { "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose'", " namedLogField=Server]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=").checkEq(fields, new String[] { "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filterStackTrace").checkEq(fields, new String[] { "filterStackTrace" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1}\",\"full_message\":\"U2VydmVy\",\"timestamp\":\"-0.001\",\"level\":\"logstash-gelf.fqdn.hostname\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"short_message\":\"1}\"", "\"full_message\":\"U2VydmVy\"", "\"timestamp\":\"-0.001\"", "\"level\":\"logstash-gelf.fqdn.hostname\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "c2hvcnRfbWVzc2FnZQ==").checkEq(fields, new String[] { "c2hvcnRfbWVzc2FnZQ==" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='Server']").checkEq(fields, new String[] { "DynamicMdcMessageField [regex='Server']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, ",").checkEq(fields, new String[] {});
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Double").checkEq(fields, new String[] { "Double" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Long").checkEq(fields, new String[] { "Long" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "short_message").checkEq(fields, new String[] { "short_message" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis-sentinel").checkEq(fields, new String[] { "redis-sentinel" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"redis-sentinel\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"version\":\"redis-sentinel\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose', value='double']").checkEq(fields, new String[] { "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose'", " value='double']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"logstash-gelf.StackTraceFilter.verboseresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"logstash-gelf.StackTraceFilter.verboseresolutionOrder\":1.1}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLocation").checkEq(fields, new String[] { "includeLocation" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "appender").checkEq(fields, new String[] { "appender" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0.01").checkEq(fields, new String[] { "0.01" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "double").checkEq(fields, new String[] { "double" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "long").checkEq(fields, new String[] { "long" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='logstash-gelf.hostname', namedLogField=NDC]").checkEq(fields, new String[] { "LogMessageField [name='logstash-gelf.hostname'", " namedLogField=NDC]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdhMlZsY0VGc2FYWmwnLCB2YWx1ZT0nWm5Wc2JGOXRaWE56WVdkbCdd").checkEq(fields, new String[] { "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdhMlZsY0VGc2FYWmwnLCB2YWx1ZT0nWm5Wc2JGOXRaWE56WVdkbCdd" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf").checkEq(fields, new String[] { "logstash-gelf" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestampPattern").checkEq(fields, new String[] { "timestampPattern" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=").checkEq(fields, new String[] { "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Converter").checkEq(fields, new String[] { "Converter" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"filterStackTrace\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"level\":\"filterStackTrace\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "hi!").checkEq(fields, new String[] { "hi!" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceClassName").checkEq(fields, new String[] { "SourceClassName" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='Converter', namedLogField=SourceSimpleClassName]").checkEq(fields, new String[] { "LogMessageField [name='Converter'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='<empty>', mdcName='timestampPattern']").checkEq(fields, new String[] { "MdcMessageField [name='<empty>'", " mdcName='timestampPattern']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='', value='hi!']").checkEq(fields, new String[] { "StaticMessageField [name=''", " value='hi!']" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0naW5jbHVkZUZ1bGxNZGMnLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZU1ldGhvZE5hbWVd").checkEq(fields, new String[] { "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0naW5jbHVkZUZ1bGxNZGMnLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZU1ldGhvZE5hbWVd" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "discover").checkEq(fields, new String[] { "discover" });
            itest("randoop", 48).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='mdcField.']").checkEq(fields, new String[] { "DynamicMdcMessageField [regex='mdcField.']" });
            for (String field : fields) {
                gelfMessageAssembler.addField(new MdcMessageField(field.trim(), field.trim()));
            }
        }
    }

    /**
     * Set the dynamic MDC fields.
     *
     * @param spec field, .*FieldSuffix, fieldPrefix.*
     * @param gelfMessageAssembler the {@link GelfMessageAssembler}.
     */
    public static void setDynamicMdcFields(String spec, GelfMessageAssembler gelfMessageAssembler) {
        if (null != spec) {
            String[] fields = spec.split(MULTI_VALUE_DELIMITTER);
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "true").checkEq(fields, new String[] { "true" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"writeBackoffTime\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"version\":\"writeBackoffTime\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='id', value='kafka']").checkEq(fields, new String[] { "StaticMessageField [name='id'", " value='kafka']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='Converter', namedLogField=SourceSimpleClassName]").checkEq(fields, new String[] { "LogMessageField [name='Converter'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"logstash-gelf\",\"facility\":\"includeLocation\",\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"host\":\"logstash-gelf\"", "\"facility\":\"includeLocation\"", "\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='MessageParam', value='{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}']").checkEq(fields, new String[] { "StaticMessageField [name='MessageParam'", " value='{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='hi!', mdcName='c2hvcnRfbWVzc2FnZQ==']").checkEq(fields, new String[] { "MdcMessageField [name='hi!'", " mdcName='c2hvcnRfbWVzc2FnZQ==']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0.001").checkEq(fields, new String[] { "0.001" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalField.").checkEq(fields, new String[] { "additionalField." });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.007\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"timestamp\":\"0.007\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis").checkEq(fields, new String[] { "redis" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"{\\\"level\\\":\\\"additionalFieldTypes\\\",\\\"facility\\\":\\\"logstash-gelf\\\",\\\"kafkaresolutionOrder\\\":1.1}\",\"level\":\"NDC\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"host\":\"{\\\"level\\\":\\\"additionalFieldTypes\\\"", "\\\"facility\\\":\\\"logstash-gelf\\\"", "\\\"kafkaresolutionOrder\\\":1.1}\"", "\"level\":\"NDC\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=").checkEq(fields, new String[] { "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFieldTypes").checkEq(fields, new String[] { "additionalFieldTypes" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.001\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"timestamp\":\"0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "deliveryAttempts").checkEq(fields, new String[] { "deliveryAttempts" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffTime").checkEq(fields, new String[] { "writeBackoffTime" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"redis-sentinel\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"version\":\"redis-sentinel\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "aW5jbHVkZUxvZ01lc3NhZ2VQYXJhbWV0ZXJz").checkEq(fields, new String[] { "aW5jbHVkZUxvZ01lc3NhZ2VQYXJhbWV0ZXJz" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration.millis").checkEq(fields, new String[] { "profiling.requestDuration.millis" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestamp").checkEq(fields, new String[] { "timestamp" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='', namedLogField=SourceMethodName]").checkEq(fields, new String[] { "PatternLogMessageField [name=''", " namedLogField=SourceMethodName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"logstash-gelf.LogMessageField.verbose\",\"facility\":\"logstash-gelf\",\",appender\":\"Long\"}").checkEq(fields, new String[] { "{\"version\":\"logstash-gelf.LogMessageField.verbose\"", "\"facility\":\"logstash-gelf\"", "\"", "appender\":\"Long\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceSimpleClassName").checkEq(fields, new String[] { "SourceSimpleClassName" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose', namedLogField=Server]").checkEq(fields, new String[] { "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose'", " namedLogField=Server]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPScnLCBtZGNOYW1lPSdmYWxzZSdd").checkEq(fields, new String[] { "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPScnLCBtZGNOYW1lPSdmYWxzZSdd" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"text/plainresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"text/plainresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filterStackTrace").checkEq(fields, new String[] { "filterStackTrace" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1.0").checkEq(fields, new String[] { "1.0" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "originHost").checkEq(fields, new String[] { "originHost" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "false").checkEq(fields, new String[] { "false" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.LogMessageField.verbose").checkEq(fields, new String[] { "logstash-gelf.LogMessageField.verbose" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='logstash-gelf.hostname', namedLogField=NDC]").checkEq(fields, new String[] { "LogMessageField [name='logstash-gelf.hostname'", " namedLogField=NDC]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='', value='hi!']").checkEq(fields, new String[] { "StaticMessageField [name=''", " value='hi!']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='NDC', value='eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9']").checkEq(fields, new String[] { "StaticMessageField [name='NDC'", " value='eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "<empty>").checkEq(fields, new String[] { "<empty>" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='redis', mdcName='']").checkEq(fields, new String[] { "MdcMessageField [name='redis'", " mdcName='']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1.1").checkEq(fields, new String[] { "1.1" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.StackTraceFilter.verbose").checkEq(fields, new String[] { "logstash-gelf.StackTraceFilter.verbose" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose', value='double']").checkEq(fields, new String[] { "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose'", " value='double']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "appender").checkEq(fields, new String[] { "appender" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "facility").checkEq(fields, new String[] { "facility" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"kafkaresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"kafkaresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_graylogPort\":\"double\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_graylogPort\":\"double\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"discover\"}").checkEq(fields, new String[] { "{\"facility\":\"discover\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis-sentinel").checkEq(fields, new String[] { "redis-sentinel" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='includeFullMdc', namedLogField=SourceMethodName]").checkEq(fields, new String[] { "PatternLogMessageField [name='includeFullMdc'", " namedLogField=SourceMethodName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "cmVzb2x1dGlvbk9yZGVy").checkEq(fields, new String[] { "cmVzb2x1dGlvbk9yZGVy" });
            itest("dev", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "myMdc.*,[a-z]+Field").checkEq(fields, new String[] { "myMdc.*", "[a-z]+Field" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "host").checkEq(fields, new String[] { "host" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceMethodName").checkEq(fields, new String[] { "SourceMethodName" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"version\",\"facility\":\"logstash-gelf\",\"full_messageresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"host\":\"version\"", "\"facility\":\"logstash-gelf\"", "\"full_messageresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"MdcMessageField [name='host', mdcName='host']resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"MdcMessageField [name='host'", " mdcName='host']resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"Long\",\"full_message\":\"additionalFieldTypes\",\"timestamp\":\"-0.001\",\"level\":\"profiling.requestDuration\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"short_message\":\"Long\"", "\"full_message\":\"additionalFieldTypes\"", "\"timestamp\":\"-0.001\"", "\"level\":\"profiling.requestDuration\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"full_message\":\"logstash-gelf.buffer.size\",\"timestamp\":\"-0.001\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"full_message\":\"logstash-gelf.buffer.size\"", "\"timestamp\":\"-0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestampPattern").checkEq(fields, new String[] { "timestampPattern" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='a2VlcEFsaXZl', value='ZnVsbF9tZXNzYWdl']").checkEq(fields, new String[] { "StaticMessageField [name='a2VlcEFsaXZl'", " value='ZnVsbF9tZXNzYWdl']" });
            itest("dev", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, ".*").checkEq(fields, new String[] { ".*" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "NDC").checkEq(fields, new String[] { "NDC" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "readTimeout").checkEq(fields, new String[] { "readTimeout" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"/StackTraceFilter.packages\",\"keepAliveresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"/StackTraceFilter.packages\"", "\"keepAliveresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='redis-sentinel', mdcName='c2hvcnRfbWVzc2FnZQ==']").checkEq(fields, new String[] { "MdcMessageField [name='redis-sentinel'", " mdcName='c2hvcnRfbWVzc2FnZQ==']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='profiling.requestStart.millis', namedLogField=SourceClassName]").checkEq(fields, new String[] { "PatternLogMessageField [name='profiling.requestStart.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1.1\",\"full_message\":\"HostnameConverter\",\"timestamp\":\"0.035\",\"level\":\"keepAlive\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"short_message\":\"1.1\"", "\"full_message\":\"HostnameConverter\"", "\"timestamp\":\"0.035\"", "\"level\":\"keepAlive\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"filterStackTrace\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"level\":\"filterStackTrace\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "hi!").checkEq(fields, new String[] { "hi!" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='maxWriteBackoffTime', namedLogField=SourceClassName]").checkEq(fields, new String[] { "LogMessageField [name='maxWriteBackoffTime'", " namedLogField=SourceClassName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='/StackTraceFilter.packages', mdcName='logstash-gelf.skipHostnameResolution']").checkEq(fields, new String[] { "MdcMessageField [name='/StackTraceFilter.packages'", " mdcName='logstash-gelf.skipHostnameResolution']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcProfiling").checkEq(fields, new String[] { "mdcProfiling" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"graylogPort\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"graylogPort\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='profiling.requestDuration.millis', namedLogField=SourceClassName]").checkEq(fields, new String[] { "LogMessageField [name='profiling.requestDuration.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcField.").checkEq(fields, new String[] { "mdcField." });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='logstash-gelf.hostname', mdcName='']").checkEq(fields, new String[] { "MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "discover").checkEq(fields, new String[] { "discover" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "extractStackTrace").checkEq(fields, new String[] { "extractStackTrace" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "YXBwZW5kZXI=").checkEq(fields, new String[] { "YXBwZW5kZXI=" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='<empty>', mdcName='timestampPattern']").checkEq(fields, new String[] { "MdcMessageField [name='<empty>'", " mdcName='timestampPattern']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"MdcMessageField [name='logstash-gelf.hostname', mdcName='']\",\"facility\":\"logstash-gelf\"}").checkEq(fields, new String[] { "{\"level\":\"MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogHost").checkEq(fields, new String[] { "graylogHost" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Marker").checkEq(fields, new String[] { "Marker" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"yyyy-MM-dd HH:mm:ss,SSS\",\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"short_message\":\"yyyy-MM-dd HH:mm:ss", "SSS\"", "\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filter").checkEq(fields, new String[] { "filter" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(fields, new String[] { "" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "kafka").checkEq(fields, new String[] { "kafka" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='', mdcName='false']").checkEq(fields, new String[] { "MdcMessageField [name=''", " mdcName='false']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "connectionTimeout").checkEq(fields, new String[] { "connectionTimeout" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.resolutionOrder").checkEq(fields, new String[] { "logstash-gelf.resolutionOrder" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "level").checkEq(fields, new String[] { "level" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "a2VlcEFsaXZl").checkEq(fields, new String[] { "a2VlcEFsaXZl" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='Server']").checkEq(fields, new String[] { "DynamicMdcMessageField [regex='Server']" });
            itest("dev", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "myMdc.*").checkEq(fields, new String[] { "myMdc.*" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffThreshold").checkEq(fields, new String[] { "writeBackoffThreshold" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='LoggerName']").checkEq(fields, new String[] { "DynamicMdcMessageField [regex='LoggerName']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.052\",\"facility\":\"logstash-gelf\",\"LongresolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"timestamp\":\"0.052\"", "\"facility\":\"logstash-gelf\"", "\"LongresolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}").checkEq(fields, new String[] { "{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLogMessageParameters").checkEq(fields, new String[] { "includeLogMessageParameters" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='host', mdcName='host']").checkEq(fields, new String[] { "MdcMessageField [name='host'", " mdcName='host']" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"logstash-gelf\",\"facility\":\"includeLocation\",\"_resolutionOrder\":1.1}").checkEq(fields, new String[] { "{\"host\":\"logstash-gelf\"", "\"facility\":\"includeLocation\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='extractStackTrace', namedLogField=SourceMethodName]").checkEq(fields, new String[] { "PatternLogMessageField [name='extractStackTrace'", " namedLogField=SourceMethodName]" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"readTimeout\",\"facility\":\"logstash-gelf\",\"{\\\"facility\\\":\\\"logstash-gelf\\\",\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}").checkEq(fields, new String[] { "{\"short_message\":\"readTimeout\"", "\"facility\":\"logstash-gelf\"", "\"{\\\"facility\\\":\\\"logstash-gelf\\\"", "\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"logstash-gelf.LogMessageField.verbose\",\"facility\":\"logstash-gelf\",\"_appender\":\"Long\"}").checkEq(fields, new String[] { "{\"version\":\"logstash-gelf.LogMessageField.verbose\"", "\"facility\":\"logstash-gelf\"", "\"_appender\":\"Long\"}" });
            itest("randoop", 64).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogPort").checkEq(fields, new String[] { "graylogPort" });
            for (String field : fields) {
                gelfMessageAssembler.addField(new DynamicMdcMessageField(field.trim()));
            }
        }
    }

    /**
     * Set the additional field types.
     *
     * @param spec field=String,field1=Double, ... See {@link GelfMessage} for supported types.
     * @param gelfMessageAssembler the Gelf message assembler to apply the configuration
     */
    public static void setAdditionalFieldTypes(String spec, GelfMessageAssembler gelfMessageAssembler) {
        if (null != spec) {
            String[] properties = spec.split(MULTI_VALUE_DELIMITTER);
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0nbG9nc3Rhc2gtZ2VsZi5Mb2dNZXNzYWdlRmllbGQudmVyYm9zZScsIG5hbWVkTG9nRmllbGQ9U2VydmVyXQ==").checkEq(properties, new String[] { "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0nbG9nc3Rhc2gtZ2VsZi5Mb2dNZXNzYWdlRmllbGQudmVyYm9zZScsIG5hbWVkTG9nRmllbGQ9U2VydmVyXQ==" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "keepAlive").checkEq(properties, new String[] { "keepAlive" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLogMessageParameters").checkEq(properties, new String[] { "includeLogMessageParameters" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "id").checkEq(properties, new String[] { "id" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdhMlZsY0VGc2FYWmwnLCB2YWx1ZT0nWm5Wc2JGOXRaWE56WVdkbCdd").checkEq(properties, new String[] { "U3RhdGljTWVzc2FnZUZpZWxkIFtuYW1lPSdhMlZsY0VGc2FYWmwnLCB2YWx1ZT0nWm5Wc2JGOXRaWE56WVdkbCdd" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "YXBwZW5kZXI=").checkEq(properties, new String[] { "YXBwZW5kZXI=" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.hostname").checkEq(properties, new String[] { "logstash-gelf.hostname" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"discover\"}").checkEq(properties, new String[] { "{\"facility\":\"discover\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"MdcMessageField [name='host', mdcName='host']resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"MdcMessageField [name='host'", " mdcName='host']resolutionOrder\":1.1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "false").checkEq(properties, new String[] { "false" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='host', mdcName='host']").checkEq(properties, new String[] { "MdcMessageField [name='host'", " mdcName='host']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='profiling.requestDuration.millis', namedLogField=SourceClassName]").checkEq(properties, new String[] { "LogMessageField [name='profiling.requestDuration.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='deliveryAttempts', mdcName='profiling.requestDuration']").checkEq(properties, new String[] { "MdcMessageField [name='deliveryAttempts'", " mdcName='profiling.requestDuration']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "007\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "007\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFields").checkEq(properties, new String[] { "additionalFields" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogPort").checkEq(properties, new String[] { "graylogPort" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "port").checkEq(properties, new String[] { "port" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.LogMessageField.verbose").checkEq(properties, new String[] { "logstash-gelf.LogMessageField.verbose" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"readTimeout\",\"facility\":\"logstash-gelf\",\"{\\\"facility\\\":\\\"logstash-gelf\\\",\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}").checkEq(properties, new String[] { "{\"short_message\":\"readTimeout\"", "\"facility\":\"logstash-gelf\"", "\"{\\\"facility\\\":\\\"logstash-gelf\\\"", "\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "SourceMethodName").checkEq(properties, new String[] { "SourceMethodName" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "connectionTimeout").checkEq(properties, new String[] { "connectionTimeout" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name=',', value='logstash-gelf.buffer.size']").checkEq(properties, new String[] { "StaticMessageField [name='", "'", " value='logstash-gelf.buffer.size']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Marker").checkEq(properties, new String[] { "Marker" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis-sentinel").checkEq(properties, new String[] { "redis-sentinel" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "c2hvcnRfbWVzc2FnZQ==").checkEq(properties, new String[] { "c2hvcnRfbWVzc2FnZQ==" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='yyyy-MM-dd HH:mm:ss,SSS', namedLogField=SourceSimpleClassName]").checkEq(properties, new String[] { "LogMessageField [name='yyyy-MM-dd HH:mm:ss", "SSS'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "dynamicMdcFields.").checkEq(properties, new String[] { "dynamicMdcFields." });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='id', value='kafka']").checkEq(properties, new String[] { "StaticMessageField [name='id'", " value='kafka']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "originHost").checkEq(properties, new String[] { "originHost" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='{\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}', value='dynamicMdcFields.']").checkEq(properties, new String[] { "StaticMessageField [name='{\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}'", " value='dynamicMdcFields.']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.StackTraceFilter.verbose").checkEq(properties, new String[] { "logstash-gelf.StackTraceFilter.verbose" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='facility']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='facility']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='dynamicMdcFields.', namedLogField=Marker]").checkEq(properties, new String[] { "LogMessageField [name='dynamicMdcFields.'", " namedLogField=Marker]" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='logstash-gelf.hostname', mdcName='']").checkEq(properties, new String[] { "MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "<empty>").checkEq(properties, new String[] { "<empty>" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1.0").checkEq(properties, new String[] { "1.0" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "true").checkEq(properties, new String[] { "true" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.fqdn.hostname").checkEq(properties, new String[] { "logstash-gelf.fqdn.hostname" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='writeBackoffThreshold']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='writeBackoffThreshold']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "level").checkEq(properties, new String[] { "level" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "maximumMessageSize").checkEq(properties, new String[] { "maximumMessageSize" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filterStackTrace").checkEq(properties, new String[] { "filterStackTrace" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"yyyy-MM-dd HH:mm:ss,SSS\",\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"short_message\":\"yyyy-MM-dd HH:mm:ss", "SSS\"", "\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "double").checkEq(properties, new String[] { "double" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=").checkEq(properties, new String[] { "TG9nTWVzc2FnZUZpZWxkIFtuYW1lPSdDb252ZXJ0ZXInLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZVNpbXBsZUNsYXNzTmFtZV0=" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "ZHluYW1pY01kY0ZpZWxkVHlwZXM=").checkEq(properties, new String[] { "ZHluYW1pY01kY0ZpZWxkVHlwZXM=" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0").checkEq(properties, new String[] { "0" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose', namedLogField=Server]").checkEq(properties, new String[] { "PatternLogMessageField [name='logstash-gelf.LogMessageField.verbose'", " namedLogField=Server]" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"filterStackTrace\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"level\":\"filterStackTrace\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "deliveryAttempts").checkEq(properties, new String[] { "deliveryAttempts" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"logstash-gelf.StackTraceFilter.verboseresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"logstash-gelf.StackTraceFilter.verboseresolutionOrder\":1.1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.001\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"timestamp\":\"0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "facility").checkEq(properties, new String[] { "facility" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"text/plainresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"text/plainresolutionOrder\":1.1}" });
            itest("dev", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "myMdcs=String,myMdci=long,myMdcl=Long,myMdcf=double,myMdcd=Double").checkEq(properties, new String[] { "myMdcs=String", "myMdci=long", "myMdcl=Long", "myMdcf=double", "myMdcd=Double" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0naW5jbHVkZUZ1bGxNZGMnLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZU1ldGhvZE5hbWVd").checkEq(properties, new String[] { "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0naW5jbHVkZUZ1bGxNZGMnLCBuYW1lZExvZ0ZpZWxkPVNvdXJjZU1ldGhvZE5hbWVd" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "appender").checkEq(properties, new String[] { "appender" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "full_message").checkEq(properties, new String[] { "full_message" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestampPattern").checkEq(properties, new String[] { "timestampPattern" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "kafka").checkEq(properties, new String[] { "kafka" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "a2VlcEFsaXZl").checkEq(properties, new String[] { "a2VlcEFsaXZl" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "requestEnd").checkEq(properties, new String[] { "requestEnd" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"/StackTraceFilter.packages\",\"keepAliveresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"/StackTraceFilter.packages\"", "\"keepAliveresolutionOrder\":1.1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1}']").checkEq(properties, new String[] { "1}']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1}").checkEq(properties, new String[] { "1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='Converter', namedLogField=SourceSimpleClassName]").checkEq(properties, new String[] { "LogMessageField [name='Converter'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFieldType.").checkEq(properties, new String[] { "additionalFieldType." });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='', value='filter']").checkEq(properties, new String[] { "StaticMessageField [name=''", " value='filter']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "readTimeout").checkEq(properties, new String[] { "readTimeout" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.message.pooling").checkEq(properties, new String[] { "logstash-gelf.message.pooling" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(properties, new String[] { "" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"network,localhost\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"host\":\"network", "localhost\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1.1\",\"full_message\":\"HostnameConverter\",\"timestamp\":\"0.035\",\"level\":\"keepAlive\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"short_message\":\"1.1\"", "\"full_message\":\"HostnameConverter\"", "\"timestamp\":\"0.035\"", "\"level\":\"keepAlive\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='', mdcName='false']").checkEq(properties, new String[] { "MdcMessageField [name=''", " mdcName='false']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "yyyy-MM-dd HH:mm:ss,SSS").checkEq(properties, new String[] { "yyyy-MM-dd HH:mm:ss", "SSS" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "pooling").checkEq(properties, new String[] { "pooling" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJsZXZlbCI6ImFkZGl0aW9uYWxGaWVsZFR5cGVzIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIiwiX2dyYXlsb2dQb3J0IjoiZG91YmxlIiwiX3Jlc29sdXRpb25PcmRlciI6MS4xfQ==").checkEq(properties, new String[] { "eyJsZXZlbCI6ImFkZGl0aW9uYWxGaWVsZFR5cGVzIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIiwiX2dyYXlsb2dQb3J0IjoiZG91YmxlIiwiX3Jlc29sdXRpb25PcmRlciI6MS4xfQ==" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='timestamp', mdcName='{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"kafkaresolutionOrder\":1.1}']").checkEq(properties, new String[] { "MdcMessageField [name='timestamp'", " mdcName='{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"kafkaresolutionOrder\":1.1}']" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration").checkEq(properties, new String[] { "profiling.requestDuration" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "filter").checkEq(properties, new String[] { "filter" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestEnd").checkEq(properties, new String[] { "profiling.requestEnd" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Converter").checkEq(properties, new String[] { "Converter" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogHost").checkEq(properties, new String[] { "graylogHost" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "String").checkEq(properties, new String[] { "String" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StackTrace").checkEq(properties, new String[] { "StackTrace" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "dynamicMdcFieldTypes").checkEq(properties, new String[] { "dynamicMdcFieldTypes" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "network,localhost").checkEq(properties, new String[] { "network", "localhost" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf").checkEq(properties, new String[] { "logstash-gelf" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffTime").checkEq(properties, new String[] { "writeBackoffTime" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration.millis").checkEq(properties, new String[] { "profiling.requestDuration.millis" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Double").checkEq(properties, new String[] { "Double" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "/StackTraceFilter.packages").checkEq(properties, new String[] { "/StackTraceFilter.packages" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeFullMdc").checkEq(properties, new String[] { "includeFullMdc" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=").checkEq(properties, new String[] { "eyJzaG9ydF9tZXNzYWdlIjoiMS4xIiwiZnVsbF9tZXNzYWdlIjoiSG9zdG5hbWVDb252ZXJ0ZXIiLCJ0aW1lc3RhbXAiOiIwLjAzNSIsImxldmVsIjoia2VlcEFsaXZlIiwiZmFjaWxpdHkiOiJsb2dzdGFzaC1nZWxmIn0=" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "NDC").checkEq(properties, new String[] { "NDC" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "327.68").checkEq(properties, new String[] { "327.68" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "bG9nc3Rhc2gtZ2VsZi5idWZmZXIuc2l6ZQ==").checkEq(properties, new String[] { "bG9nc3Rhc2gtZ2VsZi5idWZmZXIuc2l6ZQ==" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=").checkEq(properties, new String[] { "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"version\":\"logstash-gelf.LogMessageField.verbose\",\"facility\":\"logstash-gelf\",\",appender\":\"Long\"}").checkEq(properties, new String[] { "{\"version\":\"logstash-gelf.LogMessageField.verbose\"", "\"facility\":\"logstash-gelf\"", "\"", "appender\":\"Long\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}" });
            itest("randoop", 80).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}" });
            for (String field : properties) {
                final int index = field.indexOf(EQ);
                itest("randoop", 83).given(field, "LogMessageField [name='Converter'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "MdcMessageField [name='timestamp'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "MdcMessageField [name='deliveryAttempts'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, " mdcName='{\"level\":\"additionalFieldTypes\"").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 83).given(field, "filter").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "ZHluYW1pY01kY0ZpZWxkVHlwZXM=").given(EQ, '=').checkEq(index, 27);
                itest("randoop", 83).given(field, " mdcName='profiling.requestDuration']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 83).given(field, "SSS'").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"version\":\"logstash-gelf.LogMessageField.verbose\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"_resolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "logstash-gelf.fqdn.hostname").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "includeFullMdc").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, " mdcName='host']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 83).given(field, " namedLogField=SourceSimpleClassName]").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 83).given(field, "logstash-gelf.message.pooling").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "localhost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "additionalFieldType.").given(EQ, '=').checkEq(index, -1);
                itest("dev", 83).given(field, "myMdcd=Double").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "connectionTimeout").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"level\":\"keepAlive\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "originHost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "logstash-gelf.StackTraceFilter.verbose").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "eXl5eS1NTS1kZCBISDptbTpzcyxTU1M=").given(EQ, '=').checkEq(index, 31);
                itest("randoop", 83).given(field, "graylogHost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"{\\\"facility\\\":\\\"logstash-gelf\\\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"short_message\":\"readTimeout\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "filterStackTrace").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "a2VlcEFsaXZl").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "SSS").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "SSS\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"level\":\"additionalFieldTypes\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "LogMessageField [name='yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "LogMessageField [name='profiling.requestDuration.millis'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "\"full_message\":\"HostnameConverter\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, " mdcName='false']").given(EQ, '=').checkEq(index, 8);
                itest("randoop", 83).given(field, "false").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "graylogPort").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"level\":\"additionalFieldTypes\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, " value='logstash-gelf.buffer.size']").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "profiling.requestDuration").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"full_message\":\"{\\\"level\\\":\\\"additionalFieldTypes\\\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"short_message\":\"1.1\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "logstash-gelf").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "/StackTraceFilter.packages").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "<empty>").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "StaticMessageField [name='").given(EQ, '=').checkEq(index, 24);
                itest("dev", 83).given(field, "myMdci=long").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "1.0").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "maximumMessageSize").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "SourceMethodName").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "redis-sentinel").given(EQ, '=').checkEq(index, -1);
                itest("dev", 83).given(field, "myMdcf=double").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "id").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\\\"includeFullMdc\\\":\\\"graylogPort\\\"}mdcField.\":\"writeBackoffTime\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "profiling.requestEnd").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "requestEnd").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "0").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "bG9nc3Rhc2gtZ2VsZi5idWZmZXIuc2l6ZQ==").given(EQ, '=').checkEq(index, 34);
                itest("randoop", 83).given(field, "327.68").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "logstash-gelf.hostname").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "facility").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "logstash-gelf.LogMessageField.verbose").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"timestamp\":\"0.1\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "true").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "1}']").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "NDC").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"timestamp\":\"0.035\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "String").given(EQ, '=').checkEq(index, -1);
                itest("dev", 83).given(field, "myMdcs=String").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "additionalFields").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "MdcMessageField [name=''").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "appender\":\"Long\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\\\"facility\\\":\\\"logstash-gelf\\\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "writeBackoffTime").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"text/plainresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "DynamicMdcMessageField [regex='facility']").given(EQ, '=').checkEq(index, 29);
                itest("dev", 83).given(field, "myMdcl=Long").given(EQ, '=').checkEq(index, 6);
                itest("randoop", 83).given(field, "dynamicMdcFields.").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\\\"_graylogPort\\\":\\\"double\\\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "007\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"short_message\":\"logstash-gelf.hostname\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, " namedLogField=SourceClassName]").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 83).given(field, "level").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"short_message\":\"yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"kafkaresolutionOrder\":1.1}']").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "readTimeout").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "'").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "keepAlive").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"keepAliveresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "profiling.requestDuration.millis").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "network").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "deliveryAttempts").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "YXBwZW5kZXI=").given(EQ, '=').checkEq(index, 11);
                itest("randoop", 83).given(field, "\\\"_resolutionOrder\\\":1.1}\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "\"facility\":\"logstash-gelf\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "StackTrace").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "{\"facility\":\"/StackTraceFilter.packages\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 83).given(field, "UGF0dGVybkxvZ01lc3NhZ2VGaWVsZCBbbmFtZT0nbG9nc3Rhc2gtZ2VsZi5Mb2dNZXNzYWdlRmllbGQudmVyYm9zZScsIG5hbWVkTG9nRmllbGQ9U2VydmVyXQ==").given(EQ, '=').checkEq(index, 122);
                itest("randoop", 83).given(field, "MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 83).given(field, "Double").given(EQ, '=').checkEq(index, -1);
                if (-1 != index) {
                    gelfMessageAssembler.setAdditionalFieldType(field.substring(0, index), field.substring(index + 1));
                }
            }
        }
    }

    /**
     * Set the dynamic mdc field types.
     *
     * @param spec field=String,field1=Double, ... See {@link GelfMessage} for supported types.
     * @param gelfMessageAssembler the Gelf message assembler to apply the configuration
     */
    public static void setDynamicMdcFieldTypes(String spec, GelfMessageAssembler gelfMessageAssembler) {
        if (null != spec) {
            String[] properties = spec.split(MULTI_VALUE_DELIMITTER);
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "ZHluYW1pY01kY0ZpZWxkVHlwZXM=").checkEq(properties, new String[] { "ZHluYW1pY01kY0ZpZWxkVHlwZXM=" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Time").checkEq(properties, new String[] { "Time" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='a2VlcEFsaXZl', value='ZnVsbF9tZXNzYWdl']").checkEq(properties, new String[] { "StaticMessageField [name='a2VlcEFsaXZl'", " value='ZnVsbF9tZXNzYWdl']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='', namedLogField=SourceMethodName]").checkEq(properties, new String[] { "PatternLogMessageField [name=''", " namedLogField=SourceMethodName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "U2VydmVy").checkEq(properties, new String[] { "U2VydmVy" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='MessageParam', value='{\"facility\":\"logstash-gelf\",\"includeFullMdc\":\"graylogPort\"}']").checkEq(properties, new String[] { "StaticMessageField [name='MessageParam'", " value='{\"facility\":\"logstash-gelf\"", "\"includeFullMdc\":\"graylogPort\"}']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='af98d36bacae', mdcName='logstash-gelf.buffer.size']").checkEq(properties, new String[] { "MdcMessageField [name='af98d36bacae'", " mdcName='logstash-gelf.buffer.size']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLocation").checkEq(properties, new String[] { "includeLocation" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdyZWRpcycsIG1kY05hbWU9Jydd").checkEq(properties, new String[] { "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdyZWRpcycsIG1kY05hbWU9Jydd" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "yyyy-MM-dd HH:mm:ss,SSS").checkEq(properties, new String[] { "yyyy-MM-dd HH:mm:ss", "SSS" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='host', mdcName='host']").checkEq(properties, new String[] { "MdcMessageField [name='host'", " mdcName='host']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "c2hvcnRfbWVzc2FnZQ==").checkEq(properties, new String[] { "c2hvcnRfbWVzc2FnZQ==" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "version").checkEq(properties, new String[] { "version" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='id', value='kafka']").checkEq(properties, new String[] { "StaticMessageField [name='id'", " value='kafka']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "originHost").checkEq(properties, new String[] { "originHost" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.052\",\"facility\":\"logstash-gelf\",\"PatternLogMessageField [name='extractStackTrace', namedLogField=SourceMethodName]resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"timestamp\":\"0.052\"", "\"facility\":\"logstash-gelf\"", "\"PatternLogMessageField [name='extractStackTrace'", " namedLogField=SourceMethodName]resolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.StackTraceFilter.verbose").checkEq(properties, new String[] { "logstash-gelf.StackTraceFilter.verbose" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='logstash-gelf.hostname', mdcName='']").checkEq(properties, new String[] { "MdcMessageField [name='logstash-gelf.hostname'", " mdcName='']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"logstash-gelf.message.poolingresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"logstash-gelf.message.poolingresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "readTimeout").checkEq(properties, new String[] { "readTimeout" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeFullMdc").checkEq(properties, new String[] { "includeFullMdc" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='dynamicMdcFields.', namedLogField=Marker]").checkEq(properties, new String[] { "LogMessageField [name='dynamicMdcFields.'", " namedLogField=Marker]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestamp").checkEq(properties, new String[] { "timestamp" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "port").checkEq(properties, new String[] { "port" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffTime").checkEq(properties, new String[] { "writeBackoffTime" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcField.").checkEq(properties, new String[] { "mdcField." });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='keepAlive']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='keepAlive']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdoaSEnLCBtZGNOYW1lPSdjMmh2Y25SZmJXVnpjMkZuWlE9PSdd").checkEq(properties, new String[] { "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdoaSEnLCBtZGNOYW1lPSdjMmh2Y25SZmJXVnpjMkZuWlE9PSdd" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"kafkaresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"kafkaresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1.1").checkEq(properties, new String[] { "1.1" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"/StackTraceFilter.packages\",\"keepAliveresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"/StackTraceFilter.packages\"", "\"keepAliveresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestStart.millis").checkEq(properties, new String[] { "profiling.requestStart.millis" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "long").checkEq(properties, new String[] { "long" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='', namedLogField=Time]").checkEq(properties, new String[] { "PatternLogMessageField [name=''", " namedLogField=Time]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='{\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}', value='dynamicMdcFields.']").checkEq(properties, new String[] { "StaticMessageField [name='{\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}'", " value='dynamicMdcFields.']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Marker").checkEq(properties, new String[] { "Marker" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "hi!").checkEq(properties, new String[] { "hi!" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "short_message").checkEq(properties, new String[] { "short_message" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='profiling.requestDuration.millis', namedLogField=SourceClassName]").checkEq(properties, new String[] { "LogMessageField [name='profiling.requestDuration.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"_graylogPort\":\"double\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"_graylogPort\":\"double\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='hi!', mdcName='c2hvcnRfbWVzc2FnZQ==']").checkEq(properties, new String[] { "MdcMessageField [name='hi!'", " mdcName='c2hvcnRfbWVzc2FnZQ==']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.skipHostnameResolution").checkEq(properties, new String[] { "logstash-gelf.skipHostnameResolution" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"filterStackTrace\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"level\":\"filterStackTrace\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=").checkEq(properties, new String[] { "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "graylogPort").checkEq(properties, new String[] { "graylogPort" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.LogMessageField.verbose").checkEq(properties, new String[] { "logstash-gelf.LogMessageField.verbose" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration").checkEq(properties, new String[] { "profiling.requestDuration" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "").checkEq(properties, new String[] { "" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "maximumMessageSize").checkEq(properties, new String[] { "maximumMessageSize" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "writeBackoffThreshold").checkEq(properties, new String[] { "writeBackoffThreshold" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='mdcField.']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='mdcField.']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"host\":\"version\",\"facility\":\"logstash-gelf\",\"full_messageresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"host\":\"version\"", "\"facility\":\"logstash-gelf\"", "\"full_messageresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"TimeresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"TimeresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalField.").checkEq(properties, new String[] { "additionalField." });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "includeLogMessageParameters").checkEq(properties, new String[] { "includeLogMessageParameters" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='timestamp', mdcName='{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"kafkaresolutionOrder\":1.1}']").checkEq(properties, new String[] { "MdcMessageField [name='timestamp'", " mdcName='{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"kafkaresolutionOrder\":1.1}']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"short_message\":\"1.1\",\"full_message\":\"HostnameConverter\",\"timestamp\":\"0.035\",\"level\":\"keepAlive\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"short_message\":\"1.1\"", "\"full_message\":\"HostnameConverter\"", "\"timestamp\":\"0.035\"", "\"level\":\"keepAlive\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='maxWriteBackoffTime', namedLogField=SourceClassName]").checkEq(properties, new String[] { "LogMessageField [name='maxWriteBackoffTime'", " namedLogField=SourceClassName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose', value='double']").checkEq(properties, new String[] { "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose'", " value='double']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "extractStackTrace").checkEq(properties, new String[] { "extractStackTrace" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, ",").checkEq(properties, new String[] {});
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "mdcProfiling").checkEq(properties, new String[] { "mdcProfiling" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "HostnameConverter").checkEq(properties, new String[] { "HostnameConverter" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='writeBackoffThreshold']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='writeBackoffThreshold']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"timestamp\":\"0.001\",\"facility\":\"logstash-gelf\"}").checkEq(properties, new String[] { "{\"timestamp\":\"0.001\"", "\"facility\":\"logstash-gelf\"}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestDuration.millis").checkEq(properties, new String[] { "profiling.requestDuration.millis" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MdcMessageField [name='redis-sentinel', mdcName='c2hvcnRfbWVzc2FnZQ==']").checkEq(properties, new String[] { "MdcMessageField [name='redis-sentinel'", " mdcName='c2hvcnRfbWVzc2FnZQ==']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "localhost,network").checkEq(properties, new String[] { "localhost", "network" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "StaticMessageField [name='', value='hi!']").checkEq(properties, new String[] { "StaticMessageField [name=''", " value='hi!']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='', namedLogField=NDC]").checkEq(properties, new String[] { "PatternLogMessageField [name=''", " namedLogField=NDC]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "level").checkEq(properties, new String[] { "level" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.buffer.size").checkEq(properties, new String[] { "logstash-gelf.buffer.size" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "maxWriteBackoffTime").checkEq(properties, new String[] { "maxWriteBackoffTime" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_resolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "logstash-gelf.hostname").checkEq(properties, new String[] { "logstash-gelf.hostname" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "profiling.requestEnd").checkEq(properties, new String[] { "profiling.requestEnd" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='Converter', namedLogField=SourceSimpleClassName]").checkEq(properties, new String[] { "LogMessageField [name='Converter'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"facility\":\"logstash-gelf\",\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host', mdcName='host']\",\"_resolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"facility\":\"logstash-gelf\"", "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'", " mdcName='host']\"", "\"_resolutionOrder\":1.1}" });
            itest("dev", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "myMdc.long.*=Long,myMdc.double.*=Double,myMdc.string.*=String").checkEq(properties, new String[] { "myMdc.long.*=Long", "myMdc.double.*=Double", "myMdc.string.*=String" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='maximumMessageSize', namedLogField=SourceMethodName]").checkEq(properties, new String[] { "PatternLogMessageField [name='maximumMessageSize'", " namedLogField=SourceMethodName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "DynamicMdcMessageField [regex='LoggerName']").checkEq(properties, new String[] { "DynamicMdcMessageField [regex='LoggerName']" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "network,localhost").checkEq(properties, new String[] { "network", "localhost" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "LogMessageField [name='yyyy-MM-dd HH:mm:ss,SSS', namedLogField=SourceSimpleClassName]").checkEq(properties, new String[] { "LogMessageField [name='yyyy-MM-dd HH:mm:ss", "SSS'", " namedLogField=SourceSimpleClassName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFieldTypes").checkEq(properties, new String[] { "additionalFieldTypes" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "true").checkEq(properties, new String[] { "true" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "additionalFields").checkEq(properties, new String[] { "additionalFields" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "redis").checkEq(properties, new String[] { "redis" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "Double").checkEq(properties, new String[] { "Double" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "0").checkEq(properties, new String[] { "0" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "<empty>").checkEq(properties, new String[] { "<empty>" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "aW5jbHVkZUxvZ01lc3NhZ2VQYXJhbWV0ZXJz").checkEq(properties, new String[] { "aW5jbHVkZUxvZ01lc3NhZ2VQYXJhbWV0ZXJz" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "PatternLogMessageField [name='profiling.requestStart.millis', namedLogField=SourceClassName]").checkEq(properties, new String[] { "PatternLogMessageField [name='profiling.requestStart.millis'", " namedLogField=SourceClassName]" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "kafka").checkEq(properties, new String[] { "kafka" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9").checkEq(properties, new String[] { "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "id").checkEq(properties, new String[] { "id" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "{\"level\":\"additionalFieldTypes\",\"facility\":\"logstash-gelf\",\"text/plainresolutionOrder\":1.1}").checkEq(properties, new String[] { "{\"level\":\"additionalFieldTypes\"", "\"facility\":\"logstash-gelf\"", "\"text/plainresolutionOrder\":1.1}" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "MessageParam").checkEq(properties, new String[] { "MessageParam" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "1.0").checkEq(properties, new String[] { "1.0" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "String").checkEq(properties, new String[] { "String" });
            itest("randoop", 99).given(MULTI_VALUE_DELIMITTER, ",").given(spec, "timestampPattern").checkEq(properties, new String[] { "timestampPattern" });
            for (String field : properties) {
                final int index = field.indexOf(EQ);
                itest("randoop", 102).given(field, "LogMessageField [name='Converter'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "MdcMessageField [name='timestamp'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "graylogPort").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "SSS").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "profiling.requestStart.millis").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"PatternLogMessageField [name='extractStackTrace'").given(EQ, '=').checkEq(index, 29);
                itest("randoop", 102).given(field, "id").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "maxWriteBackoffTime").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "{\"level\":\"filterStackTrace\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"_graylogPort\":\"double\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "timestamp").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"level\":\"keepAlive\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "StaticMessageField [name='logstash-gelf.StackTraceFilter.verbose'").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "originHost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "c2hvcnRfbWVzc2FnZQ==").given(EQ, '=').checkEq(index, 18);
                itest("randoop", 102).given(field, "timestampPattern").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "logstash-gelf.StackTraceFilter.verbose").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "short_message").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "0").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"logstash-gelf.message.poolinga2VlcEFsaXZl\":\"MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 66);
                itest("randoop", 102).given(field, "DynamicMdcMessageField [regex='LoggerName']").given(EQ, '=').checkEq(index, 29);
                itest("randoop", 102).given(field, "PatternLogMessageField [name=''").given(EQ, '=').checkEq(index, 28);
                itest("randoop", 102).given(field, "Marker").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"TimeresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "MdcMessageField [name='af98d36bacae'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "MdcMessageField [name='redis-sentinel'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "network").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"facility\":\"logstash-gelf\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "LogMessageField [name='maxWriteBackoffTime'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "\"LogMessageField [name='Converter'").given(EQ, '=').checkEq(index, 22);
                itest("randoop", 102).given(field, "{\"short_message\":\"1.1\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdoaSEnLCBtZGNOYW1lPSdjMmh2Y25SZmJXVnpjMkZuWlE9PSdd").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"full_messageresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "MessageParam").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "profiling.requestDuration").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "version").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "readTimeout").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "LogMessageField [name='yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "writeBackoffThreshold").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "Time").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "profiling.requestEnd").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "eyJ0aW1lc3RhbXAiOiIwLjAwNyIsImZhY2lsaXR5IjoibG9nc3Rhc2gtZ2VsZiJ9").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "logstash-gelf.skipHostnameResolution").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "1.0").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "String").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "StaticMessageField [name='{\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "TWRjTWVzc2FnZUZpZWxkIFtuYW1lPSdyZWRpcycsIG1kY05hbWU9Jydd").given(EQ, '=').checkEq(index, -1);
                itest("dev", 102).given(field, "myMdc.double.*=Double").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 102).given(field, "StaticMessageField [name='a2VlcEFsaXZl'").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "\"text/plainresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "port").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "extractStackTrace").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "{\"facility\":\"logstash-gelf\"}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "includeLocation").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "long").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "writeBackoffTime").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "LogMessageField [name='profiling.requestDuration.millis'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "profiling.requestDuration.millis").given(EQ, '=').checkEq(index, -1);
                itest("dev", 102).given(field, "myMdc.string.*=String").given(EQ, '=').checkEq(index, 14);
                itest("randoop", 102).given(field, "{\"level\":\"additionalFieldTypes\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "includeFullMdc").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"kafkaresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "mdcProfiling").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "StaticMessageField [name='MessageParam'").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "logstash-gelf.hostname").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"timestamp\":\"0.035\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "{\"facility\":\"logstash-gelf\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "additionalField.").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "mdcField.").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"_a2VlcEFsaXZl\":\"MdcMessageField [name='host'").given(EQ, '=').checkEq(index, 38);
                itest("randoop", 102).given(field, "level").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "Double").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "StaticMessageField [name=''").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "{\"timestamp\":\"0.001\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"_resolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("dev", 102).given(field, "myMdc.long.*=Long").given(EQ, '=').checkEq(index, 12);
                itest("randoop", 102).given(field, "DynamicMdcMessageField [regex='writeBackoffThreshold']").given(EQ, '=').checkEq(index, 29);
                itest("randoop", 102).given(field, "bG9nc3Rhc2gtZ2VsZi5TdGFja1RyYWNlRmlsdGVyLnZlcmJvc2U=").given(EQ, '=').checkEq(index, 51);
                itest("randoop", 102).given(field, "{\"timestamp\":\"0.052\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "<empty>").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "includeLogMessageParameters").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"MdcMessageField [name='timestamp'").given(EQ, '=').checkEq(index, 22);
                itest("randoop", 102).given(field, "yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "PatternLogMessageField [name='maximumMessageSize'").given(EQ, '=').checkEq(index, 28);
                itest("randoop", 102).given(field, "DynamicMdcMessageField [regex='mdcField.']").given(EQ, '=').checkEq(index, 29);
                itest("randoop", 102).given(field, "\"full_message\":\"HostnameConverter\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "logstash-gelf.LogMessageField.verbose").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "true").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "U2VydmVy").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "logstash-gelf.buffer.size").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "localhost").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "additionalFieldTypes").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "MdcMessageField [name='logstash-gelf.hostname'").given(EQ, '=').checkEq(index, 21);
                itest("randoop", 102).given(field, "StaticMessageField [name='id'").given(EQ, '=').checkEq(index, 24);
                itest("randoop", 102).given(field, "kafka").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "hi!").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"logstash-gelf.LogMessageField.verboseresolutionOrder\":1.1}").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "aW5jbHVkZUxvZ01lc3NhZ2VQYXJhbWV0ZXJz").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "{\"host\":\"version\"").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "HostnameConverter").given(EQ, '=').checkEq(index, -1);
                itest("randoop", 102).given(field, "\"LogMessageField [name='yyyy-MM-dd HH:mm:ss").given(EQ, '=').checkEq(index, 22);
                itest("randoop", 102).given(field, "").given(EQ, '=').checkEq(index, -1);
                if (-1 != index) {
                    gelfMessageAssembler.setDynamicMdcFieldType(field.substring(0, index), field.substring(index + 1));
                }
            }
        }
    }
}
